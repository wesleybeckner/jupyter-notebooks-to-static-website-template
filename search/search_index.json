{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Static Site Generation From Jupyter Notebooks \u00b6 This is the landing page of the project.","title":"Static Site Generation From Jupyter Notebooks"},{"location":"#static-site-generation-from-jupyter-notebooks","text":"This is the landing page of the project.","title":"Static Site Generation From Jupyter Notebooks"},{"location":"S1_Python_and_Jupyter/","text":"Technology Fundamentals Course 1, Session 1: Python and Jupyter Notebooks \u00b6 Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assistants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu Schedule for this week \u00b6 In this session we will cover computer coding in Python as well as navigating the Jupyter Notebook environment (what we are reading from at this moment). 1.1 Let's talk about Python \u00b6 A lot of us are familiar with Excel, and when we get started in Python, it may seem like a lot of what we are doing could be easily done in Excel, why make the leap? Image borrowed from nobledesktop.com Simplicity Excel GUI makes simple calculations, well simple! Many are at least somewhat versed, so sharing is simple too! Python Steeper learning curve This is unavoidable, but to our advantage our learning material is currated so that we learn python while solving relevant problems! You need to setup your own coding environment (Thanks Colab!) Automation / Data Connectivity Excel Need to execute xlsx file with relevant data (copy, paste, edit, paradigm) Python Integration with databases for easy update, chart or analysis delivery Scalability & Big Data Excel less than millions of data points poor version control Python more than millions of data points can integrate with querying languages (e.g. MySQL, PostgreSQL) has version control and containerized environments (like notebooks) extraction, wrangling, and analytics all in one place Side Note: The scripting language of Excel is VBA, this won first place (80% of developers who use this language stated) for most dread language!! in stack overflow's 2020 developer survey That being said, we won't only approach Python from a let's-replace-excel standpoint; we will also be approaching it from a coding standpoint: we write computer code to perform a set of tasks and instructions that the computer can help us accomplish . The real challenge and process of coding from an engineering perspective is how to codify a problem, and knowledge of what tools are available to solve it. We've worked hard on the material to try and demystify the confusion along the way, while focusing on giving learning experiences in the relevant engineering problem areas. 1.1.1 Python vs other languages \u00b6 Our goal is to not only give an introduction to Python, but also to demonstrate general coding concepts. For these next few sections, we'll be executing various lines of code right here in this interactive, Google Colab notebook. If you're wondering how this is possible and how this all works, don't worry; we'll get to the intricacies of interactive notebooks later! You'll discover the many benefits of this general purpose programming language. In particular, The syntax for Python is understandable to read and easy to learn , compared to the syntax of other languages that requires more of a background of underlying computer science - languages such as Java, C, and C++. In this course, you'll discover that Python is especially ideal for working with scientific data. Topics such as data science, machine learning, and data visualization will be covered later on this week - all while continuing to utilize Python. # We will talk about what this cell is doing in a moment! ! python -- version Python 3.7.11 Note: this session is covering syntax for version 3.x of Python. As you continue learning Python elsewhere, please advise that Python version 2 is no longer supported, and older notebooks may be outdated as a result. source: insights.stackoverflow.com/survey/2020 1.1.2 A quick primer on Python syntax \u00b6 Python's simple, concise syntax allows for faster prototyping of code than other languages such as Java and C++. (However, that does not mean that Python has faster runtime execution than the others!) Printing output to the console is as simple as running Python's built-in print() function. To execute a code cell (we'll talk more about this later!), you can either click on the Play button next to the cell, or use the keyboard shortcut CTRL + ENTER ( CMD (\u2318) + ENTER on a macOS). print ( \"Hello, MSTI Students\" ) Hello, MSTI Students Variables can be created just by typing the name you'd like, followed by the equal sign, and the value you want to assign the variable to. In this case, we'll create a variable called some_school and set it to the value of \"University of Washington\" : some_school = \"University of Washington\" You may then use created variables elsewhere. For example, we can output the value set for some_school by inputting the variable name into Python's print() function: print ( some_school ) University of Washington A key part of coding is understanding which functions you need to use for accomplishing a task, as well as knowing when to create one of your own, which you'll learn more about later this week. For now, what you should know is that print() from earlier is one example of calling/executing a function that's already made available to us. Exercise 1: A Very Common Print Statement \u00b6 Now that you've stepped through our quick primer on Python, for our first coding exercise, try printing hello world! to the screen. Then run the code cell either from the Play button or the keyboard shortcut from earlier to see the output. You may have noticed me making new coding blocks without touching my mouse. You can do this by pressing esc then a or esc then b (for above/below) to create a new cell block where your cursor is. Try this as well # Cell for Exercise 1 1.1.3 What are variables? \u00b6 To have values that our computer can store in memory, we use variables . How else can we store information for later analysis and later reference? That's where variables come in, and is an essential part of programming! Here's a basic example of assigning a variable, using '='. Let's call this variable x and assign it an integer value (we'll get to integers in just a bit!) of 25: x = 25 Let's create another variable called city_name and assign it the word \"Seattle\" : city_name = \"Seattle\" And when we need to use this value again, we retrieve that variable by referring to it by the variable name we gave it when first assigned. The x variable we created earlier can now be used later, and as many times as we'd like. Existing variables can also be modified. Let's change the value of x , after printing its initial value: print ( x ) x = 150 print ( x ) 25 150 A few more notes on storing data as variables... Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory for that value. You can identify the location in memory using names. Rules: Must begin with a letter (a - z, A - B) or underscore (_) Other characters can be letters, numbers or _ Case Sensitive Can be any (reasonable) length There are some reserved words which you cannot use as a variable name because Python uses them for other things. (e.g False, None, True, Lambda, From, Global) If you want to have more than one word in the name, the convention is to use underscore \"_\" in the name. there was a time when camelCase was also acceptable 1.1.3.1 Variable types \u00b6 For your reference... Data Types 1. Numbers * floating point * integers * complex numbers 2. strings 3. boolean values 4. lists and dicts 5. NoneType In this section we will also introduce a built-in python function type() Let's explore some common variable data types in Python. The first type to discuss is a string , which we've already seen before when we initialized city_name . Strings in Python are simply a collection of characters wrapped around quotes, and a string can represent any kind of info depending on how it's used, such as a person's name, a city name (like we just demonstrated), or a complete sentence. Here are some examples of string variables in Python below. ... we can also use single or double quotes ... and triple quotes open whole blocks of string content ''' here's a stirng block with triple singles ''' \"\\nhere's a stirng block\\n with triple singles\\n\" 'single quotes' 'single quotes' \"double quotes\" 'double quotes' you have to use double quotes here... \"here's one with a single quote inside\" \"here's one with a single quote inside\" \"\"\" heres a block with double triples \"\"\" '\\nheres \\na block with \\ndouble triples\\n' type ( \"heres a string... I think?!@?!?!\" ) str The other variable types we'll discuss for now are integers and floats . Consider the Integer type as data that can represent any positive whole number or negative whole number. Recall the x variable we assigned to 25 and then 150 earlier? That variable would be considered an integer in Python. Here are some other quick examples of Python integer variables. some_int = 5 numbers_of_breakfasts_for_hobbits = 2 # notice the usefulness of tab complete for long variable names! type ( numbers_of_breakfasts_for_hobbits ) int print ( \"what about second breakfast???\" ) what about second breakfast??? A float in Python is considered any number with decimal point values. This is the main difference between a float and integer. For floats, some examples below show an arbitrary number of decimal places after the decimal point, and ones where a value less than 1 (such as one representing a percentage value) don't require specifying a 0 left of the decimal point. # what do we notice is different here? y = 21.0 half = 0.5 data_generated_by_deathstar = 2.08 #exabytes/year star wars source # let's try something... print ( type ( 21.0 )) print ( type ( 21 )) <class 'float'> <class 'int'> We see that python auto-determines variable datatypes for us, in many cases! Python is a programming language in which variables are dynamically typed, meaning we do not need to declare the specific type of the variable when we initialize it . Because of this feature of Python, executing x = 21 will automatically turn this variable into an integer by default due to its value of 21. Likewise, executing x = 21.0 instead will make x the float type. Exercise 2: Create and change some variables \u00b6 Start by initializing a variable named hundred and assign it an integer value of 100 in the code cell below. THEN print the type of the stored variable # Cell for Exercise 2 Now create another variable called largest_computer_in_the_galaxy and assign it the string value of \"Deep Thought\" in the code cell below. THEN print the stored variable # Cell for Exercise 2 There are many more variable types to explore in Python, both ones built-in to Python and ones created by open-source libraries. The later sessions will cover more of these types, such as lists and DataFrames in session 2. 1.1.4 Math with Python (the moment I've been waiting for...) \u00b6 1.1.4.1 Basic operators \u00b6 Python allows users to performing mathematical operations fairly easily. As many tutorials will explain, you can use Python just like a calculator! The most basic operation, adding 1 with 1, is as follows, using the plus sign ( + ) for addition: 1 + 1 2 Subtraction is done with the minus sign in Python ( - ) and also works as expected here: 45 - 32 13 Multiplication is performed by the asterisk sign ( * ) in Python: 12 * 90 1080 You may combine as many arithmetic operators in one line as you need: 8 + 5 * 14 - 7 + 14 * 3 - 10 103 And based on the data type, you can peform the same mathematical operations for variables. Suppose a = 12 and b = 24 are already defined, we can multiply the two variables together by simply referring to their names and using Python's multiplication operator: a * b . a = 12 b = 24 a * b 288 Exercise 3: Discover More Operators On Your Own! \u00b6 Beyond the three arithmetic operators we have just demonstrated for you, there are more in Python to discover. To start, try typing 14 / 4 in the empty code cell below: # Cell for Exercise 3 Just by typing the computation and seeing the output on your own, you can quickly recognize that / is a division operator. Now try 14 % 4 in the empty code below. From the output, can you guess what the % sign in Python accomplishes here? # Cell for Exercise 3 Exercise 4: Order of Operations \u00b6 Be aware that order or operations apply for programming as well, and Python is no exception. Python follows operator precedence, specifically PEMDAS - any operations in parentheses ( P ) take precedence, followed by exponents ( E ), multiplication ( M ) & division ( D ), and then addition ( A ) & subtraction ( S ). Run the following code: 4 * 3 + 4 16 While that was straightforward, let's modify it to wrap parentheses around 3 + 4 . When you execute the code cell below, what output do you receive now? 4 * ( 3 + 4 ) 28 1.1.4.2 Enrichment : The difference between 5, 5.0, and \"5\" \u00b6 While more complex computations are possible beyond the basics that we just covered, you should first understand how mixing variable types can lead to errors and unexpected output. Consider two variables, num1 = 5 and num2 = 5.0 . From what you learned in section 1.1.3, num1 represents an integer, while num2 represents a float. num1 = 5 num2 = 5.0 For this example, what happens when we add num1 and num2 together in Python, as in, run the code num1 + num2 ? num1 + num2 10.0 As you see from the output of that operation, the result is 10.0, which is a float. What this means is that for any operation that uses a float type in Python, the default type of the result will also be a float . In this example, mixing an integer ( num1 ) and float ( num2 ) together by addition resulted in 10.0 and not 10, even if the sum is a whole number. Although mixing the two data types did not cause a runtime error, you should recognize this behavior in the near future, when such computations result in output that you may not expect - and possibly lead you to some functionality that causes an error elsewhere. Finally, let's discuss a third variable, called num3 , and let's assign it a value of \"5\" . num3 = \"5\" If we try adding num1 with num3 , or 5 + \"5\", what is our output now from the code num1 + num3 ? # num1 + num3 The output is neither a 10 or a 10.0 - instead, we receive a TypeError. Python does not allow you to perform mathematical operations with an integer and string together . Because num1 is an integer, and num3 is a string type - given the double quotes around 5 - adding the two together in Python results in this TypeError, even if the string represents a numeric character. The same goes for combining floats with strings: is our output from the code num2 (float) and num3 (string) any different? # num2 + num3 Nope! Same TypeError results here. One workaround/solution for this is converting(type casting) the num3 string variable into either a float or a integer, using Python's built-in float() and int() functions respectively. Let's try adding num1 and num3 again, only this time using int() to convert num3 into an integer type, running the full line of code as num1 + int(num3) . num1 + int ( num3 ) 10 This time, we get no TypeError - the output is 10! Without diving too much further into the intricacies of these conversion functions - the concept of functions themselves will be covered in more detail tomorrow! - just be aware that this example only works because the string represented by num3 was a valid convertible string (\"5\") to begin with. In other words, if num3 was \"Five\" instead of \"5\", we would not be able to execute int(num3) without getting an error. # num3 = \"Five\" # int(num3) 1.1.5 Code comments with '#' \u00b6 Comments are notes in your code, and can serve many purposes, such as: - Describing the functionality of some code - A reminder to fix an existing issue - Clarify details of some code for yourself and/or others You can create a comment by using '#', and when the Python interpreter sees this syntax, it doesn't run that as code and recognizes it as a comment instead . For example, for a mathematical operation, let's add a comment at the end of the line to describe what this performs: 2 + 5 # Adds 2 to 5, so we get 7 7 In this case, the # Adds 2 to 5, so we get 7 part of the previous line of code was a comment appended to the end of the Python code, 2 + 5 . By adding that '#' character, Python knows everything after that character is a comment. Additionally, you can write comments on their own line(s) of code: # Adds 2 to 5, so we get 7 2 + 5 7 You may use this syntax for code that you may not want to execute, but still save for future reference or revision. To do this, you can simply add '#' at the very beginning of the line you wish to comment. In the following example, I've turned the first line of the code in this cell into a comment so it won't run: # print(\"I commented out this line of code so you won't see this statement printed\") print ( \"There should be one line printed from this cell, and should be this one.\" ) There should be one line printed from this cell, and should be this one. we can toggle comments with ctrl + / Exercise 5: Add a comment to a line of code \u00b6 Let's write a comment that explains the following line of code, 25 % 7 . 25 % 7 4 Comments in your code are optional, but are recommended to help better inform readers of your code. Building a habit of writing comments may even help you understand and better explain your own code too! 1.1.6 Where can you run Python? \u00b6 Because of its flexibility as a programming language, Python can be utilized in many different ways. Here are just a few: Line by line in a Python interpreter in a command line Terminal window windows: windows subsystem for linux mac os: terminal As a script that you execute from the command line Using Python to create a full GUI (Graphical User Interface) that runs on your desktop computer Executing Python directly from an IDE (Integrated Development Environment) such as PyCharm , Atom , or Visual Studio Code Executing Python code with an app that has a built-in Python interpreter, such as Pythonista Developing and running Python code in interactive notebooks like Jupyter Notebook/Hub/Lab Executing Python on a cloud platform - such as here in this Jupyter Hub ( Google Colab is another free resource) You don't need to understand every example that was just listed. Instead, the point is for us to recognize how ubiquitous Python has become. We're about to focus on the last two items on this list in the very next section! There's much more to learn with Python! So far, we've only introduced a small fraction of what's possible with this language and, more generally speaking, coding. 1.2 Executing Python and runtime environments \u00b6 1.2.1 Using interactive notebooks \u00b6 After just having discussed the many ways you can deploy and develop Python, we'll focus on the one way that will be used for our sessions this week: interactive Python notebooks. Such notebooks - like the one you're viewing right now - are self-contained collections of interactive cells that can be modified and presented like a scientific notebook. By allowing us to combine code with formattable text, images, and interactive data visualizations, this gives us a great way to share and collaborate with others on our work. We'll next explore the proper interactive Python notebook type that you'll get quite familiar with during this series: Jupyter Notebooks. 1.2.2 Jupyter Notebooks \u00b6 Jupyter Notebooks is based on IPython, or Interactive Python. In fact, Jupyter notebooks were formerly known as IPython notebooks. Discussing the underlying IPython kernel which powers these notebooks is beyond the scope of this session; however, it's important to, at least, recognize where the .ipynb filename extension comes from. With Jupyter Notebooks, we can utilize the Python language right in a single self-contained environment of code, such as initializing and managing variables : var1 = \"A\" var2 = \"B\" var3 = [ \"A\" , \"B\" , \"C\" ] type ( var3 ) list We can also write functions that can be used later on in a notebook: # we were using built-in functions before. # but we can also define our own! def some_function ( x , y ): return x ** 2 / y ** 2 print ( some_function ( 7 , 12 )) 0.3402777777777778 Visualizations - such as scatterplots, heatmaps, and charts - can also be generated directly inside of a Jupyter notebook as a cell output, and can be saved as a separate image file. This also makes notebooks useful to generate both visual representations of data and interactive reports on that same data. We'll be covering visualizations in Session 4. from sklearn.datasets import make_blobs import matplotlib.pyplot as plt x , y = make_blobs ( n_samples = 500 , n_features = 3 , centers = 3 ) plt . scatter ( x [:, 0 ], x [:, 1 ], marker = 'o' , c = y , s = 10 ) plt . title ( \"Example visualization\" ) plt . show () We certainly recognize that much of the code you have just seen may be unfamiliar to you, but these are all simply previews of what we'll be covering for this week! Here are some examples of how Jupyter Notebooks can be utilized: Reports on data analyses Data visualizations Interactive dashboards 1.2.3 Code cells vs markdown cells \u00b6 There are two main types of generated cells in Jupyter notebooks: code cells and markdown cells. You've seen both at this point. Right now, you're looking a markdown cell that's been created already by a different user. Think of a cell as just a single entity of your larger work inside of a notebook. Let's start with taking a look at code cells. 1.2.3.1 Code cells \u00b6 For writing and executing Python in a notebook, we use code cells. It may sound almost too self-explanatory, and you've already tried out code cells in the exercises from 1.1. To add a new code cell, you can either go to the Insert menu and selecting Code cell : Or by hovering your mouse over to the bottom of a cell and select + Code : And lastly. For code blocks, we can simply hit esc + a to enter a code block above or esc + b to enter a code block below. Just kidding one last note... we can delete a block by holding ctrl + m + d Exercise 6: Edit A Code Cell \u00b6 So far in this session, you've been creating entirely new code cells to write and execute a few exercises. Now, let's edit an existing cell of Python code. Below, we had our ~~obligatory~~ first exercise that printed \"Hello World!\" as the output. However, the code below, print(\"Hello World!\" causes an error, and does not output \"Hello World!\" as we initially expected. What do we need at the very end of the line in order for the print statement to run successfully? Note: I also want you to uncomment the following cell block! (how do we do that?) # print(\"Hello World!\" Code cells exemplify one possible benefit of running your code in a notebook rather than in a single Python script (.py) file; you can create separate code cells and execute each portion your code separately and as needed. That also means being able to troubleshoot certain lines of code without having to rerun your entire work every time. 1.2.3.2 Markdown/Text cells \u00b6 As the name suggests, a text cell is meant for information and instructions, rather than executing code for assigning variables, importing datasets, or generating plots. One benefit of adding text cells is to help explain code or functionality to viewers of a notebook. You can add a text cell either by going to the Insert menu and selecting Text cell : Or by hovering your mouse over to the bottom of a cell and selecting + Text : You may edit an existing text cell by just double-clicking on one and editing the code. You can also have as many text cells as you want, cells that comprise technically any word length. Depending on what purpose it needs to serve, such cells may be a description of a data pipeline, or a list of external links (like the ones you'll see at the end of this notebook). Exercise 7: Write a very UW Text cell \u00b6 Create a simple text cell that reads the official tagline of UW (hint: https://www.washington.edu/brand/brand-guide/tagline/) text cell for exercise 7 1.2.3.3 Markdown for text cells \u00b6 Text cells support Markdown syntax, which is a way to render and format plain text, in addition to giving us more control to structure this text beyond just visually. Markdown is optional and enables you to transform and annotate text within a webpage or here in a Jupyter notebook. For text cells, using Markdown improves readability, as a set of formatting conventions that's easy to learn and write . Markdown is a superset of HTML. Discussing HTML is beyond the scope of this session, but there are links to read more about this, later in the notebook. Exercise 8: Discover some Markdown syntax \u00b6 Create a new text cell below with the UW official tagline like before, only this time play around with: ##### at the beginning of the first line (hit enter after) ** surounding portions of the text * surounding portions of the text > on a new line for the last line (hit enter before) text cell for exercise 8 Later in the Breakout section, you'll learn more formatting syntax with Markdown. We also recommend trying out Markdown on a blank new Jupyter notebook for you to experiment with the all the different formatting this markup language has to offer. There is much more to discover with Markdown, and the References section of this notebook gives you a list of resources to learn more. Exercise 9: Always double check the type of cell you're running \u00b6 # It can be easy to mistakenly write something in a code cell, when you actually # wanted a text cell instead. For example... what happens when you hit the Play # button on this particular cell? 1.2.4 Other details on Jupyter Notebooks \u00b6 Jupyter Notebooks (.ipynb) don't just work with web browsers There are IDEs such as Visual Studio Code that have extensions which allow you to create and these .ipynb files right on the editor. Python isn't the only language supported by Jupyter, as you can also run notebooks with R and Julia as well, by adding specific computing engines for them. Notebooks - both in Jupyter and Google Colab - can integrate directly with GitHub repositories we are doing this with our Jupyter Hub! link to GitHub 1.2.5 ...So what does this have to do with Jupyter Hub? \u00b6 Jupyter Hub is based on Jupyter Notebook. Both the notebook platform and the development machine are hosted on the cloud provided by UW IT - no need to install Python or external libraries locally on your computer! We'll be using Jupyter Hub for these courses. That includes all exercises and projects. Jupyter Hub comes with pre-configured images with Python libraries pre-installed. We are on the tensor-flow image of Jupyter Hub. You've seen examples of these used already! Some of the most popular scientific libraries include: - NumPy - SciPy - Pandas - Scikit-Learn - TensorFlow - Matplotlib To view the full list of installed packages, run the following command: ! pip freeze absl-py==0.12.0 alabaster==0.7.12 albumentations==0.1.12 altair==4.1.0 appdirs==1.4.4 argon2-cffi==20.1.0 astor==0.8.1 astropy==4.2.1 astunparse==1.6.3 async-generator==1.10 atari-py==0.2.6 atomicwrites==1.4.0 attrs==20.3.0 audioread==2.1.9 autograd==1.3 Babel==2.9.0 backcall==0.2.0 beautifulsoup4==4.6.3 bleach==3.3.0 blis==0.4.1 bokeh==2.3.1 Bottleneck==1.3.2 branca==0.4.2 bs4==0.0.1 CacheControl==0.12.6 cachetools==4.2.1 catalogue==1.0.0 certifi==2020.12.5 cffi==1.14.5 chainer==7.4.0 chardet==3.0.4 click==7.1.2 cloudpickle==1.3.0 cmake==3.12.0 cmdstanpy==0.9.5 colorcet==2.0.6 colorlover==0.3.0 community==1.0.0b1 contextlib2==0.5.5 convertdate==2.3.2 coverage==3.7.1 coveralls==0.5 crcmod==1.7 cufflinks==0.17.3 cvxopt==1.2.6 cvxpy==1.0.31 cycler==0.10.0 cymem==2.0.5 Cython==0.29.22 daft==0.0.4 dask==2.12.0 datascience==0.10.6 debugpy==1.0.0 decorator==4.4.2 defusedxml==0.7.1 descartes==1.1.0 dill==0.3.3 distributed==1.25.3 dlib==19.18.0 dm-tree==0.1.6 docopt==0.6.2 docutils==0.17 dopamine-rl==1.0.5 earthengine-api==0.1.260 easydict==1.9 ecos==2.0.7.post1 editdistance==0.5.3 en-core-web-sm==2.2.5 entrypoints==0.3 ephem==3.7.7.1 et-xmlfile==1.0.1 fa2==0.3.5 fancyimpute==0.4.3 fastai==1.0.61 fastdtw==0.3.4 fastprogress==1.0.0 fastrlock==0.6 fbprophet==0.7.1 feather-format==0.4.1 filelock==3.0.12 firebase-admin==4.4.0 fix-yahoo-finance==0.0.22 Flask==1.1.2 flatbuffers==1.12 folium==0.8.3 future==0.16.0 gast==0.3.3 GDAL==2.2.2 gdown==3.6.4 gensim==3.6.0 geographiclib==1.50 geopy==1.17.0 gin-config==0.4.0 glob2==0.7 google==2.0.3 google-api-core==1.26.3 google-api-python-client==1.12.8 google-auth==1.28.1 google-auth-httplib2==0.0.4 google-auth-oauthlib==0.4.4 google-cloud-bigquery==1.21.0 google-cloud-bigquery-storage==1.1.0 google-cloud-core==1.0.3 google-cloud-datastore==1.8.0 google-cloud-firestore==1.7.0 google-cloud-language==1.2.0 google-cloud-storage==1.18.1 google-cloud-translate==1.5.0 google-colab==1.0.0 google-pasta==0.2.0 google-resumable-media==0.4.1 googleapis-common-protos==1.53.0 googledrivedownloader==0.4 graphviz==0.10.1 greenlet==1.0.0 grpcio==1.32.0 gspread==3.0.1 gspread-dataframe==3.0.8 gym==0.17.3 h5py==2.10.0 HeapDict==1.0.1 hijri-converter==2.1.1 holidays==0.10.5.2 holoviews==1.14.3 html5lib==1.0.1 httpimport==0.5.18 httplib2==0.17.4 httplib2shim==0.0.3 humanize==0.5.1 hyperopt==0.1.2 ideep4py==2.0.0.post3 idna==2.10 imageio==2.4.1 imagesize==1.2.0 imbalanced-learn==0.4.3 imblearn==0.0 imgaug==0.2.9 importlib-metadata==3.10.1 importlib-resources==5.1.2 imutils==0.5.4 inflect==2.1.0 iniconfig==1.1.1 intel-openmp==2021.2.0 intervaltree==2.1.0 ipykernel==4.10.1 ipython==5.5.0 ipython-genutils==0.2.0 ipython-sql==0.3.9 ipywidgets==7.6.3 itsdangerous==1.1.0 jax==0.2.12 jaxlib==0.1.65+cuda110 jdcal==1.4.1 jedi==0.18.0 jieba==0.42.1 Jinja2==2.11.3 joblib==1.0.1 jpeg4py==0.1.4 jsonschema==2.6.0 jupyter==1.0.0 jupyter-client==5.3.5 jupyter-console==5.2.0 jupyter-core==4.7.1 jupyterlab-pygments==0.1.2 jupyterlab-widgets==1.0.0 kaggle==1.5.12 kapre==0.1.3.1 Keras==2.4.3 Keras-Preprocessing==1.1.2 keras-vis==0.4.1 kiwisolver==1.3.1 knnimpute==0.1.0 korean-lunar-calendar==0.2.1 librosa==0.8.0 lightgbm==2.2.3 llvmlite==0.34.0 lmdb==0.99 LunarCalendar==0.0.9 lxml==4.2.6 Markdown==3.3.4 MarkupSafe==1.1.1 matplotlib==3.2.2 matplotlib-venn==0.11.6 missingno==0.4.2 mistune==0.8.4 mizani==0.6.0 mkl==2019.0 mlxtend==0.14.0 more-itertools==8.7.0 moviepy==0.2.3.5 mpmath==1.2.1 msgpack==1.0.2 multiprocess==0.70.11.1 multitasking==0.0.9 murmurhash==1.0.5 music21==5.5.0 natsort==5.5.0 nbclient==0.5.3 nbconvert==5.6.1 nbformat==5.1.3 nest-asyncio==1.5.1 networkx==2.5.1 nibabel==3.0.2 nltk==3.2.5 notebook==5.3.1 np-utils==0.5.12.1 numba==0.51.2 numexpr==2.7.3 numpy==1.19.5 nvidia-ml-py3==7.352.0 oauth2client==4.1.3 oauthlib==3.1.0 okgrade==0.4.3 opencv-contrib-python==4.1.2.30 opencv-python==4.1.2.30 openpyxl==2.5.9 opt-einsum==3.3.0 osqp==0.6.2.post0 packaging==20.9 palettable==3.3.0 pandas==1.1.5 pandas-datareader==0.9.0 pandas-gbq==0.13.3 pandas-profiling==1.4.1 pandocfilters==1.4.3 panel==0.11.2 param==1.10.1 parso==0.8.2 pathlib==1.0.1 patsy==0.5.1 pexpect==4.8.0 pickleshare==0.7.5 Pillow==7.1.2 pip-tools==4.5.1 plac==1.1.3 plotly==4.4.1 plotnine==0.6.0 pluggy==0.7.1 pooch==1.3.0 portpicker==1.3.1 prefetch-generator==1.0.1 preshed==3.0.5 prettytable==2.1.0 progressbar2==3.38.0 prometheus-client==0.10.1 promise==2.3 prompt-toolkit==1.0.18 protobuf==3.12.4 psutil==5.4.8 psycopg2==2.7.6.1 ptyprocess==0.7.0 py==1.10.0 pyarrow==3.0.0 pyasn1==0.4.8 pyasn1-modules==0.2.8 pycocotools==2.0.2 pycparser==2.20 pyct==0.4.8 pydata-google-auth==1.1.0 pydot==1.3.0 pydot-ng==2.0.0 pydotplus==2.0.2 PyDrive==1.3.1 pyemd==0.5.1 pyerfa==1.7.2 pyglet==1.5.0 Pygments==2.6.1 pygobject==3.26.1 pymc3==3.7 PyMeeus==0.5.11 pymongo==3.11.3 pymystem3==0.2.0 PyOpenGL==3.1.5 pyparsing==2.4.7 pyrsistent==0.17.3 pysndfile==1.3.8 PySocks==1.7.1 pystan==2.19.1.1 pytest==3.6.4 python-apt==0.0.0 python-chess==0.23.11 python-dateutil==2.8.1 python-louvain==0.15 python-slugify==4.0.1 python-utils==2.5.6 pytz==2018.9 pyviz-comms==2.0.1 PyWavelets==1.1.1 PyYAML==3.13 pyzmq==22.0.3 qdldl==0.1.5.post0 qtconsole==5.0.3 QtPy==1.9.0 regex==2019.12.20 requests==2.23.0 requests-oauthlib==1.3.0 resampy==0.2.2 retrying==1.3.3 rpy2==3.4.3 rsa==4.7.2 scikit-image==0.16.2 scikit-learn==0.22.2.post1 scipy==1.4.1 screen-resolution-extra==0.0.0 scs==2.1.3 seaborn==0.11.1 Send2Trash==1.5.0 setuptools-git==1.2 Shapely==1.7.1 simplegeneric==0.8.1 six==1.15.0 sklearn==0.0 sklearn-pandas==1.8.0 smart-open==5.0.0 snowballstemmer==2.1.0 sortedcontainers==2.3.0 SoundFile==0.10.3.post1 spacy==2.2.4 Sphinx==1.8.5 sphinxcontrib-serializinghtml==1.1.4 sphinxcontrib-websupport==1.2.4 SQLAlchemy==1.4.7 sqlparse==0.4.1 srsly==1.0.5 statsmodels==0.10.2 sympy==1.7.1 tables==3.4.4 tabulate==0.8.9 tblib==1.7.0 tensorboard==2.4.1 tensorboard-plugin-wit==1.8.0 tensorflow==2.4.1 tensorflow-datasets==4.0.1 tensorflow-estimator==2.4.0 tensorflow-gcs-config==2.4.0 tensorflow-hub==0.12.0 tensorflow-metadata==0.29.0 tensorflow-probability==0.12.1 termcolor==1.1.0 terminado==0.9.4 testpath==0.4.4 text-unidecode==1.3 textblob==0.15.3 textgenrnn==1.4.1 Theano==1.0.5 thinc==7.4.0 tifffile==2021.4.8 toml==0.10.2 toolz==0.11.1 torch==1.8.1+cu101 torchsummary==1.5.1 torchtext==0.9.1 torchvision==0.9.1+cu101 tornado==5.1.1 tqdm==4.41.1 traitlets==5.0.5 tweepy==3.10.0 typeguard==2.7.1 typing-extensions==3.7.4.3 tzlocal==1.5.1 uritemplate==3.0.1 urllib3==1.24.3 vega-datasets==0.9.0 wasabi==0.8.2 wcwidth==0.2.5 webencodings==0.5.1 Werkzeug==1.0.1 widgetsnbextension==3.5.1 wordcloud==1.5.0 wrapt==1.12.1 xarray==0.15.1 xgboost==0.90 xkit==0.0.0 xlrd==1.1.0 xlwt==1.3.0 yellowbrick==0.9.1 zict==2.0.0 zipp==3.4.1 Note: the exclamation point syntax seen at the beginning of !pip freeze is for running Terminal/Shell commands directly within Jupyter notebooks. Terminal commands are outside of the scope of this session. 1.3 Resources & Further Reading \u00b6 This section serves as a reference for many other resources to learn more about what was introduced here. Python vs Excel \u00b6 Python vs Excel Python \u00b6 Official Python site - Python.org Latest Python Language Reference/Documentation Official Python 3 Tutorial from the Python Software Foundation Python Crash Course , 2nd Edition by Eric Matthes Python From The Very Beginning by John Whitington Python Data Science Handbook by Jake VanderPlas (Free!) Simple Math in Python Notebook Excercises from UW DIRECT Arithmetic Operators in Python \u00b6 Below is a reference table for many of the arithmetic operators you can use with Python, some of which we've already went over: Symbol Operation Example Code Expected Ouput + Addition 5 + 5 10 - Subtraction 8 - 3 5 * Multiplication 9 * 6 54 ** Exponentiation 3 ** 2 9 \\/ Floating-point Division 9 / 2 4.5 \\/\\/ Truncating Division 9 // 2 4 \\% Remainder (modulus) 12 % 5 2 Jupyter Notebook \u00b6 Project Jupyter - Official Jupyter Website Read The Docs - Jupyter Notebook User Documentation by the Official Jupyter Team Jupyter Book - Online open source book Markdown \u00b6 Google Colab Guide on Markdown Markdown Guide (From Technical Writer Mark Cone) Jupyter Notebook Docs - Markdown Basics Markdown versus HTML (Google Developers Doc)","title":"Introduction to Python and Jupyter"},{"location":"S1_Python_and_Jupyter/#technology-fundamentals-course-1-session-1-python-and-jupyter-notebooks","text":"Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assistants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu","title":"Technology Fundamentals Course 1, Session 1: Python and Jupyter Notebooks"},{"location":"S1_Python_and_Jupyter/#schedule-for-this-week","text":"In this session we will cover computer coding in Python as well as navigating the Jupyter Notebook environment (what we are reading from at this moment).","title":"Schedule for this week"},{"location":"S1_Python_and_Jupyter/#11-lets-talk-about-python","text":"A lot of us are familiar with Excel, and when we get started in Python, it may seem like a lot of what we are doing could be easily done in Excel, why make the leap? Image borrowed from nobledesktop.com Simplicity Excel GUI makes simple calculations, well simple! Many are at least somewhat versed, so sharing is simple too! Python Steeper learning curve This is unavoidable, but to our advantage our learning material is currated so that we learn python while solving relevant problems! You need to setup your own coding environment (Thanks Colab!) Automation / Data Connectivity Excel Need to execute xlsx file with relevant data (copy, paste, edit, paradigm) Python Integration with databases for easy update, chart or analysis delivery Scalability & Big Data Excel less than millions of data points poor version control Python more than millions of data points can integrate with querying languages (e.g. MySQL, PostgreSQL) has version control and containerized environments (like notebooks) extraction, wrangling, and analytics all in one place Side Note: The scripting language of Excel is VBA, this won first place (80% of developers who use this language stated) for most dread language!! in stack overflow's 2020 developer survey That being said, we won't only approach Python from a let's-replace-excel standpoint; we will also be approaching it from a coding standpoint: we write computer code to perform a set of tasks and instructions that the computer can help us accomplish . The real challenge and process of coding from an engineering perspective is how to codify a problem, and knowledge of what tools are available to solve it. We've worked hard on the material to try and demystify the confusion along the way, while focusing on giving learning experiences in the relevant engineering problem areas.","title":"1.1 Let's talk about Python"},{"location":"S1_Python_and_Jupyter/#111-python-vs-other-languages","text":"Our goal is to not only give an introduction to Python, but also to demonstrate general coding concepts. For these next few sections, we'll be executing various lines of code right here in this interactive, Google Colab notebook. If you're wondering how this is possible and how this all works, don't worry; we'll get to the intricacies of interactive notebooks later! You'll discover the many benefits of this general purpose programming language. In particular, The syntax for Python is understandable to read and easy to learn , compared to the syntax of other languages that requires more of a background of underlying computer science - languages such as Java, C, and C++. In this course, you'll discover that Python is especially ideal for working with scientific data. Topics such as data science, machine learning, and data visualization will be covered later on this week - all while continuing to utilize Python. # We will talk about what this cell is doing in a moment! ! python -- version Python 3.7.11 Note: this session is covering syntax for version 3.x of Python. As you continue learning Python elsewhere, please advise that Python version 2 is no longer supported, and older notebooks may be outdated as a result. source: insights.stackoverflow.com/survey/2020","title":"1.1.1 Python vs other languages"},{"location":"S1_Python_and_Jupyter/#112-a-quick-primer-on-python-syntax","text":"Python's simple, concise syntax allows for faster prototyping of code than other languages such as Java and C++. (However, that does not mean that Python has faster runtime execution than the others!) Printing output to the console is as simple as running Python's built-in print() function. To execute a code cell (we'll talk more about this later!), you can either click on the Play button next to the cell, or use the keyboard shortcut CTRL + ENTER ( CMD (\u2318) + ENTER on a macOS). print ( \"Hello, MSTI Students\" ) Hello, MSTI Students Variables can be created just by typing the name you'd like, followed by the equal sign, and the value you want to assign the variable to. In this case, we'll create a variable called some_school and set it to the value of \"University of Washington\" : some_school = \"University of Washington\" You may then use created variables elsewhere. For example, we can output the value set for some_school by inputting the variable name into Python's print() function: print ( some_school ) University of Washington A key part of coding is understanding which functions you need to use for accomplishing a task, as well as knowing when to create one of your own, which you'll learn more about later this week. For now, what you should know is that print() from earlier is one example of calling/executing a function that's already made available to us.","title":"1.1.2 A quick primer on Python syntax"},{"location":"S1_Python_and_Jupyter/#exercise-1-a-very-common-print-statement","text":"Now that you've stepped through our quick primer on Python, for our first coding exercise, try printing hello world! to the screen. Then run the code cell either from the Play button or the keyboard shortcut from earlier to see the output. You may have noticed me making new coding blocks without touching my mouse. You can do this by pressing esc then a or esc then b (for above/below) to create a new cell block where your cursor is. Try this as well # Cell for Exercise 1","title":"Exercise 1: A Very Common Print Statement"},{"location":"S1_Python_and_Jupyter/#113-what-are-variables","text":"To have values that our computer can store in memory, we use variables . How else can we store information for later analysis and later reference? That's where variables come in, and is an essential part of programming! Here's a basic example of assigning a variable, using '='. Let's call this variable x and assign it an integer value (we'll get to integers in just a bit!) of 25: x = 25 Let's create another variable called city_name and assign it the word \"Seattle\" : city_name = \"Seattle\" And when we need to use this value again, we retrieve that variable by referring to it by the variable name we gave it when first assigned. The x variable we created earlier can now be used later, and as many times as we'd like. Existing variables can also be modified. Let's change the value of x , after printing its initial value: print ( x ) x = 150 print ( x ) 25 150 A few more notes on storing data as variables... Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory for that value. You can identify the location in memory using names. Rules: Must begin with a letter (a - z, A - B) or underscore (_) Other characters can be letters, numbers or _ Case Sensitive Can be any (reasonable) length There are some reserved words which you cannot use as a variable name because Python uses them for other things. (e.g False, None, True, Lambda, From, Global) If you want to have more than one word in the name, the convention is to use underscore \"_\" in the name. there was a time when camelCase was also acceptable","title":"1.1.3 What are variables?"},{"location":"S1_Python_and_Jupyter/#1131-variable-types","text":"For your reference... Data Types 1. Numbers * floating point * integers * complex numbers 2. strings 3. boolean values 4. lists and dicts 5. NoneType In this section we will also introduce a built-in python function type() Let's explore some common variable data types in Python. The first type to discuss is a string , which we've already seen before when we initialized city_name . Strings in Python are simply a collection of characters wrapped around quotes, and a string can represent any kind of info depending on how it's used, such as a person's name, a city name (like we just demonstrated), or a complete sentence. Here are some examples of string variables in Python below. ... we can also use single or double quotes ... and triple quotes open whole blocks of string content ''' here's a stirng block with triple singles ''' \"\\nhere's a stirng block\\n with triple singles\\n\" 'single quotes' 'single quotes' \"double quotes\" 'double quotes' you have to use double quotes here... \"here's one with a single quote inside\" \"here's one with a single quote inside\" \"\"\" heres a block with double triples \"\"\" '\\nheres \\na block with \\ndouble triples\\n' type ( \"heres a string... I think?!@?!?!\" ) str The other variable types we'll discuss for now are integers and floats . Consider the Integer type as data that can represent any positive whole number or negative whole number. Recall the x variable we assigned to 25 and then 150 earlier? That variable would be considered an integer in Python. Here are some other quick examples of Python integer variables. some_int = 5 numbers_of_breakfasts_for_hobbits = 2 # notice the usefulness of tab complete for long variable names! type ( numbers_of_breakfasts_for_hobbits ) int print ( \"what about second breakfast???\" ) what about second breakfast??? A float in Python is considered any number with decimal point values. This is the main difference between a float and integer. For floats, some examples below show an arbitrary number of decimal places after the decimal point, and ones where a value less than 1 (such as one representing a percentage value) don't require specifying a 0 left of the decimal point. # what do we notice is different here? y = 21.0 half = 0.5 data_generated_by_deathstar = 2.08 #exabytes/year star wars source # let's try something... print ( type ( 21.0 )) print ( type ( 21 )) <class 'float'> <class 'int'> We see that python auto-determines variable datatypes for us, in many cases! Python is a programming language in which variables are dynamically typed, meaning we do not need to declare the specific type of the variable when we initialize it . Because of this feature of Python, executing x = 21 will automatically turn this variable into an integer by default due to its value of 21. Likewise, executing x = 21.0 instead will make x the float type.","title":"1.1.3.1 Variable types"},{"location":"S1_Python_and_Jupyter/#exercise-2-create-and-change-some-variables","text":"Start by initializing a variable named hundred and assign it an integer value of 100 in the code cell below. THEN print the type of the stored variable # Cell for Exercise 2 Now create another variable called largest_computer_in_the_galaxy and assign it the string value of \"Deep Thought\" in the code cell below. THEN print the stored variable # Cell for Exercise 2 There are many more variable types to explore in Python, both ones built-in to Python and ones created by open-source libraries. The later sessions will cover more of these types, such as lists and DataFrames in session 2.","title":"Exercise 2: Create and change some variables"},{"location":"S1_Python_and_Jupyter/#114-math-with-python-the-moment-ive-been-waiting-for","text":"","title":"1.1.4 Math with Python (the moment I've been waiting for...)"},{"location":"S1_Python_and_Jupyter/#1141-basic-operators","text":"Python allows users to performing mathematical operations fairly easily. As many tutorials will explain, you can use Python just like a calculator! The most basic operation, adding 1 with 1, is as follows, using the plus sign ( + ) for addition: 1 + 1 2 Subtraction is done with the minus sign in Python ( - ) and also works as expected here: 45 - 32 13 Multiplication is performed by the asterisk sign ( * ) in Python: 12 * 90 1080 You may combine as many arithmetic operators in one line as you need: 8 + 5 * 14 - 7 + 14 * 3 - 10 103 And based on the data type, you can peform the same mathematical operations for variables. Suppose a = 12 and b = 24 are already defined, we can multiply the two variables together by simply referring to their names and using Python's multiplication operator: a * b . a = 12 b = 24 a * b 288","title":"1.1.4.1 Basic operators"},{"location":"S1_Python_and_Jupyter/#exercise-3-discover-more-operators-on-your-own","text":"Beyond the three arithmetic operators we have just demonstrated for you, there are more in Python to discover. To start, try typing 14 / 4 in the empty code cell below: # Cell for Exercise 3 Just by typing the computation and seeing the output on your own, you can quickly recognize that / is a division operator. Now try 14 % 4 in the empty code below. From the output, can you guess what the % sign in Python accomplishes here? # Cell for Exercise 3","title":"Exercise 3: Discover More Operators On Your Own!"},{"location":"S1_Python_and_Jupyter/#exercise-4-order-of-operations","text":"Be aware that order or operations apply for programming as well, and Python is no exception. Python follows operator precedence, specifically PEMDAS - any operations in parentheses ( P ) take precedence, followed by exponents ( E ), multiplication ( M ) & division ( D ), and then addition ( A ) & subtraction ( S ). Run the following code: 4 * 3 + 4 16 While that was straightforward, let's modify it to wrap parentheses around 3 + 4 . When you execute the code cell below, what output do you receive now? 4 * ( 3 + 4 ) 28","title":"Exercise 4: Order of Operations"},{"location":"S1_Python_and_Jupyter/#1142-enrichment-the-difference-between-5-50-and-5","text":"While more complex computations are possible beyond the basics that we just covered, you should first understand how mixing variable types can lead to errors and unexpected output. Consider two variables, num1 = 5 and num2 = 5.0 . From what you learned in section 1.1.3, num1 represents an integer, while num2 represents a float. num1 = 5 num2 = 5.0 For this example, what happens when we add num1 and num2 together in Python, as in, run the code num1 + num2 ? num1 + num2 10.0 As you see from the output of that operation, the result is 10.0, which is a float. What this means is that for any operation that uses a float type in Python, the default type of the result will also be a float . In this example, mixing an integer ( num1 ) and float ( num2 ) together by addition resulted in 10.0 and not 10, even if the sum is a whole number. Although mixing the two data types did not cause a runtime error, you should recognize this behavior in the near future, when such computations result in output that you may not expect - and possibly lead you to some functionality that causes an error elsewhere. Finally, let's discuss a third variable, called num3 , and let's assign it a value of \"5\" . num3 = \"5\" If we try adding num1 with num3 , or 5 + \"5\", what is our output now from the code num1 + num3 ? # num1 + num3 The output is neither a 10 or a 10.0 - instead, we receive a TypeError. Python does not allow you to perform mathematical operations with an integer and string together . Because num1 is an integer, and num3 is a string type - given the double quotes around 5 - adding the two together in Python results in this TypeError, even if the string represents a numeric character. The same goes for combining floats with strings: is our output from the code num2 (float) and num3 (string) any different? # num2 + num3 Nope! Same TypeError results here. One workaround/solution for this is converting(type casting) the num3 string variable into either a float or a integer, using Python's built-in float() and int() functions respectively. Let's try adding num1 and num3 again, only this time using int() to convert num3 into an integer type, running the full line of code as num1 + int(num3) . num1 + int ( num3 ) 10 This time, we get no TypeError - the output is 10! Without diving too much further into the intricacies of these conversion functions - the concept of functions themselves will be covered in more detail tomorrow! - just be aware that this example only works because the string represented by num3 was a valid convertible string (\"5\") to begin with. In other words, if num3 was \"Five\" instead of \"5\", we would not be able to execute int(num3) without getting an error. # num3 = \"Five\" # int(num3)","title":"1.1.4.2 Enrichment: The difference between 5, 5.0, and \"5\""},{"location":"S1_Python_and_Jupyter/#115-code-comments-with","text":"Comments are notes in your code, and can serve many purposes, such as: - Describing the functionality of some code - A reminder to fix an existing issue - Clarify details of some code for yourself and/or others You can create a comment by using '#', and when the Python interpreter sees this syntax, it doesn't run that as code and recognizes it as a comment instead . For example, for a mathematical operation, let's add a comment at the end of the line to describe what this performs: 2 + 5 # Adds 2 to 5, so we get 7 7 In this case, the # Adds 2 to 5, so we get 7 part of the previous line of code was a comment appended to the end of the Python code, 2 + 5 . By adding that '#' character, Python knows everything after that character is a comment. Additionally, you can write comments on their own line(s) of code: # Adds 2 to 5, so we get 7 2 + 5 7 You may use this syntax for code that you may not want to execute, but still save for future reference or revision. To do this, you can simply add '#' at the very beginning of the line you wish to comment. In the following example, I've turned the first line of the code in this cell into a comment so it won't run: # print(\"I commented out this line of code so you won't see this statement printed\") print ( \"There should be one line printed from this cell, and should be this one.\" ) There should be one line printed from this cell, and should be this one. we can toggle comments with ctrl + /","title":"1.1.5 Code comments with '#'"},{"location":"S1_Python_and_Jupyter/#exercise-5-add-a-comment-to-a-line-of-code","text":"Let's write a comment that explains the following line of code, 25 % 7 . 25 % 7 4 Comments in your code are optional, but are recommended to help better inform readers of your code. Building a habit of writing comments may even help you understand and better explain your own code too!","title":"Exercise 5: Add a comment to a line of code"},{"location":"S1_Python_and_Jupyter/#116-where-can-you-run-python","text":"Because of its flexibility as a programming language, Python can be utilized in many different ways. Here are just a few: Line by line in a Python interpreter in a command line Terminal window windows: windows subsystem for linux mac os: terminal As a script that you execute from the command line Using Python to create a full GUI (Graphical User Interface) that runs on your desktop computer Executing Python directly from an IDE (Integrated Development Environment) such as PyCharm , Atom , or Visual Studio Code Executing Python code with an app that has a built-in Python interpreter, such as Pythonista Developing and running Python code in interactive notebooks like Jupyter Notebook/Hub/Lab Executing Python on a cloud platform - such as here in this Jupyter Hub ( Google Colab is another free resource) You don't need to understand every example that was just listed. Instead, the point is for us to recognize how ubiquitous Python has become. We're about to focus on the last two items on this list in the very next section! There's much more to learn with Python! So far, we've only introduced a small fraction of what's possible with this language and, more generally speaking, coding.","title":"1.1.6 Where can you run Python?"},{"location":"S1_Python_and_Jupyter/#12-executing-python-and-runtime-environments","text":"","title":"1.2 Executing Python and runtime environments"},{"location":"S1_Python_and_Jupyter/#121-using-interactive-notebooks","text":"After just having discussed the many ways you can deploy and develop Python, we'll focus on the one way that will be used for our sessions this week: interactive Python notebooks. Such notebooks - like the one you're viewing right now - are self-contained collections of interactive cells that can be modified and presented like a scientific notebook. By allowing us to combine code with formattable text, images, and interactive data visualizations, this gives us a great way to share and collaborate with others on our work. We'll next explore the proper interactive Python notebook type that you'll get quite familiar with during this series: Jupyter Notebooks.","title":"1.2.1 Using interactive notebooks"},{"location":"S1_Python_and_Jupyter/#122-jupyter-notebooks","text":"Jupyter Notebooks is based on IPython, or Interactive Python. In fact, Jupyter notebooks were formerly known as IPython notebooks. Discussing the underlying IPython kernel which powers these notebooks is beyond the scope of this session; however, it's important to, at least, recognize where the .ipynb filename extension comes from. With Jupyter Notebooks, we can utilize the Python language right in a single self-contained environment of code, such as initializing and managing variables : var1 = \"A\" var2 = \"B\" var3 = [ \"A\" , \"B\" , \"C\" ] type ( var3 ) list We can also write functions that can be used later on in a notebook: # we were using built-in functions before. # but we can also define our own! def some_function ( x , y ): return x ** 2 / y ** 2 print ( some_function ( 7 , 12 )) 0.3402777777777778 Visualizations - such as scatterplots, heatmaps, and charts - can also be generated directly inside of a Jupyter notebook as a cell output, and can be saved as a separate image file. This also makes notebooks useful to generate both visual representations of data and interactive reports on that same data. We'll be covering visualizations in Session 4. from sklearn.datasets import make_blobs import matplotlib.pyplot as plt x , y = make_blobs ( n_samples = 500 , n_features = 3 , centers = 3 ) plt . scatter ( x [:, 0 ], x [:, 1 ], marker = 'o' , c = y , s = 10 ) plt . title ( \"Example visualization\" ) plt . show () We certainly recognize that much of the code you have just seen may be unfamiliar to you, but these are all simply previews of what we'll be covering for this week! Here are some examples of how Jupyter Notebooks can be utilized: Reports on data analyses Data visualizations Interactive dashboards","title":"1.2.2 Jupyter Notebooks"},{"location":"S1_Python_and_Jupyter/#123-code-cells-vs-markdown-cells","text":"There are two main types of generated cells in Jupyter notebooks: code cells and markdown cells. You've seen both at this point. Right now, you're looking a markdown cell that's been created already by a different user. Think of a cell as just a single entity of your larger work inside of a notebook. Let's start with taking a look at code cells.","title":"1.2.3 Code cells vs markdown cells"},{"location":"S1_Python_and_Jupyter/#1231-code-cells","text":"For writing and executing Python in a notebook, we use code cells. It may sound almost too self-explanatory, and you've already tried out code cells in the exercises from 1.1. To add a new code cell, you can either go to the Insert menu and selecting Code cell : Or by hovering your mouse over to the bottom of a cell and select + Code : And lastly. For code blocks, we can simply hit esc + a to enter a code block above or esc + b to enter a code block below. Just kidding one last note... we can delete a block by holding ctrl + m + d","title":"1.2.3.1 Code cells"},{"location":"S1_Python_and_Jupyter/#exercise-6-edit-a-code-cell","text":"So far in this session, you've been creating entirely new code cells to write and execute a few exercises. Now, let's edit an existing cell of Python code. Below, we had our ~~obligatory~~ first exercise that printed \"Hello World!\" as the output. However, the code below, print(\"Hello World!\" causes an error, and does not output \"Hello World!\" as we initially expected. What do we need at the very end of the line in order for the print statement to run successfully? Note: I also want you to uncomment the following cell block! (how do we do that?) # print(\"Hello World!\" Code cells exemplify one possible benefit of running your code in a notebook rather than in a single Python script (.py) file; you can create separate code cells and execute each portion your code separately and as needed. That also means being able to troubleshoot certain lines of code without having to rerun your entire work every time.","title":"Exercise 6: Edit A Code Cell"},{"location":"S1_Python_and_Jupyter/#1232-markdowntext-cells","text":"As the name suggests, a text cell is meant for information and instructions, rather than executing code for assigning variables, importing datasets, or generating plots. One benefit of adding text cells is to help explain code or functionality to viewers of a notebook. You can add a text cell either by going to the Insert menu and selecting Text cell : Or by hovering your mouse over to the bottom of a cell and selecting + Text : You may edit an existing text cell by just double-clicking on one and editing the code. You can also have as many text cells as you want, cells that comprise technically any word length. Depending on what purpose it needs to serve, such cells may be a description of a data pipeline, or a list of external links (like the ones you'll see at the end of this notebook).","title":"1.2.3.2 Markdown/Text cells"},{"location":"S1_Python_and_Jupyter/#exercise-7-write-a-very-uw-text-cell","text":"Create a simple text cell that reads the official tagline of UW (hint: https://www.washington.edu/brand/brand-guide/tagline/) text cell for exercise 7","title":"Exercise 7: Write a very UW Text cell"},{"location":"S1_Python_and_Jupyter/#1233-markdown-for-text-cells","text":"Text cells support Markdown syntax, which is a way to render and format plain text, in addition to giving us more control to structure this text beyond just visually. Markdown is optional and enables you to transform and annotate text within a webpage or here in a Jupyter notebook. For text cells, using Markdown improves readability, as a set of formatting conventions that's easy to learn and write . Markdown is a superset of HTML. Discussing HTML is beyond the scope of this session, but there are links to read more about this, later in the notebook.","title":"1.2.3.3 Markdown for text cells"},{"location":"S1_Python_and_Jupyter/#exercise-8-discover-some-markdown-syntax","text":"Create a new text cell below with the UW official tagline like before, only this time play around with: ##### at the beginning of the first line (hit enter after) ** surounding portions of the text * surounding portions of the text > on a new line for the last line (hit enter before) text cell for exercise 8 Later in the Breakout section, you'll learn more formatting syntax with Markdown. We also recommend trying out Markdown on a blank new Jupyter notebook for you to experiment with the all the different formatting this markup language has to offer. There is much more to discover with Markdown, and the References section of this notebook gives you a list of resources to learn more.","title":"Exercise 8: Discover some Markdown syntax"},{"location":"S1_Python_and_Jupyter/#exercise-9-always-double-check-the-type-of-cell-youre-running","text":"# It can be easy to mistakenly write something in a code cell, when you actually # wanted a text cell instead. For example... what happens when you hit the Play # button on this particular cell?","title":"Exercise 9: Always double check the type of cell you're running"},{"location":"S1_Python_and_Jupyter/#124-other-details-on-jupyter-notebooks","text":"Jupyter Notebooks (.ipynb) don't just work with web browsers There are IDEs such as Visual Studio Code that have extensions which allow you to create and these .ipynb files right on the editor. Python isn't the only language supported by Jupyter, as you can also run notebooks with R and Julia as well, by adding specific computing engines for them. Notebooks - both in Jupyter and Google Colab - can integrate directly with GitHub repositories we are doing this with our Jupyter Hub! link to GitHub","title":"1.2.4 Other details on Jupyter Notebooks"},{"location":"S1_Python_and_Jupyter/#125-so-what-does-this-have-to-do-with-jupyter-hub","text":"Jupyter Hub is based on Jupyter Notebook. Both the notebook platform and the development machine are hosted on the cloud provided by UW IT - no need to install Python or external libraries locally on your computer! We'll be using Jupyter Hub for these courses. That includes all exercises and projects. Jupyter Hub comes with pre-configured images with Python libraries pre-installed. We are on the tensor-flow image of Jupyter Hub. You've seen examples of these used already! Some of the most popular scientific libraries include: - NumPy - SciPy - Pandas - Scikit-Learn - TensorFlow - Matplotlib To view the full list of installed packages, run the following command: ! pip freeze absl-py==0.12.0 alabaster==0.7.12 albumentations==0.1.12 altair==4.1.0 appdirs==1.4.4 argon2-cffi==20.1.0 astor==0.8.1 astropy==4.2.1 astunparse==1.6.3 async-generator==1.10 atari-py==0.2.6 atomicwrites==1.4.0 attrs==20.3.0 audioread==2.1.9 autograd==1.3 Babel==2.9.0 backcall==0.2.0 beautifulsoup4==4.6.3 bleach==3.3.0 blis==0.4.1 bokeh==2.3.1 Bottleneck==1.3.2 branca==0.4.2 bs4==0.0.1 CacheControl==0.12.6 cachetools==4.2.1 catalogue==1.0.0 certifi==2020.12.5 cffi==1.14.5 chainer==7.4.0 chardet==3.0.4 click==7.1.2 cloudpickle==1.3.0 cmake==3.12.0 cmdstanpy==0.9.5 colorcet==2.0.6 colorlover==0.3.0 community==1.0.0b1 contextlib2==0.5.5 convertdate==2.3.2 coverage==3.7.1 coveralls==0.5 crcmod==1.7 cufflinks==0.17.3 cvxopt==1.2.6 cvxpy==1.0.31 cycler==0.10.0 cymem==2.0.5 Cython==0.29.22 daft==0.0.4 dask==2.12.0 datascience==0.10.6 debugpy==1.0.0 decorator==4.4.2 defusedxml==0.7.1 descartes==1.1.0 dill==0.3.3 distributed==1.25.3 dlib==19.18.0 dm-tree==0.1.6 docopt==0.6.2 docutils==0.17 dopamine-rl==1.0.5 earthengine-api==0.1.260 easydict==1.9 ecos==2.0.7.post1 editdistance==0.5.3 en-core-web-sm==2.2.5 entrypoints==0.3 ephem==3.7.7.1 et-xmlfile==1.0.1 fa2==0.3.5 fancyimpute==0.4.3 fastai==1.0.61 fastdtw==0.3.4 fastprogress==1.0.0 fastrlock==0.6 fbprophet==0.7.1 feather-format==0.4.1 filelock==3.0.12 firebase-admin==4.4.0 fix-yahoo-finance==0.0.22 Flask==1.1.2 flatbuffers==1.12 folium==0.8.3 future==0.16.0 gast==0.3.3 GDAL==2.2.2 gdown==3.6.4 gensim==3.6.0 geographiclib==1.50 geopy==1.17.0 gin-config==0.4.0 glob2==0.7 google==2.0.3 google-api-core==1.26.3 google-api-python-client==1.12.8 google-auth==1.28.1 google-auth-httplib2==0.0.4 google-auth-oauthlib==0.4.4 google-cloud-bigquery==1.21.0 google-cloud-bigquery-storage==1.1.0 google-cloud-core==1.0.3 google-cloud-datastore==1.8.0 google-cloud-firestore==1.7.0 google-cloud-language==1.2.0 google-cloud-storage==1.18.1 google-cloud-translate==1.5.0 google-colab==1.0.0 google-pasta==0.2.0 google-resumable-media==0.4.1 googleapis-common-protos==1.53.0 googledrivedownloader==0.4 graphviz==0.10.1 greenlet==1.0.0 grpcio==1.32.0 gspread==3.0.1 gspread-dataframe==3.0.8 gym==0.17.3 h5py==2.10.0 HeapDict==1.0.1 hijri-converter==2.1.1 holidays==0.10.5.2 holoviews==1.14.3 html5lib==1.0.1 httpimport==0.5.18 httplib2==0.17.4 httplib2shim==0.0.3 humanize==0.5.1 hyperopt==0.1.2 ideep4py==2.0.0.post3 idna==2.10 imageio==2.4.1 imagesize==1.2.0 imbalanced-learn==0.4.3 imblearn==0.0 imgaug==0.2.9 importlib-metadata==3.10.1 importlib-resources==5.1.2 imutils==0.5.4 inflect==2.1.0 iniconfig==1.1.1 intel-openmp==2021.2.0 intervaltree==2.1.0 ipykernel==4.10.1 ipython==5.5.0 ipython-genutils==0.2.0 ipython-sql==0.3.9 ipywidgets==7.6.3 itsdangerous==1.1.0 jax==0.2.12 jaxlib==0.1.65+cuda110 jdcal==1.4.1 jedi==0.18.0 jieba==0.42.1 Jinja2==2.11.3 joblib==1.0.1 jpeg4py==0.1.4 jsonschema==2.6.0 jupyter==1.0.0 jupyter-client==5.3.5 jupyter-console==5.2.0 jupyter-core==4.7.1 jupyterlab-pygments==0.1.2 jupyterlab-widgets==1.0.0 kaggle==1.5.12 kapre==0.1.3.1 Keras==2.4.3 Keras-Preprocessing==1.1.2 keras-vis==0.4.1 kiwisolver==1.3.1 knnimpute==0.1.0 korean-lunar-calendar==0.2.1 librosa==0.8.0 lightgbm==2.2.3 llvmlite==0.34.0 lmdb==0.99 LunarCalendar==0.0.9 lxml==4.2.6 Markdown==3.3.4 MarkupSafe==1.1.1 matplotlib==3.2.2 matplotlib-venn==0.11.6 missingno==0.4.2 mistune==0.8.4 mizani==0.6.0 mkl==2019.0 mlxtend==0.14.0 more-itertools==8.7.0 moviepy==0.2.3.5 mpmath==1.2.1 msgpack==1.0.2 multiprocess==0.70.11.1 multitasking==0.0.9 murmurhash==1.0.5 music21==5.5.0 natsort==5.5.0 nbclient==0.5.3 nbconvert==5.6.1 nbformat==5.1.3 nest-asyncio==1.5.1 networkx==2.5.1 nibabel==3.0.2 nltk==3.2.5 notebook==5.3.1 np-utils==0.5.12.1 numba==0.51.2 numexpr==2.7.3 numpy==1.19.5 nvidia-ml-py3==7.352.0 oauth2client==4.1.3 oauthlib==3.1.0 okgrade==0.4.3 opencv-contrib-python==4.1.2.30 opencv-python==4.1.2.30 openpyxl==2.5.9 opt-einsum==3.3.0 osqp==0.6.2.post0 packaging==20.9 palettable==3.3.0 pandas==1.1.5 pandas-datareader==0.9.0 pandas-gbq==0.13.3 pandas-profiling==1.4.1 pandocfilters==1.4.3 panel==0.11.2 param==1.10.1 parso==0.8.2 pathlib==1.0.1 patsy==0.5.1 pexpect==4.8.0 pickleshare==0.7.5 Pillow==7.1.2 pip-tools==4.5.1 plac==1.1.3 plotly==4.4.1 plotnine==0.6.0 pluggy==0.7.1 pooch==1.3.0 portpicker==1.3.1 prefetch-generator==1.0.1 preshed==3.0.5 prettytable==2.1.0 progressbar2==3.38.0 prometheus-client==0.10.1 promise==2.3 prompt-toolkit==1.0.18 protobuf==3.12.4 psutil==5.4.8 psycopg2==2.7.6.1 ptyprocess==0.7.0 py==1.10.0 pyarrow==3.0.0 pyasn1==0.4.8 pyasn1-modules==0.2.8 pycocotools==2.0.2 pycparser==2.20 pyct==0.4.8 pydata-google-auth==1.1.0 pydot==1.3.0 pydot-ng==2.0.0 pydotplus==2.0.2 PyDrive==1.3.1 pyemd==0.5.1 pyerfa==1.7.2 pyglet==1.5.0 Pygments==2.6.1 pygobject==3.26.1 pymc3==3.7 PyMeeus==0.5.11 pymongo==3.11.3 pymystem3==0.2.0 PyOpenGL==3.1.5 pyparsing==2.4.7 pyrsistent==0.17.3 pysndfile==1.3.8 PySocks==1.7.1 pystan==2.19.1.1 pytest==3.6.4 python-apt==0.0.0 python-chess==0.23.11 python-dateutil==2.8.1 python-louvain==0.15 python-slugify==4.0.1 python-utils==2.5.6 pytz==2018.9 pyviz-comms==2.0.1 PyWavelets==1.1.1 PyYAML==3.13 pyzmq==22.0.3 qdldl==0.1.5.post0 qtconsole==5.0.3 QtPy==1.9.0 regex==2019.12.20 requests==2.23.0 requests-oauthlib==1.3.0 resampy==0.2.2 retrying==1.3.3 rpy2==3.4.3 rsa==4.7.2 scikit-image==0.16.2 scikit-learn==0.22.2.post1 scipy==1.4.1 screen-resolution-extra==0.0.0 scs==2.1.3 seaborn==0.11.1 Send2Trash==1.5.0 setuptools-git==1.2 Shapely==1.7.1 simplegeneric==0.8.1 six==1.15.0 sklearn==0.0 sklearn-pandas==1.8.0 smart-open==5.0.0 snowballstemmer==2.1.0 sortedcontainers==2.3.0 SoundFile==0.10.3.post1 spacy==2.2.4 Sphinx==1.8.5 sphinxcontrib-serializinghtml==1.1.4 sphinxcontrib-websupport==1.2.4 SQLAlchemy==1.4.7 sqlparse==0.4.1 srsly==1.0.5 statsmodels==0.10.2 sympy==1.7.1 tables==3.4.4 tabulate==0.8.9 tblib==1.7.0 tensorboard==2.4.1 tensorboard-plugin-wit==1.8.0 tensorflow==2.4.1 tensorflow-datasets==4.0.1 tensorflow-estimator==2.4.0 tensorflow-gcs-config==2.4.0 tensorflow-hub==0.12.0 tensorflow-metadata==0.29.0 tensorflow-probability==0.12.1 termcolor==1.1.0 terminado==0.9.4 testpath==0.4.4 text-unidecode==1.3 textblob==0.15.3 textgenrnn==1.4.1 Theano==1.0.5 thinc==7.4.0 tifffile==2021.4.8 toml==0.10.2 toolz==0.11.1 torch==1.8.1+cu101 torchsummary==1.5.1 torchtext==0.9.1 torchvision==0.9.1+cu101 tornado==5.1.1 tqdm==4.41.1 traitlets==5.0.5 tweepy==3.10.0 typeguard==2.7.1 typing-extensions==3.7.4.3 tzlocal==1.5.1 uritemplate==3.0.1 urllib3==1.24.3 vega-datasets==0.9.0 wasabi==0.8.2 wcwidth==0.2.5 webencodings==0.5.1 Werkzeug==1.0.1 widgetsnbextension==3.5.1 wordcloud==1.5.0 wrapt==1.12.1 xarray==0.15.1 xgboost==0.90 xkit==0.0.0 xlrd==1.1.0 xlwt==1.3.0 yellowbrick==0.9.1 zict==2.0.0 zipp==3.4.1 Note: the exclamation point syntax seen at the beginning of !pip freeze is for running Terminal/Shell commands directly within Jupyter notebooks. Terminal commands are outside of the scope of this session.","title":"1.2.5 ...So what does this have to do with Jupyter Hub?"},{"location":"S1_Python_and_Jupyter/#13-resources-further-reading","text":"This section serves as a reference for many other resources to learn more about what was introduced here.","title":"1.3 Resources &amp; Further Reading"},{"location":"S1_Python_and_Jupyter/#python-vs-excel","text":"Python vs Excel","title":"Python vs Excel"},{"location":"S1_Python_and_Jupyter/#python","text":"Official Python site - Python.org Latest Python Language Reference/Documentation Official Python 3 Tutorial from the Python Software Foundation Python Crash Course , 2nd Edition by Eric Matthes Python From The Very Beginning by John Whitington Python Data Science Handbook by Jake VanderPlas (Free!) Simple Math in Python Notebook Excercises from UW DIRECT","title":"Python"},{"location":"S1_Python_and_Jupyter/#arithmetic-operators-in-python","text":"Below is a reference table for many of the arithmetic operators you can use with Python, some of which we've already went over: Symbol Operation Example Code Expected Ouput + Addition 5 + 5 10 - Subtraction 8 - 3 5 * Multiplication 9 * 6 54 ** Exponentiation 3 ** 2 9 \\/ Floating-point Division 9 / 2 4.5 \\/\\/ Truncating Division 9 // 2 4 \\% Remainder (modulus) 12 % 5 2","title":"Arithmetic Operators in Python"},{"location":"S1_Python_and_Jupyter/#jupyter-notebook","text":"Project Jupyter - Official Jupyter Website Read The Docs - Jupyter Notebook User Documentation by the Official Jupyter Team Jupyter Book - Online open source book","title":"Jupyter Notebook"},{"location":"S1_Python_and_Jupyter/#markdown","text":"Google Colab Guide on Markdown Markdown Guide (From Technical Writer Mark Cone) Jupyter Notebook Docs - Markdown Basics Markdown versus HTML (Google Developers Doc)","title":"Markdown"},{"location":"S2_Data_Structures_and_Flow/","text":"Technology Fundamentals Course 1, Session 2: Lists, Dictionaries, and Flow Control \u00b6 Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assistants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu In this session, we will review basic variables and introduce lists and dictionaries as new variable types, or data structures. We will close with seeing conditional execution and functions. Hang on for the ride! Normally, a notebook begins with import statements that import packages or libraries that do a lot of heavy lifting for us. We'll get to that later. 2.0 A quick review from last session \u00b6 Recall, we discussed variables and comments . 2.0.1 A quick review of variables \u00b6 Variables are human names we give data objects in our code. Variables in Python should be named using appropriately descriptions of their purpose. By convention, most variable names are lower case and may optionally contain the underscore character (' _ '). So far, you've only seen examples of functions and variables in Python, but eventually you will encounter all the types of python objects in this table! Type Naming Convention Examples Function Use a lowercase word or words. Separate words by underscores to improve readability. function, my_function Variable Use a lowercase single letter, word, or words. Separate words with underscores to improve readability. x, var, my_variable Class Start each word with a capital letter. Do not separate words with underscores. This style is called camel case. Model, MyClass Method Use a lowercase word or words. Separate words with underscores to improve readability. class_method, method Constant Use an uppercase single letter, word or words. Separate words with underscores to improve readability. CONSTANT, MY_CONSTANT, MY_LONG_CONSTANT Module Use a short, lowercase word or words. Separate words with underscores to improve readability. module.py, my_module.py Package Use a short, lowercase word or words. Do not separate words with underscores. package, mypackage Some names you might want to use are off-limits because they are reserved words , meaning they are words in Python that have special meaning. Examples of reserved words that you should not use as variable names are in the table below. The ones in bold are ones we will use in the session today. Remember, these can't be used as variable names! import True False if else def in not and or None from continue pass class await raise del lambda return elif with as finally nonlocal while assert except global yield break try global Let's see an example of a decimal point containing number, known to computers as a floating point number. Let's use $\\pi$ as the number. (Pro tip: you can write equations in Markdown. See this reference .) pickles = 3.14 print(pickles) pickles = 3.14 print ( pickles ) type ( pickles ) 3.14 float Cool. We defined a variable named pickles containing a poor estimate of $\\pi$. Now every place the word pickles appears, it will have the value 3.14 , at least until we change it. Exercise 1: Picking variable names \u00b6 Is pickles a good variable name for the value $\\pi$? If not, what would be a better name? Is it in the reserved word list above? Use the code cell below to create a new variable with your preferred name in it. # Cell for Exercise 1 Variables in Python have different data types. The simple ones, we've already discussed such as an integer or int , a string or str , a decimal point containing number called a floating point number. Floating point numbers are special and are stored in a computer's memory using internal representations . One important thing to know about floating point numbers is that to a computer, the statement below may not always be true. For now, just think about floating point numbers as approximately representing the decimal number you see. 10.0 * 0.1 = 1.0 Variables can change their value in Python so we can change the value of pickles to something else. For example, a definition of what pickles are. pickles = \"A cucumber preserved in vinegar or brine.\" print(pickles) pickles = \"A cucumber preserved in vinegar or brine.\" print ( pickles ) A cucumber preserved in vinegar or brine. 2.0.2 A quick review of comments \u00b6 Just like we should use good naming conventions for variables so they make sense, we should have good comments to help readers follow our code. Good comments can turn a speck of coding gold into a valuable nugget of knowledge. Bad or wrong comments are bugs. If you want to learn more about why we call computer coding problems bugs, read about Grace Hopper and see her photo of a bug in her notebook . To comment out some text, use the # or hashtag or sometimes called the pound character. print(pickles) print ( pickles ) A cucumber preserved in vinegar or brine. # This is an example comment. Notice it is in english and full sentences. That is good style. # This is an example comment. Notice it is in english and full sentences. That is good style. 2.1 Data Structures: Variables that organize data \u00b6 Many variables you will encounter are more than the above simple data types (integers, strings, floating point numbers). In fact, they may contain a few to many pieces of data rolled into one thing or data structure . Next, we'll discuss two important data structures : lists and dictionaries . There are many advanced data structures in Python that behave like lists and dictionaries , in different settings but their concepts are often similar. Thus, understanding them here will help us understand more advanced concepts. Let's start with the venerable list . 2.1.1 Lists \u00b6 For more than just shopping. A list is an ordered collection of data. By collection , we mean that it contains multiple data. By ordered , we mean that the data are arranged so that they appear first to last like words in a sentence. The order is important for the meaning of the sentence. Let's begin by creating a list variable named my_list that contains three pieces of information. my_list = ['I', 'like', 'pie'] my_list my_list = [ 'I' , 'like' , 'pie' ] my_list ['I', 'like', 'pie'] Now the value of the variable my_list points to a list of three strings. The use of [ , ] , and , are used to denote the begining, end and separator of the list. Like a sentence, this list of words is ordered. I like cake. Notice, we didn't use a print() on the variable. The last variable expression in a cell is shown in the notebook by default. The elements in a list have indices. That is, to access an element in the list, you can refer to it by its index. Think of a list like a very simple table. index value 0 'I' 1 'like' 2 'pie' People might start counting at 1 , but computers start counting at 0 . The first element in a list has the index 0 , the last element in a list has the index of the length of the list minus 1. For our list which is three elements long, the first index will be 0 and the last index will be 2 . Some programming languages also start counting at 1. These include Fortran , Matlab , and the abominable R . This is unfortunate. Be extra careful if you try to port code from those languages to Python. If you want to access a list element you can use its index. The index value is designated by appending [ and ] to the variable name with the index between. Examples are always easier than words: my_list[0] Given what you know... What will this output? my_list [ 0 ] 'I' If you try to use an index that is larger than the length of the list minus 1, you will get an error. Try it! The different colors means you made a boo boo! my_list[3] # my_list[3] The last line of the error report is the most informative for us now. It should read: IndexError: list index out of range It is trying to tell you that an IndexError occured because the the index you tried to access is out of the range of 0 to 2 , inclusive. Translation: stay in your lane, programmer! In addition to being able to recall or access a value of a list by the element's index in the list, we can change the value of the element. We will also use the [ <index> ] notation but like when we set the value of a variable, we will use the = character. Let's do it! my_list[2] = 'cake' my_list my_list [ 2 ] = 'cake' my_list ['I', 'like', 'cake'] 2.1.1.1 Append, and other list functions \u00b6 Finally, let's talk about empty lists and appending items to a list. An empty list is created by setting a variable to [] . This means the variable's data type is a list, but it contains no elements. a_new_list = [] a_new_list = [] We can append items to a list by using the .append() function . We'll talk more about functions later, but when this function or method is used on a variable whose data type is list, it will append the value in between the () to the end of the list. a_new_list.append(\"1st element\") print(a_new_list) a_new_list.append(\"2nd element\") print(a_new_list) a_new_list . append ( \"1st element\" ) print ( a_new_list ) a_new_list . append ( \"2nd element\" ) print ( a_new_list ) ['1st element'] ['1st element', '2nd element'] Finally, in addition to the .append() function , there are a lot of functions (or methods ) available for lists . See a complete list of them here . One more we'll touch on quickly is the len() function . It returns the length of a list . Here is an example: len(a_new_list) Before you run this cell. What do you think it will output? len ( a_new_list ) 2 2.1.1.2 Slicing \u00b6 Sometimes you want to make a list from consecutive elements of a list. This is called slicing where you cut up a list and get just the consecutive values you want. Slicing is done with the : character in the index area between the [ and the ] . Here is an example to pull just the last two items out of my_list . We use the first index, then a : , then the last index plus 1. Like this: my_list[1:3] You might be asking... WHY +1?? This is because with slices or ranges in Python are known as half-open intervals where the lower bound is inclusive and the upper bound is the non-inclusive limit. TL;DR : add one to the upper end of a slice or a range in Python. my_list[1:3] my_list [ 1 : 3 ] ['like', 'cake'] Just for giggles, try it with my_list[1:2] . You will see the range of the slice is only 1 . That's because 2 - 1 = 1 . my_list[1:2] my_list [ 1 : 2 ] ['like'] You don't even need to use the upper bound if all you really mean is the end of the list . For that, you can leave the index empty. Hot dog! Let's see an example... my_list[1:] my_list [ 1 :] ['like', 'cake'] But wait, there's more! You can set multiple elements of a list at the same time by slicing . Dig this! my_list[1:] = ['love', 'puppies'] my_list my_list [ 1 :] = [ 'love' , 'puppies' ] my_list ['I', 'love', 'puppies'] And who doesn't love puppies? Recap... Lists are ordered collections of information that you can recognize by their use of [ and ] . To access or address elements in the list, you can use indices . They start at 0 in Python. The last element of a list has the index of the length of the list minus 1. When slicing a list, use two indices separated by : . If you leave one off, it means everying up to or beyond that element. Question 1: Slicing \u00b6 Will either one of the following codes will return an error? my_list[:len(my_list)] my_list[len(my_list)] 2.1.1.3 Negative indices?!?! \u00b6 A brief note for folks who want to learn more. You can use negative index numbers to access from the end of the list towards the front. That is, a negative 1 ( -1 ) is the last element in the list. A negative 2 ( -2 ) is the second to last. The same rules apply for slicing with the : character. A quick demo example... Let's get last element in the list using negative indexing. That will be -1 . Here goes... my_list[-1] my_list [ - 1 ] 'puppies' We can also use slicing with negative indices . Remember, that slicing works the same way with negative indices , i.e. the the upper bound is non-inclusive. Here is an example using upper and lower bounds. Were you surprised by the results? my_list[-3:-1] my_list [ - 3 : - 1 ] ['I', 'love'] 2.1.1.4 Lists can contain most anything \u00b6 So far, we've seen a list containing some strings. That made our sentence analogy about the ordering of objects or strings in a list make sense. But lists can contain a mixture of data types and data structures . As a quick example, let's make a list that contains a integer, a string and a floating point number. This will be a four element list. zoo = [ 42, 'Elephants', 'ate', 3.14 ] zoo = [ 42 , 'Elephants' , 'ate' , 3.14 ] zoo [42, 'Elephants', 'ate', 3.14] We can even make a list of lists. META! list_of_lists = [ [ 42, 43, 44, 44 ], [ 'a', 'b', 'c', 'd' ] ] list_of_lists[0] list_of_lists[0][1] a_list = list_of_lists[0] a_list[1] list_of_lists = [ [ 42 , 43 , 44 , 45 ], [ 'a' , 'b' , 'c' , 'd' ] ] The important thing here is to have the right number of [ and ] to embed a list in a list separated between , . Yeah, this is super meta. list_of_lists [ 0 ] [42, 43, 44, 45] list_of_lists [ 0 ][ 1 ] 43 list_of_lists [ 1 ][ 1 ] 'b' a_list = list_of_lists [ 0 ] a_list [ 1 ] 43 Exercise 2: accessing lists of lists \u00b6 Make sure you understand why the above works. Take a minute and play with the first and last indices. access 45 in list_of_lists access d in list_of_lists # Cell for exercise 3 2.1.2 Dictionaries \u00b6 For more than just reading on a Friday night. Sometimes we want to access elements in a data structure by something other than an index. Consider a dictionary on the internet . You look up the word on a seach engine and go to the web page of the entry for the word. Python has a similar concept where the index for an element in a collection is not a number, as it is in a list above, but a key that, may be a string like 'pickles' . 2.1.2.1 Key, value pairs \u00b6 In the case of a Python dictionary , we call the definition a value and the way we look up the definition is a key . This results in key and value pairs. One key maps to one value . In our analogy of a internet dictionary, this is the same as the word to definition pairs. Let's create a simple dictionary with a definition we have alread seen in the tutorials... Pickles. my_dict = {} # create an empty dictionary my_dict['pickles'] = \"A cucumber preserved in vinegar or brine.\" my_dict my_dict = {} # create an empty dictionary my_dict [ 'pickles' ] = \"A cucumber preserved in vinegar or brine.\" my_dict {'pickles': 'A cucumber preserved in vinegar or brine.'} Notice the use of the # comment. Nice. Unlike the list, for dictionaries, some of their operations use the { and } brackets. Using a key to access or retrieve a value from the dictionary still uses the [ and ] brackets. Stick with it, for realz. Case matters in a dictionary because the key is a data type itself. my_dict['Pickles'] returns an error ( KeyError: 'Pickles' ) and the following does not my_dict['pickles'] # my_dict['Pickles'] This is a lot like the IndexError from the list case. Moving on... You can change the value of a dictionary key by reassigning it. For example below, we use the same key 'pickles' to change the definition of the word in our dictionary. Notice we still use the [ and ] brackets but we use the key instead of the index like we did with lists. The change we made in the string is that the cucumbers in pickles are usually small. my_dict['pickles'] = \"A small cucumber preserved in vinegar or brine.\" my_dict [ 'pickles' ] = \"A small cucumber preserved in vinegar or brine.\" my_dict {'pickles': 'A small cucumber preserved in vinegar or brine.'} Let's add two key and value pairs to our dictionary which are in the table below: key value list An ordered collection. dictionary A collection with unique indices . Something like: my_dict['list'] = \"An ordered collection\" print(my_dict) Is probably where we want to begin. my_dict [ 'list' ] = \"An ordered collection\" my_dict {'list': 'An ordered collection', 'pickles': 'A small cucumber preserved in vinegar or brine.'} # my_dict[0] Finally, like the list's .append() function , there are a lot of functions (or methods ) and attributes available for dictionaries. See a complete list of them here . (we will cover the difference between a method and an attribute more concretely later on...) 2.2 Flow control: If this, then that... \u00b6 Flow control is a fancy phrase meaning to execute some code statements under certain conditions. The simplist case, is an if statement (figure right below): If a variable is True then do something. If it is False then do something else, or do nothing at all. Flow control figure In the above figure: the selection refers to if statements Iteration refers to loops or repeating some statements over and over while changing a small number of variable values Sequence roughly corresponds to blocks of statements in functions . Flow control refers how to programs do loops, conditional execution, and order of functional operations. Let's start with conditionals, or the venerable if statement. 2.2.1 If \u00b6 Let's write a simple if statement if 5 == 5.0 : print ( True ) True Mathematically, the float 5.0 and integer 5, do evaluate to be the same! What do we notice about the second line? That's right, there's an indentation. Colab and most IDEs will automatically indent for you. Let's practice that below. 2.2.1.1 Indentations in python \u00b6 Exercise 3.1: Writing and if statement practice writing a simple if statement, notice the automatic indentation # cell for exercise 3.1 2.2.1.2 Conditional fall through and reserved words \u00b6 If statements can be use to execute some lines or block of code if a particular condition is satisfied. E.g. Let's print something based on the entries in the list. mission = [\"let's\", \"explore\", \"some\", \"data\", \"!\"] if '!' in mission: print('#notaword') mission = [ \"let's\" , \"explore\" , \"some\" , \"data\" , \"!\" ] if '!' in mission : print ( '#notaword' ) #notaword 2.2.1.2.1 in \u00b6 Notice the use the special reserved word in . This returns the value True when a value appears in a list and False when it does not. Notice how it reads like English. Readability is a key feature of Python and is part of the language design philosophy. Usually we want conditional logic on both sides of a binary condition, e.g. some action when True and some when False if '!' in mission: print(\"This isn't a full word!\") else: print(\"Nothing to see here\") if '!' in mission : print ( \"This isn't a full word!\" ) else : print ( \"Nothing to see here\" ) This isn't a full word! 2.2.1.2.2 pass \u00b6 There is a special do nothing word: pass that skips over some arm of a conditional, e.g. if 'data' in mission: print(\"Congrats, you're working with data, it will be grand!\") else: pass if 'data' in mission : print ( \"Congrats, you're working with data, it will be grand!\" ) else : pass Congrats, you're working with data, it will be grand! The use of pass here is very important. While you can actually skip the else and pass statements and the code will behave identically, using them is an important signal that you intended for the negative case to do nothing. When you are writing code, you should start thinking about reading code and how others will read your code. In short, when you have one side of an if statement that has no code use an else and a pass to be a good citizen. Remember, the person you will collaborate the most about your code is yourself in 3-6 months. Love yourself, use pass . Note : what have you noticed in this session about quotes? What is the difference between ' and \" ? Another simple example: if True is False: print(\"I'm so confused\") else: print(\"Everything is right with the world\") if True is False : print ( \"I'm so confused\" ) else : print ( \"Everything is right with the world\" ) Everything is right with the world 2.2.1.2.3 if , elif , and else \u00b6 It is always good practice to handle all cases explicity. Conditional fall through is a common source of bugs. Sometimes we wish to test multiple conditions. Use if , elif , and else . my_favorite = 'pie' if my_favorite is 'cake': print(\"He likes cake! I'll start making a double chocolate velvet cake right now!\") elif my_favorite is 'pie': print(\"He likes pie! I'll start making a cherry pie right now!\") else: print(\"He likes \" + my_favorite + \". I don't know how to make that.\") my_favorite = 'pie' if my_favorite is 'cake' : print ( \"He likes cake! I'll start making a double chocolate velvet cake right now!\" ) elif my_favorite is 'pie' : print ( \"He likes pie! I'll start making a cherry pie right now!\" ) else : print ( \"He likes \" + my_favorite + \". I don't know how to make that.\" ) He likes pie! I'll start making a cherry pie right now! Note : There is a big difference between the above using elif and this code that uses sequential if s: if my_favorite is 'pie': print(\"He likes pie! I'll start making a double chocolate velvet pie right now!\") if my_favorite is 'pie': print(\"He still likes pie! I'll start making a cherry pie right now!\") else: print(\"He likes \" + my_favorite + \". I don't know how to make that.\") Before you run, the cell, can you describe how these two blocks differ in their outcomes? if my_favorite is 'pie' : print ( \"He likes pie! I'll start making a double chocolate velvet pie right now!\" ) if my_favorite is 'pie' : print ( \"He still likes pie! I'll start making a cherry pie right now!\" ) else : print ( \"He likes \" + my_favorite + \". I don't know how to make that.\" ) He likes pie! I'll start making a double chocolate velvet pie right now! He still likes pie! I'll start making a cherry pie right now! 2.2.1.2.4 and , or and not \u00b6 Conditionals can take and and or and not . E.g. my_favorite = 'pie' if my_favorite is 'cake' or my_favorite is 'pie': print(my_favorite + \" : I have a recipe for that!\") else: print(\"Ew! Who eats that?\") Side note: We haven't mentioned this up until now, in the following cell, we are composing a new string using + and feeding this into the print statement: my_favorite + \" : I have a recipe for that!\" my_favorite = 'pie' if my_favorite is 'cake' or my_favorite is 'pie' : print ( my_favorite + \" : I have a recipe for that!\" ) else : print ( \"Ew! Who eats that?\" ) pie : I have a recipe for that! Exercise 3.2: Writing conditionals \u00b6 Write a series of two if statements, that both evaluate as true and print something Write an if followed by an elif statement, where only one evaluates as true and prints something # Cell for exercise 4 2.2.2 For \u00b6 For loops are the standard loop, though while is also common. For has the general form: for items in list: do stuff 2.2.2.1 Iterating through objects \u00b6 For loops and collections like tuples, lists and dictionaries are natural friends. The loop is iterating through an object we call an iterable . tuples, lists, and dictionaries, are all iterables mission for item in mission: print(item) mission [\"let's\", 'explore', 'some', 'data', '!'] for item in mission : print ( item ) let's explore some data ! Note that after the for loop has ended, the item variable remains defined and contains the last value of the list that was iteratred over. item '!' You can combine loops and conditionals: for item in mission: if item.endswith('!'): print(item + \" doesn't look like a whole word!\") else: print(item + \" is a word in a sentence!\") for item in mission : if item . endswith ( '!' ): print ( item + \" doesn't look like a whole word!\" ) else : print ( item + \" is a word in a sentence!\" ) let's is a word in a sentence! explore is a word in a sentence! some is a word in a sentence! data is a word in a sentence! ! doesn't look like a whole word! Dictionaries can use the keys method for iterating. my_dict.keys() for key in my_dict.keys(): if len(key) > 4: print(my_dict[key]) my_dict . keys () dict_keys(['pickles', 'list']) for key in my_dict . keys (): if len ( key ) > 4 : print ( my_dict [ key ]) A small cucumber preserved in vinegar or brine. Strings are basically a list. Therefore, you can use a for loop to iteratre over the characters in a string. Note that c is a typical variable name for characters in a string. Generally, one letter variable names are not a good thing. my_string = \"caffeine\" for c in my_string: print(c) my_string = \"caffeine\" for c in my_string : print ( c ) c a f f e i n e 2.2.2.2 range() \u00b6 Manually constructing a list of sequential numbers is a total pain. A total pain. So Python has a function called range that simplifies the creation of lists that contain a sequence. Let's see it in action! Note that if we want a sequence from 0 to 2, inclusive, we call the range function with a argument of 3 . This is like the upper bound in slicing - it is always 1 plus the maximum value you want in the list. range(3) range ( 3 ) range(0, 3) Wait up, hoss. That result doesn't look like a list! True. However, it acts identically to a list, but works a little different under the hood to save memory. The equivalent hand made list would look like this: [0, 1, 2] [ 0 , 1 , 2 ] [0, 1, 2] 2.2.2.2.1 list , type cast function \u00b6 We can convert a range to a list by using the list type cast function . list(range(3)) list ( range ( 3 )) [0, 1, 2] Notice that Python (in the newest versions, e.g. 3+) has an object type that is a range. This saves memory and speeds up calculations vs. an explicit representation of a range as a list - but it can be automagically converted to a list on the fly by Python. To show the contents as a list we can use the type case like with the tuple above. Sometimes, in older Python docs, you will see xrange . This used the range object back in Python 2 and range returned an actual list. Beware of this! list ( range ( 3 )) [0, 1, 2] Remember earlier with slicing, the syntax :3 meant [0, 1, 2] ? Well, the same upper bound philosophy applies here. xs = [0, 1, 2] for x in xs[0:1]: if x < 2: print(x) else: pass xs = [ 0 , 1 , 2 ] for x in xs [ 0 : 1 ]: if x < 2 : print ( x ) else : pass 0 Let's use range to acccess our list, mission using list element indexing. for index in range(5): item = mission[index] if item.endswith('!'): print(item + \" doesn't look like a whole word!\") else: print(item + \" is a word in a sentence!\") for index in range ( 5 ): item = mission [ index ] if item . endswith ( '!' ): print ( item + \" doesn't look like a whole word!\" ) else : print ( item + \" is a word in a sentence!\" ) let's is a word in a sentence! explore is a word in a sentence! some is a word in a sentence! data is a word in a sentence! ! doesn't look like a whole word! This would probably be better written as below. Why is it better to use to use the len() function than hard code the length of the list? for index in range(len(mission)): item = mission[index] if item.endswith('!'): print(item + \" doesn't look like a whole word!\") else: print(item + \" is a word in a sentence!\") for index in range ( len ( mission )): item = mission [ index ] if item . endswith ( '!' ): print ( item + \" doesn't look like a whole word!\" ) else : print ( item + \" is a word in a sentence!\" ) let's is a word in a sentence! explore is a word in a sentence! some is a word in a sentence! data is a word in a sentence! ! doesn't look like a whole word! But in all, it isn't very Pythonesque to use indexes like that (unless you have another reason in the loop) and you would opt instead for the instructor in instructors form. More often, you are doing something with the numbers that requires them to be integers, e.g. math. sum = 0 for i in range ( 10 ): sum += i print ( sum ) 45 Before we leave the topic of range() , let's take a quick look at the documentation for it here . Notice, it has another calling semantic than the one have have been using. We have been using this version: range(stop) Where the list will end at stop minus 1. There is another way the range function can be called which is to give it an inclusive start and an exclusive stop : range(start, stop) This returns a list of number that go from start to stop minus 1. Let's look at a quick example: range(1, 9) range ( 1 , 9 ) range(1, 9) 2.2.2.3 Nested for loops \u00b6 You can put a for loop inside another for loop. This is called nesting . Think of it like the Matryoshka dolls . The example below has a nested loop that counts to four each time the outer loop counts up one. The print function shows the value of the outside loop iterator i and the inside loop iterator j and the product of the two values. Notice how the inside loop runs through 1 to 3 for each value of the outside loop. We use some string formatting for the print statement. These are called f-strings because there is an f before the string. Don't worry too much about the print function statement here as it isn't the point of this example. Advanced topic : for more on formatting strings, see here . for i in range(1, 4): for j in range(1, 4): print(f'{i} * {j} = {i * j}') for i in range ( 1 , 4 ): for j in range ( 1 , 4 ): print ( f ' { i } * { j } = { i * j } ' ) 1 * 1 = 1 1 * 2 = 2 1 * 3 = 3 2 * 1 = 2 2 * 2 = 4 2 * 3 = 6 3 * 1 = 3 3 * 2 = 6 3 * 3 = 9 2.2.2.4 Exiting for loops \u00b6 You can exit a for loop if a condition is met. We'll explore this with reserved words break and continue 2.2.2.4.1 break \u00b6 Sometimes, in a for loop, you experience a condition where you want to terminate any further iterations of the loop. The reserved word break will completely exit a for loop. In this example, we exit the for loop when the iteration variable i is equal to the integer 4. for i in range(10): if i == 4: break i for i in range ( 10 ): if i == 4 : break i 4 2.2.2.4 continue \u00b6 Sometimes, in a for loop, you want to skip certain elements. The continue statement will effectively skip any further statements for that element in a list. Below, we sum the numbers from 0 to 9 and skip the value 5 . sum = 0 for i in range(10): if i == 5: continue else: print(i) sum += i print(\"sum is \", sum) for i in range ( 6 ): if i == 3 : continue else : print ( i ) 0 1 2 4 5 2.2.3 while \u00b6 In contrast to a for loop, a while loop continues to execute while the initiating condition continues to evaluate as True. a = 0 while a < 10 : a += 5 print ( \"hello!\" ) a hello! hello! 10 You can also use break and continue in while loops while True : print ( \"hello!\" ) break hello! Question 2: While Loops \u00b6 What happens in this cell? a = 0 while a < 10: if a == 5: continue a += 5 print(\"hello!\") # a = 0 # while a < 10: # if a == 5: # continue # a += 5 # print(\"hello!\") # a 2.3 The Zen of Python \u00b6 Finally, let's use end with a philosophy of Python. This is a fun Easter Egg , to see it, import this : import this The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those! 2.4 References \u00b6 Some links to references from content in this notebook are consolidated here for easy access. Enjoy! Using equations in Markdown in Jupyter notebooks How numbers are represented in a computer Grace Hopper and her photo of a bug in her notebook Programmer culture touchpoint: the word grok Converting code from one programming language to another is called Porting slices and ranges in Python are known as half-open intervals Python documentation for lists Negative list indices in Python Python documentation for dictionaries Python documentation for the range function Third party documentation for if statements Third party documentation for for loops Third party documentation for functions The correct name for the \"Russian Nesting Doll\" is a \" Matryoshka doll \" Formatting strings to include values of variables Zen of Python Easter Egg","title":"Data Structures and Flow Control"},{"location":"S2_Data_Structures_and_Flow/#technology-fundamentals-course-1-session-2-lists-dictionaries-and-flow-control","text":"Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assistants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu In this session, we will review basic variables and introduce lists and dictionaries as new variable types, or data structures. We will close with seeing conditional execution and functions. Hang on for the ride! Normally, a notebook begins with import statements that import packages or libraries that do a lot of heavy lifting for us. We'll get to that later.","title":"Technology Fundamentals Course 1, Session 2: Lists, Dictionaries, and Flow Control"},{"location":"S2_Data_Structures_and_Flow/#20-a-quick-review-from-last-session","text":"Recall, we discussed variables and comments .","title":"2.0 A quick review from last session"},{"location":"S2_Data_Structures_and_Flow/#201-a-quick-review-of-variables","text":"Variables are human names we give data objects in our code. Variables in Python should be named using appropriately descriptions of their purpose. By convention, most variable names are lower case and may optionally contain the underscore character (' _ '). So far, you've only seen examples of functions and variables in Python, but eventually you will encounter all the types of python objects in this table! Type Naming Convention Examples Function Use a lowercase word or words. Separate words by underscores to improve readability. function, my_function Variable Use a lowercase single letter, word, or words. Separate words with underscores to improve readability. x, var, my_variable Class Start each word with a capital letter. Do not separate words with underscores. This style is called camel case. Model, MyClass Method Use a lowercase word or words. Separate words with underscores to improve readability. class_method, method Constant Use an uppercase single letter, word or words. Separate words with underscores to improve readability. CONSTANT, MY_CONSTANT, MY_LONG_CONSTANT Module Use a short, lowercase word or words. Separate words with underscores to improve readability. module.py, my_module.py Package Use a short, lowercase word or words. Do not separate words with underscores. package, mypackage Some names you might want to use are off-limits because they are reserved words , meaning they are words in Python that have special meaning. Examples of reserved words that you should not use as variable names are in the table below. The ones in bold are ones we will use in the session today. Remember, these can't be used as variable names! import True False if else def in not and or None from continue pass class await raise del lambda return elif with as finally nonlocal while assert except global yield break try global Let's see an example of a decimal point containing number, known to computers as a floating point number. Let's use $\\pi$ as the number. (Pro tip: you can write equations in Markdown. See this reference .) pickles = 3.14 print(pickles) pickles = 3.14 print ( pickles ) type ( pickles ) 3.14 float Cool. We defined a variable named pickles containing a poor estimate of $\\pi$. Now every place the word pickles appears, it will have the value 3.14 , at least until we change it.","title":"2.0.1 A quick review of variables"},{"location":"S2_Data_Structures_and_Flow/#exercise-1-picking-variable-names","text":"Is pickles a good variable name for the value $\\pi$? If not, what would be a better name? Is it in the reserved word list above? Use the code cell below to create a new variable with your preferred name in it. # Cell for Exercise 1 Variables in Python have different data types. The simple ones, we've already discussed such as an integer or int , a string or str , a decimal point containing number called a floating point number. Floating point numbers are special and are stored in a computer's memory using internal representations . One important thing to know about floating point numbers is that to a computer, the statement below may not always be true. For now, just think about floating point numbers as approximately representing the decimal number you see. 10.0 * 0.1 = 1.0 Variables can change their value in Python so we can change the value of pickles to something else. For example, a definition of what pickles are. pickles = \"A cucumber preserved in vinegar or brine.\" print(pickles) pickles = \"A cucumber preserved in vinegar or brine.\" print ( pickles ) A cucumber preserved in vinegar or brine.","title":"Exercise 1: Picking variable names"},{"location":"S2_Data_Structures_and_Flow/#202-a-quick-review-of-comments","text":"Just like we should use good naming conventions for variables so they make sense, we should have good comments to help readers follow our code. Good comments can turn a speck of coding gold into a valuable nugget of knowledge. Bad or wrong comments are bugs. If you want to learn more about why we call computer coding problems bugs, read about Grace Hopper and see her photo of a bug in her notebook . To comment out some text, use the # or hashtag or sometimes called the pound character. print(pickles) print ( pickles ) A cucumber preserved in vinegar or brine. # This is an example comment. Notice it is in english and full sentences. That is good style. # This is an example comment. Notice it is in english and full sentences. That is good style.","title":"2.0.2 A quick review of comments"},{"location":"S2_Data_Structures_and_Flow/#21-data-structures-variables-that-organize-data","text":"Many variables you will encounter are more than the above simple data types (integers, strings, floating point numbers). In fact, they may contain a few to many pieces of data rolled into one thing or data structure . Next, we'll discuss two important data structures : lists and dictionaries . There are many advanced data structures in Python that behave like lists and dictionaries , in different settings but their concepts are often similar. Thus, understanding them here will help us understand more advanced concepts. Let's start with the venerable list .","title":"2.1 Data Structures: Variables that organize data"},{"location":"S2_Data_Structures_and_Flow/#211-lists","text":"For more than just shopping. A list is an ordered collection of data. By collection , we mean that it contains multiple data. By ordered , we mean that the data are arranged so that they appear first to last like words in a sentence. The order is important for the meaning of the sentence. Let's begin by creating a list variable named my_list that contains three pieces of information. my_list = ['I', 'like', 'pie'] my_list my_list = [ 'I' , 'like' , 'pie' ] my_list ['I', 'like', 'pie'] Now the value of the variable my_list points to a list of three strings. The use of [ , ] , and , are used to denote the begining, end and separator of the list. Like a sentence, this list of words is ordered. I like cake. Notice, we didn't use a print() on the variable. The last variable expression in a cell is shown in the notebook by default. The elements in a list have indices. That is, to access an element in the list, you can refer to it by its index. Think of a list like a very simple table. index value 0 'I' 1 'like' 2 'pie' People might start counting at 1 , but computers start counting at 0 . The first element in a list has the index 0 , the last element in a list has the index of the length of the list minus 1. For our list which is three elements long, the first index will be 0 and the last index will be 2 . Some programming languages also start counting at 1. These include Fortran , Matlab , and the abominable R . This is unfortunate. Be extra careful if you try to port code from those languages to Python. If you want to access a list element you can use its index. The index value is designated by appending [ and ] to the variable name with the index between. Examples are always easier than words: my_list[0] Given what you know... What will this output? my_list [ 0 ] 'I' If you try to use an index that is larger than the length of the list minus 1, you will get an error. Try it! The different colors means you made a boo boo! my_list[3] # my_list[3] The last line of the error report is the most informative for us now. It should read: IndexError: list index out of range It is trying to tell you that an IndexError occured because the the index you tried to access is out of the range of 0 to 2 , inclusive. Translation: stay in your lane, programmer! In addition to being able to recall or access a value of a list by the element's index in the list, we can change the value of the element. We will also use the [ <index> ] notation but like when we set the value of a variable, we will use the = character. Let's do it! my_list[2] = 'cake' my_list my_list [ 2 ] = 'cake' my_list ['I', 'like', 'cake']","title":"2.1.1 Lists"},{"location":"S2_Data_Structures_and_Flow/#2111-append-and-other-list-functions","text":"Finally, let's talk about empty lists and appending items to a list. An empty list is created by setting a variable to [] . This means the variable's data type is a list, but it contains no elements. a_new_list = [] a_new_list = [] We can append items to a list by using the .append() function . We'll talk more about functions later, but when this function or method is used on a variable whose data type is list, it will append the value in between the () to the end of the list. a_new_list.append(\"1st element\") print(a_new_list) a_new_list.append(\"2nd element\") print(a_new_list) a_new_list . append ( \"1st element\" ) print ( a_new_list ) a_new_list . append ( \"2nd element\" ) print ( a_new_list ) ['1st element'] ['1st element', '2nd element'] Finally, in addition to the .append() function , there are a lot of functions (or methods ) available for lists . See a complete list of them here . One more we'll touch on quickly is the len() function . It returns the length of a list . Here is an example: len(a_new_list) Before you run this cell. What do you think it will output? len ( a_new_list ) 2","title":"2.1.1.1 Append, and other list functions"},{"location":"S2_Data_Structures_and_Flow/#2112-slicing","text":"Sometimes you want to make a list from consecutive elements of a list. This is called slicing where you cut up a list and get just the consecutive values you want. Slicing is done with the : character in the index area between the [ and the ] . Here is an example to pull just the last two items out of my_list . We use the first index, then a : , then the last index plus 1. Like this: my_list[1:3] You might be asking... WHY +1?? This is because with slices or ranges in Python are known as half-open intervals where the lower bound is inclusive and the upper bound is the non-inclusive limit. TL;DR : add one to the upper end of a slice or a range in Python. my_list[1:3] my_list [ 1 : 3 ] ['like', 'cake'] Just for giggles, try it with my_list[1:2] . You will see the range of the slice is only 1 . That's because 2 - 1 = 1 . my_list[1:2] my_list [ 1 : 2 ] ['like'] You don't even need to use the upper bound if all you really mean is the end of the list . For that, you can leave the index empty. Hot dog! Let's see an example... my_list[1:] my_list [ 1 :] ['like', 'cake'] But wait, there's more! You can set multiple elements of a list at the same time by slicing . Dig this! my_list[1:] = ['love', 'puppies'] my_list my_list [ 1 :] = [ 'love' , 'puppies' ] my_list ['I', 'love', 'puppies'] And who doesn't love puppies? Recap... Lists are ordered collections of information that you can recognize by their use of [ and ] . To access or address elements in the list, you can use indices . They start at 0 in Python. The last element of a list has the index of the length of the list minus 1. When slicing a list, use two indices separated by : . If you leave one off, it means everying up to or beyond that element.","title":"2.1.1.2 Slicing"},{"location":"S2_Data_Structures_and_Flow/#question-1-slicing","text":"Will either one of the following codes will return an error? my_list[:len(my_list)] my_list[len(my_list)]","title":"Question 1: Slicing"},{"location":"S2_Data_Structures_and_Flow/#2113-negative-indices","text":"A brief note for folks who want to learn more. You can use negative index numbers to access from the end of the list towards the front. That is, a negative 1 ( -1 ) is the last element in the list. A negative 2 ( -2 ) is the second to last. The same rules apply for slicing with the : character. A quick demo example... Let's get last element in the list using negative indexing. That will be -1 . Here goes... my_list[-1] my_list [ - 1 ] 'puppies' We can also use slicing with negative indices . Remember, that slicing works the same way with negative indices , i.e. the the upper bound is non-inclusive. Here is an example using upper and lower bounds. Were you surprised by the results? my_list[-3:-1] my_list [ - 3 : - 1 ] ['I', 'love']","title":"2.1.1.3 Negative indices?!?!"},{"location":"S2_Data_Structures_and_Flow/#2114-lists-can-contain-most-anything","text":"So far, we've seen a list containing some strings. That made our sentence analogy about the ordering of objects or strings in a list make sense. But lists can contain a mixture of data types and data structures . As a quick example, let's make a list that contains a integer, a string and a floating point number. This will be a four element list. zoo = [ 42, 'Elephants', 'ate', 3.14 ] zoo = [ 42 , 'Elephants' , 'ate' , 3.14 ] zoo [42, 'Elephants', 'ate', 3.14] We can even make a list of lists. META! list_of_lists = [ [ 42, 43, 44, 44 ], [ 'a', 'b', 'c', 'd' ] ] list_of_lists[0] list_of_lists[0][1] a_list = list_of_lists[0] a_list[1] list_of_lists = [ [ 42 , 43 , 44 , 45 ], [ 'a' , 'b' , 'c' , 'd' ] ] The important thing here is to have the right number of [ and ] to embed a list in a list separated between , . Yeah, this is super meta. list_of_lists [ 0 ] [42, 43, 44, 45] list_of_lists [ 0 ][ 1 ] 43 list_of_lists [ 1 ][ 1 ] 'b' a_list = list_of_lists [ 0 ] a_list [ 1 ] 43","title":"2.1.1.4 Lists can contain most anything"},{"location":"S2_Data_Structures_and_Flow/#exercise-2-accessing-lists-of-lists","text":"Make sure you understand why the above works. Take a minute and play with the first and last indices. access 45 in list_of_lists access d in list_of_lists # Cell for exercise 3","title":"Exercise 2: accessing lists of lists"},{"location":"S2_Data_Structures_and_Flow/#212-dictionaries","text":"For more than just reading on a Friday night. Sometimes we want to access elements in a data structure by something other than an index. Consider a dictionary on the internet . You look up the word on a seach engine and go to the web page of the entry for the word. Python has a similar concept where the index for an element in a collection is not a number, as it is in a list above, but a key that, may be a string like 'pickles' .","title":"2.1.2 Dictionaries"},{"location":"S2_Data_Structures_and_Flow/#2121-key-value-pairs","text":"In the case of a Python dictionary , we call the definition a value and the way we look up the definition is a key . This results in key and value pairs. One key maps to one value . In our analogy of a internet dictionary, this is the same as the word to definition pairs. Let's create a simple dictionary with a definition we have alread seen in the tutorials... Pickles. my_dict = {} # create an empty dictionary my_dict['pickles'] = \"A cucumber preserved in vinegar or brine.\" my_dict my_dict = {} # create an empty dictionary my_dict [ 'pickles' ] = \"A cucumber preserved in vinegar or brine.\" my_dict {'pickles': 'A cucumber preserved in vinegar or brine.'} Notice the use of the # comment. Nice. Unlike the list, for dictionaries, some of their operations use the { and } brackets. Using a key to access or retrieve a value from the dictionary still uses the [ and ] brackets. Stick with it, for realz. Case matters in a dictionary because the key is a data type itself. my_dict['Pickles'] returns an error ( KeyError: 'Pickles' ) and the following does not my_dict['pickles'] # my_dict['Pickles'] This is a lot like the IndexError from the list case. Moving on... You can change the value of a dictionary key by reassigning it. For example below, we use the same key 'pickles' to change the definition of the word in our dictionary. Notice we still use the [ and ] brackets but we use the key instead of the index like we did with lists. The change we made in the string is that the cucumbers in pickles are usually small. my_dict['pickles'] = \"A small cucumber preserved in vinegar or brine.\" my_dict [ 'pickles' ] = \"A small cucumber preserved in vinegar or brine.\" my_dict {'pickles': 'A small cucumber preserved in vinegar or brine.'} Let's add two key and value pairs to our dictionary which are in the table below: key value list An ordered collection. dictionary A collection with unique indices . Something like: my_dict['list'] = \"An ordered collection\" print(my_dict) Is probably where we want to begin. my_dict [ 'list' ] = \"An ordered collection\" my_dict {'list': 'An ordered collection', 'pickles': 'A small cucumber preserved in vinegar or brine.'} # my_dict[0] Finally, like the list's .append() function , there are a lot of functions (or methods ) and attributes available for dictionaries. See a complete list of them here . (we will cover the difference between a method and an attribute more concretely later on...)","title":"2.1.2.1 Key, value pairs"},{"location":"S2_Data_Structures_and_Flow/#22-flow-control-if-this-then-that","text":"Flow control is a fancy phrase meaning to execute some code statements under certain conditions. The simplist case, is an if statement (figure right below): If a variable is True then do something. If it is False then do something else, or do nothing at all. Flow control figure In the above figure: the selection refers to if statements Iteration refers to loops or repeating some statements over and over while changing a small number of variable values Sequence roughly corresponds to blocks of statements in functions . Flow control refers how to programs do loops, conditional execution, and order of functional operations. Let's start with conditionals, or the venerable if statement.","title":"2.2 Flow control: If this, then that..."},{"location":"S2_Data_Structures_and_Flow/#221-if","text":"Let's write a simple if statement if 5 == 5.0 : print ( True ) True Mathematically, the float 5.0 and integer 5, do evaluate to be the same! What do we notice about the second line? That's right, there's an indentation. Colab and most IDEs will automatically indent for you. Let's practice that below.","title":"2.2.1 If"},{"location":"S2_Data_Structures_and_Flow/#2211-indentations-in-python","text":"Exercise 3.1: Writing and if statement practice writing a simple if statement, notice the automatic indentation # cell for exercise 3.1","title":"2.2.1.1 Indentations in python"},{"location":"S2_Data_Structures_and_Flow/#2212-conditional-fall-through-and-reserved-words","text":"If statements can be use to execute some lines or block of code if a particular condition is satisfied. E.g. Let's print something based on the entries in the list. mission = [\"let's\", \"explore\", \"some\", \"data\", \"!\"] if '!' in mission: print('#notaword') mission = [ \"let's\" , \"explore\" , \"some\" , \"data\" , \"!\" ] if '!' in mission : print ( '#notaword' ) #notaword","title":"2.2.1.2 Conditional fall through and reserved words"},{"location":"S2_Data_Structures_and_Flow/#22121-in","text":"Notice the use the special reserved word in . This returns the value True when a value appears in a list and False when it does not. Notice how it reads like English. Readability is a key feature of Python and is part of the language design philosophy. Usually we want conditional logic on both sides of a binary condition, e.g. some action when True and some when False if '!' in mission: print(\"This isn't a full word!\") else: print(\"Nothing to see here\") if '!' in mission : print ( \"This isn't a full word!\" ) else : print ( \"Nothing to see here\" ) This isn't a full word!","title":"2.2.1.2.1 in"},{"location":"S2_Data_Structures_and_Flow/#22122-pass","text":"There is a special do nothing word: pass that skips over some arm of a conditional, e.g. if 'data' in mission: print(\"Congrats, you're working with data, it will be grand!\") else: pass if 'data' in mission : print ( \"Congrats, you're working with data, it will be grand!\" ) else : pass Congrats, you're working with data, it will be grand! The use of pass here is very important. While you can actually skip the else and pass statements and the code will behave identically, using them is an important signal that you intended for the negative case to do nothing. When you are writing code, you should start thinking about reading code and how others will read your code. In short, when you have one side of an if statement that has no code use an else and a pass to be a good citizen. Remember, the person you will collaborate the most about your code is yourself in 3-6 months. Love yourself, use pass . Note : what have you noticed in this session about quotes? What is the difference between ' and \" ? Another simple example: if True is False: print(\"I'm so confused\") else: print(\"Everything is right with the world\") if True is False : print ( \"I'm so confused\" ) else : print ( \"Everything is right with the world\" ) Everything is right with the world","title":"2.2.1.2.2 pass"},{"location":"S2_Data_Structures_and_Flow/#22123-if-elif-and-else","text":"It is always good practice to handle all cases explicity. Conditional fall through is a common source of bugs. Sometimes we wish to test multiple conditions. Use if , elif , and else . my_favorite = 'pie' if my_favorite is 'cake': print(\"He likes cake! I'll start making a double chocolate velvet cake right now!\") elif my_favorite is 'pie': print(\"He likes pie! I'll start making a cherry pie right now!\") else: print(\"He likes \" + my_favorite + \". I don't know how to make that.\") my_favorite = 'pie' if my_favorite is 'cake' : print ( \"He likes cake! I'll start making a double chocolate velvet cake right now!\" ) elif my_favorite is 'pie' : print ( \"He likes pie! I'll start making a cherry pie right now!\" ) else : print ( \"He likes \" + my_favorite + \". I don't know how to make that.\" ) He likes pie! I'll start making a cherry pie right now! Note : There is a big difference between the above using elif and this code that uses sequential if s: if my_favorite is 'pie': print(\"He likes pie! I'll start making a double chocolate velvet pie right now!\") if my_favorite is 'pie': print(\"He still likes pie! I'll start making a cherry pie right now!\") else: print(\"He likes \" + my_favorite + \". I don't know how to make that.\") Before you run, the cell, can you describe how these two blocks differ in their outcomes? if my_favorite is 'pie' : print ( \"He likes pie! I'll start making a double chocolate velvet pie right now!\" ) if my_favorite is 'pie' : print ( \"He still likes pie! I'll start making a cherry pie right now!\" ) else : print ( \"He likes \" + my_favorite + \". I don't know how to make that.\" ) He likes pie! I'll start making a double chocolate velvet pie right now! He still likes pie! I'll start making a cherry pie right now!","title":"2.2.1.2.3 if, elif, and else"},{"location":"S2_Data_Structures_and_Flow/#22124-and-or-and-not","text":"Conditionals can take and and or and not . E.g. my_favorite = 'pie' if my_favorite is 'cake' or my_favorite is 'pie': print(my_favorite + \" : I have a recipe for that!\") else: print(\"Ew! Who eats that?\") Side note: We haven't mentioned this up until now, in the following cell, we are composing a new string using + and feeding this into the print statement: my_favorite + \" : I have a recipe for that!\" my_favorite = 'pie' if my_favorite is 'cake' or my_favorite is 'pie' : print ( my_favorite + \" : I have a recipe for that!\" ) else : print ( \"Ew! Who eats that?\" ) pie : I have a recipe for that!","title":"2.2.1.2.4 and, or and not"},{"location":"S2_Data_Structures_and_Flow/#exercise-32-writing-conditionals","text":"Write a series of two if statements, that both evaluate as true and print something Write an if followed by an elif statement, where only one evaluates as true and prints something # Cell for exercise 4","title":"Exercise 3.2: Writing conditionals"},{"location":"S2_Data_Structures_and_Flow/#222-for","text":"For loops are the standard loop, though while is also common. For has the general form: for items in list: do stuff","title":"2.2.2 For"},{"location":"S2_Data_Structures_and_Flow/#2221-iterating-through-objects","text":"For loops and collections like tuples, lists and dictionaries are natural friends. The loop is iterating through an object we call an iterable . tuples, lists, and dictionaries, are all iterables mission for item in mission: print(item) mission [\"let's\", 'explore', 'some', 'data', '!'] for item in mission : print ( item ) let's explore some data ! Note that after the for loop has ended, the item variable remains defined and contains the last value of the list that was iteratred over. item '!' You can combine loops and conditionals: for item in mission: if item.endswith('!'): print(item + \" doesn't look like a whole word!\") else: print(item + \" is a word in a sentence!\") for item in mission : if item . endswith ( '!' ): print ( item + \" doesn't look like a whole word!\" ) else : print ( item + \" is a word in a sentence!\" ) let's is a word in a sentence! explore is a word in a sentence! some is a word in a sentence! data is a word in a sentence! ! doesn't look like a whole word! Dictionaries can use the keys method for iterating. my_dict.keys() for key in my_dict.keys(): if len(key) > 4: print(my_dict[key]) my_dict . keys () dict_keys(['pickles', 'list']) for key in my_dict . keys (): if len ( key ) > 4 : print ( my_dict [ key ]) A small cucumber preserved in vinegar or brine. Strings are basically a list. Therefore, you can use a for loop to iteratre over the characters in a string. Note that c is a typical variable name for characters in a string. Generally, one letter variable names are not a good thing. my_string = \"caffeine\" for c in my_string: print(c) my_string = \"caffeine\" for c in my_string : print ( c ) c a f f e i n e","title":"2.2.2.1 Iterating through objects"},{"location":"S2_Data_Structures_and_Flow/#2222-range","text":"Manually constructing a list of sequential numbers is a total pain. A total pain. So Python has a function called range that simplifies the creation of lists that contain a sequence. Let's see it in action! Note that if we want a sequence from 0 to 2, inclusive, we call the range function with a argument of 3 . This is like the upper bound in slicing - it is always 1 plus the maximum value you want in the list. range(3) range ( 3 ) range(0, 3) Wait up, hoss. That result doesn't look like a list! True. However, it acts identically to a list, but works a little different under the hood to save memory. The equivalent hand made list would look like this: [0, 1, 2] [ 0 , 1 , 2 ] [0, 1, 2]","title":"2.2.2.2 range()"},{"location":"S2_Data_Structures_and_Flow/#22221-list-type-cast-function","text":"We can convert a range to a list by using the list type cast function . list(range(3)) list ( range ( 3 )) [0, 1, 2] Notice that Python (in the newest versions, e.g. 3+) has an object type that is a range. This saves memory and speeds up calculations vs. an explicit representation of a range as a list - but it can be automagically converted to a list on the fly by Python. To show the contents as a list we can use the type case like with the tuple above. Sometimes, in older Python docs, you will see xrange . This used the range object back in Python 2 and range returned an actual list. Beware of this! list ( range ( 3 )) [0, 1, 2] Remember earlier with slicing, the syntax :3 meant [0, 1, 2] ? Well, the same upper bound philosophy applies here. xs = [0, 1, 2] for x in xs[0:1]: if x < 2: print(x) else: pass xs = [ 0 , 1 , 2 ] for x in xs [ 0 : 1 ]: if x < 2 : print ( x ) else : pass 0 Let's use range to acccess our list, mission using list element indexing. for index in range(5): item = mission[index] if item.endswith('!'): print(item + \" doesn't look like a whole word!\") else: print(item + \" is a word in a sentence!\") for index in range ( 5 ): item = mission [ index ] if item . endswith ( '!' ): print ( item + \" doesn't look like a whole word!\" ) else : print ( item + \" is a word in a sentence!\" ) let's is a word in a sentence! explore is a word in a sentence! some is a word in a sentence! data is a word in a sentence! ! doesn't look like a whole word! This would probably be better written as below. Why is it better to use to use the len() function than hard code the length of the list? for index in range(len(mission)): item = mission[index] if item.endswith('!'): print(item + \" doesn't look like a whole word!\") else: print(item + \" is a word in a sentence!\") for index in range ( len ( mission )): item = mission [ index ] if item . endswith ( '!' ): print ( item + \" doesn't look like a whole word!\" ) else : print ( item + \" is a word in a sentence!\" ) let's is a word in a sentence! explore is a word in a sentence! some is a word in a sentence! data is a word in a sentence! ! doesn't look like a whole word! But in all, it isn't very Pythonesque to use indexes like that (unless you have another reason in the loop) and you would opt instead for the instructor in instructors form. More often, you are doing something with the numbers that requires them to be integers, e.g. math. sum = 0 for i in range ( 10 ): sum += i print ( sum ) 45 Before we leave the topic of range() , let's take a quick look at the documentation for it here . Notice, it has another calling semantic than the one have have been using. We have been using this version: range(stop) Where the list will end at stop minus 1. There is another way the range function can be called which is to give it an inclusive start and an exclusive stop : range(start, stop) This returns a list of number that go from start to stop minus 1. Let's look at a quick example: range(1, 9) range ( 1 , 9 ) range(1, 9)","title":"2.2.2.2.1 list, type cast function"},{"location":"S2_Data_Structures_and_Flow/#2223-nested-for-loops","text":"You can put a for loop inside another for loop. This is called nesting . Think of it like the Matryoshka dolls . The example below has a nested loop that counts to four each time the outer loop counts up one. The print function shows the value of the outside loop iterator i and the inside loop iterator j and the product of the two values. Notice how the inside loop runs through 1 to 3 for each value of the outside loop. We use some string formatting for the print statement. These are called f-strings because there is an f before the string. Don't worry too much about the print function statement here as it isn't the point of this example. Advanced topic : for more on formatting strings, see here . for i in range(1, 4): for j in range(1, 4): print(f'{i} * {j} = {i * j}') for i in range ( 1 , 4 ): for j in range ( 1 , 4 ): print ( f ' { i } * { j } = { i * j } ' ) 1 * 1 = 1 1 * 2 = 2 1 * 3 = 3 2 * 1 = 2 2 * 2 = 4 2 * 3 = 6 3 * 1 = 3 3 * 2 = 6 3 * 3 = 9","title":"2.2.2.3 Nested for loops"},{"location":"S2_Data_Structures_and_Flow/#2224-exiting-for-loops","text":"You can exit a for loop if a condition is met. We'll explore this with reserved words break and continue","title":"2.2.2.4 Exiting for loops"},{"location":"S2_Data_Structures_and_Flow/#22241-break","text":"Sometimes, in a for loop, you experience a condition where you want to terminate any further iterations of the loop. The reserved word break will completely exit a for loop. In this example, we exit the for loop when the iteration variable i is equal to the integer 4. for i in range(10): if i == 4: break i for i in range ( 10 ): if i == 4 : break i 4","title":"2.2.2.4.1 break"},{"location":"S2_Data_Structures_and_Flow/#2224-continue","text":"Sometimes, in a for loop, you want to skip certain elements. The continue statement will effectively skip any further statements for that element in a list. Below, we sum the numbers from 0 to 9 and skip the value 5 . sum = 0 for i in range(10): if i == 5: continue else: print(i) sum += i print(\"sum is \", sum) for i in range ( 6 ): if i == 3 : continue else : print ( i ) 0 1 2 4 5","title":"2.2.2.4 continue"},{"location":"S2_Data_Structures_and_Flow/#223-while","text":"In contrast to a for loop, a while loop continues to execute while the initiating condition continues to evaluate as True. a = 0 while a < 10 : a += 5 print ( \"hello!\" ) a hello! hello! 10 You can also use break and continue in while loops while True : print ( \"hello!\" ) break hello!","title":"2.2.3 while"},{"location":"S2_Data_Structures_and_Flow/#question-2-while-loops","text":"What happens in this cell? a = 0 while a < 10: if a == 5: continue a += 5 print(\"hello!\") # a = 0 # while a < 10: # if a == 5: # continue # a += 5 # print(\"hello!\") # a","title":"Question 2: While Loops"},{"location":"S2_Data_Structures_and_Flow/#23-the-zen-of-python","text":"Finally, let's use end with a philosophy of Python. This is a fun Easter Egg , to see it, import this : import this The Zen of Python, by Tim Peters Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!","title":"2.3 The Zen of Python"},{"location":"S2_Data_Structures_and_Flow/#24-references","text":"Some links to references from content in this notebook are consolidated here for easy access. Enjoy! Using equations in Markdown in Jupyter notebooks How numbers are represented in a computer Grace Hopper and her photo of a bug in her notebook Programmer culture touchpoint: the word grok Converting code from one programming language to another is called Porting slices and ranges in Python are known as half-open intervals Python documentation for lists Negative list indices in Python Python documentation for dictionaries Python documentation for the range function Third party documentation for if statements Third party documentation for for loops Third party documentation for functions The correct name for the \"Russian Nesting Doll\" is a \" Matryoshka doll \" Formatting strings to include values of variables Zen of Python Easter Egg","title":"2.4 References"},{"location":"S3_Functions/","text":"Technology Fundamentals Course 1, Session 3: Functions and Pandas Introduction \u00b6 Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assitants Varsha Bang, Harsha Vardhan Contact vbang@uw.edu, harshav@uw.edu Today, we will discuss functions in more depth. We've seen them previously and used them, for example the .append() function for lists, or the even more general print() function. Here, we'll dig into how you can make your own functions to encapsulate code that you will reuse over and over. Then we'll jump into the Pandas package. Packages are collections of related functions. These are the things we import . Pandas is a two dimensional data structure like a spreadsheet in Excel. In fact, we will be importing our first dataset and viewing it, with Pandas! 3.0 Review from Session on Data Structures and Flow Control \u00b6 In our last session, we discussed lists , dictionaries , and flow control . Lists are ordered collections of data that can be used to hold multiple pieces of information while preserving their order. We use [ and ] to access elements by their indices which start with 0 . All things that operate on lists like slices use the concept of an inclusive lower bound and an exclusive upper bound. So, the following gets elements from the list my_list with index values of 0 , 1 , and 2 , but not 3 ! my_list[0:3] What other way is there of writing the same statement using slicing ? Hint, think about leaving out one of the numbers in the slice! Dictionaries are named collections of data that can be used to hold multiple pieces of information as values that are addressed by keys resulting in a key to value data structure. They are accessed with [ and ] but intialized with { and } . E.g. my_dict = { 'cake' : 'Tasty!', 'toenails' : 'Gross!' } my_dict['cake'] Finally, we talked about flow control and using the concept of conditional execution to decide which code statements were executed. Remember this figure? Flow control figure What are the if statments? Where do for loops fit in? 3.1 Functions \u00b6 For loops let you repeat some code for every item in a list. Functions are similar in that they run the same lines of code and, frequently, for new values of some variable (we call these parameters ). They are different in that functions are not limited to looping over items. Functions are a critical part of writing easy to read, reusable code. Create a function like: def function_name (parameters): \"\"\" optional docstring \"\"\" function expressions return [variable] Here is a simple example. It prints a string that was passed in and returns nothing. def print_string(string): \"\"\"This prints out a string passed as the parameter.\"\"\" print(string) return def print_string ( string ): \"\"\"This prints out a string passed as the parameter\"\"\" print ( string ) return To call the function, use: print_string(\"GIX is awesome!\") Note: The function has to be defined before you can call it! print_string ( \"GIX is awesome!\" ) GIX is awesome! 3.1.1 Reserved words: def, return, and yield \u00b6 Notice the highlighted words in our function definition: def and return these are reserved words in python used to define functions. Every function definition requires these reserved words. yield is another reserved word that is similar to return but operates slightly differently. It is beyond the scope of what we are covering in this session. This tutorial from realpython has good information on the topic. # what is return doing in this function? def my_square ( a ): return a ** 2 return is going to output whatever value(s) follow after the keyword return when we call upon our function a = 2 my_square ( a ) 4 I'm going to return two values... def my_square ( a ): return a ** 2 , a and we see how the output updates accordingly my_square ( a ) (4, 2) We can capture these values on the output with... square , new_a = my_square ( a ) print ( square , new_a ) 4 2 3.1.2 Global vs local variables and function parameters \u00b6 In a function, new variables that you create are not saved when the function returns - these are local variables. Variables defined outside of the function can be accessed but not changed - these are global variables. let's define the following function def my_little_func ( a ): b = 10 return a * b my_little_func ( 2 ) 20 if I run the following... # b Let's play with this a little further... ...now let's define b outside the function and call our function with a=5 # what happens here? b = 100 my_little_func ( 5 ) 50 we see that b is still 100, instead of 10 as its defined within the function. This is because b inside of my_little_func is a local variable. it doesn't matter how I define b outside the function because within the function it is set locally. ... Let's do this A LITTLE MORE def my_new_func ( a ): print ( b ) return a * b now if I call on my new function, because b is not defined locally within the function, it takes on the global value. This is typically not happy happy fun fun behavior for us, we want to be explicit about how we define and use our variables (but there are some times when this is appropriate to do) b = 1e4 # side note, what did I do here???? my_new_func ( a ) 10000.0 20000.0 3.1.1.1 Function Parameters \u00b6 Parameters (or arguments) in Python are all passed by reference. This means that if you modify the parameters in the function, they are modified outside of the function. (Enrichment: Exceptions, see below) See the following example: def change_list(my_list): \"\"\"This changes a passed list into this function\"\"\" my_list.append('four'); print('list inside the function: ', my_list) return my_list = [1, 2, 3]; print('list before the function: ', my_list) change_list(my_list); print('list after the function: ', my_list) def change_list ( my_list ): \"\"\"This changes a passed list into this function\"\"\" my_list . append ( 'four' ); print ( 'list inside the function: ' , my_list ) return my_list = [ 1 , 2 , 3 ]; print ( 'list before the function: ' , my_list ) change_list ( my_list ); print ( 'list after the function: ' , my_list ) list before the function: [1, 2, 3] list inside the function: [1, 2, 3, 'four'] list after the function: [1, 2, 3, 'four'] 3.1.1.2 Enrichment: Global, local, and immutables \u00b6 Let's go back to our former example... immutables: integers, float, str, tuples b = \"a string\" b = 10 b = 10.2 b = ( 10 , 2 ) b = [ 10 , 2 ] a = 2 def my_little_func ( a , b ): if type ( b ) == str : b += \"20\" elif ( type ( b ) == int ) or ( type ( b ) == float ): b += 10 elif ( type ( b ) == tuple ): print ( \"AYYY no tuple changes, Dude\" ) pass elif ( type ( b ) == list ): b . append ( 'whoaaaa' ) print ( b ) return print ( b ) my_little_func ( a , b ) print ( b ) [10, 2] [10, 2, 'whoaaaa'] [10, 2, 'whoaaaa'] There is a way to change a global variable within a function with the global keyword. Generally, the use of global variables is not encouraged, instead use parameters. We won't cover the global keyword here but you can explore further on your own if you are interested. b = 10 a = 2 def my_little_func ( a ): global b b += 20 print ( b ) return print ( b ) my_little_func ( a ) print ( b ) 10 30 30 Exercise 1: My first function \u00b6 Write a function that takes one parameter and returns any data structure If you are going to return multiple objects, what data structure that we talked about can be used? Give and example below. # Cell for excerise 1 3.1.3 Parameter types \u00b6 Function calling: positional func(10, 20) keyword func(a=10, b=20) or func(b=20, a=10) Function writing: * default * def func(a=10, b=20) def print_name(first, last='Beckner'): print(f'Your name is {first} {last}') return def print_name ( first , last = 'Beckner' ): print ( \"Your name is {} {} \" . format ( first , last )) return print_name ( last = 'Beckner' , first = 'Wesley' ) Your name is Wesley Beckner Play around with the above function. print_name ( 'Wesley' , last = 'the Technology Fundamentals Instructor' ) Your name is Wesley the Technology Fundamentals Instructor Functions can contain any code that you put anywhere else including: * if ... elif ... else * for ... while * other function calls def print_name_age(first, last, age): print_name(first, last) print('Your age is %d' % (age)) if age > 25 and age < 40: print('You are a millenial!') return def print_name_age ( first , last , age ): print_name ( first , last ) print ( 'Your age is %d ' % ( age )) if age > 25 and age < 40 : print ( 'You are a millenial!' ) return print_name_age(age=29, last='Beckner', first='Wesley') print_name_age ( age = 29 , last = 'Beckner' , first = 'Wesley' ) Your name is Wesley Beckner Your age is 29 You are a millenial! 3.2 The scientific python stack \u00b6 In addition to Python's built-in modules like the math module we explored above, there are also many often-used third-party modules that are core tools for doing data science with Python. Some of the most important ones are: numpy : Numerical Python \u00b6 Numpy is short for \"Numerical Python\", and contains tools for efficient manipulation of arrays of data. If you have used other computational tools like IDL or MatLab, Numpy should feel very familiar. scipy : Scientific Python \u00b6 Scipy is short for \"Scientific Python\", and contains a wide range of functionality for accomplishing common scientific tasks, such as optimization/minimization, numerical integration, interpolation, and much more. We will not look closely at Scipy today, but we will use its functionality later in the course. pandas : Labeled Data Manipulation in Python \u00b6 Pandas is short for \"Panel Data\", and contains tools for doing more advanced manipulation of labeled data in Python, in particular with a columnar data structure called a Data Frame . If you've used the R statistical language (and in particular the so-called \"Hadley Stack\"), much of the functionality in Pandas should feel very familiar. matplotlib : Visualization in Python \u00b6 Matplotlib started out as a Matlab plotting clone in Python, and has grown from there in the 15 years since its creation. It is the most popular data visualization tool currently in the Python data world (though other recent packages are starting to encroach on its monopoly). scikit-learn : Machine Learning in Python \u00b6 Scikit-learn is a machine learning library. It features various classification, regression, and clustering algorithms, including support vector machines, random forests, gradient boosting, k-means, and DBSCAN. The library is designed to interoperate with the Python numerical and scientific libraries NumPy and SciPy. 3.3 Pandas \u00b6 3.3.1 Pandas and Scikit-Learn load_datasets \u00b6 We begin by loading the Panda's package. Packages are collections of functions that share a common utility. We've seen import before. Let's use it to import Pandas and all the richness that pandas has. We'll also use a very useful feature of the scikit-learn toolkit, the load_datasets module. We will do some very rudimentary tasks with this dataset, just to demonstrate the utility of load_datasets , then we will switch over to a more relevant dataset for our purposes. import pandas from sklearn.datasets import load_wine import pandas from sklearn.datasets import load_wine We import a function load_wine that loads a simple data set we can play with called the Wine recognition dataset from the 1980s. You can read more about that dataset here dataset = load_wine() print(dataset.DESCR) dataset = load_wine () print ( dataset . DESCR ) .. _wine_dataset: Wine recognition dataset ------------------------ **Data Set Characteristics:** :Number of Instances: 178 (50 in each of three classes) :Number of Attributes: 13 numeric, predictive attributes and the class :Attribute Information: - Alcohol - Malic acid - Ash - Alcalinity of ash - Magnesium - Total phenols - Flavanoids - Nonflavanoid phenols - Proanthocyanins - Color intensity - Hue - OD280/OD315 of diluted wines - Proline - class: - class_0 - class_1 - class_2 :Summary Statistics: ============================= ==== ===== ======= ===== Min Max Mean SD ============================= ==== ===== ======= ===== Alcohol: 11.0 14.8 13.0 0.8 Malic Acid: 0.74 5.80 2.34 1.12 Ash: 1.36 3.23 2.36 0.27 Alcalinity of Ash: 10.6 30.0 19.5 3.3 Magnesium: 70.0 162.0 99.7 14.3 Total Phenols: 0.98 3.88 2.29 0.63 Flavanoids: 0.34 5.08 2.03 1.00 Nonflavanoid Phenols: 0.13 0.66 0.36 0.12 Proanthocyanins: 0.41 3.58 1.59 0.57 Colour Intensity: 1.3 13.0 5.1 2.3 Hue: 0.48 1.71 0.96 0.23 OD280/OD315 of diluted wines: 1.27 4.00 2.61 0.71 Proline: 278 1680 746 315 ============================= ==== ===== ======= ===== :Missing Attribute Values: None :Class Distribution: class_0 (59), class_1 (71), class_2 (48) :Creator: R.A. Fisher :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov) :Date: July, 1988 This is a copy of UCI ML Wine recognition datasets. https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data The data is the results of a chemical analysis of wines grown in the same region in Italy by three different cultivators. There are thirteen different measurements taken for different constituents found in the three types of wine. Original Owners: Forina, M. et al, PARVUS - An Extendible Package for Data Exploration, Classification and Correlation. Institute of Pharmaceutical and Food Analysis and Technologies, Via Brigata Salerno, 16147 Genoa, Italy. Citation: Lichman, M. (2013). UCI Machine Learning Repository [https://archive.ics.uci.edu/ml]. Irvine, CA: University of California, School of Information and Computer Science. .. topic:: References (1) S. Aeberhard, D. Coomans and O. de Vel, Comparison of Classifiers in High Dimensional Settings, Tech. Rep. no. 92-02, (1992), Dept. of Computer Science and Dept. of Mathematics and Statistics, James Cook University of North Queensland. (Also submitted to Technometrics). The data was used with many others for comparing various classifiers. The classes are separable, though only RDA has achieved 100% correct classification. (RDA : 100%, QDA 99.4%, LDA 98.9%, 1NN 96.1% (z-transformed data)) (All results using the leave-one-out technique) (2) S. Aeberhard, D. Coomans and O. de Vel, \"THE CLASSIFICATION PERFORMANCE OF RDA\" Tech. Rep. no. 92-01, (1992), Dept. of Computer Science and Dept. of Mathematics and Statistics, James Cook University of North Queensland. (Also submitted to Journal of Chemometrics). df = pandas.DataFrame() df = pandas . DataFrame () 3.3.1.1 import ... as ... pattern \u00b6 Because we'll use it so much, we often import under a shortened name using the import ... as ... pattern: import pandas as pd import pandas as pd 3.3.2 Creating pandas dataframes \u00b6 Let's create an empty data frame and put the result into a variable called df . This is a popular choice for a data frame variable name. df = pd.DataFrame() df = pd . DataFrame () Let's open the Wine dataset as a pandas data frame. Notice we change the value of the df variable to point to a new data frame. df = pd.DataFrame(dataset.data, columns=dataset.feature_names) df = pd . DataFrame ( dataset . data , columns = dataset . feature_names ) 3.3.2.1 From excel and csv \u00b6 Please follow this link This is what we call a csv or comma separated value file. We have a method reading these directly into pandas: df = pd . read_csv ( 'https://raw.githubusercontent.com/wesleybeckner/technology_explorers/main/assets/imdb_movies.csv' ) /usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (3) have mixed types.Specify dtype option on import or set low_memory=False. interactivity=interactivity, compiler=compiler, result=result) We can do this in a similar way with excel files. pd . read_excel ( 'https://raw.githubusercontent.com/wesleybeckner/ds_for_engineers/main/data/truffle_margin/margin_data.xlsx' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Base Cake Truffle Type Primary Flavor Secondary Flavor Color Group Width Height Net Sales Quantity in KG EBITDA Product 0 Tiramisu Chocolate Outer Doughnut Egg Nog Amethyst 340 50 8244.500 21833.99 Tiramisu-Chocolate Outer-Doughnut-Egg Nog-Amet... 1 Tiramisu Chocolate Outer Doughnut Egg Nog Amethyst 1340 25 1857.000 21589.48 Tiramisu-Chocolate Outer-Doughnut-Egg Nog-Amet... 2 Tiramisu Chocolate Outer Chocolate Pear Amethyst 310 140 17365.000 19050.69 Tiramisu-Chocolate Outer-Chocolate-Pear-Amethy... 3 Tiramisu Chocolate Outer Doughnut Egg Nog Amethyst 449 50 14309.000 18573.01 Tiramisu-Chocolate Outer-Doughnut-Egg Nog-Amet... 4 Tiramisu Chocolate Outer Doughnut Rock and Rye Amethyst 640 80 25584.500 14790.90 Tiramisu-Chocolate Outer-Doughnut-Rock and Rye... ... ... ... ... ... ... ... ... ... ... ... 2501 Butter Chocolate Outer Lemon Bar Wild Cherry Cream Amethyst 930 50 150352.000 -97839.16 Butter-Chocolate Outer-Lemon Bar-Wild Cherry C... 2502 Butter Chocolate Outer Cream Soda Peppermint Amethyst 900 50 120451.400 -98661.97 Butter-Chocolate Outer-Cream Soda-Peppermint-A... 2503 Butter Jelly Filled Orange Cucumber Burgundy 905 50 143428.580 -122236.96 Butter-Jelly Filled-Orange-Cucumber-Burgundy-9... 2504 Butter Chocolate Outer Horchata Dill Pickle Amethyst 597 45 271495.572 -128504.49 Butter-Chocolate Outer-Horchata-Dill Pickle-Am... 2505 Butter Candy Outer Ginger Lime Vanilla Amethyst 580 50 170567.065 -137897.08 Butter-Candy Outer-Ginger Lime-Vanilla-Amethys... 2506 rows \u00d7 10 columns 3.3.2.2 from lists \u00b6 my_list = [[ 1 , 2 , 3 ], [ 3 , 4 , 5 ], [ 5 , 6 , 7 ], [ 7 , 8 , 9 ]] pd . DataFrame ( my_list ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 0 1 2 3 1 3 4 5 2 5 6 7 3 7 8 9 pd . DataFrame ([[ 1 , 2 , 3 ], [ 3 , 4 , 5 ], [ 5 , 6 , 7 ], [ 7 , 8 , 9 ]], index = [ 'a' , 'b' , 'c' , 'd' ], columns = [ 'x' , 'y' , 'z' ]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x y z a 1 2 3 b 3 4 5 c 5 6 7 d 7 8 9 3.3.2.3 from dictionaries \u00b6 from_dict = pd . DataFrame ({ 'A' : [ 'apple' , 'airplane' ], 'B' : [ 'bannana' , 'bubbles' ]}) from_dict .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 0 apple bannana 1 airplane bubbles from_dict . to_dict () {'A': {0: 'apple', 1: 'airplane'}, 'B': {0: 'bannana', 1: 'bubbles'}} Exercise 2: Create a DataFrame \u00b6 Create a dictionary with the following keys: movies, songs, books . In each key list your top 5 favorites in the cooresponding category. Then use pd.DataFrame to turn this into a dictionary. # Cell for Ex 2 3.3.2.4 on pandas.Series \u00b6 pandas Series objects will percolate in our experience here and there, however they are not so important as for us to wish to spend dedicated time on them. For now, know that they are a lower-level data collection in the pandas framework. You can think of them as an individual column or row in the pandas dataframe. For more practice with these you can refer to this documentation 3.3.3 Viewing pandas dataframes \u00b6 The head() and tail() methods show us the first and last rows of the data. df.head() df.tail() df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics 0 tt0000009 Miss Jerry Miss Jerry 1894 1894-10-09 Romance 45 USA None Alexander Black Alexander Black Alexander Black Photoplays Blanche Bayliss, William Courtenay, Chauncey D... The adventures of a female reporter in the 1890s. 5.9 154 NaN NaN NaN NaN 1.0 2.0 1 tt0000574 The Story of the Kelly Gang The Story of the Kelly Gang 1906 1906-12-26 Biography, Crime, Drama 70 Australia None Charles Tait Charles Tait J. and N. Tait Elizabeth Tait, John Tait, Norman Campbell, Be... True story of notorious Australian outlaw Ned ... 6.1 589 $ 2250 NaN NaN NaN 7.0 7.0 2 tt0001892 Den sorte dr\u00f8m Den sorte dr\u00f8m 1911 1911-08-19 Drama 53 Germany, Denmark NaN Urban Gad Urban Gad, Gebhard Sch\u00e4tzler-Perasini Fotorama Asta Nielsen, Valdemar Psilander, Gunnar Helse... Two men of high rank are both wooing the beaut... 5.8 188 NaN NaN NaN NaN 5.0 2.0 3 tt0002101 Cleopatra Cleopatra 1912 1912-11-13 Drama, History 100 USA English Charles L. Gaskill Victorien Sardou Helen Gardner Picture Players Helen Gardner, Pearl Sindelar, Miss Fielding, ... The fabled queen of Egypt's affair with Roman ... 5.2 446 $ 45000 NaN NaN NaN 25.0 3.0 4 tt0002130 L'Inferno L'Inferno 1911 1911-03-06 Adventure, Drama, Fantasy 68 Italy Italian Francesco Bertolini, Adolfo Padovan Dante Alighieri Milano Film Salvatore Papa, Arturo Pirovano, Giuseppe de L... Loosely adapted from Dante's Divine Comedy and... 7.0 2237 NaN NaN NaN NaN 31.0 14.0 df . tail () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics 85850 tt9908390 Le lion Le lion 2020 2020-01-29 Comedy 95 France, Belgium French Ludovic Colbeau-Justin Alexandre Coquelle, Matthieu Le Naour Monkey Pack Films Dany Boon, Philippe Katerine, Anne Serra, Samu... A psychiatric hospital patient pretends to be ... 5.3 398 NaN NaN $ 3507171 NaN NaN 4.0 85851 tt9911196 De Beentjes van Sint-Hildegard De Beentjes van Sint-Hildegard 2020 2020-02-13 Comedy, Drama 103 Netherlands German, Dutch Johan Nijenhuis Radek Bajgar, Herman Finkers Johan Nijenhuis & Co Herman Finkers, Johanna ter Steege, Leonie ter... A middle-aged veterinary surgeon believes his ... 7.7 724 NaN NaN $ 7299062 NaN 6.0 4.0 85852 tt9911774 Padmavyuhathile Abhimanyu Padmavyuhathile Abhimanyu 2019 2019-03-08 Drama 130 India Malayalam Vineesh Aaradya Vineesh Aaradya, Vineesh Aaradya RMCC Productions Anoop Chandran, Indrans, Sona Nair, Simon Brit... NaN 7.9 265 NaN NaN NaN NaN NaN NaN 85853 tt9914286 Sokagin \u00c7ocuklari Sokagin \u00c7ocuklari 2019 2019-03-15 Drama, Family 98 Turkey Turkish Ahmet Faik Akinci Ahmet Faik Akinci, Kasim U\u00e7kan Gizem Ajans Ahmet Faik Akinci, Belma Mamati, Metin Ke\u00e7eci,... NaN 6.4 194 NaN NaN $ 2833 NaN NaN NaN 85854 tt9914942 La vida sense la Sara Amat La vida sense la Sara Amat 2019 2020-02-05 Drama 74 Spain Catalan Laura Jou Coral Cruz, Pep Puig La Xarxa de Comunicaci\u00f3 Local Maria Morera Colomer, Biel Rossell Pelfort, Is... Pep, a 13-year-old boy, is in love with a girl... 6.7 102 NaN NaN $ 59794 NaN NaN 2.0 The shape attribute shows us the number of elements: df.shape Note it doesn't have the () because it isn't a function - it is an attribute or variable attached to the df object. df . shape (85855, 22) The columns attribute gives us the column names df.columns df . columns Index(['imdb_title_id', 'title', 'original_title', 'year', 'date_published', 'genre', 'duration', 'country', 'language', 'director', 'writer', 'production_company', 'actors', 'description', 'avg_vote', 'votes', 'budget', 'usa_gross_income', 'worlwide_gross_income', 'metascore', 'reviews_from_users', 'reviews_from_critics'], dtype='object') The index attribute gives us the index names df.index df . index RangeIndex(start=0, stop=85855, step=1) The dtypes attribute gives the data types of each column, remember the data type floating point *?: df.dtypes df . dtypes imdb_title_id object title object original_title object year object date_published object genre object duration int64 country object language object director object writer object production_company object actors object description object avg_vote float64 votes int64 budget object usa_gross_income object worlwide_gross_income object metascore float64 reviews_from_users float64 reviews_from_critics float64 dtype: object df . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } duration avg_vote votes metascore reviews_from_users reviews_from_critics count 85855.000000 85855.000000 8.585500e+04 13305.000000 78258.000000 74058.000000 mean 100.351418 5.898656 9.493490e+03 55.896881 46.040826 27.479989 std 22.553848 1.234987 5.357436e+04 17.784874 178.511411 58.339158 min 41.000000 1.000000 9.900000e+01 1.000000 1.000000 1.000000 25% 88.000000 5.200000 2.050000e+02 43.000000 4.000000 3.000000 50% 96.000000 6.100000 4.840000e+02 57.000000 9.000000 8.000000 75% 108.000000 6.800000 1.766500e+03 69.000000 27.000000 23.000000 max 808.000000 9.900000 2.278845e+06 100.000000 10472.000000 999.000000 Exercise 3: Viewing DataFrames \u00b6 Using the dataframe you made in exercise 1, return the following attributes: the datatype stored in each column, the column names, the indices, and the shape. # Cell for Ex 3 3.3.4 Manipulating data with pandas \u00b6 Here we'll cover some key features of manipulating data with pandas 3.3.4.1 Selection \u00b6 Access columns by name using square-bracket indexing: df['duration'] df [ 'duration' ] 0 45 1 70 2 53 3 100 4 68 ... 85850 95 85851 103 85852 130 85853 98 85854 74 Name: duration, Length: 85855, dtype: int64 Mathematical operations on columns happen element-wise : df['duration'] / 60 df [ 'duration' ] / 60 0 0.750000 1 1.166667 2 0.883333 3 1.666667 4 1.133333 ... 85850 1.583333 85851 1.716667 85852 2.166667 85853 1.633333 85854 1.233333 Name: duration, Length: 85855, dtype: float64 Columns can be created (or overwritten) with the assignment operator. Let's create a column with duration in hours. df['duration (hours)'] = df['duration'] / 60 df [ 'duration (hours)' ] = df [ 'duration' ] / 60 Let's use the .head() function to see our new data! df.head() df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) 0 tt0000009 Miss Jerry Miss Jerry 1894 1894-10-09 Romance 45 USA None Alexander Black Alexander Black Alexander Black Photoplays Blanche Bayliss, William Courtenay, Chauncey D... The adventures of a female reporter in the 1890s. 5.9 154 NaN NaN NaN NaN 1.0 2.0 0.750000 1 tt0000574 The Story of the Kelly Gang The Story of the Kelly Gang 1906 1906-12-26 Biography, Crime, Drama 70 Australia None Charles Tait Charles Tait J. and N. Tait Elizabeth Tait, John Tait, Norman Campbell, Be... True story of notorious Australian outlaw Ned ... 6.1 589 $ 2250 NaN NaN NaN 7.0 7.0 1.166667 2 tt0001892 Den sorte dr\u00f8m Den sorte dr\u00f8m 1911 1911-08-19 Drama 53 Germany, Denmark NaN Urban Gad Urban Gad, Gebhard Sch\u00e4tzler-Perasini Fotorama Asta Nielsen, Valdemar Psilander, Gunnar Helse... Two men of high rank are both wooing the beaut... 5.8 188 NaN NaN NaN NaN 5.0 2.0 0.883333 3 tt0002101 Cleopatra Cleopatra 1912 1912-11-13 Drama, History 100 USA English Charles L. Gaskill Victorien Sardou Helen Gardner Picture Players Helen Gardner, Pearl Sindelar, Miss Fielding, ... The fabled queen of Egypt's affair with Roman ... 5.2 446 $ 45000 NaN NaN NaN 25.0 3.0 1.666667 4 tt0002130 L'Inferno L'Inferno 1911 1911-03-06 Adventure, Drama, Fantasy 68 Italy Italian Francesco Bertolini, Adolfo Padovan Dante Alighieri Milano Film Salvatore Papa, Arturo Pirovano, Giuseppe de L... Loosely adapted from Dante's Divine Comedy and... 7.0 2237 NaN NaN NaN NaN 31.0 14.0 1.133333 3.3.4.1.1 loc and iloc \u00b6 Pandas provides a powerful way to work with both rows and columns together, optionally using their label indices or numeric indices. .loc : Purely label-location based indexer for selection by label (but may also be used with a boolean array). Important: If you use slicing in loc, it will return the end index as well .iloc: Purely integer-location based indexing for selection by position (but may also be used with a boolean array). df . columns [ 1 ] 'title' df . loc [: 5 : 2 , [ df . columns [ 1 ]]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } title 0 Miss Jerry 2 Den sorte dr\u00f8m 4 L'Inferno df . iloc [ - 5 :, [ 3 , 5 ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } year genre 85850 2020 Comedy 85851 2020 Comedy, Drama 85852 2019 Drama 85853 2019 Drama, Family 85854 2019 Drama 3.3.4.1.2 column vs index access \u00b6 df [ 'duration' ][ 0 : 10 ] 0 45 1 70 2 53 3 100 4 68 5 60 6 85 7 120 8 120 9 55 Name: duration, dtype: int64 # df[0]['duration'] # will return an error my_list = [[ 10 , 20 , 30 ]] * 4 mydf = pd . DataFrame ( my_list , index = [ 'a' , 'b' , 'c' , 'd' ], columns = [ 'alpha' , 'beta' , 'gamma' ]) mydf .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } alpha beta gamma a 10 20 30 b 10 20 30 c 10 20 30 d 10 20 30 mydf . loc [ 'a' , 'alpha' ] = 'mychange' # using this you will get a setting # with copy warning (depending on your pandas warning settings) # mydf['alpha']['a'] = 'newchange' You want to use loc or iloc when setting new values to pandas dataframes. Exercise 4: Selecting \u00b6 select the first 10 rows of the country, genre, and year columns using loc . Repeat the same exercise using iloc # Cell for Ex 4 3.3.4.2 Filtering \u00b6 filtering down your selection will be BIGLY useful in your data quests 3.3.4.2.1 By String \u00b6 one of the first tools we'll use to filter our dataset is the .str.contains method. Let's take an example. # remember, if we don't remember our column mames we can quickly pull them up # with: df . columns Index(['imdb_title_id', 'title', 'original_title', 'year', 'date_published', 'genre', 'duration', 'country', 'language', 'director', 'writer', 'production_company', 'actors', 'description', 'avg_vote', 'votes', 'budget', 'usa_gross_income', 'worlwide_gross_income', 'metascore', 'reviews_from_users', 'reviews_from_critics', 'duration (hours)'], dtype='object') [ df [ 'description' ] . str . contains ( 'a.i.' , na = False )] [0 False 1 True 2 True 3 False 4 True ... 85850 True 85851 False 85852 False 85853 False 85854 False Name: description, Length: 85855, dtype: bool] df . iloc [ 17920 ][ 'description' ] 'A scientist creates Proteus--an organic super computer with artificial intelligence which becomes obsessed with human beings, and in particular the creators wife.' df [ df [ 'description' ] . str . contains ( 'artificial intelligence' , na = False )] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) 17920 tt0075931 Generazione Proteus Demon Seed 1977 1977-12-31 Horror, Sci-Fi 94 USA English Donald Cammell Dean R. Koontz, Robert Jaffe Metro-Goldwyn-Mayer (MGM) Julie Christie, Fritz Weaver, Gerrit Graham, B... A scientist creates Proteus--an organic super ... 6.3 7994 NaN NaN NaN 55.0 71.0 81.0 1.566667 44484 tt0382992 Stealth - Arma suprema Stealth 2005 2005-09-02 Action, Adventure, Sci-Fi 121 USA English, Korean, Russian, Spanish Rob Cohen W.D. Richter Columbia Pictures Josh Lucas, Jessica Biel, Jamie Foxx, Sam Shep... Deeply ensconced in a top-secret military prog... 5.1 51365 $ 135000000 $ 32116746 $ 79268322 35.0 401.0 150.0 2.016667 65411 tt2209764 Transcendence Transcendence 2014 2014-04-17 Action, Drama, Sci-Fi 119 UK, China, USA English Wally Pfister Jack Paglen Alcon Entertainment Johnny Depp, Rebecca Hall, Paul Bettany, Cilli... A scientist's drive for artificial intelligenc... 6.3 213720 $ 100000000 $ 23022309 $ 103039258 42.0 554.0 373.0 1.983333 68589 tt2769184 Debug Debug 2014 2015-02-07 Horror, Sci-Fi 86 Canada English David Hewlett David Hewlett Copperheart Entertainment Tenika Davis, Jason Momoa, Adrian Holmes, Kjar... Six young computer hackers, sent to work on a ... 4.3 2244 NaN NaN NaN NaN 38.0 30.0 1.433333 71500 tt3502284 Kikaid\u00e2 Reboot Kikaid\u00e2 Reboot 2014 2014-05-24 Action 110 Japan Japanese Ten Shimoyama Sh\u00f4tar\u00f4 Ishinomori, Kento Shimoyama Asatsu-DK Jingi Irie, Kazushige Nagashima, Aimi Satsukaw... Komyoji Nobuhiko is a genius and leader in rob... 5.6 110 NaN NaN NaN NaN 2.0 2.0 1.833333 75759 tt4788944 Robot Sound Robot Sound 2016 2016-01-27 Sci-Fi 117 South Korea Korean, English Ho-jae Lee Soyoung Lee NaN Erik Brown, Soo-bin Chae, Dean Dawson, Lee Han... The plot revolves around a robotic satellite w... 6.9 191 NaN NaN $ 2843718 NaN 3.0 4.0 1.950000 75907 tt4839424 Qi che ren zong dong yuan Qi che ren zong dong yuan 2015 2015-07-03 Animation, Adventure, Family 85 China Mandarin Jianrong Zhuo NaN Xiamen Lanhuoyan Film Animation Co. Christopher Petrosian, Dawei Hu, Xinxuan Liu, ... The film revolves around a genius engineer who... 1.1 121 NaN NaN NaN NaN 2.0 NaN 1.416667 76214 tt4937114 Rogue Warrior: Robot Fighter Rogue Warrior: Robot Fighter 2016 2016-09-02 Action, Sci-Fi 101 USA English Neil Johnson Neil Johnson Empire Motion pictures Tracey Birdsall, William Kircher, Daz Crawford... In the distant future, humanity is overthrown ... 4.9 2574 $ 3800000 NaN NaN NaN 22.0 26.0 1.683333 79921 tt6197070 Blood Machines Blood Machines 2019 2020-09-01 Adventure, Music, Sci-Fi 50 France English Rapha\u00ebl Hernandez, Seth Ickerman Rapha\u00ebl Hernandez, Seth Ickerman Logical Pictures Elisa Lasowski, Anders Heinrichsen, Christian ... An artificial intelligence escapes her spacesh... 6.1 2023 NaN NaN NaN NaN 70.0 55.0 0.833333 83905 tt8196068 Twisted Pair Twisted Pair 2018 2018-10-03 Drama, Fantasy, Sci-Fi 89 USA English Neil Breen Neil Breen Neil Breen Films Neil Breen, Sara Meritt, Siohbon Chevy Ebrahim... Identical twin brothers become hybrid A.I (art... 5.9 1313 $ 3 NaN NaN NaN 69.0 4.0 1.483333 84615 tt8712750 A.M.I. A.M.I. 2019 2019-07-02 Horror, Thriller 77 Canada English Rusty Nixon Rusty Nixon, Evan Tylor 1160594 B.C. Debs Howard, Philip Granger, Bonnie Hay, Sam R... A seventeen year old girl forms a co-dependent... 3.9 1399 NaN NaN NaN NaN 91.0 13.0 1.283333 85361 tt9308170 \u00d6zg\u00fcr D\u00fcnya \u00d6zg\u00fcr D\u00fcnya 2019 2019-03-22 Action, Adventure, Family 122 Turkey Turkish Faruk Aksoy, Sevki Es Faruk Aksoy, H\u00fcseyin Aksu Ay Yapim Murat Serezli, Rabia Soyturk, G\u00fcrbey Ileri, Ha... The story of a game managed by artificial inte... 2.3 340 NaN NaN $ 50537 NaN 2.0 NaN 2.033333 or if you know the exact string you are looking for df [ df [ 'title' ] == \"Fight Club\" ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) 32487 tt0137523 Fight Club Fight Club 1999 1999-10-29 Drama 139 USA, Germany English David Fincher Chuck Palahniuk, Jim Uhls Fox 2000 Pictures Edward Norton, Brad Pitt, Meat Loaf, Zach Gren... An insomniac office worker and a devil-may-car... 8.8 1807440 $ 63000000 $ 37030102 $ 101218804 66.0 3758.0 370.0 2.316667 3.3.4.2.2 By numerical value \u00b6 df [ df [ 'votes' ] > 1000 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) 4 tt0002130 L'Inferno L'Inferno 1911 1911-03-06 Adventure, Drama, Fantasy 68 Italy Italian Francesco Bertolini, Adolfo Padovan Dante Alighieri Milano Film Salvatore Papa, Arturo Pirovano, Giuseppe de L... Loosely adapted from Dante's Divine Comedy and... 7.0 2237 NaN NaN NaN NaN 31.0 14.0 1.133333 11 tt0002844 Fant\u00f4mas - \u00c0 l'ombre de la guillotine Fant\u00f4mas - \u00c0 l'ombre de la guillotine 1913 1913-05-12 Crime, Drama 54 France French Louis Feuillade Marcel Allain, Louis Feuillade Soci\u00e9t\u00e9 des Etablissements L. Gaumont Ren\u00e9 Navarre, Edmund Breon, Georges Melchior, ... Inspector Juve is tasked to investigate and ca... 7.0 1944 NaN NaN NaN NaN 9.0 28.0 0.900000 13 tt0003037 Juve contre Fant\u00f4mas Juve contre Fant\u00f4mas 1913 1913-09-08 Crime, Drama 61 France French Louis Feuillade Marcel Allain, Louis Feuillade Soci\u00e9t\u00e9 des Etablissements L. Gaumont Ren\u00e9 Navarre, Edmund Breon, Georges Melchior, ... In Part Two of Louis Feuillade's 5 1/2-hour ep... 7.0 1349 NaN NaN NaN NaN 8.0 23.0 1.016667 16 tt0003165 Le mort qui tue Le mort qui tue 1913 1913-11-06 Crime, Drama, Mystery 90 France French Louis Feuillade Marcel Allain, Louis Feuillade Soci\u00e9t\u00e9 des Etablissements L. Gaumont Ren\u00e9 Navarre, Edmund Breon, Georges Melchior, ... After a body disappears from inside the prison... 7.0 1050 NaN NaN NaN NaN 6.0 18.0 1.500000 18 tt0003419 Lo studente di Praga Der Student von Prag 1913 1913-08-22 Drama, Fantasy, Horror 85 Germany German, English Paul Wegener, Stellan Rye Hanns Heinz Ewers, Hanns Heinz Ewers Deutsche Bioscop GmbH Paul Wegener, Grete Berger, Lyda Salmonova, Jo... Balduin, a student of Prague, leaves his royst... 6.5 1768 NaN NaN NaN NaN 20.0 26.0 1.416667 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 85811 tt9860728 Falling Inn Love - Ristrutturazione con amore Falling Inn Love 2019 2019-08-29 Comedy, Romance 98 USA English Roger Kumble Elizabeth Hackett, Hilary Galanoy NaN Christina Milian, Adam Demos, Jeffrey Bowyer-C... When city girl Gabriela spontaneously enters a... 5.6 14108 NaN NaN NaN NaN 265.0 32.0 1.633333 85817 tt9866700 Paranormal Investigation Paranormal Investigation 2018 2018-12-01 Horror, Thriller 92 France French Franck Phelizon NaN Baril Pictures Jose Atuncar, Claudine Bertin, Cedric Henquez,... When a young man becomes possessed after playi... 3.7 1299 NaN NaN NaN NaN 334.0 11.0 1.533333 85837 tt9894470 VFW VFW 2019 2020-02-14 Action, Crime, Horror 92 USA English Joe Begos Max Brallier, Matthew McArdle Fangoria Stephen Lang, William Sadler, Fred Williamson,... A group of old war veterans put their lives on... 6.1 4178 NaN NaN $ 23101 72.0 83.0 94.0 1.533333 85839 tt9898858 Coffee & Kareem Coffee & Kareem 2020 2020-04-03 Action, Comedy 88 USA English Michael Dowse Shane Mack Pacific Electric Picture Company Ed Helms, Taraji P. Henson, Terrence Little Ga... Twelve-year-old Kareem Manning hires a crimina... 5.1 10627 NaN NaN NaN 35.0 388.0 64.0 1.466667 85843 tt9900782 Kaithi Kaithi 2019 2019-10-25 Action, Thriller 145 India Tamil Lokesh Kanagaraj Lokesh Kanagaraj, Pon Parthiban Dream Warrior Pictures Karthi, Narain, Ramana, George Maryan, Harish ... A recently released prisoner becomes involved ... 8.5 8400 INR 240000000 NaN $ 524061 NaN 188.0 8.0 2.416667 29362 rows \u00d7 23 columns Exercise 5: Filtering \u00b6 Filter df for all the movies that are longer than 2 hours Filter df for all movies where 'day' is in the title # Cell for Ex 5 3.3.4.3 Select, filter, operation \u00b6 The real power of Pandas comes in its tools for grouping and aggregating data. Here we'll look at value counts and the basics of group-by operations. # a basic select, filter, operate procedure would look like: df [ df [ 'country' ] == 'USA' ][ 'duration' ] . describe () count 28511.000000 mean 93.050437 std 18.576873 min 42.000000 25% 84.000000 50% 91.000000 75% 100.000000 max 398.000000 Name: duration, dtype: float64 we can invert the selection with ~ df [ ~ ( df [ 'country' ] == 'USA' )][ 'duration' ] . describe () count 57344.000000 mean 103.981410 std 23.459158 min 41.000000 25% 90.000000 50% 99.000000 75% 112.000000 max 808.000000 Name: duration, dtype: float64 In preparation for grouping the data, let's bin the instances by their duration (we could have chosen any numerical column). For that, we'll use pd.cut . The documentation for pd.cut can be found here . It is used to bin values into discrete intervals. This is like a histogram where for each bin along the range of data values, you count the number of occurrences of that bin. in our example, we'll use 10 bins and let Pandas decide how to evenly divide the range into the bins. Let's see it in action. df['duration_group'] = pd.cut(df['duration'], 10) df.head() df.dtypes df [ 'duration_group' ] = pd . cut ( df [ 'duration' ], 10 ) df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) duration_group 0 tt0000009 Miss Jerry Miss Jerry 1894 1894-10-09 Romance 45 USA None Alexander Black Alexander Black Alexander Black Photoplays Blanche Bayliss, William Courtenay, Chauncey D... The adventures of a female reporter in the 1890s. 5.9 154 NaN NaN NaN NaN 1.0 2.0 0.750000 (40.233, 117.7] 1 tt0000574 The Story of the Kelly Gang The Story of the Kelly Gang 1906 1906-12-26 Biography, Crime, Drama 70 Australia None Charles Tait Charles Tait J. and N. Tait Elizabeth Tait, John Tait, Norman Campbell, Be... True story of notorious Australian outlaw Ned ... 6.1 589 $ 2250 NaN NaN NaN 7.0 7.0 1.166667 (40.233, 117.7] 2 tt0001892 Den sorte dr\u00f8m Den sorte dr\u00f8m 1911 1911-08-19 Drama 53 Germany, Denmark NaN Urban Gad Urban Gad, Gebhard Sch\u00e4tzler-Perasini Fotorama Asta Nielsen, Valdemar Psilander, Gunnar Helse... Two men of high rank are both wooing the beaut... 5.8 188 NaN NaN NaN NaN 5.0 2.0 0.883333 (40.233, 117.7] 3 tt0002101 Cleopatra Cleopatra 1912 1912-11-13 Drama, History 100 USA English Charles L. Gaskill Victorien Sardou Helen Gardner Picture Players Helen Gardner, Pearl Sindelar, Miss Fielding, ... The fabled queen of Egypt's affair with Roman ... 5.2 446 $ 45000 NaN NaN NaN 25.0 3.0 1.666667 (40.233, 117.7] 4 tt0002130 L'Inferno L'Inferno 1911 1911-03-06 Adventure, Drama, Fantasy 68 Italy Italian Francesco Bertolini, Adolfo Padovan Dante Alighieri Milano Film Salvatore Papa, Arturo Pirovano, Giuseppe de L... Loosely adapted from Dante's Divine Comedy and... 7.0 2237 NaN NaN NaN NaN 31.0 14.0 1.133333 (40.233, 117.7] df . dtypes imdb_title_id object title object original_title object year object date_published object genre object duration int64 country object language object director object writer object production_company object actors object description object avg_vote float64 votes int64 budget object usa_gross_income object worlwide_gross_income object metascore float64 reviews_from_users float64 reviews_from_critics float64 duration (hours) float64 duration_group category dtype: object Pandas includes an array of useful functionality for manipulating and analyzing tabular data. We'll take a look at two of these here. The pandas.value_counts returns statistics on the unique values within each column. We can use it, for example, to break down the movies by their duration group that we just created: pd.value_counts(df['duration_group'], sort=False) pd . value_counts ( df [ 'duration_group' ], sort = False ) (40.233, 117.7] 72368 (117.7, 194.4] 13197 (194.4, 271.1] 228 (271.1, 347.8] 40 (347.8, 424.5] 11 (424.5, 501.2] 4 (501.2, 577.9] 4 (577.9, 654.6] 1 (654.6, 731.3] 1 (731.3, 808.0] 1 Name: duration_group, dtype: int64 What happens if we try this on a continuous valued variable? pd.value_counts(df['duration']) pd . value_counts ( df [ 'duration' ]) 90 5162 95 3194 100 3106 92 2418 93 2414 ... 279 1 301 1 345 1 729 1 319 1 Name: duration, Length: 266, dtype: int64 Exercise 6: value_counts, unique, nunique \u00b6 We can do a little data exploration with this by seeing how common different values are. Play around with these pandas methods: value_counts() unique() nunique() Also be sure to use: selection filteration (and you are already using operation with the above mentioned pandas methods, value_counts, unique, nunique (: ) Do so with 3 different columns in the dataframe # Cell for Exercise 6 3.3.4.4 Group-by Operation \u00b6 One of the killer features of the Pandas dataframe is the ability to do group-by operations. You can visualize the group-by like this (image borrowed from the Python Data Science Handbook ) 3.3.4.5 Summary statistics with groupby: value_counts , count , describe \u00b6 Let's break take this in smaller steps. Recall our duration_group column. pd.value_counts(df['duration_group']) pd . value_counts ( df [ 'duration_group' ]) (40.233, 117.7] 72368 (117.7, 194.4] 13197 (194.4, 271.1] 228 (271.1, 347.8] 40 (347.8, 424.5] 11 (501.2, 577.9] 4 (424.5, 501.2] 4 (731.3, 808.0] 1 (654.6, 731.3] 1 (577.9, 654.6] 1 Name: duration_group, dtype: int64 groupby allows us to look at the number of values for each column and each value. The group by documentation is here . Basically, groupby allows us to create groups of records based on their values. Let's count how many records, or rows, in our data set fall into each bin of our duration data. df.groupby(['duration_group']).count() df . groupby ([ 'duration_group' ]) . count () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) duration_group (40.233, 117.7] 72368 72368 72368 72368 72368 72368 72368 72315 71618 72309 71474 68922 72304 70464 72368 72368 19493 12123 24645 10759 65972 63321 72368 (117.7, 194.4] 13197 13197 13197 13197 13197 13197 13197 13186 13122 13171 12528 12211 13192 12990 13197 13197 4133 3153 6298 2506 12017 10493 13197 (194.4, 271.1] 228 228 228 228 228 228 228 228 221 226 221 207 228 226 228 228 70 40 59 28 215 188 228 (271.1, 347.8] 40 40 40 40 40 40 40 40 40 40 39 39 40 38 40 40 10 5 9 8 37 37 40 (347.8, 424.5] 11 11 11 11 11 11 11 11 10 11 11 10 11 11 11 11 1 3 3 1 9 10 11 (424.5, 501.2] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 1 0 0 1 4 4 4 (501.2, 577.9] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 1 0 0 0 2 3 4 (577.9, 654.6] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 1 (654.6, 731.3] 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 (731.3, 808.0] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 Now, let's find the mean of each of the columns for each duration_group . Notice what happens to the non-numeric columns. df.groupby(['duration_group']).mean() df . groupby ([ 'duration_group' ]) . mean () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } duration avg_vote votes metascore reviews_from_users reviews_from_critics duration (hours) duration_group (40.233, 117.7] 93.147026 5.786671 6604.507932 54.153267 35.944037 24.517601 1.552450 (117.7, 194.4] 136.552550 6.488513 25010.089414 63.042298 100.725639 45.365958 2.275876 (194.4, 271.1] 220.394737 6.997368 30003.302632 76.500000 94.711628 29.015957 3.673246 (271.1, 347.8] 302.975000 6.810000 4201.275000 79.375000 19.378378 21.513514 5.049583 (347.8, 424.5] 384.636364 7.181818 2602.545455 89.000000 18.333333 18.100000 6.410606 (424.5, 501.2] 454.000000 7.700000 2589.000000 59.000000 19.250000 24.500000 7.566667 (501.2, 577.9] 547.500000 7.875000 206.500000 NaN 1.500000 8.666667 9.125000 (577.9, 654.6] 580.000000 5.800000 157.000000 NaN NaN NaN 9.666667 (654.6, 731.3] 729.000000 7.800000 1126.000000 87.000000 13.000000 30.000000 12.150000 (731.3, 808.0] 808.000000 7.700000 473.000000 77.000000 5.000000 23.000000 13.466667 You can specify a groupby using the names of table columns and compute other functions, such as the sum , count , std , and describe . df.groupby(['duration_group'])['metascore'].describe() df . groupby ([ 'duration_group' ])[ 'metascore' ] . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } count mean std min 25% 50% 75% max duration_group (40.233, 117.7] 10759.0 54.153267 17.655622 1.0 41.00 55.0 67.00 100.0 (117.7, 194.4] 2506.0 63.042298 16.265137 9.0 52.00 64.0 75.00 100.0 (194.4, 271.1] 28.0 76.500000 20.532720 10.0 69.75 82.0 90.00 100.0 (271.1, 347.8] 8.0 79.375000 12.070478 56.0 72.25 84.5 88.25 90.0 (347.8, 424.5] 1.0 89.000000 NaN 89.0 89.00 89.0 89.00 89.0 (424.5, 501.2] 1.0 59.000000 NaN 59.0 59.00 59.0 59.00 59.0 (501.2, 577.9] 0.0 NaN NaN NaN NaN NaN NaN NaN (577.9, 654.6] 0.0 NaN NaN NaN NaN NaN NaN NaN (654.6, 731.3] 1.0 87.000000 NaN 87.0 87.00 87.0 87.00 87.0 (731.3, 808.0] 1.0 77.000000 NaN 77.0 77.00 77.0 77.00 77.0 The simplest version of a groupby looks like this, and you can use almost any aggregation function you wish (mean, median, sum, minimum, maximum, standard deviation, count, etc.) <data object>.groupby(<grouping values>).<aggregate>() You can even group by multiple values: for example we can look at the metascore grouped by the duration_group and country . df . groupby ([ 'duration_group' , 'country' ])[ 'metascore' ] . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } count mean std min 25% 50% 75% max duration_group country (40.233, 117.7] Afghanistan, France 0.0 NaN NaN NaN NaN NaN NaN NaN Afghanistan, France, Germany, UK 1.0 64.0 NaN 64.0 64.0 64.0 64.0 64.0 Afghanistan, Iran 0.0 NaN NaN NaN NaN NaN NaN NaN Afghanistan, Ireland, Japan, Iran, Netherlands 1.0 83.0 NaN 83.0 83.0 83.0 83.0 83.0 Albania 0.0 NaN NaN NaN NaN NaN NaN NaN ... ... ... ... ... ... ... ... ... ... (501.2, 577.9] Philippines, Netherlands, Sweden 0.0 NaN NaN NaN NaN NaN NaN NaN Russia 0.0 NaN NaN NaN NaN NaN NaN NaN (577.9, 654.6] Soviet Union 0.0 NaN NaN NaN NaN NaN NaN NaN (654.6, 731.3] France 1.0 87.0 NaN 87.0 87.0 87.0 87.0 87.0 (731.3, 808.0] Argentina 1.0 77.0 NaN 77.0 77.0 77.0 77.0 77.0 5565 rows \u00d7 8 columns Exercise 7: Group-by \u00b6 use pd.cut to perform a grouping of one or more of the dataframe columns use groupby to group by that (those) columns and then perform three different statistical summaries in three separate instances # Cell for excercise 7","title":"Functions"},{"location":"S3_Functions/#technology-fundamentals-course-1-session-3-functions-and-pandas-introduction","text":"Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assitants Varsha Bang, Harsha Vardhan Contact vbang@uw.edu, harshav@uw.edu Today, we will discuss functions in more depth. We've seen them previously and used them, for example the .append() function for lists, or the even more general print() function. Here, we'll dig into how you can make your own functions to encapsulate code that you will reuse over and over. Then we'll jump into the Pandas package. Packages are collections of related functions. These are the things we import . Pandas is a two dimensional data structure like a spreadsheet in Excel. In fact, we will be importing our first dataset and viewing it, with Pandas!","title":"Technology Fundamentals Course 1, Session 3: Functions and Pandas Introduction"},{"location":"S3_Functions/#30-review-from-session-on-data-structures-and-flow-control","text":"In our last session, we discussed lists , dictionaries , and flow control . Lists are ordered collections of data that can be used to hold multiple pieces of information while preserving their order. We use [ and ] to access elements by their indices which start with 0 . All things that operate on lists like slices use the concept of an inclusive lower bound and an exclusive upper bound. So, the following gets elements from the list my_list with index values of 0 , 1 , and 2 , but not 3 ! my_list[0:3] What other way is there of writing the same statement using slicing ? Hint, think about leaving out one of the numbers in the slice! Dictionaries are named collections of data that can be used to hold multiple pieces of information as values that are addressed by keys resulting in a key to value data structure. They are accessed with [ and ] but intialized with { and } . E.g. my_dict = { 'cake' : 'Tasty!', 'toenails' : 'Gross!' } my_dict['cake'] Finally, we talked about flow control and using the concept of conditional execution to decide which code statements were executed. Remember this figure? Flow control figure What are the if statments? Where do for loops fit in?","title":"3.0 Review from Session on Data Structures and Flow Control"},{"location":"S3_Functions/#31-functions","text":"For loops let you repeat some code for every item in a list. Functions are similar in that they run the same lines of code and, frequently, for new values of some variable (we call these parameters ). They are different in that functions are not limited to looping over items. Functions are a critical part of writing easy to read, reusable code. Create a function like: def function_name (parameters): \"\"\" optional docstring \"\"\" function expressions return [variable] Here is a simple example. It prints a string that was passed in and returns nothing. def print_string(string): \"\"\"This prints out a string passed as the parameter.\"\"\" print(string) return def print_string ( string ): \"\"\"This prints out a string passed as the parameter\"\"\" print ( string ) return To call the function, use: print_string(\"GIX is awesome!\") Note: The function has to be defined before you can call it! print_string ( \"GIX is awesome!\" ) GIX is awesome!","title":"3.1 Functions"},{"location":"S3_Functions/#311-reserved-words-def-return-and-yield","text":"Notice the highlighted words in our function definition: def and return these are reserved words in python used to define functions. Every function definition requires these reserved words. yield is another reserved word that is similar to return but operates slightly differently. It is beyond the scope of what we are covering in this session. This tutorial from realpython has good information on the topic. # what is return doing in this function? def my_square ( a ): return a ** 2 return is going to output whatever value(s) follow after the keyword return when we call upon our function a = 2 my_square ( a ) 4 I'm going to return two values... def my_square ( a ): return a ** 2 , a and we see how the output updates accordingly my_square ( a ) (4, 2) We can capture these values on the output with... square , new_a = my_square ( a ) print ( square , new_a ) 4 2","title":"3.1.1 Reserved words: def, return, and yield"},{"location":"S3_Functions/#312-global-vs-local-variables-and-function-parameters","text":"In a function, new variables that you create are not saved when the function returns - these are local variables. Variables defined outside of the function can be accessed but not changed - these are global variables. let's define the following function def my_little_func ( a ): b = 10 return a * b my_little_func ( 2 ) 20 if I run the following... # b Let's play with this a little further... ...now let's define b outside the function and call our function with a=5 # what happens here? b = 100 my_little_func ( 5 ) 50 we see that b is still 100, instead of 10 as its defined within the function. This is because b inside of my_little_func is a local variable. it doesn't matter how I define b outside the function because within the function it is set locally. ... Let's do this A LITTLE MORE def my_new_func ( a ): print ( b ) return a * b now if I call on my new function, because b is not defined locally within the function, it takes on the global value. This is typically not happy happy fun fun behavior for us, we want to be explicit about how we define and use our variables (but there are some times when this is appropriate to do) b = 1e4 # side note, what did I do here???? my_new_func ( a ) 10000.0 20000.0","title":"3.1.2 Global vs local variables and function parameters"},{"location":"S3_Functions/#3111-function-parameters","text":"Parameters (or arguments) in Python are all passed by reference. This means that if you modify the parameters in the function, they are modified outside of the function. (Enrichment: Exceptions, see below) See the following example: def change_list(my_list): \"\"\"This changes a passed list into this function\"\"\" my_list.append('four'); print('list inside the function: ', my_list) return my_list = [1, 2, 3]; print('list before the function: ', my_list) change_list(my_list); print('list after the function: ', my_list) def change_list ( my_list ): \"\"\"This changes a passed list into this function\"\"\" my_list . append ( 'four' ); print ( 'list inside the function: ' , my_list ) return my_list = [ 1 , 2 , 3 ]; print ( 'list before the function: ' , my_list ) change_list ( my_list ); print ( 'list after the function: ' , my_list ) list before the function: [1, 2, 3] list inside the function: [1, 2, 3, 'four'] list after the function: [1, 2, 3, 'four']","title":"3.1.1.1 Function Parameters"},{"location":"S3_Functions/#3112-enrichment-global-local-and-immutables","text":"Let's go back to our former example... immutables: integers, float, str, tuples b = \"a string\" b = 10 b = 10.2 b = ( 10 , 2 ) b = [ 10 , 2 ] a = 2 def my_little_func ( a , b ): if type ( b ) == str : b += \"20\" elif ( type ( b ) == int ) or ( type ( b ) == float ): b += 10 elif ( type ( b ) == tuple ): print ( \"AYYY no tuple changes, Dude\" ) pass elif ( type ( b ) == list ): b . append ( 'whoaaaa' ) print ( b ) return print ( b ) my_little_func ( a , b ) print ( b ) [10, 2] [10, 2, 'whoaaaa'] [10, 2, 'whoaaaa'] There is a way to change a global variable within a function with the global keyword. Generally, the use of global variables is not encouraged, instead use parameters. We won't cover the global keyword here but you can explore further on your own if you are interested. b = 10 a = 2 def my_little_func ( a ): global b b += 20 print ( b ) return print ( b ) my_little_func ( a ) print ( b ) 10 30 30","title":"3.1.1.2 Enrichment: Global, local, and immutables"},{"location":"S3_Functions/#exercise-1-my-first-function","text":"Write a function that takes one parameter and returns any data structure If you are going to return multiple objects, what data structure that we talked about can be used? Give and example below. # Cell for excerise 1","title":"Exercise 1: My first function"},{"location":"S3_Functions/#313-parameter-types","text":"Function calling: positional func(10, 20) keyword func(a=10, b=20) or func(b=20, a=10) Function writing: * default * def func(a=10, b=20) def print_name(first, last='Beckner'): print(f'Your name is {first} {last}') return def print_name ( first , last = 'Beckner' ): print ( \"Your name is {} {} \" . format ( first , last )) return print_name ( last = 'Beckner' , first = 'Wesley' ) Your name is Wesley Beckner Play around with the above function. print_name ( 'Wesley' , last = 'the Technology Fundamentals Instructor' ) Your name is Wesley the Technology Fundamentals Instructor Functions can contain any code that you put anywhere else including: * if ... elif ... else * for ... while * other function calls def print_name_age(first, last, age): print_name(first, last) print('Your age is %d' % (age)) if age > 25 and age < 40: print('You are a millenial!') return def print_name_age ( first , last , age ): print_name ( first , last ) print ( 'Your age is %d ' % ( age )) if age > 25 and age < 40 : print ( 'You are a millenial!' ) return print_name_age(age=29, last='Beckner', first='Wesley') print_name_age ( age = 29 , last = 'Beckner' , first = 'Wesley' ) Your name is Wesley Beckner Your age is 29 You are a millenial!","title":"3.1.3 Parameter types"},{"location":"S3_Functions/#32-the-scientific-python-stack","text":"In addition to Python's built-in modules like the math module we explored above, there are also many often-used third-party modules that are core tools for doing data science with Python. Some of the most important ones are:","title":"3.2 The scientific python stack"},{"location":"S3_Functions/#numpy-numerical-python","text":"Numpy is short for \"Numerical Python\", and contains tools for efficient manipulation of arrays of data. If you have used other computational tools like IDL or MatLab, Numpy should feel very familiar.","title":"numpy: Numerical Python"},{"location":"S3_Functions/#scipy-scientific-python","text":"Scipy is short for \"Scientific Python\", and contains a wide range of functionality for accomplishing common scientific tasks, such as optimization/minimization, numerical integration, interpolation, and much more. We will not look closely at Scipy today, but we will use its functionality later in the course.","title":"scipy: Scientific Python"},{"location":"S3_Functions/#pandas-labeled-data-manipulation-in-python","text":"Pandas is short for \"Panel Data\", and contains tools for doing more advanced manipulation of labeled data in Python, in particular with a columnar data structure called a Data Frame . If you've used the R statistical language (and in particular the so-called \"Hadley Stack\"), much of the functionality in Pandas should feel very familiar.","title":"pandas: Labeled Data Manipulation in Python"},{"location":"S3_Functions/#matplotlib-visualization-in-python","text":"Matplotlib started out as a Matlab plotting clone in Python, and has grown from there in the 15 years since its creation. It is the most popular data visualization tool currently in the Python data world (though other recent packages are starting to encroach on its monopoly).","title":"matplotlib: Visualization in Python"},{"location":"S3_Functions/#scikit-learn-machine-learning-in-python","text":"Scikit-learn is a machine learning library. It features various classification, regression, and clustering algorithms, including support vector machines, random forests, gradient boosting, k-means, and DBSCAN. The library is designed to interoperate with the Python numerical and scientific libraries NumPy and SciPy.","title":"scikit-learn: Machine Learning in Python"},{"location":"S3_Functions/#33-pandas","text":"","title":"3.3 Pandas"},{"location":"S3_Functions/#331-pandas-and-scikit-learn-load_datasets","text":"We begin by loading the Panda's package. Packages are collections of functions that share a common utility. We've seen import before. Let's use it to import Pandas and all the richness that pandas has. We'll also use a very useful feature of the scikit-learn toolkit, the load_datasets module. We will do some very rudimentary tasks with this dataset, just to demonstrate the utility of load_datasets , then we will switch over to a more relevant dataset for our purposes. import pandas from sklearn.datasets import load_wine import pandas from sklearn.datasets import load_wine We import a function load_wine that loads a simple data set we can play with called the Wine recognition dataset from the 1980s. You can read more about that dataset here dataset = load_wine() print(dataset.DESCR) dataset = load_wine () print ( dataset . DESCR ) .. _wine_dataset: Wine recognition dataset ------------------------ **Data Set Characteristics:** :Number of Instances: 178 (50 in each of three classes) :Number of Attributes: 13 numeric, predictive attributes and the class :Attribute Information: - Alcohol - Malic acid - Ash - Alcalinity of ash - Magnesium - Total phenols - Flavanoids - Nonflavanoid phenols - Proanthocyanins - Color intensity - Hue - OD280/OD315 of diluted wines - Proline - class: - class_0 - class_1 - class_2 :Summary Statistics: ============================= ==== ===== ======= ===== Min Max Mean SD ============================= ==== ===== ======= ===== Alcohol: 11.0 14.8 13.0 0.8 Malic Acid: 0.74 5.80 2.34 1.12 Ash: 1.36 3.23 2.36 0.27 Alcalinity of Ash: 10.6 30.0 19.5 3.3 Magnesium: 70.0 162.0 99.7 14.3 Total Phenols: 0.98 3.88 2.29 0.63 Flavanoids: 0.34 5.08 2.03 1.00 Nonflavanoid Phenols: 0.13 0.66 0.36 0.12 Proanthocyanins: 0.41 3.58 1.59 0.57 Colour Intensity: 1.3 13.0 5.1 2.3 Hue: 0.48 1.71 0.96 0.23 OD280/OD315 of diluted wines: 1.27 4.00 2.61 0.71 Proline: 278 1680 746 315 ============================= ==== ===== ======= ===== :Missing Attribute Values: None :Class Distribution: class_0 (59), class_1 (71), class_2 (48) :Creator: R.A. Fisher :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov) :Date: July, 1988 This is a copy of UCI ML Wine recognition datasets. https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data The data is the results of a chemical analysis of wines grown in the same region in Italy by three different cultivators. There are thirteen different measurements taken for different constituents found in the three types of wine. Original Owners: Forina, M. et al, PARVUS - An Extendible Package for Data Exploration, Classification and Correlation. Institute of Pharmaceutical and Food Analysis and Technologies, Via Brigata Salerno, 16147 Genoa, Italy. Citation: Lichman, M. (2013). UCI Machine Learning Repository [https://archive.ics.uci.edu/ml]. Irvine, CA: University of California, School of Information and Computer Science. .. topic:: References (1) S. Aeberhard, D. Coomans and O. de Vel, Comparison of Classifiers in High Dimensional Settings, Tech. Rep. no. 92-02, (1992), Dept. of Computer Science and Dept. of Mathematics and Statistics, James Cook University of North Queensland. (Also submitted to Technometrics). The data was used with many others for comparing various classifiers. The classes are separable, though only RDA has achieved 100% correct classification. (RDA : 100%, QDA 99.4%, LDA 98.9%, 1NN 96.1% (z-transformed data)) (All results using the leave-one-out technique) (2) S. Aeberhard, D. Coomans and O. de Vel, \"THE CLASSIFICATION PERFORMANCE OF RDA\" Tech. Rep. no. 92-01, (1992), Dept. of Computer Science and Dept. of Mathematics and Statistics, James Cook University of North Queensland. (Also submitted to Journal of Chemometrics). df = pandas.DataFrame() df = pandas . DataFrame ()","title":"3.3.1 Pandas and Scikit-Learn load_datasets"},{"location":"S3_Functions/#3311-import-as-pattern","text":"Because we'll use it so much, we often import under a shortened name using the import ... as ... pattern: import pandas as pd import pandas as pd","title":"3.3.1.1 import ... as ... pattern"},{"location":"S3_Functions/#332-creating-pandas-dataframes","text":"Let's create an empty data frame and put the result into a variable called df . This is a popular choice for a data frame variable name. df = pd.DataFrame() df = pd . DataFrame () Let's open the Wine dataset as a pandas data frame. Notice we change the value of the df variable to point to a new data frame. df = pd.DataFrame(dataset.data, columns=dataset.feature_names) df = pd . DataFrame ( dataset . data , columns = dataset . feature_names )","title":"3.3.2 Creating pandas dataframes"},{"location":"S3_Functions/#3321-from-excel-and-csv","text":"Please follow this link This is what we call a csv or comma separated value file. We have a method reading these directly into pandas: df = pd . read_csv ( 'https://raw.githubusercontent.com/wesleybeckner/technology_explorers/main/assets/imdb_movies.csv' ) /usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (3) have mixed types.Specify dtype option on import or set low_memory=False. interactivity=interactivity, compiler=compiler, result=result) We can do this in a similar way with excel files. pd . read_excel ( 'https://raw.githubusercontent.com/wesleybeckner/ds_for_engineers/main/data/truffle_margin/margin_data.xlsx' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Base Cake Truffle Type Primary Flavor Secondary Flavor Color Group Width Height Net Sales Quantity in KG EBITDA Product 0 Tiramisu Chocolate Outer Doughnut Egg Nog Amethyst 340 50 8244.500 21833.99 Tiramisu-Chocolate Outer-Doughnut-Egg Nog-Amet... 1 Tiramisu Chocolate Outer Doughnut Egg Nog Amethyst 1340 25 1857.000 21589.48 Tiramisu-Chocolate Outer-Doughnut-Egg Nog-Amet... 2 Tiramisu Chocolate Outer Chocolate Pear Amethyst 310 140 17365.000 19050.69 Tiramisu-Chocolate Outer-Chocolate-Pear-Amethy... 3 Tiramisu Chocolate Outer Doughnut Egg Nog Amethyst 449 50 14309.000 18573.01 Tiramisu-Chocolate Outer-Doughnut-Egg Nog-Amet... 4 Tiramisu Chocolate Outer Doughnut Rock and Rye Amethyst 640 80 25584.500 14790.90 Tiramisu-Chocolate Outer-Doughnut-Rock and Rye... ... ... ... ... ... ... ... ... ... ... ... 2501 Butter Chocolate Outer Lemon Bar Wild Cherry Cream Amethyst 930 50 150352.000 -97839.16 Butter-Chocolate Outer-Lemon Bar-Wild Cherry C... 2502 Butter Chocolate Outer Cream Soda Peppermint Amethyst 900 50 120451.400 -98661.97 Butter-Chocolate Outer-Cream Soda-Peppermint-A... 2503 Butter Jelly Filled Orange Cucumber Burgundy 905 50 143428.580 -122236.96 Butter-Jelly Filled-Orange-Cucumber-Burgundy-9... 2504 Butter Chocolate Outer Horchata Dill Pickle Amethyst 597 45 271495.572 -128504.49 Butter-Chocolate Outer-Horchata-Dill Pickle-Am... 2505 Butter Candy Outer Ginger Lime Vanilla Amethyst 580 50 170567.065 -137897.08 Butter-Candy Outer-Ginger Lime-Vanilla-Amethys... 2506 rows \u00d7 10 columns","title":"3.3.2.1 From excel and csv"},{"location":"S3_Functions/#3322-from-lists","text":"my_list = [[ 1 , 2 , 3 ], [ 3 , 4 , 5 ], [ 5 , 6 , 7 ], [ 7 , 8 , 9 ]] pd . DataFrame ( my_list ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 0 1 2 3 1 3 4 5 2 5 6 7 3 7 8 9 pd . DataFrame ([[ 1 , 2 , 3 ], [ 3 , 4 , 5 ], [ 5 , 6 , 7 ], [ 7 , 8 , 9 ]], index = [ 'a' , 'b' , 'c' , 'd' ], columns = [ 'x' , 'y' , 'z' ]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x y z a 1 2 3 b 3 4 5 c 5 6 7 d 7 8 9","title":"3.3.2.2 from lists"},{"location":"S3_Functions/#3323-from-dictionaries","text":"from_dict = pd . DataFrame ({ 'A' : [ 'apple' , 'airplane' ], 'B' : [ 'bannana' , 'bubbles' ]}) from_dict .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 0 apple bannana 1 airplane bubbles from_dict . to_dict () {'A': {0: 'apple', 1: 'airplane'}, 'B': {0: 'bannana', 1: 'bubbles'}}","title":"3.3.2.3 from dictionaries"},{"location":"S3_Functions/#exercise-2-create-a-dataframe","text":"Create a dictionary with the following keys: movies, songs, books . In each key list your top 5 favorites in the cooresponding category. Then use pd.DataFrame to turn this into a dictionary. # Cell for Ex 2","title":"Exercise 2: Create a DataFrame"},{"location":"S3_Functions/#3324-on-pandasseries","text":"pandas Series objects will percolate in our experience here and there, however they are not so important as for us to wish to spend dedicated time on them. For now, know that they are a lower-level data collection in the pandas framework. You can think of them as an individual column or row in the pandas dataframe. For more practice with these you can refer to this documentation","title":"3.3.2.4 on pandas.Series"},{"location":"S3_Functions/#333-viewing-pandas-dataframes","text":"The head() and tail() methods show us the first and last rows of the data. df.head() df.tail() df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics 0 tt0000009 Miss Jerry Miss Jerry 1894 1894-10-09 Romance 45 USA None Alexander Black Alexander Black Alexander Black Photoplays Blanche Bayliss, William Courtenay, Chauncey D... The adventures of a female reporter in the 1890s. 5.9 154 NaN NaN NaN NaN 1.0 2.0 1 tt0000574 The Story of the Kelly Gang The Story of the Kelly Gang 1906 1906-12-26 Biography, Crime, Drama 70 Australia None Charles Tait Charles Tait J. and N. Tait Elizabeth Tait, John Tait, Norman Campbell, Be... True story of notorious Australian outlaw Ned ... 6.1 589 $ 2250 NaN NaN NaN 7.0 7.0 2 tt0001892 Den sorte dr\u00f8m Den sorte dr\u00f8m 1911 1911-08-19 Drama 53 Germany, Denmark NaN Urban Gad Urban Gad, Gebhard Sch\u00e4tzler-Perasini Fotorama Asta Nielsen, Valdemar Psilander, Gunnar Helse... Two men of high rank are both wooing the beaut... 5.8 188 NaN NaN NaN NaN 5.0 2.0 3 tt0002101 Cleopatra Cleopatra 1912 1912-11-13 Drama, History 100 USA English Charles L. Gaskill Victorien Sardou Helen Gardner Picture Players Helen Gardner, Pearl Sindelar, Miss Fielding, ... The fabled queen of Egypt's affair with Roman ... 5.2 446 $ 45000 NaN NaN NaN 25.0 3.0 4 tt0002130 L'Inferno L'Inferno 1911 1911-03-06 Adventure, Drama, Fantasy 68 Italy Italian Francesco Bertolini, Adolfo Padovan Dante Alighieri Milano Film Salvatore Papa, Arturo Pirovano, Giuseppe de L... Loosely adapted from Dante's Divine Comedy and... 7.0 2237 NaN NaN NaN NaN 31.0 14.0 df . tail () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics 85850 tt9908390 Le lion Le lion 2020 2020-01-29 Comedy 95 France, Belgium French Ludovic Colbeau-Justin Alexandre Coquelle, Matthieu Le Naour Monkey Pack Films Dany Boon, Philippe Katerine, Anne Serra, Samu... A psychiatric hospital patient pretends to be ... 5.3 398 NaN NaN $ 3507171 NaN NaN 4.0 85851 tt9911196 De Beentjes van Sint-Hildegard De Beentjes van Sint-Hildegard 2020 2020-02-13 Comedy, Drama 103 Netherlands German, Dutch Johan Nijenhuis Radek Bajgar, Herman Finkers Johan Nijenhuis & Co Herman Finkers, Johanna ter Steege, Leonie ter... A middle-aged veterinary surgeon believes his ... 7.7 724 NaN NaN $ 7299062 NaN 6.0 4.0 85852 tt9911774 Padmavyuhathile Abhimanyu Padmavyuhathile Abhimanyu 2019 2019-03-08 Drama 130 India Malayalam Vineesh Aaradya Vineesh Aaradya, Vineesh Aaradya RMCC Productions Anoop Chandran, Indrans, Sona Nair, Simon Brit... NaN 7.9 265 NaN NaN NaN NaN NaN NaN 85853 tt9914286 Sokagin \u00c7ocuklari Sokagin \u00c7ocuklari 2019 2019-03-15 Drama, Family 98 Turkey Turkish Ahmet Faik Akinci Ahmet Faik Akinci, Kasim U\u00e7kan Gizem Ajans Ahmet Faik Akinci, Belma Mamati, Metin Ke\u00e7eci,... NaN 6.4 194 NaN NaN $ 2833 NaN NaN NaN 85854 tt9914942 La vida sense la Sara Amat La vida sense la Sara Amat 2019 2020-02-05 Drama 74 Spain Catalan Laura Jou Coral Cruz, Pep Puig La Xarxa de Comunicaci\u00f3 Local Maria Morera Colomer, Biel Rossell Pelfort, Is... Pep, a 13-year-old boy, is in love with a girl... 6.7 102 NaN NaN $ 59794 NaN NaN 2.0 The shape attribute shows us the number of elements: df.shape Note it doesn't have the () because it isn't a function - it is an attribute or variable attached to the df object. df . shape (85855, 22) The columns attribute gives us the column names df.columns df . columns Index(['imdb_title_id', 'title', 'original_title', 'year', 'date_published', 'genre', 'duration', 'country', 'language', 'director', 'writer', 'production_company', 'actors', 'description', 'avg_vote', 'votes', 'budget', 'usa_gross_income', 'worlwide_gross_income', 'metascore', 'reviews_from_users', 'reviews_from_critics'], dtype='object') The index attribute gives us the index names df.index df . index RangeIndex(start=0, stop=85855, step=1) The dtypes attribute gives the data types of each column, remember the data type floating point *?: df.dtypes df . dtypes imdb_title_id object title object original_title object year object date_published object genre object duration int64 country object language object director object writer object production_company object actors object description object avg_vote float64 votes int64 budget object usa_gross_income object worlwide_gross_income object metascore float64 reviews_from_users float64 reviews_from_critics float64 dtype: object df . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } duration avg_vote votes metascore reviews_from_users reviews_from_critics count 85855.000000 85855.000000 8.585500e+04 13305.000000 78258.000000 74058.000000 mean 100.351418 5.898656 9.493490e+03 55.896881 46.040826 27.479989 std 22.553848 1.234987 5.357436e+04 17.784874 178.511411 58.339158 min 41.000000 1.000000 9.900000e+01 1.000000 1.000000 1.000000 25% 88.000000 5.200000 2.050000e+02 43.000000 4.000000 3.000000 50% 96.000000 6.100000 4.840000e+02 57.000000 9.000000 8.000000 75% 108.000000 6.800000 1.766500e+03 69.000000 27.000000 23.000000 max 808.000000 9.900000 2.278845e+06 100.000000 10472.000000 999.000000","title":"3.3.3 Viewing pandas dataframes"},{"location":"S3_Functions/#exercise-3-viewing-dataframes","text":"Using the dataframe you made in exercise 1, return the following attributes: the datatype stored in each column, the column names, the indices, and the shape. # Cell for Ex 3","title":"Exercise 3: Viewing DataFrames"},{"location":"S3_Functions/#334-manipulating-data-with-pandas","text":"Here we'll cover some key features of manipulating data with pandas","title":"3.3.4 Manipulating data with pandas"},{"location":"S3_Functions/#3341-selection","text":"Access columns by name using square-bracket indexing: df['duration'] df [ 'duration' ] 0 45 1 70 2 53 3 100 4 68 ... 85850 95 85851 103 85852 130 85853 98 85854 74 Name: duration, Length: 85855, dtype: int64 Mathematical operations on columns happen element-wise : df['duration'] / 60 df [ 'duration' ] / 60 0 0.750000 1 1.166667 2 0.883333 3 1.666667 4 1.133333 ... 85850 1.583333 85851 1.716667 85852 2.166667 85853 1.633333 85854 1.233333 Name: duration, Length: 85855, dtype: float64 Columns can be created (or overwritten) with the assignment operator. Let's create a column with duration in hours. df['duration (hours)'] = df['duration'] / 60 df [ 'duration (hours)' ] = df [ 'duration' ] / 60 Let's use the .head() function to see our new data! df.head() df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) 0 tt0000009 Miss Jerry Miss Jerry 1894 1894-10-09 Romance 45 USA None Alexander Black Alexander Black Alexander Black Photoplays Blanche Bayliss, William Courtenay, Chauncey D... The adventures of a female reporter in the 1890s. 5.9 154 NaN NaN NaN NaN 1.0 2.0 0.750000 1 tt0000574 The Story of the Kelly Gang The Story of the Kelly Gang 1906 1906-12-26 Biography, Crime, Drama 70 Australia None Charles Tait Charles Tait J. and N. Tait Elizabeth Tait, John Tait, Norman Campbell, Be... True story of notorious Australian outlaw Ned ... 6.1 589 $ 2250 NaN NaN NaN 7.0 7.0 1.166667 2 tt0001892 Den sorte dr\u00f8m Den sorte dr\u00f8m 1911 1911-08-19 Drama 53 Germany, Denmark NaN Urban Gad Urban Gad, Gebhard Sch\u00e4tzler-Perasini Fotorama Asta Nielsen, Valdemar Psilander, Gunnar Helse... Two men of high rank are both wooing the beaut... 5.8 188 NaN NaN NaN NaN 5.0 2.0 0.883333 3 tt0002101 Cleopatra Cleopatra 1912 1912-11-13 Drama, History 100 USA English Charles L. Gaskill Victorien Sardou Helen Gardner Picture Players Helen Gardner, Pearl Sindelar, Miss Fielding, ... The fabled queen of Egypt's affair with Roman ... 5.2 446 $ 45000 NaN NaN NaN 25.0 3.0 1.666667 4 tt0002130 L'Inferno L'Inferno 1911 1911-03-06 Adventure, Drama, Fantasy 68 Italy Italian Francesco Bertolini, Adolfo Padovan Dante Alighieri Milano Film Salvatore Papa, Arturo Pirovano, Giuseppe de L... Loosely adapted from Dante's Divine Comedy and... 7.0 2237 NaN NaN NaN NaN 31.0 14.0 1.133333","title":"3.3.4.1 Selection"},{"location":"S3_Functions/#33411-loc-and-iloc","text":"Pandas provides a powerful way to work with both rows and columns together, optionally using their label indices or numeric indices. .loc : Purely label-location based indexer for selection by label (but may also be used with a boolean array). Important: If you use slicing in loc, it will return the end index as well .iloc: Purely integer-location based indexing for selection by position (but may also be used with a boolean array). df . columns [ 1 ] 'title' df . loc [: 5 : 2 , [ df . columns [ 1 ]]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } title 0 Miss Jerry 2 Den sorte dr\u00f8m 4 L'Inferno df . iloc [ - 5 :, [ 3 , 5 ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } year genre 85850 2020 Comedy 85851 2020 Comedy, Drama 85852 2019 Drama 85853 2019 Drama, Family 85854 2019 Drama","title":"3.3.4.1.1 loc and iloc"},{"location":"S3_Functions/#33412-column-vs-index-access","text":"df [ 'duration' ][ 0 : 10 ] 0 45 1 70 2 53 3 100 4 68 5 60 6 85 7 120 8 120 9 55 Name: duration, dtype: int64 # df[0]['duration'] # will return an error my_list = [[ 10 , 20 , 30 ]] * 4 mydf = pd . DataFrame ( my_list , index = [ 'a' , 'b' , 'c' , 'd' ], columns = [ 'alpha' , 'beta' , 'gamma' ]) mydf .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } alpha beta gamma a 10 20 30 b 10 20 30 c 10 20 30 d 10 20 30 mydf . loc [ 'a' , 'alpha' ] = 'mychange' # using this you will get a setting # with copy warning (depending on your pandas warning settings) # mydf['alpha']['a'] = 'newchange' You want to use loc or iloc when setting new values to pandas dataframes.","title":"3.3.4.1.2 column vs index access"},{"location":"S3_Functions/#exercise-4-selecting","text":"select the first 10 rows of the country, genre, and year columns using loc . Repeat the same exercise using iloc # Cell for Ex 4","title":"Exercise 4: Selecting"},{"location":"S3_Functions/#3342-filtering","text":"filtering down your selection will be BIGLY useful in your data quests","title":"3.3.4.2 Filtering"},{"location":"S3_Functions/#33421-by-string","text":"one of the first tools we'll use to filter our dataset is the .str.contains method. Let's take an example. # remember, if we don't remember our column mames we can quickly pull them up # with: df . columns Index(['imdb_title_id', 'title', 'original_title', 'year', 'date_published', 'genre', 'duration', 'country', 'language', 'director', 'writer', 'production_company', 'actors', 'description', 'avg_vote', 'votes', 'budget', 'usa_gross_income', 'worlwide_gross_income', 'metascore', 'reviews_from_users', 'reviews_from_critics', 'duration (hours)'], dtype='object') [ df [ 'description' ] . str . contains ( 'a.i.' , na = False )] [0 False 1 True 2 True 3 False 4 True ... 85850 True 85851 False 85852 False 85853 False 85854 False Name: description, Length: 85855, dtype: bool] df . iloc [ 17920 ][ 'description' ] 'A scientist creates Proteus--an organic super computer with artificial intelligence which becomes obsessed with human beings, and in particular the creators wife.' df [ df [ 'description' ] . str . contains ( 'artificial intelligence' , na = False )] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) 17920 tt0075931 Generazione Proteus Demon Seed 1977 1977-12-31 Horror, Sci-Fi 94 USA English Donald Cammell Dean R. Koontz, Robert Jaffe Metro-Goldwyn-Mayer (MGM) Julie Christie, Fritz Weaver, Gerrit Graham, B... A scientist creates Proteus--an organic super ... 6.3 7994 NaN NaN NaN 55.0 71.0 81.0 1.566667 44484 tt0382992 Stealth - Arma suprema Stealth 2005 2005-09-02 Action, Adventure, Sci-Fi 121 USA English, Korean, Russian, Spanish Rob Cohen W.D. Richter Columbia Pictures Josh Lucas, Jessica Biel, Jamie Foxx, Sam Shep... Deeply ensconced in a top-secret military prog... 5.1 51365 $ 135000000 $ 32116746 $ 79268322 35.0 401.0 150.0 2.016667 65411 tt2209764 Transcendence Transcendence 2014 2014-04-17 Action, Drama, Sci-Fi 119 UK, China, USA English Wally Pfister Jack Paglen Alcon Entertainment Johnny Depp, Rebecca Hall, Paul Bettany, Cilli... A scientist's drive for artificial intelligenc... 6.3 213720 $ 100000000 $ 23022309 $ 103039258 42.0 554.0 373.0 1.983333 68589 tt2769184 Debug Debug 2014 2015-02-07 Horror, Sci-Fi 86 Canada English David Hewlett David Hewlett Copperheart Entertainment Tenika Davis, Jason Momoa, Adrian Holmes, Kjar... Six young computer hackers, sent to work on a ... 4.3 2244 NaN NaN NaN NaN 38.0 30.0 1.433333 71500 tt3502284 Kikaid\u00e2 Reboot Kikaid\u00e2 Reboot 2014 2014-05-24 Action 110 Japan Japanese Ten Shimoyama Sh\u00f4tar\u00f4 Ishinomori, Kento Shimoyama Asatsu-DK Jingi Irie, Kazushige Nagashima, Aimi Satsukaw... Komyoji Nobuhiko is a genius and leader in rob... 5.6 110 NaN NaN NaN NaN 2.0 2.0 1.833333 75759 tt4788944 Robot Sound Robot Sound 2016 2016-01-27 Sci-Fi 117 South Korea Korean, English Ho-jae Lee Soyoung Lee NaN Erik Brown, Soo-bin Chae, Dean Dawson, Lee Han... The plot revolves around a robotic satellite w... 6.9 191 NaN NaN $ 2843718 NaN 3.0 4.0 1.950000 75907 tt4839424 Qi che ren zong dong yuan Qi che ren zong dong yuan 2015 2015-07-03 Animation, Adventure, Family 85 China Mandarin Jianrong Zhuo NaN Xiamen Lanhuoyan Film Animation Co. Christopher Petrosian, Dawei Hu, Xinxuan Liu, ... The film revolves around a genius engineer who... 1.1 121 NaN NaN NaN NaN 2.0 NaN 1.416667 76214 tt4937114 Rogue Warrior: Robot Fighter Rogue Warrior: Robot Fighter 2016 2016-09-02 Action, Sci-Fi 101 USA English Neil Johnson Neil Johnson Empire Motion pictures Tracey Birdsall, William Kircher, Daz Crawford... In the distant future, humanity is overthrown ... 4.9 2574 $ 3800000 NaN NaN NaN 22.0 26.0 1.683333 79921 tt6197070 Blood Machines Blood Machines 2019 2020-09-01 Adventure, Music, Sci-Fi 50 France English Rapha\u00ebl Hernandez, Seth Ickerman Rapha\u00ebl Hernandez, Seth Ickerman Logical Pictures Elisa Lasowski, Anders Heinrichsen, Christian ... An artificial intelligence escapes her spacesh... 6.1 2023 NaN NaN NaN NaN 70.0 55.0 0.833333 83905 tt8196068 Twisted Pair Twisted Pair 2018 2018-10-03 Drama, Fantasy, Sci-Fi 89 USA English Neil Breen Neil Breen Neil Breen Films Neil Breen, Sara Meritt, Siohbon Chevy Ebrahim... Identical twin brothers become hybrid A.I (art... 5.9 1313 $ 3 NaN NaN NaN 69.0 4.0 1.483333 84615 tt8712750 A.M.I. A.M.I. 2019 2019-07-02 Horror, Thriller 77 Canada English Rusty Nixon Rusty Nixon, Evan Tylor 1160594 B.C. Debs Howard, Philip Granger, Bonnie Hay, Sam R... A seventeen year old girl forms a co-dependent... 3.9 1399 NaN NaN NaN NaN 91.0 13.0 1.283333 85361 tt9308170 \u00d6zg\u00fcr D\u00fcnya \u00d6zg\u00fcr D\u00fcnya 2019 2019-03-22 Action, Adventure, Family 122 Turkey Turkish Faruk Aksoy, Sevki Es Faruk Aksoy, H\u00fcseyin Aksu Ay Yapim Murat Serezli, Rabia Soyturk, G\u00fcrbey Ileri, Ha... The story of a game managed by artificial inte... 2.3 340 NaN NaN $ 50537 NaN 2.0 NaN 2.033333 or if you know the exact string you are looking for df [ df [ 'title' ] == \"Fight Club\" ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) 32487 tt0137523 Fight Club Fight Club 1999 1999-10-29 Drama 139 USA, Germany English David Fincher Chuck Palahniuk, Jim Uhls Fox 2000 Pictures Edward Norton, Brad Pitt, Meat Loaf, Zach Gren... An insomniac office worker and a devil-may-car... 8.8 1807440 $ 63000000 $ 37030102 $ 101218804 66.0 3758.0 370.0 2.316667","title":"3.3.4.2.1 By String"},{"location":"S3_Functions/#33422-by-numerical-value","text":"df [ df [ 'votes' ] > 1000 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) 4 tt0002130 L'Inferno L'Inferno 1911 1911-03-06 Adventure, Drama, Fantasy 68 Italy Italian Francesco Bertolini, Adolfo Padovan Dante Alighieri Milano Film Salvatore Papa, Arturo Pirovano, Giuseppe de L... Loosely adapted from Dante's Divine Comedy and... 7.0 2237 NaN NaN NaN NaN 31.0 14.0 1.133333 11 tt0002844 Fant\u00f4mas - \u00c0 l'ombre de la guillotine Fant\u00f4mas - \u00c0 l'ombre de la guillotine 1913 1913-05-12 Crime, Drama 54 France French Louis Feuillade Marcel Allain, Louis Feuillade Soci\u00e9t\u00e9 des Etablissements L. Gaumont Ren\u00e9 Navarre, Edmund Breon, Georges Melchior, ... Inspector Juve is tasked to investigate and ca... 7.0 1944 NaN NaN NaN NaN 9.0 28.0 0.900000 13 tt0003037 Juve contre Fant\u00f4mas Juve contre Fant\u00f4mas 1913 1913-09-08 Crime, Drama 61 France French Louis Feuillade Marcel Allain, Louis Feuillade Soci\u00e9t\u00e9 des Etablissements L. Gaumont Ren\u00e9 Navarre, Edmund Breon, Georges Melchior, ... In Part Two of Louis Feuillade's 5 1/2-hour ep... 7.0 1349 NaN NaN NaN NaN 8.0 23.0 1.016667 16 tt0003165 Le mort qui tue Le mort qui tue 1913 1913-11-06 Crime, Drama, Mystery 90 France French Louis Feuillade Marcel Allain, Louis Feuillade Soci\u00e9t\u00e9 des Etablissements L. Gaumont Ren\u00e9 Navarre, Edmund Breon, Georges Melchior, ... After a body disappears from inside the prison... 7.0 1050 NaN NaN NaN NaN 6.0 18.0 1.500000 18 tt0003419 Lo studente di Praga Der Student von Prag 1913 1913-08-22 Drama, Fantasy, Horror 85 Germany German, English Paul Wegener, Stellan Rye Hanns Heinz Ewers, Hanns Heinz Ewers Deutsche Bioscop GmbH Paul Wegener, Grete Berger, Lyda Salmonova, Jo... Balduin, a student of Prague, leaves his royst... 6.5 1768 NaN NaN NaN NaN 20.0 26.0 1.416667 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 85811 tt9860728 Falling Inn Love - Ristrutturazione con amore Falling Inn Love 2019 2019-08-29 Comedy, Romance 98 USA English Roger Kumble Elizabeth Hackett, Hilary Galanoy NaN Christina Milian, Adam Demos, Jeffrey Bowyer-C... When city girl Gabriela spontaneously enters a... 5.6 14108 NaN NaN NaN NaN 265.0 32.0 1.633333 85817 tt9866700 Paranormal Investigation Paranormal Investigation 2018 2018-12-01 Horror, Thriller 92 France French Franck Phelizon NaN Baril Pictures Jose Atuncar, Claudine Bertin, Cedric Henquez,... When a young man becomes possessed after playi... 3.7 1299 NaN NaN NaN NaN 334.0 11.0 1.533333 85837 tt9894470 VFW VFW 2019 2020-02-14 Action, Crime, Horror 92 USA English Joe Begos Max Brallier, Matthew McArdle Fangoria Stephen Lang, William Sadler, Fred Williamson,... A group of old war veterans put their lives on... 6.1 4178 NaN NaN $ 23101 72.0 83.0 94.0 1.533333 85839 tt9898858 Coffee & Kareem Coffee & Kareem 2020 2020-04-03 Action, Comedy 88 USA English Michael Dowse Shane Mack Pacific Electric Picture Company Ed Helms, Taraji P. Henson, Terrence Little Ga... Twelve-year-old Kareem Manning hires a crimina... 5.1 10627 NaN NaN NaN 35.0 388.0 64.0 1.466667 85843 tt9900782 Kaithi Kaithi 2019 2019-10-25 Action, Thriller 145 India Tamil Lokesh Kanagaraj Lokesh Kanagaraj, Pon Parthiban Dream Warrior Pictures Karthi, Narain, Ramana, George Maryan, Harish ... A recently released prisoner becomes involved ... 8.5 8400 INR 240000000 NaN $ 524061 NaN 188.0 8.0 2.416667 29362 rows \u00d7 23 columns","title":"3.3.4.2.2 By numerical value"},{"location":"S3_Functions/#exercise-5-filtering","text":"Filter df for all the movies that are longer than 2 hours Filter df for all movies where 'day' is in the title # Cell for Ex 5","title":"Exercise 5: Filtering"},{"location":"S3_Functions/#3343-select-filter-operation","text":"The real power of Pandas comes in its tools for grouping and aggregating data. Here we'll look at value counts and the basics of group-by operations. # a basic select, filter, operate procedure would look like: df [ df [ 'country' ] == 'USA' ][ 'duration' ] . describe () count 28511.000000 mean 93.050437 std 18.576873 min 42.000000 25% 84.000000 50% 91.000000 75% 100.000000 max 398.000000 Name: duration, dtype: float64 we can invert the selection with ~ df [ ~ ( df [ 'country' ] == 'USA' )][ 'duration' ] . describe () count 57344.000000 mean 103.981410 std 23.459158 min 41.000000 25% 90.000000 50% 99.000000 75% 112.000000 max 808.000000 Name: duration, dtype: float64 In preparation for grouping the data, let's bin the instances by their duration (we could have chosen any numerical column). For that, we'll use pd.cut . The documentation for pd.cut can be found here . It is used to bin values into discrete intervals. This is like a histogram where for each bin along the range of data values, you count the number of occurrences of that bin. in our example, we'll use 10 bins and let Pandas decide how to evenly divide the range into the bins. Let's see it in action. df['duration_group'] = pd.cut(df['duration'], 10) df.head() df.dtypes df [ 'duration_group' ] = pd . cut ( df [ 'duration' ], 10 ) df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) duration_group 0 tt0000009 Miss Jerry Miss Jerry 1894 1894-10-09 Romance 45 USA None Alexander Black Alexander Black Alexander Black Photoplays Blanche Bayliss, William Courtenay, Chauncey D... The adventures of a female reporter in the 1890s. 5.9 154 NaN NaN NaN NaN 1.0 2.0 0.750000 (40.233, 117.7] 1 tt0000574 The Story of the Kelly Gang The Story of the Kelly Gang 1906 1906-12-26 Biography, Crime, Drama 70 Australia None Charles Tait Charles Tait J. and N. Tait Elizabeth Tait, John Tait, Norman Campbell, Be... True story of notorious Australian outlaw Ned ... 6.1 589 $ 2250 NaN NaN NaN 7.0 7.0 1.166667 (40.233, 117.7] 2 tt0001892 Den sorte dr\u00f8m Den sorte dr\u00f8m 1911 1911-08-19 Drama 53 Germany, Denmark NaN Urban Gad Urban Gad, Gebhard Sch\u00e4tzler-Perasini Fotorama Asta Nielsen, Valdemar Psilander, Gunnar Helse... Two men of high rank are both wooing the beaut... 5.8 188 NaN NaN NaN NaN 5.0 2.0 0.883333 (40.233, 117.7] 3 tt0002101 Cleopatra Cleopatra 1912 1912-11-13 Drama, History 100 USA English Charles L. Gaskill Victorien Sardou Helen Gardner Picture Players Helen Gardner, Pearl Sindelar, Miss Fielding, ... The fabled queen of Egypt's affair with Roman ... 5.2 446 $ 45000 NaN NaN NaN 25.0 3.0 1.666667 (40.233, 117.7] 4 tt0002130 L'Inferno L'Inferno 1911 1911-03-06 Adventure, Drama, Fantasy 68 Italy Italian Francesco Bertolini, Adolfo Padovan Dante Alighieri Milano Film Salvatore Papa, Arturo Pirovano, Giuseppe de L... Loosely adapted from Dante's Divine Comedy and... 7.0 2237 NaN NaN NaN NaN 31.0 14.0 1.133333 (40.233, 117.7] df . dtypes imdb_title_id object title object original_title object year object date_published object genre object duration int64 country object language object director object writer object production_company object actors object description object avg_vote float64 votes int64 budget object usa_gross_income object worlwide_gross_income object metascore float64 reviews_from_users float64 reviews_from_critics float64 duration (hours) float64 duration_group category dtype: object Pandas includes an array of useful functionality for manipulating and analyzing tabular data. We'll take a look at two of these here. The pandas.value_counts returns statistics on the unique values within each column. We can use it, for example, to break down the movies by their duration group that we just created: pd.value_counts(df['duration_group'], sort=False) pd . value_counts ( df [ 'duration_group' ], sort = False ) (40.233, 117.7] 72368 (117.7, 194.4] 13197 (194.4, 271.1] 228 (271.1, 347.8] 40 (347.8, 424.5] 11 (424.5, 501.2] 4 (501.2, 577.9] 4 (577.9, 654.6] 1 (654.6, 731.3] 1 (731.3, 808.0] 1 Name: duration_group, dtype: int64 What happens if we try this on a continuous valued variable? pd.value_counts(df['duration']) pd . value_counts ( df [ 'duration' ]) 90 5162 95 3194 100 3106 92 2418 93 2414 ... 279 1 301 1 345 1 729 1 319 1 Name: duration, Length: 266, dtype: int64","title":"3.3.4.3 Select, filter, operation"},{"location":"S3_Functions/#exercise-6-value_counts-unique-nunique","text":"We can do a little data exploration with this by seeing how common different values are. Play around with these pandas methods: value_counts() unique() nunique() Also be sure to use: selection filteration (and you are already using operation with the above mentioned pandas methods, value_counts, unique, nunique (: ) Do so with 3 different columns in the dataframe # Cell for Exercise 6","title":"Exercise 6: value_counts, unique, nunique"},{"location":"S3_Functions/#3344-group-by-operation","text":"One of the killer features of the Pandas dataframe is the ability to do group-by operations. You can visualize the group-by like this (image borrowed from the Python Data Science Handbook )","title":"3.3.4.4 Group-by Operation"},{"location":"S3_Functions/#3345-summary-statistics-with-groupby-value_counts-count-describe","text":"Let's break take this in smaller steps. Recall our duration_group column. pd.value_counts(df['duration_group']) pd . value_counts ( df [ 'duration_group' ]) (40.233, 117.7] 72368 (117.7, 194.4] 13197 (194.4, 271.1] 228 (271.1, 347.8] 40 (347.8, 424.5] 11 (501.2, 577.9] 4 (424.5, 501.2] 4 (731.3, 808.0] 1 (654.6, 731.3] 1 (577.9, 654.6] 1 Name: duration_group, dtype: int64 groupby allows us to look at the number of values for each column and each value. The group by documentation is here . Basically, groupby allows us to create groups of records based on their values. Let's count how many records, or rows, in our data set fall into each bin of our duration data. df.groupby(['duration_group']).count() df . groupby ([ 'duration_group' ]) . count () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) duration_group (40.233, 117.7] 72368 72368 72368 72368 72368 72368 72368 72315 71618 72309 71474 68922 72304 70464 72368 72368 19493 12123 24645 10759 65972 63321 72368 (117.7, 194.4] 13197 13197 13197 13197 13197 13197 13197 13186 13122 13171 12528 12211 13192 12990 13197 13197 4133 3153 6298 2506 12017 10493 13197 (194.4, 271.1] 228 228 228 228 228 228 228 228 221 226 221 207 228 226 228 228 70 40 59 28 215 188 228 (271.1, 347.8] 40 40 40 40 40 40 40 40 40 40 39 39 40 38 40 40 10 5 9 8 37 37 40 (347.8, 424.5] 11 11 11 11 11 11 11 11 10 11 11 10 11 11 11 11 1 3 3 1 9 10 11 (424.5, 501.2] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 1 0 0 1 4 4 4 (501.2, 577.9] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 1 0 0 0 2 3 4 (577.9, 654.6] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 1 (654.6, 731.3] 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 (731.3, 808.0] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 Now, let's find the mean of each of the columns for each duration_group . Notice what happens to the non-numeric columns. df.groupby(['duration_group']).mean() df . groupby ([ 'duration_group' ]) . mean () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } duration avg_vote votes metascore reviews_from_users reviews_from_critics duration (hours) duration_group (40.233, 117.7] 93.147026 5.786671 6604.507932 54.153267 35.944037 24.517601 1.552450 (117.7, 194.4] 136.552550 6.488513 25010.089414 63.042298 100.725639 45.365958 2.275876 (194.4, 271.1] 220.394737 6.997368 30003.302632 76.500000 94.711628 29.015957 3.673246 (271.1, 347.8] 302.975000 6.810000 4201.275000 79.375000 19.378378 21.513514 5.049583 (347.8, 424.5] 384.636364 7.181818 2602.545455 89.000000 18.333333 18.100000 6.410606 (424.5, 501.2] 454.000000 7.700000 2589.000000 59.000000 19.250000 24.500000 7.566667 (501.2, 577.9] 547.500000 7.875000 206.500000 NaN 1.500000 8.666667 9.125000 (577.9, 654.6] 580.000000 5.800000 157.000000 NaN NaN NaN 9.666667 (654.6, 731.3] 729.000000 7.800000 1126.000000 87.000000 13.000000 30.000000 12.150000 (731.3, 808.0] 808.000000 7.700000 473.000000 77.000000 5.000000 23.000000 13.466667 You can specify a groupby using the names of table columns and compute other functions, such as the sum , count , std , and describe . df.groupby(['duration_group'])['metascore'].describe() df . groupby ([ 'duration_group' ])[ 'metascore' ] . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } count mean std min 25% 50% 75% max duration_group (40.233, 117.7] 10759.0 54.153267 17.655622 1.0 41.00 55.0 67.00 100.0 (117.7, 194.4] 2506.0 63.042298 16.265137 9.0 52.00 64.0 75.00 100.0 (194.4, 271.1] 28.0 76.500000 20.532720 10.0 69.75 82.0 90.00 100.0 (271.1, 347.8] 8.0 79.375000 12.070478 56.0 72.25 84.5 88.25 90.0 (347.8, 424.5] 1.0 89.000000 NaN 89.0 89.00 89.0 89.00 89.0 (424.5, 501.2] 1.0 59.000000 NaN 59.0 59.00 59.0 59.00 59.0 (501.2, 577.9] 0.0 NaN NaN NaN NaN NaN NaN NaN (577.9, 654.6] 0.0 NaN NaN NaN NaN NaN NaN NaN (654.6, 731.3] 1.0 87.000000 NaN 87.0 87.00 87.0 87.00 87.0 (731.3, 808.0] 1.0 77.000000 NaN 77.0 77.00 77.0 77.00 77.0 The simplest version of a groupby looks like this, and you can use almost any aggregation function you wish (mean, median, sum, minimum, maximum, standard deviation, count, etc.) <data object>.groupby(<grouping values>).<aggregate>() You can even group by multiple values: for example we can look at the metascore grouped by the duration_group and country . df . groupby ([ 'duration_group' , 'country' ])[ 'metascore' ] . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } count mean std min 25% 50% 75% max duration_group country (40.233, 117.7] Afghanistan, France 0.0 NaN NaN NaN NaN NaN NaN NaN Afghanistan, France, Germany, UK 1.0 64.0 NaN 64.0 64.0 64.0 64.0 64.0 Afghanistan, Iran 0.0 NaN NaN NaN NaN NaN NaN NaN Afghanistan, Ireland, Japan, Iran, Netherlands 1.0 83.0 NaN 83.0 83.0 83.0 83.0 83.0 Albania 0.0 NaN NaN NaN NaN NaN NaN NaN ... ... ... ... ... ... ... ... ... ... (501.2, 577.9] Philippines, Netherlands, Sweden 0.0 NaN NaN NaN NaN NaN NaN NaN Russia 0.0 NaN NaN NaN NaN NaN NaN NaN (577.9, 654.6] Soviet Union 0.0 NaN NaN NaN NaN NaN NaN NaN (654.6, 731.3] France 1.0 87.0 NaN 87.0 87.0 87.0 87.0 87.0 (731.3, 808.0] Argentina 1.0 77.0 NaN 77.0 77.0 77.0 77.0 77.0 5565 rows \u00d7 8 columns","title":"3.3.4.5 Summary statistics with groupby: value_counts,  count, describe"},{"location":"S3_Functions/#exercise-7-group-by","text":"use pd.cut to perform a grouping of one or more of the dataframe columns use groupby to group by that (those) columns and then perform three different statistical summaries in three separate instances # Cell for excercise 7","title":"Exercise 7: Group-by"},{"location":"S4_Object_Oriented_Programming/","text":"Technology Fundamentals Course 1, Session 4: Visualization and OOP \u00b6 Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assitants Varsha Bang, Harsha Vardhan Contact vbang@uw.edu, harshav@uw.edu In this session we'll be discussing visualization strategies. And, more specifically, how we can manipulate our pandas dataframes to give us the visualizations we desire. Before we get there, however, we're going to start by introducing a python module called Matplotlib. 4.1 Visualization with Matplotlib \u00b6 Lets start by importing our matplotlib module. Pyplot is a module of Matplotlib that provides functions to add plot elements like text, lines, and images. typically we import this module like so import matplotlib.pyplot as plt where plt is shorthand for the matplotlib.pyplot library import matplotlib.pyplot as plt 4.1.1 The Basics \u00b6 Matplotlib is strongly object oriented and its principal objects are the figure and the axes . But before we get into that I want us to explore the most basic use case. In this basic use case, we don't declare the figure and axes objects explicitly, but rather work directly in the pyplot namespace. I'm going to create a list of x and y values and plot them with pyplot x = [1,2,3,4,5,6,7] y = [1,1,2,3,5,8,13] plt.plot(x,y) x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] y = [ 1 , 1 , 2 , 3 , 5 , 8 , 13 ] plt . plot ( x , y ) [<matplotlib.lines.Line2D at 0x7fcd31e36250>] We can label the axes of our figure using the xlabel and ylabel attributes, and label our title using the title attribute. plt.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13]) plt.title('The Fibonacci Sequence') plt.xlabel('Order in Sequence') plt.ylabel('Value') plt . plot ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ],[ 1 , 1 , 2 , 3 , 5 , 8 , 13 ]) plt . title ( 'The Fibonacci Sequence' ) plt . xlabel ( 'Order in Sequence' ) plt . ylabel ( 'Value' ) Text(0, 0.5, 'Value') What do we think about the out-of-the-box formatting of pyplot ? What are some things we can do to make it better? Could we make it bigger? Perhaps different dimensions? Does anyone recognize that default line color? Before we make any changes, let's become acquianted with the more appropriate way to work in matplotlib.pyplot . In this formality, we explicitly create our figure and axes objects. # This is one way to do it... # plt.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13]) # but we can also do it this way, concretely declaring the figure, axes # objects directly # We declare the figure fig = plt.figure() # and then add axes ax = fig.add_subplot(111) You can think of the figure as a canvas, where you specify dimensions and possibly unifying attributes of its contents, like, background color, border, etc. You use the canvas, the figure , to containerize your other objects, primarily your axes , and to save its contents with savefig . You can think of an axes as the actual graphs or plots themselves. And when we declare these objects, we have access to all the methods of matplotlib.pyplot (e.g. .plot , .scatter , .hist etc.) You can place many of these axes into the figure container in a variety of ways. The last component of a pyplot figure are the axis , the graphical axis we typically think of. # This is one way to do it... # plt.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13]) # but we can also do it this way, concretely declaring the figure, axes # objects directly # We declare the figure fig = plt . figure () # and then add axes ax = fig . add_subplot ( 111 ) plt.subplots returns a figure and axes object(s) together: ### We can also do it in 1 line fig, ax = plt.subplots(1, 1, figsize=(8,8)) and we'll go ahead and adjust the figure size with the parameter figsize and set it equal to a tuple containing the x and y dimensions of the figure in inches. ### We can also do it in 1 line fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) To recap, by convention we typically separate our plots into three components: a Figure, its Axes, and their Axis: Figure : It is a whole figure which may contain one or more than one axes (plots). You can think of a figure as a canvas which contains plots. Axes : It is what we generally think of as a plot. A figure can contain many axes . It contains two or three (in the case of 3D) axis objects. Each axes has a title, an x-label and a y-label. Axis : They are the traditional axis we think of in a graph and take care of generating the graph limits. Example: fig, ax = plt.subplots(1, 1, figsize=(8,8)) is creating the figure ( fig ) and axes ( ax ) explicitly, and depending on whether we create 2D or 3D plots, the axes will contain 2-3 axis . Exercise 1: Adjust Figure Size \u00b6 create a figure and axes using plt.subplots() . adjust the figure size to be 6 inches (width) by 3 inches (height). Plot the values of the fibonacci sequence we defined earlier (Bonus) Repeat, this time inverting the y-values using list splicing (Bonus) Explore other plt.plot() attributes using the built in Colab tooltip Plotting building blocks for Exercise 1: * plt.subplots() * ax.plot() * slicing [::] x = [1,2,3,4,5,6,7] y = [1,1,2,3,5,8,13] # Cell for Exercise 1 x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] y = [ 1 , 1 , 2 , 3 , 5 , 8 , 13 ] 4.1.2 Manipulating Plot Attributes \u00b6 We can manipulate many parameters of a figure 's axes : marker , linestyle , and color , to name a few. Each of these parameters takes string values. fig, ax = plt.subplots(1,1, figsize=(5,5)) ax.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13], marker='^', linestyle='--', color='tab:blue') ax.plot([1,2,3,4,5,6,7],[0,3,8,6,5,4,1], marker='.', linestyle='-.', color='#59A41F') ax.set_title('My Random Values') ax.set_xlabel('Order in Sequence') ax.set_ylabel('Value') List of marker styles {'': 'nothing', ' ': 'nothing', '*': 'star', '+': 'plus', ',': 'pixel', '.': 'point', 0: 'tickleft', '1': 'tri_down', 1: 'tickright', 10: 'caretupbase', 11: 'caretdownbase', '2': 'tri_up', 2: 'tickup', '3': 'tri_left', 3: 'tickdown', '4': 'tri_right', 4: 'caretleft', 5: 'caretright', 6: 'caretup', 7: 'caretdown', '8': 'octagon', 8: 'caretleftbase', 9: 'caretrightbase', '<': 'triangle_left', '>': 'triangle_right', 'D': 'diamond', 'H': 'hexagon2', 'None': 'nothing', None: 'nothing', 'P': 'plus_filled', 'X': 'x_filled', '^': 'triangle_up', '_': 'hline', 'd': 'thin_diamond', 'h': 'hexagon1', 'o': 'circle', 'p': 'pentagon', 's': 'square', 'v': 'triangle_down', 'x': 'x', '|': 'vline'} ``` List of line styles {'': '_draw_nothing', ' ': '_draw_nothing', '-': '_draw_solid', '--': '_draw_dashed', '-.': '_draw_dash_dot', ':': '_draw_dotted', 'None': '_draw_nothing'} ``` List of base colors {'b': (0, 0, 1), 'c': (0, 0.75, 0.75), 'g': (0, 0.5, 0), 'k': (0, 0, 0), 'm': (0.75, 0, 0.75), 'r': (1, 0, 0), 'w': (1, 1, 1), 'y': (0.75, 0.75, 0)} list access import matplotlib as mp mp.markers.MarkerStyle.markers mp.lines.lineStyles mp.colors.BASE_COLORS Taking these long lists of available parameters, I'm going to play around with a few and see how they appear in our plot. import matplotlib as mp mp . markers . MarkerStyle . markers # mp.lines.lineStyles # mp.colors.BASE_COLORS {'': 'nothing', ' ': 'nothing', '*': 'star', '+': 'plus', ',': 'pixel', '.': 'point', 0: 'tickleft', '1': 'tri_down', 1: 'tickright', 10: 'caretupbase', 11: 'caretdownbase', '2': 'tri_up', 2: 'tickup', '3': 'tri_left', 3: 'tickdown', '4': 'tri_right', 4: 'caretleft', 5: 'caretright', 6: 'caretup', 7: 'caretdown', '8': 'octagon', 8: 'caretleftbase', 9: 'caretrightbase', '<': 'triangle_left', '>': 'triangle_right', 'D': 'diamond', 'H': 'hexagon2', 'None': 'nothing', None: 'nothing', 'P': 'plus_filled', 'X': 'x_filled', '^': 'triangle_up', '_': 'hline', 'd': 'thin_diamond', 'h': 'hexagon1', 'o': 'circle', 'p': 'pentagon', 's': 'square', 'v': 'triangle_down', 'x': 'x', '|': 'vline'} plt . plot ([ 1 , 2 , 3 ], [ 4 , 5 , 6 ]) plt . title ( 'title' ) Text(0.5, 1.0, 'title') ax . title Text(0.5, 1.0, '') fig , ax = plt . subplots ( 1 , 1 , figsize = ( 5 , 5 )) ax . plot ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ],[ 1 , 1 , 2 , 3 , 5 , 8 , 13 ], marker = 's' , linestyle = ':' , color = 'tab:blue' ) ax . plot ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ],[ 0 , 3 , 8 , 6 , 5 , 4 , 1 ], marker = '.' , linestyle = '-.' , color = '#3E1515' ) ax . set_title ( 'My Random Values' ) ax . set_xlabel ( 'Order in Sequence' ) ax . set_ylabel ( 'Value' ) Text(0, 0.5, 'Value') If we want to make a scatter plot without any lines at all, we set the linestyle to an empty string fig, ax = plt.subplots(1,1, figsize=(5,5)) plt.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13], marker='*', linestyle='', color='tab:green') ax.set_title('The Fibonacci Sequence') ax.set_xlabel('Order in Sequence') ax.set_ylabel('Value') fig , ax = plt . subplots ( 1 , 1 , figsize = ( 5 , 5 )) plt . plot ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ],[ 1 , 1 , 2 , 3 , 5 , 8 , 13 ], marker = 'h' , linestyle = '' , ms = 10 , color = 'tab:green' ) ax . set_title ( 'The Fibonacci Sequence' ) ax . set_xlabel ( 'Order in Sequence' ) ax . set_ylabel ( 'Value' ) Text(0, 0.5, 'Value') Exercise 2: Choose Lines, Colors, and Markers \u00b6 Recreate the \"My Random Values\" plot with a variety of markers, linestyles, and colors. (Bonus) Can you set the markers and lines to colors belonging to the Tableau 20? Try it with and without the hex values! Plotting building blocks for Exercise 2: * marker='' * linestyle='' * color='' # Cell for Exercise 2 ### DO NOT CHANGE BELOW ### x = [1,2,3,4,5,6,7] y1 = [1,1,2,3,5,8,13] y2 = [0,3,8,6,5,4,1] y3 = [10,15,12,9,3,2,1] y4 = [2,4,2,1,2,4,5] fig, ax = plt.subplots(1,1, figsize=(5,5)) ax.set_title('My Random Values') ax.set_xlabel('Order in Sequence') ax.set_ylabel('Value') ### END OF DO NOT CHANGE ### ### change these lines w/ marker, linestyle, color attributes ax.plot(x,y1) ax.plot(x,y2) ax.plot(x,y3) ax.plot(x,y4) # Cell for Exercise 2 ### DO NOT CHANGE BELOW ### x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] y1 = [ 1 , 1 , 2 , 3 , 5 , 8 , 13 ] y2 = [ 0 , 3 , 8 , 6 , 5 , 4 , 1 ] y3 = [ 10 , 15 , 12 , 9 , 3 , 2 , 1 ] y4 = [ 2 , 4 , 2 , 1 , 2 , 4 , 5 ] fig , ax = plt . subplots ( 1 , 1 , figsize = ( 5 , 5 )) ax . set_title ( 'My Random Values' ) ax . set_xlabel ( 'Order in Sequence' ) ax . set_ylabel ( 'Value' ) ### END OF DO NOT CHANGE ### ### change these lines w/ marker, linestyle, color attributes ax . plot ( x , y1 ) ax . plot ( x , y2 ) ax . plot ( x , y3 ) ax . plot ( x , y4 ) [<matplotlib.lines.Line2D at 0x7fcd316d14d0>] 4.1.3 Subplots \u00b6 Remember that fig, ax = plt.subplots() satement we used earlier? We're now going to use that same approach but this time, the second variable that is returned (what we call ax in the cell bellow) is no longer an axes object! Instead, it is an array of axes objects. I'm also going to introduce another module, random , to generate some random values import random fig, ax = plt.subplots(2, 2, figsize=(10,10)) ax[0,1].plot(range(10), [random.random() for i in range(10)], c='tab:orange') ax[1,0].plot(range(10), [random.random() for i in range(10)], c='tab:green') ax[1,1].plot(range(10), [random.random() for i in range(10)], c='tab:red') ax[0,0].plot(range(10), [random.random() for i in range(10)], c='tab:blue') quick note: In the above cell we use something called list comprehension to quickly populate a list of objects (in this case those objects are floats). We won't dive too deeply into that now, but you can think of list comprehension as a more concise way of writing a for() loop. In future cases where list comprehension appears in this notebook I will include code snipets of the corresponding for loop. import random # this list comprehension print([random.random() for i in range(10)]) # produces the same output as this for loop ls = [] for i in range(10): ls.append(random.random()) print(ls) import random random . seed ( 42 ) # this list comprehension print ([ random . random () for i in range ( 10 )]) random . seed ( 42 ) # produces the same output as this for loop ls = [] for i in range ( 10 ): ls . append ( random . random ()) print ( ls ) [0.6394267984578837, 0.025010755222666936, 0.27502931836911926, 0.22321073814882275, 0.7364712141640124, 0.6766994874229113, 0.8921795677048454, 0.08693883262941615, 0.4219218196852704, 0.029797219438070344] [0.6394267984578837, 0.025010755222666936, 0.27502931836911926, 0.22321073814882275, 0.7364712141640124, 0.6766994874229113, 0.8921795677048454, 0.08693883262941615, 0.4219218196852704, 0.029797219438070344] The second thing we'll need to talk about is the grid of the ax object fig , ax = plt . subplots ( 2 , 2 ) ax . shape (2, 2) ax array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7fcd316f9210>, <matplotlib.axes._subplots.AxesSubplot object at 0x7fcd316490d0>], [<matplotlib.axes._subplots.AxesSubplot object at 0x7fcd315fb710>, <matplotlib.axes._subplots.AxesSubplot object at 0x7fcd315b0d50>]], dtype=object) This is exactly like accessing a matrix: matrix[row,column] = element we have the pandas equivalent: df.iloc[0,1] = element import random fig , ax = plt . subplots ( 2 , 2 , figsize = ( 10 , 10 )) ax [ 0 , 0 ] . plot ( range ( 10 ), [ random . random () for i in range ( 10 )], c = 'tab:blue' ) ax [ 0 , 1 ] . plot ( range ( 10 ), [ random . random () for i in range ( 10 )], c = 'tab:orange' ) ax [ 1 , 0 ] . plot ( range ( 10 ), [ random . random () for i in range ( 10 )], c = 'tab:green' ) ax [ 1 , 1 ] . plot ( range ( 10 ), [ random . random () for i in range ( 10 )], c = 'tab:red' ) [<matplotlib.lines.Line2D at 0x7fcd313e3a50>] Exercise 3: Subplots \u00b6 Create a 2x1 figure where the first axes is a plot of the fibonacci sequence up to the 10th sequence value and the second axes is a plot of 10 random integers with values between 10 and 20 (exclusive). Use different markers, colors, and lines for each plot. Since the focus of this tutorial is on visualization, I'll go ahead and provide my own code for generating random integers between 10 and 20 (exclusive). If you have extra time, prove to yourself that this code works! (remember docstrings are your friend!) import random [round(random.random() * 8) + 11 for i in range(10)] # Cell for Exercise 3 ### DO NOT CHANGE ### import random # create the fig, ax objects fig, ax = plt.subplots(1, 2, figsize=(10, 5)) # generate x, y1, and y2 x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y1 = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55] y2 = [round(random.random() * 8) + 11 for i in range(10)] ### END OF DO NOT CHANGE ### # Note: no skeleton code here is given for the figure, I want you to write this # code out yourself. Here is pseudo-code to get you started: # plot the left axes, set the title and axes labels # title: Fibonacci Sequence; xlabel: x values; ylabel: y values ### YOUR CODE HERE ### # plot the right axes, set the title and axes labels # title: My Random Values; xlabel: x values; ylabel: y values ### YOUR CODE HERE ### # Cell for Exercise 3 ### DO NOT CHANGE ### import random # create the fig, ax objects fig , ax = plt . subplots ( 1 , 2 , figsize = ( 10 , 5 )) # generate x, y1, and y2 x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] y1 = [ 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 ] y2 = [ round ( random . random () * 8 ) + 11 for i in range ( 10 )] ### END OF DO NOT CHANGE ### # Note: no skeleton code here is given for the figure, I want you to write this # code out yourself. Here is pseudo-code to get you started: # plot the left axes, set the title and axes labels # title: Fibonacci Sequence; xlabel: x values; ylabel: y values ### YOUR CODE HERE ### # plot the right axes, set the title and axes labels # title: My Random Values; xlabel: x values; ylabel: y values ### YOUR CODE HERE ### 4.2 Visualization with Pandas \u00b6 Now lets discover the power of pandas plots! While the objectives of the exercizes may be to make certain visualizations, throughout our experience we'll be using pandas tricks to create the data splices we need, so in the following is a mix of new plotting stuff, with pandas data selection/splicing stuff. We're also going to import a new module called seaborn . It is another plotting library based off matplotlib . We're going to use it to pull some stylistic features. import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from sklearn.datasets import load_boston import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from ipywidgets import interact The following few cells should look familiar from last tutorial session, we're going to use some essential pandas methods to get a general sense of what our dataset looks like There are many ways to construct a dataframe, as an exercise, you might think of otherways to perform that task here. df = pd.read_csv(\"https://raw.githubusercontent.com/wesleybeckner/ds_for_engineers/main/data/wine_quality/winequalityN.csv\") df.describe() # In your subsequent time with pandas you'll discover that there are a host of # ways to populate a dataframe. In the following, I can create a dataframe # simply by using read_csv because the data is formated in a way that # pandas can easily intuit. df = pd . read_csv ( \"https://raw.githubusercontent.com/wesleybeckner/\" \\ \"technology_explorers/main/assets/imdb_movies.csv\" ) /usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (3) have mixed types.Specify dtype option on import or set low_memory=False. interactivity=interactivity, compiler=compiler, result=result) # we check the shape of our data to see if its as we expect df . shape (85855, 22) # we check the column names df . columns Index(['imdb_title_id', 'title', 'original_title', 'year', 'date_published', 'genre', 'duration', 'country', 'language', 'director', 'writer', 'production_company', 'actors', 'description', 'avg_vote', 'votes', 'budget', 'usa_gross_income', 'worlwide_gross_income', 'metascore', 'reviews_from_users', 'reviews_from_critics'], dtype='object') Lets start by looking at basic description of our data. This gives us a sense of what visualizations we can employ to begin understanding our dataset. df . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } duration avg_vote votes metascore reviews_from_users reviews_from_critics count 85855.000000 85855.000000 8.585500e+04 13305.000000 78258.000000 74058.000000 mean 100.351418 5.898656 9.493490e+03 55.896881 46.040826 27.479989 std 22.553848 1.234987 5.357436e+04 17.784874 178.511411 58.339158 min 41.000000 1.000000 9.900000e+01 1.000000 1.000000 1.000000 25% 88.000000 5.200000 2.050000e+02 43.000000 4.000000 3.000000 50% 96.000000 6.100000 4.840000e+02 57.000000 9.000000 8.000000 75% 108.000000 6.800000 1.766500e+03 69.000000 27.000000 23.000000 max 808.000000 9.900000 2.278845e+06 100.000000 10472.000000 999.000000 df . loc [:, df . dtypes == object ] . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre country language director writer production_company actors description budget usa_gross_income worlwide_gross_income count 85855 85855 85855 85855 85855 85855 85791 85022 85768 84283 81400 85786 83740 23710 15326 31016 unique 85855 82094 80852 168 22012 1257 4907 4377 34733 66859 32050 85729 83611 4642 14857 30414 top tt0131549 Anna Anna 2017 2010 Drama USA English Jes\u00fas Franco Jing Wong Metro-Goldwyn-Mayer (MGM) Nobuyo \u00d4yama, Noriko Ohara, Michiko Nomura, Ka... The story of $ 1000000 $ 1000000 $ 8144 freq 1 10 10 3223 113 12543 28511 35939 87 84 1284 9 15 758 19 15 The first thing we notice is that all the data is numerical that we can pull standard statistical information from (mean, std, max, etc.) What kind of visualizations do you think of with data like this? I tend to think of scatter, box, and histogram plots for numerical data and bar or sunburst charts for categorical data. 4.2.1 Scatter Plots \u00b6 The way to generate a plot in the fewest keystrokes is to simply call the plot() method within the dataframe object df.plot() # the simplest plot we can make is the following so let's start here. # We can generate a figure simply by using the plot() method of our dataframe # object. df . plot () <matplotlib.axes._subplots.AxesSubplot at 0x7fcd186a5390> This gives us a raw view of the data, but here I'd like to introduce some standard plotting steps: recall the fig , ax format we used previously. fig, ax = plt.subplots(1, 1, figsize = (10, 5)) df.plot(ax=ax) fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) df . plot ( ax = ax ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd1dad9950> To make this into a scatter plot, we set the linestyle (or ls) to an empty string, and select a marker type. fig, ax = plt.subplots(1, 1, figsize = (10, 5)) df.plot(ax=ax, linestyle='', marker='.') fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) df . plot ( ax = ax , ls = '' , marker = '.' , ms = 2 ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd1856f350> Exercise 4: Scatter Plots with Pandas \u00b6 Make a plot of duration vs metascore # Cell for Exercise 4 <matplotlib.axes._subplots.AxesSubplot at 0x7fcd18498ad0> 4.2.2 Bar Plots \u00b6 One of the more common methods of depicting aggregate data is bar plots. We almost always see these kinds of plots used to display and compare between averages, but sometimes between singular data values as well. fig, ax = plt.subplots(1, 1, figsize=(10,7.5)) df.groupby('country').filter(lambda x: x.shape[0] > 100).\\ groupby('country')['duration'].mean().sort_values()\\ [-20:].plot(kind='barh', ax=ax) fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 7.5 )) df . groupby ( 'country' ) . filter ( lambda x : x . shape [ 0 ] > 100 ) . \\ groupby ( 'country' )[ 'duration' ] . mean () . sort_values () \\ [ - 20 :] . plot ( kind = 'barh' , ax = ax ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd08681210> 4.2.3 Box Plots \u00b6 Maybe we thought it was usefull to see the feature data in the scatter plots ( we can visually scan for correlations between feature sets, check outliers, etc.) but perhaps more instructive, is a boxplot. A box plot or boxplot is a statistical method for graphically depicting aggregate data through their quartiles. It will be useful to inspect the boxplot API to see the default behavior for representing the quartiles and outliers. fig, ax = plt.subplots(1, 1, figsize = (10, 5)) df.plot(kind='box', ax=ax) fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 7.5 )) df . groupby ( 'country' ) . filter (( lambda x : ( x . shape [ 0 ] > 100 ) & # filter by number of datapoints ( x [ 'duration' ] . mean () < 100 )) # filter by average movie time ) . boxplot ( by = 'country' , column = 'duration' , rot = 90 , ax = ax ) /usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray return array(a, dtype, copy=False, order=order) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd04c5d9d0> 4.2.4 Histograms \u00b6 What are some other kinds of plots we can make? A good one to be aware of is the histogram. plt.title('Demo Hist') plt.xlabel('Duration') plt.ylabel('Frequency') plt.hist(df['duration']) plt . title ( 'Demo Hist' ) plt . xlabel ( 'Duration' ) plt . ylabel ( 'Frequency' ) plt . hist ( df [ 'duration' ]) (array([7.2368e+04, 1.3197e+04, 2.2800e+02, 4.0000e+01, 1.1000e+01, 4.0000e+00, 4.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00]), array([ 41. , 117.7, 194.4, 271.1, 347.8, 424.5, 501.2, 577.9, 654.6, 731.3, 808. ]), <a list of 10 Patch objects>) df [ 'duration' ] . plot ( kind = 'hist' ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd0471d210> 4.2.5 Kernel Density Estimates \u00b6 Another useful plot type for data analysis is the kernel density estimate. You can think of this plot as exactly like a histogram, except instead of creating bins in which to accrue datapoints, you deposit a gaussian distribution around every datapoint in your dataset. By this mechanism, you avoid creating bias in your data summary as you otherwise would be when predifining bin sizes and locations in a histogram. fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) df [ 'duration' ] . plot ( kind = 'kde' , ax = ax ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd046ac7d0> 4.2.5.1 Enrichment : Skew and Tailedness \u00b6 While we're on the topic of KDEs/histograms and other statistical plots, this is a convenient time to talk about skew and tailedness or, otherwise known as kurtosis df.skew() indicates the skewdness of the data df.kurtosis() indicates the tailedness of the data # from scipy.stats import skewnorm from ipywidgets import FloatSlider slider = FloatSlider ( value = 0.5 , min = 0.5 , max = 5 , step = 0.5 , description = 'Shape:' , disabled = False , continuous_update = False , orientation = 'horizontal' , readout = True , readout_format = '.1f' ) import numpy as np def inspect_kurt_skew ( a = slider ): # theres another hyperparameter, lambda for the center # of weibull. the shape parameter is sometimes called # a, or k fig , ax = plt . subplots ( 1 , 1 , figsize = ( 5 , 5 )) s = np . random . weibull ( a , 1000 ) statdf = pd . DataFrame ( s ) statdf [ 0 ] . plot ( kind = 'kde' , ax = ax ) print ( \"skew: {:.2f} \" . format ( statdf [ 0 ] . skew ())) print ( \"kurtosis: {:.2f} \" . format ( statdf [ 0 ] . kurt ())) interact ( inspect_kurt_skew ) interactive(children=(FloatSlider(value=0.5, continuous_update=False, description='Shape:', max=5.0, min=0.5, \u2026 <function __main__.inspect_kurt_skew> 4.2.6 Correlation Plots \u00b6 Often, we'll want to quantify the strength of a relationship between input variables. We can do this by calculating correlations. We won't go into great detail here about how Pearson's correlation is calculated, but the StatQuest videos on this subject are here for reference (and are really good... if you can stomach Starmer's humor) StatQuest: Correlation StatQuest: Covariance The main takeaway is that pearson's correlation ranges from -1 to 1 and indicates how positively or negatively correlated the variables in question are. For our purposes, this can give insight into what variables will be important in our machine learning model. We can get the pearson's correlation between all the input features using the dataframe.corr() method. Fig: pearson's correlation value and corresponding scatter plot of feature-x and feature-y df . corr () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } duration avg_vote votes metascore reviews_from_users reviews_from_critics duration 1.000000 0.242432 0.125618 0.210531 0.130836 0.135465 avg_vote 0.242432 1.000000 0.166972 0.691338 0.138185 0.200526 votes 0.125618 0.166972 1.000000 0.194730 0.766237 0.671635 metascore 0.210531 0.691338 0.194730 1.000000 0.126131 0.236107 reviews_from_users 0.130836 0.138185 0.766237 0.126131 1.000000 0.671634 reviews_from_critics 0.135465 0.200526 0.671635 0.236107 0.671634 1.000000 So we have this raw table of pearsons correlations between each of our input features, how do we and how should we turn this into a plot? Typically we'd use a heat map on an feature vs feature grid to view this kind of data. In the following I'm going to use some numpy methods you may not have seen before. Links to the documentation for these methods are at the end of the notebook. import numpy as np fig, ax = plt.subplots(1, 1, figsize = (10,10)) # create a mask to white-out the upper triangle mask = np.triu(np.ones_like(df.corr(), dtype=bool)) # we'll want a divergent colormap for this so our eye # is not attracted to the values close to 0 cmap = sns.diverging_palette(230, 20, as_cmap=True) sns.heatmap(df.corr(), mask=mask, cmap=cmap, ax=ax) sns . heatmap ( df . corr ()) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd023a6a10> import numpy as np fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 10 )) # create a mask to white-out the upper triangle mask = np . triu ( np . ones_like ( df . corr (), dtype = bool )) # we'll want a divergent colormap for this so our eye # is not attracted to the values close to 0 cmap = sns . diverging_palette ( 230 , 20 , as_cmap = True ) sns . heatmap ( df . corr (), mask = mask , cmap = cmap , ax = ax ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd0239fc90> What do we notice? looks like reviews and votes are all pretty correlated. Surprising? 4.3 Visualization with IpyWidgets \u00b6 4.3.1 Interact \u00b6 Here we're going to introduce a very basic use case of IPython's widgets using interact . The interact method ( ipywidgets.interact ) automatically creates user interface (UI) controls for exploring code and data interactively. It is the easiest way to get started using IPython\u2019s widgets. from ipywidgets import interact def my_plot(col=filtdf.select_dtypes('number').columns): fig, ax = plt.subplots(1,1,figsize=(10,5)) filtdf.boxplot(column=col, by='country', ax=ax) interact(my_plot) def my_plot ( col = filtdf . select_dtypes ( 'number' ) . columns ): fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) filtdf . boxplot ( column = col , by = 'country' , ax = ax ) After defining our function that returns our plot, and defining input parameters for the fields we would like to interact with, we call our function with interact interact(my_plot) Let's say we want to look at information from the IMDb data based on country. Because there are so many countries in the database, let's filter it down to only the top 5 countries. How could we do this using value_counts ? Let's try this below top_5_countries = df [ 'country' ] . value_counts ()[: 5 ] . keys () # get list of top 5 countries filtdf = df . loc [ df [ 'country' ] . isin ( top_5_countries )] # only select rows whose country is in the list filtdf . boxplot ( column = 'duration' , by = 'country' ) /usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray return array(a, dtype, copy=False, order=order) <matplotlib.axes._subplots.AxesSubplot at 0x7fccddd7dc90> interact ( my_plot ) interactive(children=(Dropdown(description='col', options=('duration', 'avg_vote', 'votes', 'metascore', 'revi\u2026 <function __main__.my_plot> Let's break this down. Normally, I would just set my y-variable to a value, so that when I call my function, my figure is generated with the corresponding data field: def my_plot ( col = 'duration' ): fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) filtdf . boxplot ( column = col , by = 'country' , ax = ax ) my_plot () /usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray return array(a, dtype, copy=False, order=order) Instead, we want to give interact() a list of values for the user to select from, this is the difference between a regular function, and one we might feed into interact. y = ['duration', 'avg_vote', 'votes', 'metascore', 'reviews_from_users', 'reviews_from_critics'] list ( filtdf . select_dtypes ( 'number' ) . columns ) ['duration', 'avg_vote', 'votes', 'metascore', 'reviews_from_users', 'reviews_from_critics'] Exercise 5: IpyWidgets and Figures in Functions \u00b6 In the previous section we created a single dropdown menu to select our y variable for our plot. Here, we would like to do the same thing, but this time filter your dataframe for only the top 10 directors that most frequently occur in the IMDb datafile. When you build the interactive plot, grouby director this time instead of country. # Code block for Exercise 5 interact ( my_plot ) interactive(children=(Dropdown(description='col', options=('duration', 'avg_vote', 'votes', 'metascore', 'revi\u2026 <function __main__.my_plot> Part 2: Object Oriented Programming \u00b6 5.1 Classes, Instances, Methods, and Attribtues \u00b6 A class is created with the reserved word class A class can have attributes # define a class class MyClass : some_attribute = 5 We use the class blueprint MyClass to create an instance We can now access attributes belonging to that class: # create instance instance = MyClass () # access attributes of the instance of MyClass instance . some_attribute 5 attributes can be changed: instance . some_attribute = 50 instance . some_attribute 50 In practice we always use the __init__() function, which is executed when the class is being initiated. class Pokeball : def __init__ ( self , contains = None , type_name = \"poke ball\" ): self . contains = contains self . type_name = type_name self . catch_rate = 0.50 # note this attribute is not accessible upon init # empty pokeball pokeball1 = Pokeball () # used pokeball of a different type pokeball1 = Pokeball ( \"Pikachu\" , \"master ball\" ) > what is the special keyword [`self`](http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html) doing? The `self` parameter is a reference to the current instance of the class and is used to access variables belonging to the class. classes can also contain methods import random class Pokeball : def __init__ ( self , contains = None , type_name = \"poke ball\" ): self . contains = contains self . type_name = type_name self . catch_rate = 0.50 # note this attribute is not accessible upon init # the method catch, will update self.contains, if a catch is successful # it will also use self.catch_rate to set the performance of the catch def catch ( self , pokemon ): if self . contains == None : if random . random () < self . catch_rate : self . contains = pokemon print ( f \" { pokemon } captured!\" ) else : print ( f \" { pokemon } escaped!\" ) pass else : print ( \"pokeball is not empty!\" ) pokeball = Pokeball () pokeball . catch ( \"picachu\" ) picachu captured! pokeball . contains 'picachu' ### Q1 Create a release method for the class Pokeball: ## 5.2 Inheritance Inheritance allows you to adopt into a child class, the methods/attributes of a parent class class MasterBall ( Pokeball ): pass masterball = MasterBall () masterball . type_name 'poke ball' HMMM we don't like that type name. let's make sure we change some of the inherited attributes! We'll do this again with the `__init__` function class MasterBall ( Pokeball ): def __init__ ( self , contains = None , type_name = \"Masterball\" , catch_rate = 0.8 ): self . contains = contains self . type_name = type_name self . catch_rate = catch_rate masterball = MasterBall () masterball . type_name 'Masterball' masterball . catch ( \"charmander\" ) charmander captured! We can also write this, this way: class MasterBall ( Pokeball ): def __init__ ( self , contains = None , type_name = \"Masterball\" ): Pokeball . __init__ ( self , contains , type_name ) self . catch_rate = 0.8 masterball = MasterBall () masterball . type_name 'Masterball' masterball = MasterBall () masterball . catch ( \"charmander\" ) charmander captured! The keyword `super` will let us write even more succintly: class MasterBall ( Pokeball ): def __init__ ( self , contains = None , type_name = \"Masterball\" ): super () . __init__ ( contains , type_name ) self . catch_rate = 0.8 masterball = MasterBall () masterball . catch ( \"charmander\" ) charmander captured! ### Q2 Write another class object called `GreatBall` that inherits the properties of `Pokeball`, has a `catch_rate` of 0.6, and `type_name` of Greatball # Code Cell for L2 Q2 ## 5.3 Interacting Objects ### Q3 Write another class object called `Pokemon`. It has the [attributes](https://bulbapedia.bulbagarden.net/wiki/Type): * name * weight * speed * type Now create a class object called `FastBall`, it inherits the properties of `Pokeball` but has a new condition on `catch` method: if pokemon.speed > 100 then there is 100% chance of catch success. > what changes do you have to make to the way we've been interacting with pokeball to make this new requirement work? # Code Cell for L2 Q3 ### Q4 In the above task, did you have to write any code to test that your new classes worked?! We will talk about that more at a later time, but for now, wrap any testing that you did into a new function called `test_classes` in the code cell below # Code Cell for L2 Q4 # References * [`numpy.triu`](https://numpy.org/doc/stable/reference/generated/numpy.triu.html) * [`numpy.ones_like`](https://numpy.org/doc/stable/reference/generated/numpy.ones_like.html) * [`ipywidgets`](https://ipywidgets.readthedocs.io/en/latest/) * [StatQuest: Correlation](https://youtu.be/xZ_z8KWkhXE?t=822) * [StatQuest: Covariance](https://www.youtube.com/watch?v=qtaqvPAeEJY&ab_channel=StatQuestwithJoshStarmer) # Enrichment Topics ## 4.4 Other Plot Types ### 4.4.1 Bar Plots (Advanced) Similar to how we created bar plots with pandas, we can use matplotlib to make barplots pokemon = ['Charmander', 'Pikachu', 'Squirtle', 'Bulbasaur'] hp = [10, 12, 8, 16] plt.bar(pokemon, hp, color='tab:blue') plt.title('Pokemon HP') plt.xlabel('Pokemon') plt.ylabel('HP') pokemon = [ 'Charmander' , 'Pikachu' , 'Squirtle' , 'Bulbasaur' ] hp = [ 10 , 12 , 8 , 16 ] plt . bar ( pokemon , hp , color = 'tab:blue' ) plt . title ( 'Pokemon HP' ) plt . xlabel ( 'Pokemon' ) plt . ylabel ( 'HP' ) Text(0, 0.5, 'HP') ![png](S4_Object_Oriented_Programming_files/S4_Object_Oriented_Programming_130_1.png) Doing the same but with horizontally oriented bars pokemon = ['Charmander', 'Pikachu', 'Squirtle', 'Bulbasaur'] hp = [10, 12, 8, 16] plt.barh(pokemon, hp, color='tab:blue') plt.title('Pokemon HP') plt.ylabel('Pokemon') plt.xlabel('HP') pokemon = [ 'Charmander' , 'Pikachu' , 'Squirtle' , 'Bulbasaur' ] hp = [ 10 , 12 , 8 , 16 ] plt . barh ( pokemon , hp , color = 'tab:blue' ) plt . title ( 'Pokemon HP' ) plt . ylabel ( 'Pokemon' ) plt . xlabel ( 'HP' ) Text(0.5, 0, 'HP') ![png](S4_Object_Oriented_Programming_files/S4_Object_Oriented_Programming_132_1.png) We can also add error bars pokemon = ['Charmander', 'Pikachu', 'Squirtle', 'Bulbasaur'] hp = [10, 12, 8, 16] variance = [i * random.random()*.25 for i in hp] plt.barh(pokemon, hp, xerr=variance, color='tab:blue') plt.title('Pokemon HP') plt.ylabel('Pokemon') plt.xlabel('HP') for loop version of list comprehension hp = [10, 12, 8, 16] variance = [] for i in hp: variance.append(i * random.random()*.25) print(variance) pokemon = [ 'Charmander' , 'Pikachu' , 'Squirtle' , 'Bulbasaur' ] hp = [ 10 , 12 , 8 , 16 ] variance = [ i * random . random () * .25 for i in hp ] plt . barh ( pokemon , hp , xerr = variance , color = 'tab:blue' ) plt . title ( 'Pokemon HP' ) plt . ylabel ( 'Pokemon' ) plt . xlabel ( 'HP' ) Text(0.5, 0, 'HP') ![png](S4_Object_Oriented_Programming_files/S4_Object_Oriented_Programming_134_1.png) ### 4.4.2 3D Plots You can also create 3D plots in matplotlib using `ax.scatter3D` ax = plt.axes(projection='3d') ax.scatter3D(range(10),[i*random.random()*.25 for i in range(10)]) for loop version of list comprehension: ls = [] for i in range(10): ls.append(i*random.random()*.25) print(ls) ax = plt . axes ( projection = '3d' ) ax . scatter3D ( range ( 10 ),[ i * random . random () * .25 for i in range ( 10 )]) ![png](S4_Object_Oriented_Programming_files/S4_Object_Oriented_Programming_136_1.png) ## 4.5 Visualization with Plotly Another great plotting library, that is gaining in popularity (especially in enterprise settings) is plotly. As an added exercise, if you have additional time, explore some of the [plotly examples](https://plotly.com/python/) then recreate the breakout room assignment using plotly instead of matplotlib. ### 4.5.1 Scatter Plot with Size and Color import plotly.express as px x = 'quality' y = 'alcohol' color = 'quality' size = 'alcohol' corr = df . corr () pearson = corr [ x ][ y ] fig = px . scatter ( df , x = x , y = y , color = color , size = size , title = ' {} vs {} ( {:.2f} corr)' . format ( x , y , pearson ), width = 800 , height = 800 ) fig . show () if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} window.PlotlyConfig = {MathJaxConfig: 'local'}; window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"9fe7e498-9dd8-4f23-b6dc-b2f404ecb8f4\")) { Plotly.newPlot( '9fe7e498-9dd8-4f23-b6dc-b2f404ecb8f4', [{\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"quality=%{marker.color}<br>alcohol=%{marker.size}\", \"legendgroup\": \"\", \"marker\": {\"color\": [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 7, 5, 7, 6, 8, 6, 5, 8, 7, 8, 5, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 6, 7, 4, 5, 6, 5, 6, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 7, 5, 8, 5, 6, 5, 5, 6, 8, 5, 7, 7, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 6, 5, 7, 7, 7, 6, 6, 7, 4, 6, 5, 5, 5, 5, 5, 6, 5, 6, 6, 5, 6, 5, 5, 5, 5, 4, 6, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 7, 7, 6, 5, 7, 5, 5, 5, 5, 6, 5, 7, 6, 5, 5, 6, 6, 6, 6, 6, 4, 7, 6, 7, 6, 6, 5, 6, 6, 6, 7, 8, 8, 7, 5, 5, 6, 5, 5, 6, 7, 5, 5, 6, 6, 4, 7, 5, 6, 4, 5, 4, 6, 6, 5, 5, 6, 5, 5, 6, 5, 8, 4, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 4, 5, 5, 4, 5, 6, 5, 7, 5, 6, 7, 5, 5, 5, 5, 5, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 4, 6, 6, 6, 6, 6, 6, 6, 7, 6, 5, 5, 7, 6, 5, 6, 7, 7, 7, 5, 4, 3, 5, 3, 6, 8, 7, 7, 6, 4, 6, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 5, 5, 5, 6, 6, 5, 4, 7, 8, 8, 4, 5, 5, 5, 6, 7, 7, 7, 7, 6, 5, 7, 3, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 7, 6, 7, 8, 6, 6, 5, 6, 6, 5, 7, 6, 7, 5, 6, 6, 5, 5, 6, 6, 6, 5, 8, 5, 6, 5, 5, 6, 6, 6, 5, 7, 7, 6, 6, 5, 6, 6, 7, 6, 6, 5, 7, 7, 6, 7, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 7, 6, 6, 6, 5, 6, 6, 5, 6, 7, 7, 7, 7, 6, 7, 7, 6, 6, 6, 7, 7, 7, 5, 6, 7, 7, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 5, 5, 5, 6, 5, 7, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 7, 6, 6, 6, 7, 6, 6, 5, 5, 5, 5, 5, 7, 4, 8, 7, 5, 8, 7, 5, 7, 6, 8, 6, 6, 3, 5, 6, 6, 7, 5, 5, 7, 7, 7, 6, 7, 5, 6, 5, 5, 5, 5, 6, 5, 5, 6, 6, 5, 5, 6, 5, 6, 7, 6, 5, 7, 6, 6, 6, 5, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 4, 6, 5, 4, 6, 6, 6, 5, 6, 6, 5, 7, 6, 7, 6, 6, 6, 6, 7, 6, 5, 6, 6, 5, 5, 5, 6, 6, 5, 6, 4, 6, 6, 6, 6, 5, 6, 6, 6, 5, 5, 6, 5, 6, 4, 5, 6, 6, 6, 6, 6, 6, 7, 5, 7, 7, 7, 7, 7, 7, 5, 6, 5, 6, 7, 5, 6, 7, 5, 6, 6, 5, 6, 6, 5, 7, 5, 7, 7, 6, 6, 7, 7, 7, 5, 5, 6, 6, 7, 6, 6, 7, 7, 6, 5, 6, 5, 5, 5, 7, 5, 6, 8, 7, 6, 6, 5, 5, 6, 6, 5, 5, 5, 6, 8, 6, 5, 5, 5, 5, 7, 6, 6, 6, 5, 5, 6, 5, 5, 8, 4, 6, 6, 6, 5, 5, 6, 5, 6, 6, 7, 5, 5, 5, 7, 4, 6, 5, 5, 5, 4, 6, 5, 7, 7, 7, 7, 6, 7, 6, 6, 5, 5, 4, 5, 7, 4, 5, 6, 5, 6, 6, 6, 5, 6, 6, 8, 6, 5, 6, 6, 7, 7, 7, 5, 5, 6, 5, 5, 5, 7, 4, 6, 7, 4, 6, 5, 5, 6, 5, 6, 5, 5, 5, 5, 7, 4, 6, 6, 5, 5, 6, 6, 5, 5, 6, 6, 5, 6, 7, 6, 5, 7, 7, 5, 5, 6, 8, 7, 5, 7, 5, 5, 5, 6, 6, 7, 6, 5, 6, 6, 5, 7, 6, 3, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 5, 6, 7, 7, 6, 6, 5, 6, 6, 6, 5, 6, 7, 7, 7, 7, 7, 5, 9, 6, 6, 5, 7, 8, 4, 6, 7, 8, 5, 6, 6, 6, 7, 6, 6, 7, 5, 7, 5, 5, 6, 6, 6, 8, 6, 5, 5, 7, 6, 6, 5, 6, 6, 6, 5, 6, 7, 6, 6, 5, 5, 5, 5, 5, 9, 6, 5, 6, 5, 6, 6, 9, 7, 7, 6, 4, 8, 6, 6, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 5, 5, 7, 6, 7, 5, 7, 5, 7, 7, 5, 5, 7, 5, 8, 7, 6, 6, 5, 6, 7, 8, 7, 6, 5, 5, 6, 3, 5, 7, 9, 6, 6, 8, 7, 6, 6, 6, 6, 7, 6, 7, 6, 7, 6, 7, 5, 7, 7, 6, 6, 6, 6, 6, 7, 6, 5, 6, 8, 4, 4, 8, 4, 5, 5, 5, 5, 5, 4, 5, 7, 6, 6, 7, 7, 6, 6, 6, 8, 5, 5, 7, 5, 5, 7, 5, 6, 5, 5, 5, 5, 5, 6, 7, 5, 6, 7, 7, 7, 7, 5, 5, 4, 5, 5, 6, 6, 5, 6, 5, 5, 7, 7, 6, 6, 7, 6, 6, 6, 5, 6, 6, 7, 7, 7, 7, 6, 7, 6, 5, 6, 5, 7, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 7, 6, 4, 5, 4, 6, 6, 5, 6, 6, 7, 7, 5, 6, 7, 6, 6, 6, 5, 7, 6, 6, 7, 6, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 6, 6, 6, 6, 4, 7, 4, 6, 6, 6, 6, 3, 6, 5, 5, 7, 5, 4, 5, 4, 5, 7, 5, 5, 5, 5, 6, 5, 6, 5, 4, 5, 5, 6, 5, 6, 4, 7, 5, 5, 5, 6, 5, 6, 7, 7, 6, 7, 5, 7, 5, 6, 7, 6, 5, 5, 6, 7, 6, 6, 6, 7, 5, 8, 8, 6, 7, 6, 6, 6, 7, 5, 8, 6, 7, 6, 7, 6, 6, 5, 5, 5, 7, 8, 7, 7, 4, 7, 6, 6, 5, 4, 8, 5, 5, 5, 5, 6, 6, 7, 5, 5, 6, 7, 7, 5, 7, 6, 6, 5, 5, 5, 6, 8, 8, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 4, 6, 4, 4, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 5, 6, 5, 6, 6, 5, 6, 5, 6, 5, 7, 6, 5, 5, 5, 6, 5, 6, 7, 5, 5, 8, 6, 5, 6, 7, 6, 7, 6, 6, 7, 7, 6, 7, 6, 7, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 8, 5, 8, 8, 6, 7, 6, 5, 7, 6, 7, 5, 6, 3, 6, 7, 7, 6, 6, 5, 6, 5, 7, 5, 6, 7, 7, 7, 5, 4, 7, 6, 7, 5, 7, 5, 6, 7, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 8, 7, 5, 6, 7, 5, 5, 5, 6, 6, 7, 5, 6, 6, 6, 7, 5, 8, 7, 6, 7, 7, 7, 6, 6, 6, 6, 4, 4, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 7, 8, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 7, 6, 6, 6, 5, 5, 6, 7, 8, 6, 6, 8, 5, 5, 6, 6, 5, 6, 6, 8, 8, 7, 7, 8, 4, 7, 7, 6, 5, 5, 5, 6, 6, 8, 7, 6, 7, 7, 4, 5, 7, 6, 5, 6, 5, 6, 7, 6, 6, 7, 7, 6, 6, 7, 6, 7, 7, 6, 6, 6, 5, 7, 6, 7, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 6, 7, 6, 8, 8, 5, 4, 8, 6, 7, 6, 6, 6, 8, 6, 6, 5, 6, 3, 5, 7, 4, 6, 5, 4, 6, 6, 6, 5, 7, 5, 4, 5, 7, 6, 5, 5, 5, 7, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 7, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 8, 5, 6, 7, 5, 5, 7, 6, 5, 6, 4, 6, 5, 6, 6, 6, 6, 6, 6, 4, 3, 6, 6, 6, 6, 5, 6, 5, 5, 8, 8, 7, 5, 7, 6, 6, 7, 5, 5, 7, 8, 7, 6, 6, 6, 5, 5, 6, 7, 6, 7, 6, 6, 6, 6, 5, 6, 5, 5, 6, 6, 5, 6, 6, 6, 6, 5, 7, 7, 6, 6, 6, 5, 6, 6, 6, 6, 4, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 4, 4, 6, 5, 7, 6, 5, 6, 5, 5, 6, 5, 5, 6, 6, 5, 4, 6, 6, 4, 5, 4, 5, 6, 7, 5, 6, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 7, 5, 9, 6, 7, 5, 7, 6, 6, 7, 7, 5, 6, 6, 6, 6, 8, 7, 5, 6, 6, 7, 6, 6, 5, 6, 6, 5, 6, 8, 7, 6, 6, 5, 6, 5, 5, 5, 6, 7, 7, 7, 7, 6, 7, 5, 4, 7, 6, 4, 6, 5, 5, 5, 6, 5, 5, 6, 6, 7, 6, 4, 8, 5, 6, 7, 6, 6, 7, 5, 5, 6, 5, 7, 6, 6, 5, 5, 6, 7, 7, 7, 7, 5, 7, 3, 6, 4, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 4, 5, 5, 6, 6, 5, 4, 5, 5, 5, 6, 6, 5, 8, 6, 6, 4, 6, 7, 7, 6, 8, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 4, 6, 6, 6, 6, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 6, 6, 5, 5, 5, 5, 6, 6, 7, 6, 5, 5, 5, 5, 5, 7, 6, 6, 6, 6, 6, 6, 5, 6, 8, 8, 5, 4, 6, 6, 7, 6, 7, 7, 5, 7, 5, 5, 6, 5, 5, 6, 5, 8, 6, 6, 6, 5, 6, 6, 6, 5, 5, 6, 5, 6, 6, 5, 6, 6, 7, 6, 7, 4, 6, 6, 6, 5, 7, 6, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7, 6, 5, 6, 7, 6, 6, 5, 7, 6, 6, 6, 5, 5, 5, 5, 6, 7, 6, 7, 5, 7, 6, 4, 5, 5, 6, 6, 6, 7, 5, 6, 6, 6, 6, 7, 7, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 7, 7, 5, 5, 6, 6, 6, 6, 7, 5, 6, 6, 6, 7, 5, 5, 5, 4, 6, 6, 5, 6, 5, 6, 3, 6, 5, 6, 5, 6, 7, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 7, 5, 5, 4, 7, 6, 5, 5, 5, 6, 6, 5, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 6, 7, 5, 5, 5, 6, 5, 6, 6, 6, 8, 8, 8, 8, 8, 6, 6, 5, 6, 7, 4, 8, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 5, 7, 6, 5, 5, 6, 5, 6, 7, 5, 7, 6, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 5, 5, 7, 3, 5, 5, 5, 5, 6, 5, 7, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 6, 7, 6, 6, 5, 5, 6, 5, 5, 6, 6, 4, 5, 5, 6, 5, 6, 6, 5, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 6, 5, 4, 5, 6, 4, 5, 7, 5, 5, 7, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 5, 7, 6, 6, 6, 5, 5, 6, 6, 5, 6, 6, 4, 5, 4, 6, 6, 4, 6, 7, 6, 6, 5, 5, 5, 7, 7, 7, 7, 7, 5, 5, 7, 7, 5, 7, 5, 6, 6, 6, 5, 5, 6, 7, 5, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 5, 6, 5, 6, 5, 5, 5, 5, 6, 7, 5, 6, 7, 6, 6, 6, 5, 6, 5, 6, 6, 7, 6, 6, 7, 6, 7, 4, 5, 5, 7, 6, 7, 6, 6, 5, 5, 6, 5, 4, 6, 6, 5, 5, 5, 5, 5, 7, 4, 6, 6, 5, 6, 7, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 6, 5, 5, 6, 6, 6, 7, 6, 6, 5, 7, 4, 6, 6, 6, 5, 6, 6, 5, 5, 5, 5, 5, 5, 5, 7, 7, 6, 6, 7, 7, 6, 7, 6, 8, 7, 7, 5, 5, 5, 6, 7, 5, 5, 5, 6, 5, 7, 5, 7, 6, 6, 7, 5, 4, 7, 6, 5, 6, 6, 5, 6, 5, 6, 5, 5, 6, 5, 6, 8, 5, 5, 5, 4, 5, 6, 6, 5, 8, 5, 6, 6, 4, 6, 6, 5, 5, 6, 6, 7, 6, 7, 6, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 7, 5, 4, 3, 6, 6, 6, 6, 5, 4, 4, 6, 8, 6, 8, 5, 4, 4, 4, 8, 8, 6, 7, 6, 5, 5, 5, 6, 6, 6, 4, 4, 6, 6, 5, 5, 6, 6, 5, 4, 6, 6, 4, 4, 4, 5, 6, 5, 5, 5, 7, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 5, 5, 6, 6, 4, 5, 6, 5, 6, 5, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 7, 6, 5, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 5, 5, 6, 6, 5, 5, 7, 6, 6, 7, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 4, 4, 5, 5, 5, 5, 6, 5, 5, 4, 4, 6, 6, 6, 7, 6, 5, 6, 6, 6, 5, 7, 7, 6, 6, 7, 5, 5, 7, 8, 5, 5, 8, 7, 6, 6, 5, 6, 4, 4, 5, 7, 6, 6, 6, 6, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 5, 5, 6, 5, 7, 7, 7, 5, 7, 7, 5, 6, 5, 6, 5, 6, 5, 7, 5, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 7, 6, 5, 7, 7, 7, 7, 7, 7, 6, 7, 4, 6, 7, 5, 5, 7, 5, 5, 6, 5, 6, 7, 5, 6, 7, 7, 6, 6, 6, 6, 6, 5, 5, 7, 5, 5, 7, 7, 7, 7, 6, 5, 5, 7, 7, 5, 5, 7, 7, 6, 5, 6, 7, 5, 5, 5, 6, 5, 5, 6, 6, 6, 5, 5, 5, 6, 7, 7, 5, 6, 6, 5, 5, 7, 5, 5, 5, 4, 7, 7, 6, 6, 6, 6, 8, 7, 5, 7, 7, 6, 5, 7, 7, 7, 6, 7, 7, 6, 6, 5, 6, 6, 6, 6, 5, 6, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 5, 5, 5, 6, 6, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 5, 6, 6, 6, 7, 5, 7, 6, 6, 5, 6, 6, 6, 7, 5, 5, 5, 7, 6, 6, 6, 7, 5, 7, 6, 5, 6, 6, 6, 7, 6, 6, 8, 6, 8, 6, 6, 8, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 5, 7, 6, 7, 7, 8, 8, 8, 6, 7, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 7, 5, 8, 7, 5, 7, 7, 5, 5, 6, 8, 8, 6, 5, 5, 6, 7, 7, 5, 6, 7, 7, 5, 5, 7, 4, 6, 5, 5, 5, 6, 6, 6, 6, 7, 7, 5, 5, 5, 6, 7, 6, 6, 6, 6, 7, 7, 6, 6, 6, 6, 5, 7, 7, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 8, 7, 6, 6, 6, 6, 6, 6, 6, 7, 7, 5, 6, 7, 6, 7, 8, 7, 6, 5, 5, 6, 6, 5, 7, 5, 7, 7, 6, 5, 5, 4, 6, 8, 6, 5, 7, 7, 5, 5, 5, 5, 5, 6, 7, 5, 6, 7, 5, 5, 6, 6, 6, 5, 5, 7, 5, 6, 6, 6, 7, 6, 5, 4, 6, 8, 6, 6, 5, 8, 7, 7, 6, 8, 8, 6, 6, 5, 4, 5, 5, 8, 8, 6, 5, 5, 8, 6, 8, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 6, 6, 5, 7, 7, 6, 5, 7, 5, 8, 6, 6, 5, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 6, 6, 6, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 6, 8, 6, 7, 7, 7, 7, 7, 7, 6, 6, 6, 7, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 4, 5, 6, 6, 7, 6, 5, 6, 8, 8, 6, 5, 6, 6, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 5, 4, 5, 7, 5, 6, 6, 5, 5, 5, 6, 5, 5, 8, 5, 5, 6, 5, 4, 6, 8, 8, 7, 6, 5, 5, 7, 5, 5, 5, 5, 6, 5, 6, 7, 6, 6, 7, 3, 6, 7, 6, 6, 6, 7, 6, 6, 7, 5, 7, 7, 7, 6, 6, 7, 5, 6, 6, 6, 5, 4, 6, 7, 5, 6, 6, 6, 7, 7, 7, 5, 6, 5, 6, 5, 6, 5, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 5, 7, 7, 6, 6, 5, 7, 7, 6, 6, 6, 7, 6, 6, 6, 6, 8, 8, 8, 6, 6, 5, 6, 4, 6, 6, 5, 6, 7, 6, 4, 7, 8, 5, 7, 6, 6, 5, 5, 6, 7, 6, 7, 7, 7, 6, 7, 7, 5, 7, 7, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 4, 7, 5, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 6, 7, 5, 7, 6, 7, 6, 7, 7, 5, 6, 6, 7, 7, 6, 6, 8, 8, 5, 6, 6, 6, 6, 6, 6, 5, 7, 8, 6, 3, 6, 6, 6, 5, 5, 7, 7, 7, 5, 4, 8, 7, 5, 6, 5, 6, 7, 6, 6, 7, 7, 7, 6, 5, 5, 8, 5, 7, 6, 5, 5, 5, 6, 7, 5, 8, 6, 7, 7, 7, 7, 3, 6, 7, 7, 7, 7, 7, 6, 7, 6, 6, 7, 5, 5, 6, 7, 6, 6, 7, 5, 7, 5, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 7, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 5, 6, 6, 6, 8, 5, 7, 7, 7, 6, 6, 6, 8, 5, 6, 7, 6, 8, 6, 6, 5, 5, 6, 6, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 3, 7, 6, 6, 6, 7, 7, 6, 4, 6, 7, 5, 8, 8, 5, 6, 6, 6, 6, 6, 5, 6, 6, 5, 7, 6, 6, 6, 5, 5, 5, 5, 5, 7, 6, 5, 8, 6, 6, 7, 8, 7, 7, 5, 6, 5, 6, 5, 7, 7, 6, 6, 8, 6, 7, 5, 6, 6, 5, 8, 6, 8, 6, 6, 8, 6, 6, 8, 7, 6, 7, 8, 5, 8, 7, 8, 7, 6, 6, 6, 8, 7, 6, 7, 7, 6, 7, 7, 6, 6, 7, 7, 6, 5, 7, 7, 7, 6, 7, 5, 6, 6, 7, 6, 6, 6, 7, 7, 7, 5, 7, 5, 7, 5, 5, 6, 6, 6, 6, 4, 7, 5, 5, 6, 6, 5, 5, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 4, 6, 5, 6, 5, 6, 6, 6, 6, 7, 6, 6, 4, 6, 6, 6, 7, 5, 7, 4, 7, 5, 7, 6, 6, 7, 7, 7, 6, 6, 6, 7, 5, 7, 7, 7, 7, 7, 6, 7, 6, 6, 7, 6, 7, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 5, 7, 6, 7, 7, 6, 6, 7, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 7, 7, 7, 6, 6, 6, 6, 6, 7, 6, 7, 7, 5, 6, 4, 6, 6, 6, 6, 7, 7, 8, 7, 8, 8, 6, 4, 6, 8, 8, 7, 8, 5, 7, 6, 7, 8, 7, 5, 6, 7, 6, 5, 7, 6, 8, 7, 6, 7, 6, 5, 5, 6, 8, 7, 6, 7, 7, 5, 6, 7, 6, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 4, 6, 5, 6, 5, 5, 7, 5, 5, 7, 6, 6, 7, 7, 7, 5, 6, 6, 5, 6, 5, 6, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 5, 6, 5, 6, 7, 5, 5, 5, 8, 6, 5, 5, 5, 6, 6, 7, 5, 5, 8, 5, 5, 5, 6, 5, 4, 6, 6, 5, 5, 6, 5, 6, 7, 7, 5, 6, 6, 5, 6, 7, 5, 5, 5, 6, 5, 5, 6, 6, 5, 6, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 5, 6, 6, 3, 5, 5, 5, 5, 7, 5, 6, 6, 6, 5, 6, 6, 5, 7, 6, 6, 5, 6, 7, 7, 5, 5, 6, 5, 5, 6, 6, 5, 5, 6, 6, 6, 7, 6, 5, 6, 5, 6, 5, 6, 7, 6, 7, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 6, 4, 5, 5, 7, 5, 5, 5, 4, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 6, 6, 6, 7, 5, 5, 4, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 7, 6, 7, 7, 6, 5, 7, 6, 6, 5, 7, 5, 5, 5, 6, 5, 5, 5, 6, 6, 8, 4, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 6, 6, 7, 5, 5, 5, 5, 6, 7, 5, 6, 5, 5, 6, 6, 6, 5, 7, 7, 5, 4, 6, 4, 6, 6, 7, 6, 6, 4, 6, 7, 7, 6, 7, 6, 5, 7, 7, 6, 7, 6, 6, 6, 6, 6, 6, 5, 7, 7, 7, 5, 7, 7, 6, 6, 6, 5, 6, 6, 7, 6, 6, 5, 6, 6, 6, 7, 6, 6, 6, 5, 5, 6, 6, 5, 4, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 5, 6, 5, 6, 5, 5, 5, 4, 5, 5, 7, 7, 7, 7, 7, 6, 6, 6, 7, 6, 5, 7, 7, 6, 5, 6, 6, 6, 5, 5, 6, 5, 5, 8, 6, 5, 6, 6, 5, 6, 7, 5, 4, 6, 5, 6, 6, 6, 6, 6, 6, 5, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 5, 7, 7, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 8, 7, 5, 6, 6, 6, 7, 5, 5, 5, 5, 7, 6, 5, 5, 6, 6, 5, 6, 5, 6, 7, 6, 6, 6, 6, 6, 6, 7, 7, 6, 7, 5, 6, 6, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 8, 6, 7, 7, 5, 6, 5, 6, 7, 6, 6, 7, 5, 6, 6, 6, 7, 7, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 8, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 6, 7, 6, 6, 6, 6, 4, 4, 5, 5, 5, 4, 6, 5, 6, 6, 4, 4, 7, 5, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 7, 6, 6, 7, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 4, 5, 5, 5, 5, 6, 6, 6, 7, 6, 6, 6, 6, 7, 7, 6, 5, 6, 5, 6, 6, 6, 6, 7, 5, 4, 6, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 7, 6, 6, 6, 5, 6, 6, 7, 7, 5, 7, 7, 7, 5, 6, 7, 6, 6, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 7, 6, 5, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 5, 6, 5, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 5, 7, 6, 5, 7, 5, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 6, 6, 5, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 6, 6, 5, 5, 5, 7, 5, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 7, 5, 5, 6, 5, 4, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 5, 5, 6, 6, 7, 6, 6, 7, 7, 7, 5, 5, 5, 6, 6, 6, 7, 7, 6, 7, 7, 5, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 5, 6, 7, 4, 6, 5, 5, 5, 5, 7, 5, 7, 7, 5, 6, 7, 7, 6, 6, 5, 6, 6, 6, 7, 7, 7, 6, 6, 6, 6, 5, 6, 5, 6, 6, 6, 7, 6, 6, 7, 7, 7, 5, 5, 5, 7, 5, 7, 7, 7, 7, 7, 6, 6, 6, 5, 6, 7, 7, 6, 5, 7, 7, 5, 6, 5, 5, 7, 7, 6, 6, 7, 6, 5, 4, 6, 6, 6, 6, 5, 4, 6, 6, 6, 6, 7, 5, 6, 7, 7, 6, 7, 6, 5, 5, 6, 6, 7, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 6, 6, 5, 5, 3, 6, 6, 5, 6, 5, 6, 7, 6, 6, 6, 7, 7, 6, 6, 6, 6, 7, 7, 6, 8, 8, 7, 6, 6, 6, 6, 5, 7, 4, 6, 6, 6, 6, 4, 5, 5, 6, 6, 5, 7, 8, 8, 5, 6, 6, 6, 6, 6, 5, 7, 7, 6, 5, 6, 7, 7, 8, 7, 4, 6, 6, 6, 5, 6, 5, 6, 7, 5, 6, 7, 6, 6, 6, 6, 5, 6, 6, 7, 5, 6, 6, 6, 5, 7, 6, 6, 5, 6, 7, 6, 5, 6, 6, 4, 7, 6, 6, 5, 6, 5, 6, 7, 6, 5, 6, 5, 5, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 5, 6, 6, 6, 6, 6, 7, 6, 5, 6, 6, 6, 7, 5, 4, 6, 6, 6, 5, 6, 5, 6, 7, 7, 5, 6, 6, 6, 5, 6, 5, 6, 7, 6, 5, 5, 5, 6, 5, 5, 5, 7, 7, 5, 5, 5, 5, 5, 5, 5, 7, 5, 4, 6, 6, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 6, 7, 4, 5, 5, 4, 6, 5, 5, 4, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 7, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 4, 5, 5, 5, 6, 5, 4, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 4, 6, 5, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 6, 6, 6, 4, 5, 5, 5, 5, 5, 5, 5, 6, 5, 4, 6, 5, 5, 5, 5, 4, 6, 5, 4, 6, 6, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 7, 4, 7, 5, 5, 5, 6, 7, 7, 5, 5, 7, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 6, 4, 6, 6, 5, 6, 5, 7, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 7, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 7, 5, 4, 5, 5, 5, 7, 4, 8, 6, 6, 6, 6, 5, 5, 5, 6, 6, 6, 8, 7, 6, 7, 5, 7, 5, 5, 6, 6, 7, 5, 7, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 5, 5, 6, 5, 6, 7, 6, 7, 5, 5, 6, 6, 6, 7, 5, 6, 5, 6, 6, 6, 5, 7, 7, 6, 5, 6, 7, 6, 6, 6, 6, 6, 5, 7, 6, 6, 6, 6, 6, 5, 5, 6, 6, 5, 7, 7, 6, 5, 6, 5, 5, 7, 6, 7, 5, 5, 7, 5, 6, 6, 5, 6, 7, 6, 7, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 8, 6, 5, 5, 5, 7, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 7, 6, 4, 6, 5, 5, 7, 5, 5, 6, 5, 6, 5, 7, 7, 5, 7, 5, 7, 6, 6, 5, 6, 7, 5, 6, 5, 6, 5, 6, 6, 6, 5, 8, 6, 7, 7, 7, 6, 5, 5, 6, 6, 6, 6, 6, 7, 5, 8, 5, 5, 7, 3, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 6, 5, 6, 5, 5, 6, 5, 6, 5, 8, 5, 5, 6, 5, 5, 6, 7, 6, 6, 7, 7, 6, 6, 8, 6, 5, 8, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 7, 5, 6, 6, 7, 7, 5, 6, 3, 6, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 5, 6, 6, 6, 5, 6, 7, 5, 5, 6, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 5, 6, 6, 5, 5, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 4, 6, 6, 4, 5, 5, 6, 5, 5, 5, 7, 7, 6, 7, 5, 8, 7, 5, 6, 5, 5, 5, 5, 6, 6, 6, 6, 4, 6, 5, 6, 6, 6, 7, 6, 6, 6, 5, 5, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 4, 5, 5, 5, 5, 7, 6, 5, 5, 5, 5, 5, 7, 5, 4, 7, 6, 5, 5, 5, 6, 5, 5, 5, 7, 6, 4, 6, 5, 6, 6, 5, 5, 6, 6, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6, 4, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 6, 6, 5, 6, 6, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 5, 6, 6, 5, 5, 6, 5, 6, 5, 5, 6, 6, 5, 6, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 5, 5, 7, 6, 6, 5, 5, 7, 6, 6, 7, 7, 7, 5, 6, 5, 6, 5, 4, 6, 5, 6, 6, 5, 5, 5, 7, 5, 5, 5, 5, 7, 5, 8, 6, 4, 6, 3, 4, 5, 5, 7, 7, 7, 5, 7, 5, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 6, 7, 6, 7, 7, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 6, 6, 5, 4, 7, 7, 7, 4, 6, 6, 5, 5, 6, 6, 5, 6, 5, 6, 7, 6, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 3, 5, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 7, 6, 4, 5, 7, 5, 5, 6, 5, 5, 6, 6, 4, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 5, 6, 6, 7, 5, 6, 5, 5, 6, 6, 6, 7, 5, 6, 5, 6, 6, 7, 5, 7, 5, 5, 5, 7, 5, 6, 5, 6, 6, 5, 6, 7, 5, 5, 6, 5, 5, 6, 5, 5, 6, 7, 7, 6, 6, 7, 7, 7, 7, 5, 7, 7, 7, 7, 5, 7, 6, 5, 6, 6, 6, 7, 6, 6, 5, 6, 6, 5, 6, 7, 6, 6, 5, 6, 7, 7, 7, 5, 6, 6, 7, 7, 5, 7, 6, 5, 6, 6, 7, 6, 6, 6, 5, 6, 6, 5, 5, 5, 7, 6, 6, 7, 5, 7, 7, 6, 8, 6, 6, 6, 6, 7, 7, 7, 5, 7, 5, 6, 6, 5, 7, 6, 5, 5, 7, 6, 7, 6, 6, 6, 5, 7, 6, 7, 7, 8, 6, 6, 7, 6, 5, 6, 5, 7, 5, 6, 6, 6, 6, 6, 5, 6, 7, 5, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 5, 8, 6, 6, 6, 4, 7, 6, 6, 5, 6, 6, 5, 7, 7, 7, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 6, 6, 7, 6, 6, 7, 6, 5, 6, 6, 5, 7, 7, 6, 5, 7, 6, 7, 5, 5, 5, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 4, 7, 5, 6, 6, 5, 6, 5, 5, 6, 5, 6, 5, 4, 6, 5, 7, 5, 6, 6, 6, 6, 6, 6, 6, 7, 8, 5, 7, 7, 7, 5, 7, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 7, 5, 6, 5, 5, 4, 6, 4, 6, 6, 4, 4, 5, 5, 6, 5, 6, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 5, 4, 5, 4, 6, 6, 6, 6, 6, 8, 6, 6, 5, 5, 6, 6, 4, 6, 6, 7, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 6, 6, 4, 6, 5, 5, 6, 6, 3, 6, 6, 6, 5, 5, 5, 5, 4, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 6, 5, 7, 6, 6, 6, 6, 5, 6, 6, 5, 6, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 6, 4, 6, 5, 5, 6, 6, 4, 5, 6, 5, 5, 3, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 7, 6, 5, 5, 6, 8, 6, 7, 6, 6, 7, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 5, 5, 5, 6, 4, 6, 6, 6, 5, 5, 5, 5, 6, 6, 7, 6, 6, 5, 5, 5, 6, 7, 6, 5, 5, 6, 6, 5, 5, 5, 8, 7, 7, 7, 5, 6, 6, 6, 5, 5, 7, 6, 4, 6, 6, 5, 5, 7, 4, 7, 3, 5, 5, 6, 5, 5, 7, 5, 7, 3, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 6, 6, 5, 5, 5, 7, 6, 5, 6, 6, 6, 5, 5, 5, 6, 6, 3, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 6, 5, 7, 6, 6, 6, 5, 5, 6, 7, 6, 6, 7, 6, 5, 5, 5, 8, 5, 5, 6, 5, 6, 7, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 7, 6, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 5, 6], \"coloraxis\": \"coloraxis\", \"size\": [8.8, 9.5, 10.1, 9.9, 9.9, 10.1, 9.6, 8.8, 9.5, 11.0, 12.0, 9.7, 10.8, 12.4, 9.7, 11.4, 9.6, 12.8, 11.3, 9.5, 12.8, 11.0, 10.5, 9.3, 10.0, 10.4, 10.0, 10.5, 11.6, 12.3, 10.0, 10.2, 10.8, 9.0, 10.2, 12.8, 10.0, 11.2, 8.6, 8.6, 9.4, 9.4, 9.8, 9.5, 9.5, 10.0, 9.8, 9.8, 9.8, 9.8, 11.7, 11.0, 10.9, 10.9, 9.1, 11.0, 9.6, 8.9, 10.2, 9.9, 8.6, 8.9, 10.5, 10.2, 10.3, 9.1, 12.6, 9.8, 10.7, 9.5, 9.0, 9.5, 10.0, 9.1, 10.7, 9.5, 12.7, 12.0, 9.3, 9.0, 10.6, 9.2, 10.0, 9.5, 8.7, 8.7, 8.7, 9.7, 8.7, 8.7, 8.7, 9.0, 12.6, 12.6, 11.5, 9.2, 8.8, 11.4, 10.1, 8.8, 9.1, 9.4, 9.4, 9.0, 9.1, 9.2, 9.4, 9.1, 9.1, 10.3, 8.8, 8.9, 9.2, 9.1, 9.1, 9.7, 11.3, 11.8, 9.2, 9.2, 10.2, 8.8, 9.7, 9.1, 9.8, 11.0, 10.5, 9.7, 10.9, 10.9, 10.6, 9.7, 9.0, 9.2, 8.9, 9.6, 10.7, 8.7, 10.8, 11.8, 10.2, 8.7, 10.8, 9.7, 11.2, 10.9, 10.1, 9.0, 12.0, 9.4, 11.5, 9.9, 9.4, 10.4, 9.7, 8.9, 8.9, 12.4, 12.1, 12.1, 12.4, 9.1, 10.6, 8.9, 9.5, 9.8, 9.6, 12.6, 9.3, 10.0, 12.7, 11.0, 11.4, 11.5, 10.2, 11.4, 12.6, 9.4, 8.7, 9.2, 9.3, 9.2, 8.7, 9.6, 9.3, 9.3, 9.9, 11.0, 12.7, 8.9, 8.9, 8.7, 11.4, 9.6, 9.1, 9.1, 9.1, 8.9, 8.8, 8.9, 9.3, 8.8, 9.6, 12.0, 10.2, 8.8, 9.2, 9.9, 10.2, 9.5, 10.5, 11.2, 9.2, 9.7, 11.1, 9.4, 11.0, 9.4, 9.4, 11.0, 11.0, 9.1, 11.1, 9.1, 10.4, 8.7, 9.7, 9.1, 9.7, 8.7, 8.9, 9.6, 9.5, 9.0, 9.0, 9.0, 9.0, 9.6, 11.1, 9.6, 8.7, 10.4, 11.4, 9.7, 8.7, 11.3, 12.6, 10.9, 10.9, 10.0, 10.0, 9.8, 8.7, 11.7, 9.3, 9.6, 11.0, 11.0, 11.8, 11.4, 10.2, 8.9, 10.2, 9.6, 10.6, 8.9, 9.2, 9.7, 9.7, 9.7, 9.2, 9.7, 9.3, 9.0, 9.5, 9.8, 9.8, 10.6, 10.6, 12.4, 12.6, 12.3, 10.5, 9.3, 8.8, 8.8, 9.7, 9.0, 9.0, 9.0, 9.0, 10.5, 9.1, 9.8, 8.5, 9.4, 9.4, 11.2, 10.0, 10.3, 10.8, 10.5, 10.8, 11.1, 9.9, 9.9, 9.9, 9.9, 10.4, 10.4, 11.5, 12.5, 10.0, 10.0, 10.0, 9.1, 10.6, 10.5, 11.5, 10.1, 10.3, 10.5, 10.6, 10.4, 11.4, 10.5, 10.0, 10.0, 9.6, 10.4, 12.5, 10.6, 11.8, 9.8, 10.8, 11.8, 11.2, 9.3, 10.4, 10.2, 9.0, 10.0, 9.1, 10.0, 10.0, 9.6, 11.2, 8.8, 10.0, 10.0, 11.4, 11.9, 9.6, 11.9, 9.6, 9.0, 9.0, 9.5, 10.4, 10.6, 10.2, 8.9, 9.7, 9.0, 11.4, 12.3, 10.8, 9.4, 10.6, 11.6, 9.4, 10.6, 10.0, 9.2, 12.5, 12.5, 10.4, 10.0, 10.0, 10.4, 10.0, 9.0, 9.2, 9.2, 11.3, 12.5, 10.8, 10.1, 9.7, 9.3, 9.3, 10.6, 10.2, 12.2, 8.8, 10.0, 11.4, 11.4, 9.4, 11.7, 11.4, 8.8, 9.2, 8.7, 12.6, 10.0, 12.8, 9.4, 10.3, 11.4, 9.0, 9.6, 10.5, 10.5, 9.0, 9.6, 9.8, 9.0, 9.8, 10.5, 12.7, 10.4, 10.4, 10.4, 10.5, 10.4, 10.4, 9.4, 9.1, 9.3, 9.4, 9.8, 9.9, 9.2, 12.1, 12.2, 9.8, 12.4, 9.9, 9.2, 11.6, 10.4, 12.9, 9.3, 11.0, 11.5, 12.4, 9.8, 9.8, 10.5, 9.1, 10.1, 10.6, 10.5, 10.5, 9.8, 12.9, 9.5, 9.8, 8.5, 9.5, 9.3, 9.5, 9.4, 8.7, 8.9, 9.4, 9.4, 8.7, 9.6, 9.3, 10.0, 12.5, 9.6, 9.4, 9.5, 12.4, 10.5, 9.2, 10.4, 9.2, 10.6, 9.5, 9.2, 9.6, 9.7, 9.7, 10.7, 10.5, 8.9, 12.1, 12.7, 9.9, 11.4, 10.7, 12.5, 8.6, 12.5, 10.0, 8.6, 9.5, 9.6, 9.9, 9.9, 8.9, 8.9, 8.8, 10.0, 12.0, 10.0, 10.0, 12.1, 11.0, 11.2, 10.3, 10.4, 9.1, 10.4, 10.8, 11.7, 9.8, 9.8, 11.4, 11.2, 11.4, 9.2, 12.5, 12.6, 12.2, 11.2, 9.7, 9.3, 9.0, 9.0, 9.0, 9.1, 9.1, 9.0, 10.4, 9.5, 11.4, 8.7, 9.9, 9.9, 9.0, 10.0, 9.7, 11.8, 10.2, 8.7, 9.6, 11.3, 12.1, 9.6, 12.1, 11.3, 9.4, 10.4, 9.5, 12.3, 9.9, 10.1, 9.2, 10.4, 9.1, 10.0, 11.5, 9.8, 9.8, 9.4, 8.7, 11.6, 8.8, 12.7, 11.7, 10.2, 10.2, 12.7, 11.6, 12.3, 8.7, 9.4, 10.1, 9.7, 10.1, 9.7, 8.9, 10.8, 10.8, 9.5, 9.1, 10.9, 9.4, 10.8, 10.8, 10.5, 9.4, 10.8, 10.5, 11.5, 9.4, 10.8, 10.8, 10.8, 9.8, 9.8, 9.6, 9.6, 9.5, 10.7, 12.4, 11.1, 8.8, 8.7, 8.7, 8.8, 11.7, 10.9, 10.8, 9.6, 9.0, 9.0, 10.4, 11.4, 9.3, 11.0, 9.1, 9.4, 9.4, 10.5, 8.8, 8.8, 10.7, 9.5, 10.9, 10.8, 10.8, 9.2, 10.3, 10.3, 11.0, 9.0, 10.4, 9.5, 9.5, 9.0, 9.5, 9.0, 10.0, 9.1, 9.1, 9.1, 9.1, 9.5, 11.4, 12.2, 11.3, 10.2, 11.3, 10.0, 9.4, 12.2, 9.2, 9.4, 9.6, 9.5, 12.5, 9.6, 10.0, 9.3, 9.3, 11.6, 12.5, 10.6, 9.4, 9.1, 9.0, 11.8, 11.8, 11.8, 10.0, 9.7, 9.5, 9.4, 11.2, 9.0, 10.7, 9.0, 9.1, 10.8, 10.1, 9.9, 9.8, 9.8, 9.5, 9.5, 11.1, 9.5, 9.5, 9.4, 9.7, 13.9, 10.1, 10.5, 12.6, 10.9, 10.0, 11.2, 10.0, 9.2, 9.5, 12.3, 12.3, 10.0, 10.8, 10.5, 9.2, 9.1, 10.5, 10.2, 8.9, 10.4, 11.7, 12.4, 10.9, 10.2, 11.7, 9.4, 10.5, 9.4, 10.4, 9.5, 11.1, 9.1, 9.2, 9.6, 9.1, 9.2, 10.8, 9.6, 12.6, 11.0, 10.2, 9.4, 10.0, 12.2, 10.5, 11.5, 9.8, 11.4, 11.5, 10.2, 9.4, 10.5, 9.1, 12.2, 9.5, 9.3, 9.8, 9.8, 9.8, 9.8, 8.7, 10.2, 9.5, 11.0, 9.2, 10.9, 9.3, 9.3, 9.8, 9.3, 9.3, 9.4, 10.4, 12.1, 11.0, 9.0, 9.5, 8.8, 11.2, 9.3, 9.5, 8.8, 9.0, 9.3, 9.2, 9.2, 10.0, 9.3, 9.2, 10.9, 10.0, 10.9, 9.3, 9.0, 9.2, 9.6, 9.4, 11.1, 8.9, 9.3, 9.3, 9.8, 9.8, 8.9, 9.6, 9.6, 9.0, 9.5, 9.3, 9.2, 9.1, 9.5, 10.5, 9.0, 11.7, 9.1, 9.0, 9.1, 12.4, 9.2, 9.4, 9.6, 11.7, 9.8, 10.2, 12.5, 10.9, 11.0, 10.5, 11.5, 12.8, 12.2, 10.5, 12.8, 11.9, 11.9, 11.9, 12.0, 12.0, 8.8, 8.8, 10.8, 11.0, 11.0, 9.3, 10.8, 8.8, 11.5, 10.8, 9.4, 9.5, 8.6, 9.5, 10.3, 9.4, 9.4, 10.0, 9.4, 10.4, 9.1, 9.9, 12.1, 9.9, 12.5, 9.5, 8.5, 9.0, 10.1, 9.4, 8.6, 10.7, 9.6, 10.1, 10.0, 12.7, 10.2, 8.9, 11.9, 10.0, 9.9, 11.5, 11.5, 9.8, 12.2, 11.4, 11.0, 11.4, 11.0, 9.9, 11.0, 9.4, 12.2, 11.0, 10.3, 10.5, 10.5, 10.9, 10.5, 11.0, 9.7, 8.9, 9.6, 8.8, 11.1, 10.3, 12.2, 9.8, 8.8, 9.9, 9.9, 9.9, 9.2, 9.5, 9.2, 10.3, 11.0, 11.9, 10.2, 9.4, 8.9, 8.9, 10.0, 10.7, 9.8, 9.3, 9.5, 10.0, 9.0, 11.9, 8.9, 10.0, 9.6, 8.9, 8.9, 11.4, 9.0, 10.0, 9.6, 9.7, 9.5, 10.0, 12.2, 8.7, 10.2, 9.6, 10.0, 9.5, 11.5, 9.5, 9.8, 10.1, 10.0, 9.8, 9.5, 9.5, 10.2, 10.2, 9.0, 9.0, 12.3, 9.0, 11.6, 9.5, 11.5, 9.6, 9.0, 12.0, 11.4, 12.3, 12.6, 9.0, 12.0, 11.7, 9.2, 10.3, 8.6, 10.7, 9.8, 9.8, 10.7, 12.5, 11.9, 10.8, 10.5, 10.3, 10.3, 10.8, 12.0, 10.2, 10.2, 9.9, 10.1, 9.5, 10.5, 10.4, 9.5, 9.2, 10.1, 9.8, 9.4, 9.4, 10.4, 11.3, 10.8, 11.3, 9.3, 10.3, 10.5, 10.3, 11.2, 10.3, 9.5, 8.9, 10.2, 9.2, 10.3, 10.5, 9.5, 11.4, 11.4, 11.1, 10.5, 12.0, 9.7, 10.2, 9.5, 10.4, 9.3, 10.5, 10.0, 10.2, 10.2, 9.1, 10.2, 10.7, 9.7, 9.3, 11.0, 10.8, 10.7, 10.7, 8.8, 10.9, 10.5, 10.0, 10.4, 9.2, 12.6, 9.0, 9.2, 11.3, 10.3, 10.4, 10.0, 10.7, 9.0, 10.7, 8.7, 11.6, 9.4, 9.5, 9.5, 10.9, 9.7, 9.1, 11.1, 12.6, 11.0, 11.3, 9.7, 10.9, 10.9, 9.3, 12.7, 10.1, 10.0, 9.8, 10.1, 9.0, 9.4, 9.4, 9.2, 10.1, 8.6, 11.2, 11.2, 9.2, 10.6, 9.3, 8.9, 10.6, 10.6, 8.8, 11.0, 10.2, 10.1, 10.1, 14.0, 9.4, 11.8, 11.4, 10.7, 8.6, 11.5, 11.2, 12.6, 12.6, 9.3, 12.6, 12.1, 9.9, 10.7, 10.0, 10.4, 10.5, 9.7, 10.5, 9.0, 9.2, 10.1, 11.4, 10.8, 10.9, 9.2, 12.9, 12.0, 9.5, 11.8, 9.1, 9.7, 9.1, 10.0, 10.4, 9.5, 12.3, 11.7, 9.5, 11.5, 10.6, 10.2, 9.5, 10.5, 10.5, 8.9, 10.6, 9.5, 10.8, 9.5, 8.9, 8.9, 9.4, 10.6, 9.0, 10.5, 9.0, 9.0, 9.4, 9.0, 9.6, 9.0, 10.2, 9.4, 10.4, 10.4, 9.5, 10.6, 11.0, 9.6, 9.9, 9.6, 12.8, 11.4, 10.0, 9.1, 9.4, 10.2, 9.2, 9.4, 9.6, 10.1, 11.4, 10.6, 12.8, 8.9, 9.3, 11.1, 9.9, 9.6, 12.8, 10.7, 9.2, 9.1, 9.6, 9.2, 10.7, 9.1, 9.2, 10.7, 10.8, 10.8, 9.0, 10.7, 10.7, 9.4, 8.8, 9.0, 11.5, 12.5, 10.5, 9.7, 11.3, 10.7, 10.8, 10.6, 11.7, 9.2, 11.1, 11.7, 11.0, 12.5, 10.0, 10.6, 12.3, 12.7, 12.3, 10.5, 12.5, 12.4, 8.7, 12.4, 12.6, 11.0, 10.1, 10.5, 12.7, 10.9, 13.5, 9.7, 9.2, 10.6, 13.3, 13.5, 10.1, 9.4, 10.6, 11.3, 10.8, 10.4, 10.5, 9.3, 9.3, 12.2, 9.2, 10.3, 9.4, 10.2, 9.0, 9.3, 9.2, 9.4, 9.4, 9.5, 9.9, 11.1, 12.3, 8.6, 9.4, 9.4, 8.6, 10.9, 9.4, 10.9, 9.4, 9.2, 8.6, 9.4, 10.8, 10.5, 12.5, 12.1, 8.7, 12.7, 12.1, 12.5, 11.4, 12.9, 12.8, 11.2, 9.7, 9.7, 10.3, 11.6, 11.6, 9.7, 10.9, 12.6, 12.4, 11.5, 10.2, 11.4, 9.6, 10.3, 9.3, 10.7, 12.8, 9.5, 10.4, 10.3, 9.9, 10.7, 10.5, 9.6, 9.3, 10.0, 11.2, 10.8, 10.3, 8.8, 12.8, 13.2, 10.1, 11.0, 10.8, 12.8, 9.2, 10.5, 11.7, 9.5, 9.5, 8.8, 9.3, 12.6, 12.4, 10.1, 11.2, 10.0, 10.0, 10.8, 10.0, 10.4, 10.8, 9.8, 12.2, 12.7, 12.2, 11.9, 11.2, 10.4, 12.8, 12.7, 10.1, 10.0, 9.0, 11.4, 8.9, 9.3, 12.0, 10.8, 10.5, 10.6, 11.3, 9.5, 11.4, 10.1, 10.9, 8.9, 8.9, 9.3, 10.4, 12.0, 9.5, 9.5, 12.4, 11.2, 11.4, 11.4, 11.1, 10.4, 12.0, 12.3, 9.1, 10.5, 11.4, 9.5, 13.7, 13.4, 11.3, 10.0, 10.1, 12.2, 13.4, 9.3, 13.7, 12.3, 11.3, 8.9, 8.9, 11.5, 8.9, 9.3, 11.1, 10.9, 11.6, 10.2, 10.5, 11.4, 8.9, 10.6, 11.6, 11.5, 12.3, 10.8, 11.3, 9.3, 10.0, 11.0, 10.2, 10.8, 10.1, 11.6, 9.1, 10.0, 10.8, 11.4, 12.7, 11.3, 10.4, 9.6, 10.1, 9.6, 12.1, 12.2, 11.3, 9.6, 9.2, 10.4, 9.5, 8.9, 8.8, 10.5, 9.4, 12.2, 11.3, 12.2, 12.2, 11.2, 11.2, 11.5, 11.3, 9.3, 11.3, 11.8, 9.2, 9.2, 12.2, 12.2, 12.2, 10.6, 12.4, 10.8, 11.2, 11.0, 12.7, 10.2, 11.5, 12.3, 9.8, 9.3, 11.8, 11.3, 11.4, 10.8, 9.5, 10.2, 10.7, 10.8, 11.5, 10.7, 10.2, 10.1, 10.4, 9.5, 9.1, 10.6, 9.4, 9.8, 9.5, 9.3, 10.3, 11.1, 10.0, 12.3, 12.4, 12.3, 10.4, 12.1, 12.5, 13.0, 11.0, 10.1, 9.2, 12.6, 12.2, 9.8, 11.0, 10.0, 9.8, 10.5, 10.0, 11.2, 11.0, 11.2, 11.0, 10.5, 10.6, 10.6, 12.0, 10.1, 10.1, 9.2, 11.0, 10.0, 8.7, 8.7, 11.1, 11.0, 11.1, 8.7, 8.7, 11.2, 11.1, 10.8, 9.0, 10.3, 9.9, 10.0, 9.8, 10.8, 9.0, 9.1, 10.6, 10.6, 9.9, 10.6, 9.9, 9.9, 12.8, 10.3, 10.6, 8.7, 12.6, 11.0, 11.2, 10.7, 9.6, 10.6, 9.0, 10.5, 12.8, 10.1, 12.2, 12.8, 10.1, 10.1, 9.2, 9.9, 9.7, 9.9, 9.9, 9.7, 10.3, 10.3, 10.5, 10.5, 9.8, 10.6, 10.1, 9.0, 9.5, 11.5, 11.9, 10.1, 9.2, 8.7, 9.8, 9.2, 8.7, 11.2, 12.3, 10.4, 10.7, 10.5, 9.4, 9.2, 11.9, 9.2, 9.9, 11.4, 9.4, 10.7, 12.7, 13.5, 9.5, 12.9, 12.5, 9.5, 8.6, 10.0, 12.5, 10.1, 11.3, 10.6, 10.8, 10.7, 9.0, 9.2, 8.5, 11.3, 11.3, 9.4, 8.7, 9.4, 10.5, 9.7, 10.2, 9.4, 11.5, 9.6, 11.4, 11.5, 12.2, 11.0, 9.2, 10.2, 10.0, 9.7, 9.2, 10.5, 10.0, 10.1, 9.1, 10.2, 9.1, 10.5, 10.1, 12.1, 10.2, 9.4, 12.8, 9.0, 10.9, 8.8, 9.0, 10.2, 9.2, 11.3, 8.8, 9.3, 9.4, 10.3, 10.8, 8.8, 9.0, 11.5, 10.8, 11.8, 10.5, 9.9, 9.8, 11.4, 9.3, 9.3, 10.3, 8.9, 11.4, 11.1, 10.4, 10.1, 9.0, 11.9, 9.0, 9.0, 9.1, 9.0, 10.0, 9.1, 9.4, 11.4, 9.7, 9.0, 11.8, 10.2, 9.2, 11.0, 10.0, 12.2, 11.8, 11.6, 10.2, 10.3, 8.6, 9.6, 9.6, 11.3, 9.9, 9.6, 10.6, 9.8, 10.5, 10.8, 10.0, 10.1, 9.4, 11.5, 10.8, 9.9, 9.0, 9.4, 10.8, 10.9, 12.0, 11.5, 10.5, 9.3, 11.8, 10.0, 9.4, 11.4, 10.4, 9.5, 11.9, 11.1, 9.6, 12.0, 8.7, 9.6, 10.0, 11.4, 9.6, 12.9, 9.7, 9.3, 9.1, 8.6, 9.9, 9.3, 10.9, 10.2, 9.7, 11.4, 9.5, 10.2, 11.1, 9.7, 9.3, 8.8, 10.6, 9.3, 10.2, 10.2, 11.0, 9.6, 9.3, 8.8, 8.8, 8.9, 10.0, 12.2, 10.9, 9.5, 10.9, 10.9, 10.8, 12.0, 9.8, 9.5, 11.0, 11.0, 9.8, 10.5, 11.4, 10.1, 11.6, 11.4, 11.8, 12.1, 12.0, 12.1, 9.1, 9.3, 10.4, 9.1, 9.4, 9.6, 12.0, 11.3, 8.7, 9.9, 9.3, 9.5, 8.7, 9.9, 9.3, 9.4, 9.4, 8.8, 9.4, 8.8, 9.9, 9.4, 12.6, 11.1, 12.8, 12.0, 12.0, 9.2, 12.3, 13.0, 12.0, 10.9, 12.8, 10.0, 9.0, 10.4, 9.0, 10.0, 10.0, 11.3, 11.3, 12.0, 11.3, 12.0, 10.6, 9.3, 9.4, 11.0, 9.3, 9.4, 10.5, 11.0, 9.5, 11.2, 12.3, 9.0, 9.0, 9.0, 9.0, 11.4, 11.0, 12.3, 10.4, 10.3, 10.5, 9.8, 10.0, 9.7, 9.7, 9.8, 10.5, 10.0, 11.5, 9.5, 10.5, 10.2, 9.8, 11.6, 11.8, 10.1, 10.3, 10.4, 8.9, 8.9, 10.8, 9.2, 9.6, 10.4, 8.7, 9.2, 9.2, 9.2, 9.2, 9.2, 10.2, 9.2, 9.0, 9.7, 9.6, 10.0, 9.2, 9.1, 8.7, 8.7, 9.5, 9.5, 8.9, 8.9, 9.9, 12.6, 9.7, 10.4, 9.1, 10.4, 9.5, 8.9, 10.6, 12.0, 12.5, 9.6, 9.2, 9.9, 11.7, 9.6, 12.0, 12.5, 9.2, 9.9, 8.9, 9.0, 10.2, 9.6, 9.4, 10.4, 10.4, 10.0, 10.0, 10.5, 11.4, 10.2, 10.4, 11.0, 10.1, 9.2, 10.3, 10.2, 10.4, 11.1, 9.9, 9.0, 8.6, 9.0, 8.6, 9.5, 9.0, 10.0, 9.0, 9.0, 10.2, 9.6, 9.7, 10.2, 13.0, 10.8, 9.7, 9.0, 9.9, 9.2, 8.7, 10.1, 10.1, 9.5, 9.9, 8.7, 9.0, 8.6, 10.5, 9.5, 10.1, 11.7, 10.7, 11.7, 9.2, 8.8, 8.8, 9.5, 10.2, 9.1, 10.5, 9.0, 8.9, 8.9, 8.9, 8.9, 8.9, 9.1, 10.1, 10.0, 9.5, 12.3, 9.1, 8.9, 9.6, 11.6, 8.8, 8.9, 8.8, 8.9, 8.9, 9.0, 10.0, 10.0, 11.1, 11.6, 10.6, 8.8, 8.9, 10.1, 10.0, 12.2, 11.0, 10.0, 11.1, 10.4, 11.8, 10.8, 12.5, 11.8, 11.6, 10.4, 11.5, 10.1, 9.2, 10.1, 9.2, 8.9, 10.1, 8.9, 9.7, 9.2, 11.0, 10.7, 10.8, 9.8, 11.0, 10.4, 10.2, 10.7, 9.0, 10.6, 9.5, 9.0, 9.2, 11.0, 9.9, 10.6, 9.3, 9.6, 9.5, 9.7, 9.7, 8.7, 8.7, 12.4, 12.4, 10.6, 8.7, 12.0, 9.0, 8.8, 9.5, 10.8, 11.4, 10.3, 9.5, 9.9, 10.2, 10.2, 11.0, 12.1, 9.1, 9.5, 9.5, 9.8, 9.5, 10.3, 9.6, 10.2, 10.5, 10.4, 9.6, 10.7, 10.5, 10.6, 9.6, 9.6, 9.5, 9.4, 9.8, 9.6, 9.2, 9.5, 9.2, 9.4, 9.4, 9.3, 9.1, 9.5, 9.1, 10.6, 9.5, 12.4, 8.7, 8.8, 10.6, 9.1, 9.0, 10.3, 9.1, 9.5, 8.8, 8.8, 8.8, 9.9, 9.5, 8.8, 11.7, 10.8, 12.0, 10.3, 9.0, 12.2, 9.9, 9.0, 12.2, 10.1, 9.3, 9.5, 9.2, 11.7, 11.0, 9.6, 9.6, 11.9, 10.8, 10.1, 10.9, 10.1, 10.4, 9.2, 9.6, 9.6, 9.0, 11.5, 10.2, 9.9, 9.6, 10.6, 9.2, 11.8, 12.2, 9.6, 10.6, 10.3, 10.2, 10.7, 11.7, 12.0, 10.6, 12.2, 11.0, 12.4, 9.4, 12.0, 11.6, 9.4, 9.4, 9.1, 9.1, 9.1, 9.1, 9.1, 9.2, 9.2, 9.1, 9.1, 9.2, 9.0, 9.2, 10.8, 9.5, 11.0, 10.0, 9.5, 10.1, 9.5, 9.5, 9.5, 9.4, 9.4, 12.7, 9.7, 9.7, 9.4, 9.4, 9.5, 11.7, 11.7, 9.7, 9.5, 9.1, 10.3, 9.7, 9.9, 9.9, 10.2, 12.1, 11.3, 11.4, 12.2, 9.9, 10.3, 12.2, 10.4, 11.4, 9.9, 10.0, 11.5, 10.5, 12.5, 10.5, 9.9, 11.4, 9.8, 11.4, 9.2, 8.9, 8.9, 9.5, 11.5, 9.5, 11.5, 9.5, 9.7, 9.7, 9.5, 9.4, 9.0, 10.6, 9.5, 9.1, 9.4, 8.8, 10.4, 8.9, 10.6, 9.0, 10.6, 10.6, 9.0, 8.8, 10.5, 9.5, 9.0, 10.4, 10.0, 10.4, 9.0, 9.3, 9.0, 9.3, 9.0, 11.5, 9.0, 10.4, 9.0, 10.6, 10.4, 8.5, 9.3, 10.5, 9.9, 10.4, 10.1, 10.5, 9.2, 9.4, 10.6, 9.4, 8.7, 10.2, 10.3, 9.5, 9.5, 9.5, 9.5, 9.4, 9.4, 9.5, 12.6, 10.5, 10.8, 9.9, 12.6, 12.2, 10.0, 10.6, 9.5, 12.8, 12.2, 12.6, 9.4, 9.0, 9.1, 9.4, 12.2, 10.0, 9.2, 9.3, 9.8, 9.2, 12.0, 9.3, 12.6, 12.2, 11.0, 12.0, 8.8, 8.9, 12.7, 11.8, 10.2, 9.9, 11.1, 9.4, 9.7, 9.7, 9.7, 9.7, 9.8, 9.3, 10.5, 9.3, 12.6, 8.9, 10.3, 10.6, 9.0, 9.7, 9.5, 10.3, 9.7, 12.3, 10.5, 9.5, 10.0, 8.8, 10.9, 12.2, 9.5, 10.0, 9.6, 8.7, 10.7, 11.1, 12.5, 10.4, 11.5, 9.4, 9.3, 10.1, 9.7, 10.5, 9.7, 9.2, 9.8, 9.0, 9.1, 10.4, 10.7, 10.5, 9.2, 11.5, 10.4, 12.0, 12.2, 12.0, 9.8, 9.3, 9.6, 9.5, 10.2, 10.4, 11.0, 10.4, 8.7, 9.9, 9.9, 11.3, 12.0, 10.7, 10.1, 9.6, 9.6, 8.7, 10.3, 9.1, 11.8, 11.9, 10.3, 10.0, 10.2, 10.0, 12.7, 9.6, 9.5, 12.7, 11.0, 9.1, 10.2, 10.1, 9.2, 9.4, 10.2, 9.2, 10.0, 10.1, 9.0, 9.5, 9.1, 13.3, 9.5, 9.2, 10.1, 9.2, 10.1, 11.2, 9.8, 11.2, 9.8, 9.4, 9.0, 9.4, 8.9, 9.1, 9.8, 9.4, 10.0, 9.4, 9.9, 10.0, 11.5, 9.2, 10.0, 9.2, 10.0, 10.0, 9.8, 10.5, 10.6, 9.4, 9.4, 11.0, 10.8, 9.0, 9.6, 10.6, 10.6, 9.6, 9.2, 9.2, 9.5, 9.5, 10.3, 8.8, 8.7, 8.7, 10.2, 10.1, 9.5, 9.5, 11.6, 10.7, 10.1, 11.1, 9.8, 9.0, 11.1, 9.5, 9.4, 10.2, 9.8, 9.5, 9.5, 9.0, 10.1, 8.8, 11.9, 11.9, 9.3, 10.0, 9.5, 9.3, 9.7, 9.7, 10.2, 10.8, 8.8, 8.8, 11.4, 8.8, 9.8, 9.4, 9.4, 9.4, 9.4, 9.7, 12.3, 9.8, 9.0, 9.2, 9.4, 9.9, 9.8, 12.3, 11.9, 10.2, 9.5, 11.9, 9.2, 9.7, 11.5, 10.4, 11.6, 9.7, 10.4, 11.5, 10.2, 9.8, 9.0, 10.5, 9.4, 9.4, 10.8, 10.7, 10.6, 9.2, 9.5, 9.5, 10.0, 10.6, 10.6, 10.6, 9.2, 11.0, 11.2, 9.6, 9.4, 9.5, 9.3, 9.4, 9.5, 9.4, 11.2, 11.2, 11.2, 8.8, 11.2, 11.2, 9.4, 11.1, 9.6, 11.1, 9.4, 10.6, 8.9, 12.3, 11.4, 9.6, 10.3, 11.4, 12.1, 9.9, 9.7, 10.5, 8.9, 9.4, 9.6, 12.6, 9.2, 10.4, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.2, 9.0, 9.7, 10.1, 11.0, 10.8, 10.8, 13.5, 10.6, 9.8, 11.7, 9.8, 9.0, 11.3, 9.4, 11.7, 11.3, 11.3, 12.0, 10.6, 10.8, 10.8, 12.0, 9.4, 9.4, 11.3, 9.4, 12.0, 10.3, 10.3, 10.3, 11.3, 9.4, 8.7, 9.4, 11.3, 10.3, 12.0, 8.0, 10.4, 10.7, 10.2, 10.9, 10.5, 11.7, 8.6, 9.0, 8.7, 12.8, 9.0, 8.7, 11.8, 11.6, 11.8, 10.6, 9.7, 10.3, 10.2, 10.1, 10.9, 9.3, 10.2, 10.2, 9.5, 9.3, 12.9, 8.7, 9.4, 10.1, 10.0, 11.1, 10.3, 12.2, 9.3, 11.3, 10.8, 11.2, 12.5, 9.3, 12.9, 11.2, 12.6, 9.3, 12.9, 12.9, 9.5, 11.9, 10.3, 10.3, 11.2, 12.0, 9.6, 9.2, 12.9, 9.3, 12.1, 9.6, 11.2, 11.2, 12.9, 9.2, 9.3, 9.2, 9.3, 10.7, 9.8, 10.3, 10.7, 11.3, 8.8, 10.8, 9.8, 9.3, 11.5, 8.8, 8.8, 8.8, 9.4, 9.4, 9.6, 8.8, 9.3, 8.9, 8.9, 10.0, 9.1, 9.3, 9.4, 10.1, 8.9, 10.8, 10.0, 10.9, 12.0, 9.3, 12.3, 10.4, 10.9, 10.5, 9.8, 10.5, 9.9, 11.4, 9.2, 9.7, 10.0, 11.4, 10.3, 9.9, 10.5, 9.8, 9.3, 12.4, 9.3, 9.3, 9.5, 10.5, 10.5, 12.8, 10.8, 10.0, 11.8, 10.0, 11.8, 12.0, 12.6, 11.9, 10.6, 9.2, 10.0, 9.2, 9.3, 10.2, 10.2, 8.7, 10.7, 12.1, 9.5, 11.2, 12.0, 9.5, 12.1, 10.7, 8.8, 10.8, 13.1, 12.5, 11.7, 11.7, 11.6, 11.3, 12.5, 11.4, 12.2, 11.7, 10.4, 10.4, 10.4, 9.1, 12.2, 9.1, 9.4, 9.4, 10.4, 9.2, 9.4, 13.5, 9.4, 10.9, 13.5, 9.4, 11.4, 12.4, 9.2, 9.4, 10.5, 11.5, 10.9, 10.8, 8.9, 8.9, 9.4, 12.2, 12.1, 10.9, 10.1, 12.2, 13.0, 11.0, 10.8, 13.0, 9.3, 11.4, 9.2, 9.9, 10.5, 12.4, 9.5, 10.5, 9.1, 11.5, 11.5, 11.2, 10.8, 9.4, 11.0, 11.3, 11.2, 10.5, 9.1, 10.4, 11.2, 11.1, 11.2, 10.5, 10.0, 10.0, 10.9, 10.9, 11.2, 11.7, 10.0, 9.5, 9.0, 10.0, 11.9, 10.6, 11.0, 11.2, 12.0, 12.6, 11.2, 10.5, 10.2, 11.0, 12.2, 12.3, 10.6, 10.4, 12.0, 12.7, 10.6, 12.3, 12.7, 11.4, 12.0, 12.4, 12.1, 11.4, 10.7, 9.3, 12.7, 11.7, 10.7, 11.8, 9.9, 13.4, 12.8, 12.8, 10.5, 11.5, 10.5, 13.0, 12.4, 10.2, 9.0, 12.0, 11.7, 10.0, 10.3, 9.0, 11.1, 9.0, 10.5, 11.9, 9.4, 11.4, 10.8, 9.8, 9.3, 11.4, 11.3, 11.3, 9.5, 9.4, 11.9, 9.3, 11.4, 11.4, 12.7, 13.5, 11.2, 10.7, 10.8, 10.5, 13.0, 10.8, 9.1, 10.1, 11.9, 12.0, 12.0, 9.1, 11.6, 11.9, 10.2, 10.8, 9.8, 11.4, 9.8, 10.1, 9.8, 9.8, 10.7, 10.6, 9.3, 9.8, 10.7, 14.0, 11.0, 11.0, 9.4, 9.0, 9.0, 10.0, 9.0, 9.0, 12.4, 11.3, 12.0, 11.7, 10.0, 13.2, 11.0, 11.0, 9.2, 13.0, 10.6, 13.0, 9.0, 9.0, 11.5, 11.0, 11.5, 9.9, 10.4, 9.0, 9.9, 11.0, 12.1, 9.7, 9.7, 12.2, 12.4, 10.5, 10.4, 12.0, 12.7, 10.9, 10.9, 10.9, 11.4, 11.0, 12.6, 11.6, 10.5, 10.9, 10.9, 12.5, 12.1, 11.3, 13.3, 10.9, 10.9, 10.5, 11.6, 11.4, 11.0, 12.1, 11.0, 12.6, 13.0, 8.8, 9.5, 11.8, 12.2, 10.7, 11.0, 11.4, 10.7, 12.0, 11.9, 11.4, 11.8, 10.6, 9.7, 11.0, 10.7, 11.0, 10.5, 10.4, 10.5, 12.0, 12.0, 9.2, 10.9, 9.5, 9.4, 11.3, 10.4, 9.4, 11.3, 8.8, 10.8, 9.4, 9.4, 9.2, 10.3, 9.9, 12.4, 11.9, 11.7, 9.4, 9.6, 9.4, 10.4, 9.5, 11.9, 12.5, 13.4, 12.7, 9.1, 10.5, 10.4, 10.4, 12.5, 10.4, 9.0, 9.8, 9.0, 10.7, 12.4, 12.5, 12.5, 12.1, 11.3, 12.0, 10.4, 12.2, 8.6, 9.1, 12.1, 12.0, 10.5, 10.4, 11.9, 13.7, 11.3, 10.5, 13.7, 10.1, 12.3, 12.0, 11.3, 9.5, 11.4, 11.9, 10.0, 10.0, 11.3, 11.7, 11.0, 12.2, 10.7, 10.9, 10.2, 11.9, 11.1, 11.2, 11.4, 10.6, 10.3, 10.4, 11.9, 11.9, 10.4, 9.2, 11.3, 11.3, 11.0, 11.9, 12.9, 10.8, 9.1, 10.4, 12.9, 12.2, 9.2, 10.3, 11.0, 11.0, 11.7, 12.0, 12.7, 8.8, 11.3, 12.8, 11.2, 8.9, 11.2, 11.1, 10.8, 9.3, 8.9, 12.7, 12.0, 11.2, 8.8, 8.8, 8.8, 10.4, 8.8, 10.4, 14.0, 8.8, 13.1, 12.3, 12.6, 12.0, 9.5, 12.0, 12.7, 10.5, 12.9, 9.5, 12.0, 12.7, 11.9, 12.0, 12.5, 12.1, 12.5, 9.9, 10.7, 12.0, 12.2, 12.4, 12.4, 10.3, 12.0, 10.5, 9.5, 10.5, 12.3, 11.9, 9.8, 12.3, 11.4, 11.0, 10.8, 12.8, 11.0, 10.2, 12.5, 11.6, 11.9, 9.8, 11.0, 10.9, 11.0, 12.5, 11.0, 12.0, 12.4, 12.5, 12.8, 11.0, 9.1, 12.4, 12.9, 10.9, 10.8, 10.6, 9.0, 12.0, 11.8, 10.6, 12.3, 11.5, 11.1, 9.0, 9.9, 12.8, 12.9, 12.9, 12.0, 12.0, 11.2, 13.3, 9.9, 9.5, 9.4, 11.0, 9.4, 11.5, 12.5, 11.9, 10.4, 11.2, 12.5, 11.0, 9.8, 12.3, 11.0, 12.6, 11.6, 12.3, 13.4, 9.8, 11.5, 11.6, 11.1, 11.0, 11.3, 9.9, 12.6, 11.8, 11.4, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 13.0, 9.3, 12.6, 9.6, 8.0, 11.8, 10.2, 12.7, 9.4, 10.2, 12.0, 11.3, 11.8, 10.9, 9.8, 12.2, 11.1, 9.4, 11.4, 10.2, 12.8, 10.1, 9.4, 12.2, 10.9, 10.9, 10.9, 9.4, 9.4, 11.4, 12.9, 9.4, 12.0, 10.1, 9.4, 9.4, 9.2, 11.8, 12.3, 11.4, 12.9, 12.3, 13.5, 12.8, 12.8, 12.8, 11.0, 10.6, 12.4, 12.9, 11.1, 12.9, 11.8, 9.1, 12.7, 12.0, 11.2, 12.4, 10.4, 10.4, 12.7, 12.5, 12.0, 11.6, 12.6, 10.2, 10.4, 11.5, 11.0, 10.1, 10.5, 12.1, 9.9, 11.4, 9.5, 9.5, 9.5, 10.9, 9.5, 12.6, 9.5, 11.1, 9.5, 9.5, 10.6, 10.6, 10.8, 10.9, 9.9, 11.3, 12.6, 12.5, 12.4, 11.8, 12.2, 10.7, 11.3, 12.5, 12.4, 11.3, 9.9, 11.3, 12.6, 11.5, 12.3, 12.2, 13.2, 10.2, 11.5, 13.2, 12.2, 11.0, 13.2, 9.5, 10.2, 10.2, 11.4, 12.5, 9.2, 12.1, 10.7, 12.1, 11.2, 10.6, 11.8, 12.5, 9.2, 12.6, 12.8, 12.3, 12.3, 12.4, 12.3, 9.1, 9.1, 10.6, 10.3, 9.5, 11.1, 10.8, 11.2, 10.8, 11.4, 11.2, 10.2, 11.1, 9.5, 10.2, 11.0, 11.5, 9.8, 10.1, 8.8, 11.5, 12.7, 9.8, 12.9, 9.8, 12.7, 8.5, 12.7, 13.1, 9.1, 12.5, 9.1, 9.1, 11.2, 12.5, 9.1, 9.1, 9.1, 11.5, 12.9, 12.5, 12.3, 11.4, 9.4, 9.1, 9.4, 12.0, 11.1, 11.8, 11.4, 9.1, 12.1, 10.4, 9.2, 13.0, 12.1, 11.5, 11.5, 10.0, 11.1, 12.4, 12.2, 10.6, 11.1, 13.9, 9.2, 10.5, 11.3, 12.9, 12.9, 9.6, 12.9, 12.9, 8.8, 13.2, 9.2, 11.3, 10.5, 10.5, 12.6, 9.5, 9.8, 13.4, 11.8, 9.8, 13.1, 12.6, 10.4, 13.4, 13.0, 13.4, 10.2, 11.7, 9.5, 11.7, 11.4, 11.8, 11.2, 13.0, 13.0, 10.9, 11.6, 11.3, 12.0, 10.5, 13.1, 13.0, 10.9, 9.1, 13.4, 11.5, 11.2, 10.9, 13.5, 9.1, 9.9, 10.5, 11.7, 11.0, 13.0, 13.6, 12.3, 13.3, 13.7, 11.1, 13.4, 9.1, 11.3, 9.4, 9.1, 11.6, 11.6, 12.4, 9.8, 11.1, 13.1, 9.7, 9.2, 11.7, 10.6, 9.7, 9.2, 10.9, 10.1, 12.2, 12.7, 13.0, 11.2, 9.4, 11.0, 11.0, 9.2, 9.4, 9.2, 12.3, 11.0, 10.0, 9.0, 9.0, 9.0, 11.1, 9.9, 12.2, 11.1, 9.0, 11.8, 12.9, 9.0, 12.4, 9.0, 12.9, 11.2, 12.6, 11.5, 11.3, 11.2, 11.5, 10.5, 12.6, 11.9, 10.1, 11.0, 10.6, 11.3, 11.2, 11.5, 11.1, 12.8, 12.3, 10.4, 11.5, 11.7, 10.7, 9.5, 9.5, 9.5, 12.0, 10.8, 10.7, 10.7, 10.7, 12.1, 11.9, 10.8, 12.3, 9.4, 9.9, 10.4, 10.4, 12.6, 12.5, 9.4, 9.2, 11.2, 9.2, 9.2, 9.4, 11.2, 10.8, 9.2, 9.2, 12.5, 9.3, 11.4, 10.0, 10.6, 10.7, 10.0, 12.5, 10.6, 12.8, 9.3, 11.4, 9.5, 9.5, 9.5, 10.8, 10.8, 8.8, 10.8, 11.0, 12.4, 11.3, 11.2, 12.5, 10.0, 11.0, 10.5, 10.5, 11.0, 11.4, 11.3, 12.2, 12.6, 11.1, 12.3, 10.4, 8.8, 9.5, 8.8, 10.4, 13.0, 12.2, 10.5, 10.8, 13.2, 13.0, 10.0, 10.4, 12.4, 12.9, 13.2, 10.5, 13.0, 11.2, 12.7, 9.4, 12.9, 13.0, 13.6, 9.1, 10.4, 13.6, 12.2, 8.7, 10.5, 10.2, 12.5, 11.3, 10.2, 12.6, 10.2, 9.8, 10.8, 12.5, 12.5, 11.5, 11.4, 10.5, 12.6, 8.7, 11.0, 11.3, 10.2, 11.6, 9.8, 10.1, 9.2, 9.1, 9.1, 9.1, 9.1, 11.7, 12.6, 9.0, 10.1, 13.6, 9.1, 9.2, 8.8, 10.0, 9.1, 11.2, 9.2, 9.2, 9.5, 11.9, 9.8, 9.8, 10.8, 11.3, 12.1, 11.3, 10.8, 13.5, 10.3, 9.0, 11.6, 10.3, 12.5, 8.6, 13.4, 12.7, 9.2, 10.2, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.9, 9.0, 9.0, 11.0, 9.0, 10.0, 10.7, 10.7, 13.4, 11.0, 10.0, 10.7, 10.7, 11.0, 11.0, 11.1, 10.9, 11.5, 13.4, 9.4, 9.4, 9.4, 10.6, 9.4, 12.0, 10.2, 10.6, 13.5, 9.7, 12.2, 12.3, 12.2, 11.4, 12.7, 9.7, 10.8, 11.0, 9.5, 10.1, 13.2, 8.8, 9.5, 9.5, 9.5, 9.5, 9.5, 10.4, 9.9, 10.0, 10.1, 9.4, 9.3, 10.9, 11.4, 10.3, 11.0, 10.9, 10.8, 10.3, 11.0, 9.3, 10.2, 10.2, 10.8, 10.5, 11.1, 10.9, 11.4, 10.3, 12.9, 9.9, 11.3, 11.5, 11.5, 10.7, 10.4, 12.5, 9.5, 11.3, 13.0, 11.5, 11.5, 11.3, 13.2, 11.5, 9.6, 9.6, 9.7, 9.2, 8.4, 12.4, 12.4, 9.2, 8.4, 11.7, 11.0, 11.9, 13.2, 11.7, 9.1, 12.6, 9.1, 10.5, 10.6, 12.6, 13.7, 12.0, 12.5, 12.1, 11.3, 12.0, 10.3, 12.7, 9.2, 9.2, 9.5, 10.1, 10.1, 13.0, 13.1, 11.0, 9.2, 9.4, 9.5, 10.2, 10.1, 8.6, 9.0, 9.6, 9.9, 10.5, 11.4, 9.4, 11.1, 8.9, 8.9, 10.8, 12.2, 8.9, 12.5, 12.2, 12.5, 8.9, 10.8, 11.4, 10.8, 10.6, 9.2, 12.2, 12.3, 10.4, 10.4, 11.0, 10.6, 9.2, 13.5, 11.4, 11.5, 14.0, 12.5, 12.5, 12.8, 11.2, 11.2, 13.6, 9.2, 12.5, 11.1, 11.2, 14.0, 13.6, 9.4, 14.2, 13.2, 11.2, 10.2, 12.8, 10.1, 10.1, 10.3, 9.9, 11.5, 9.0, 9.0, 12.1, 13.3, 11.5, 11.0, 10.7, 9.4, 10.3, 9.3, 12.0, 11.0, 9.3, 10.1, 11.1, 9.9, 11.0, 11.0, 12.5, 12.7, 9.3, 9.3, 10.1, 8.8, 11.2, 10.8, 8.8, 11.2, 10.3, 12.0, 9.5, 9.5, 9.8, 9.0, 13.0, 11.8, 8.8, 11.2, 9.5, 9.4, 9.5, 10.4, 9.8, 10.4, 10.3, 9.4, 9.5, 11.9, 12.8, 13.0, 10.4, 10.4, 10.7, 10.7, 11.9, 10.4, 12.8, 9.9, 9.9, 9.4, 11.4, 9.9, 9.4, 9.2, 10.5, 11.0, 11.0, 12.1, 11.0, 12.8, 10.5, 10.5, 10.5, 9.5, 9.2, 11.1, 12.3, 11.1, 12.6, 9.5, 9.2, 10.8, 11.3, 12.8, 10.5, 9.8, 8.5, 9.3, 9.2, 11.4, 8.5, 9.3, 8.4, 9.2, 9.2, 10.4, 11.6, 12.4, 10.4, 9.3, 12.2, 11.0, 11.4, 9.5, 9.2, 11.1, 9.2, 11.0, 9.9, 9.9, 9.5, 12.4, 9.4, 9.3, 8.7, 8.7, 8.7, 8.7, 9.0, 10.7, 10.7, 11.3, 8.7, 11.7, 9.3, 8.7, 9.0, 11.7, 10.7, 11.4, 10.7, 11.3, 10.0, 10.0, 11.2, 9.7, 12.5, 12.9, 11.8, 10.6, 11.8, 10.7, 9.9, 12.0, 10.4, 8.5, 9.9, 9.4, 10.4, 11.0, 11.0, 10.4, 9.8, 9.4, 10.6, 10.1, 11.5, 11.4, 9.2, 9.7, 11.3, 9.6, 8.9, 10.0, 9.2, 9.0, 12.8, 9.0, 9.5, 10.0, 11.0, 9.2, 10.6, 10.0, 10.0, 11.7, 12.5, 11.1, 9.7, 12.3, 12.2, 11.3, 11.6, 11.3, 11.1, 11.2, 11.3, 12.0, 8.8, 8.8, 12.0, 12.0, 9.0, 9.3, 8.7, 12.8, 11.5, 10.0, 10.0, 10.3, 10.4, 13.4, 11.2, 9.1, 9.1, 10.8, 12.5, 11.3, 12.8, 9.1, 12.7, 11.0, 10.4, 10.4, 10.7, 10.9, 10.4, 10.4, 9.7, 11.0, 9.6, 13.9, 9.4, 12.5, 9.6, 9.5, 9.6, 9.5, 9.6, 8.7, 8.7, 8.7, 8.7, 8.7, 8.7, 10.4, 10.7, 12.0, 12.1, 13.1, 12.4, 12.6, 8.7, 12.0, 11.6, 9.3, 9.3, 11.1, 10.2, 10.6, 11.3, 9.4, 9.3, 11.1, 9.9, 11.8, 12.6, 9.4, 10.5, 12.3, 11.3, 9.6, 12.0, 11.2, 10.2, 12.4, 10.2, 13.4, 12.6, 9.8, 9.1, 12.4, 12.5, 11.7, 12.9, 10.1, 10.3, 11.7, 10.3, 10.8, 11.2, 11.8, 9.8, 10.0, 8.8, 10.1, 9.5, 9.5, 9.5, 9.2, 12.2, 9.5, 11.3, 12.1, 9.2, 11.2, 12.5, 10.6, 10.4, 10.1, 9.9, 11.0, 10.0, 12.7, 12.1, 10.4, 10.4, 9.2, 9.2, 10.5, 9.2, 11.9, 10.1, 11.1, 10.8, 11.8, 9.2, 9.2, 12.3, 10.1, 11.4, 10.4, 9.8, 9.9, 9.8, 11.2, 10.9, 9.2, 9.2, 12.0, 12.1, 12.4, 11.2, 12.7, 12.2, 12.2, 12.2, 11.2, 12.7, 12.7, 12.1, 9.4, 10.1, 9.4, 8.9, 8.9, 8.9, 8.9, 13.0, 10.3, 10.1, 10.5, 8.9, 10.1, 10.1, 11.0, 11.0, 11.0, 11.0, 10.0, 10.5, 9.7, 10.1, 9.4, 11.2, 9.4, 10.8, 9.4, 11.2, 11.0, 12.4, 9.4, 9.4, 9.5, 10.0, 12.5, 10.9, 10.5, 10.8, 11.0, 11.8, 12.6, 10.2, 12.0, 12.5, 11.5, 11.94, 12.89333333, 9.4, 12.2, 11.94, 12.89333333, 9.5, 10.6, 10.5, 11.46666667, 11.4, 9.5, 9.2, 9.5, 10.98, 9.4, 9.5, 9.2, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 10.4, 8.8, 10.03333333, 11.3, 10.4, 9.2, 11.1, 9.2, 11.3, 9.1, 9.4, 13.2, 12.7, 10.7, 11.43333333, 11.1, 12.7, 10.53333333, 11.6, 9.533333333, 9.8, 10.7, 12.0, 12.8, 9.5, 10.93333333, 9.1, 12.6, 9.5, 10.9, 10.93333333, 9.6, 9.3, 11.36666667, 12.5, 9.5, 11.0, 9.4, 11.33333333, 8.8, 9.4, 11.06666667, 12.2, 11.0, 11.33333333, 9.5, 9.5, 11.0, 11.2, 9.3, 10.8, 9.2, 9.4, 9.2, 10.5, 10.8, 9.4, 9.8, 9.8, 9.8, 9.4, 9.8, 12.1, 12.3, 9.733333333, 9.4, 9.4, 12.8, 11.05, 9.4, 12.8, 9.733333333, 13.1, 11.5, 13.1, 11.5, 9.1, 9.75, 10.5, 8.8, 8.8, 8.8, 8.8, 10.5, 10.5, 8.8, 9.9, 9.9, 9.9, 12.2, 10.8, 8.7, 13.2, 12.7, 9.4, 11.2, 11.33333333, 11.9, 11.35, 10.5, 9.8, 9.1, 12.4, 9.1, 9.8, 11.3, 11.3, 13.1, 12.5, 10.3, 10.7, 10.4, 9.5, 9.8, 12.5, 9.4, 9.0, 9.0, 9.0, 13.0, 9.9, 9.4, 10.6, 13.4, 12.5, 9.3, 9.3, 11.0, 10.3, 11.3, 10.9, 11.3, 12.1, 11.1, 9.8, 10.1, 12.4, 12.7, 9.6, 9.6, 9.1, 12.8, 9.6, 12.4, 9.55, 9.1, 12.5, 9.9, 11.2, 13.0, 13.0, 11.7, 13.1, 12.0, 10.55, 11.45, 10.2, 11.45, 9.3, 10.8, 12.2, 11.0, 10.4, 11.4, 14.05, 10.7, 10.2, 11.2, 12.33333333, 11.5, 9.5, 13.4, 12.5, 12.5, 11.2, 8.8, 11.2, 12.7, 9.8, 9.8, 11.7, 9.8, 9.6, 9.8, 9.7, 10.0, 11.7, 12.3, 9.8, 9.0, 9.1, 9.1, 9.1, 11.4, 10.5, 12.4, 9.1, 9.1, 10.1, 10.9, 11.05, 12.75, 12.7, 11.1, 11.1, 12.75, 13.0, 12.0, 11.5, 10.5, 11.1, 11.1, 11.1, 13.1, 12.75, 12.7, 9.6, 11.7, 9.7, 10.9, 10.7, 13.8, 12.15, 10.8, 10.7, 10.8, 10.8, 12.0, 10.8, 12.2, 9.4, 11.4, 12.5, 13.05, 12.4, 12.9, 12.0, 11.3, 10.0, 11.8, 9.4, 8.8, 11.1, 10.5, 9.3, 11.4, 11.8, 12.4, 11.6, 11.1, 12.4, 11.1, 11.0, 12.2, 11.0, 12.9, 10.9, 13.4, 10.7, 11.0, 11.4, 10.2, 11.0, 9.1, 11.0, 11.5, 12.0, 11.2, 11.2, 12.6, 11.0, 10.8, 10.9, 9.8, 9.8, 9.5, 11.26666667, 10.8, 13.4, 11.3, 8.9, 11.2, 11.5, 13.0, 12.6, 13.1, 11.2, 11.7, 10.9, 10.9, 11.6, 10.4, 10.9, 11.7, 10.8, 11.2, 10.0, 10.56666667, 11.73333333, 10.6, 10.5, 11.75, 11.4, 12.4, 10.1, 12.3, 13.1, 10.65, 11.4, 9.3, 10.2, 10.2, 13.1, 9.6, 12.8, 10.96666667, 10.96666667, 10.96666667, 11.0, 13.4, 11.2, 12.4, 11.2, 12.4, 10.13333333, 10.13333333, 12.4, 9.1, 10.15, 10.15, 11.5, 8.9, 10.46666667, 10.46666667, 11.8, 11.63333333, 10.6, 9.6, 11.8, 8.9, 10.5, 10.2, 13.1, 11.8, 12.2, 11.45, 10.5, 10.2, 9.0, 9.0, 9.0, 9.0, 9.1, 8.8, 9.0, 9.1, 12.9, 13.0, 12.9, 9.2, 9.8, 9.8, 10.1, 10.1, 10.9, 9.6, 10.4, 11.8, 10.8, 10.6, 12.7, 12.2, 10.8, 10.4, 11.1, 11.8, 10.0, 10.8, 10.3, 9.9, 10.0, 12.25, 10.2, 9.4, 9.7, 10.2, 10.4, 12.2, 9.4, 10.6, 10.7, 11.85, 11.7, 11.7, 10.15, 11.63333333, 10.8, 10.8, 12.3, 12.5, 11.65, 9.6, 10.9, 10.8, 11.2, 10.0, 10.5, 9.1, 10.5, 9.3, 9.3, 11.2, 10.6, 12.1, 12.0, 9.7, 12.4, 13.6, 13.6, 11.8, 10.0, 10.0, 9.1, 11.9, 11.75, 11.4, 13.0, 12.4, 9.4, 9.6, 9.6, 9.6, 9.6, 9.1, 12.0, 11.2, 10.1, 10.3, 12.3, 10.55, 10.9, 9.7, 9.8, 8.9, 8.9, 10.2, 11.7, 12.8, 12.8, 10.2, 13.55, 11.6, 8.9, 13.8, 9.4, 9.4, 10.7, 10.7, 12.3, 10.3, 10.4, 11.6, 10.7, 12.8, 11.9, 12.1, 9.2, 9.5, 11.0, 10.9, 10.4, 9.1, 11.4, 11.4, 9.7, 12.4, 13.7, 10.6, 11.2, 13.13333333, 12.4, 9.7, 11.0, 11.3, 12.0, 9.2, 10.7, 10.7, 11.4, 9.2, 12.1, 11.1, 9.7, 10.7, 10.9, 12.0, 10.6, 9.6, 13.1, 11.0, 11.6, 11.95, 11.1, 11.5, 11.3, 11.9, 9.5, 12.2, 12.2, 11.1, 9.6, 11.1, 9.6, 11.4, 11.4, 12.06666667, 9.0, 9.0, 11.4, 9.6, 11.0, 11.0, 11.2, 11.55, 13.3, 9.633333333, 13.6, 11.2, 13.0, 10.8, 9.8, 11.45, 12.05, 9.7, 11.9, 10.0, 9.7, 11.6, 8.8, 9.5, 9.533333333, 9.533333333, 9.4, 10.7, 11.5, 9.6, 9.55, 12.15, 13.0, 9.2, 9.4, 11.8, 10.6, 9.7, 11.2, 9.6, 9.4, 12.8, 11.8, 9.4, 9.8, 9.8, 9.8, 9.4, 9.4, 9.4, 10.0, 9.5, 10.5, 9.2, 10.5, 9.9, 9.1, 9.2, 9.2, 10.5, 9.3, 9.0, 9.2, 9.4, 9.7, 9.5, 9.4, 9.7, 9.3, 9.5, 9.5, 9.4, 9.8, 10.1, 10.6, 9.8, 9.4, 9.2, 9.6, 10.8, 9.7, 9.8, 10.5, 10.5, 9.3, 10.5, 10.3, 9.5, 13.1, 9.2, 9.5, 9.2, 9.2, 9.2, 9.4, 9.4, 9.4, 10.2, 9.5, 9.6, 9.4, 10.0, 9.4, 9.2, 9.3, 9.5, 9.8, 10.9, 10.9, 9.6, 10.7, 10.7, 10.5, 9.5, 9.5, 9.5, 9.2, 9.6, 10.5, 10.5, 10.7, 10.1, 9.1, 9.2, 9.4, 9.1, 9.4, 10.3, 10.1, 9.9, 9.6, 9.5, 9.0, 9.5, 9.9, 9.8, 9.6, 10.5, 12.9, 10.7, 9.2, 9.8, 9.0, 10.2, 10.4, 9.0, 9.2, 9.4, 9.2, 9.3, 9.3, 9.6, 9.3, 9.5, 9.8, 9.8, 9.7, 9.5, 10.5, 10.0, 9.4, 10.9, 9.2, 9.0, 10.9, 9.2, 9.5, 9.5, 9.4, 10.9, 10.9, 10.5, 9.4, 9.4, 13.0, 13.0, 9.8, 9.9, 9.6, 9.5, 9.2, 9.5, 9.5, 9.6, 9.5, 14.0, 9.4, 14.0, 9.4, 10.0, 9.3, 10.2, 10.5, 10.3, 9.4, 10.1, 10.1, 10.5, 10.5, 10.5, 10.5, 9.3, 9.3, 9.6, 9.2, 10.0, 9.4, 9.4, 9.5, 10.2, 9.0, 10.4, 9.5, 9.1, 9.2, 9.2, 11.5, 9.5, 9.5, 9.5, 10.5, 9.6, 9.5, 9.5, 9.3, 9.3, 9.3, 9.3, 9.7, 9.2, 9.7, 9.5, 9.5, 9.4, 9.8, 9.5, 9.7, 9.7, 9.4, 10.2, 10.1, 13.0, 11.4, 10.3, 9.3, 9.5, 9.2, 9.2, 10.8, 10.8, 9.3, 9.4, 10.5, 12.4, 10.0, 10.2, 10.1, 9.8, 10.5, 11.0, 9.1, 9.7, 9.5, 9.4, 9.4, 9.5, 10.0, 10.4, 10.5, 9.5, 9.8, 10.5, 11.0, 12.2, 9.9, 9.6, 11.0, 9.0, 9.0, 9.0, 9.2, 9.0, 9.0, 9.3, 10.9, 9.8, 9.2, 9.2, 9.9, 9.5, 9.3, 9.8, 9.9, 10.0, 9.9, 10.5, 9.5, 9.9, 9.3, 9.2, 9.2, 9.4, 10.5, 9.3, 9.4, 10.0, 9.3, 10.9, 10.2, 9.8, 12.8, 9.4, 10.1, 10.7, 10.1, 10.1, 9.4, 9.4, 10.7, 9.4, 10.1, 12.6, 10.5, 9.3, 9.9, 9.1, 10.5, 9.8, 9.8, 10.3, 10.3, 10.6, 9.2, 10.6, 10.5, 10.3, 10.1, 9.5, 9.5, 9.9, 9.6, 9.7, 9.6, 10.7, 10.1, 10.0, 9.5, 9.2, 9.3, 9.4, 9.5, 9.5, 9.5, 9.3, 9.4, 9.5, 9.4, 11.0, 11.0, 10.1, 10.4, 11.5, 10.4, 11.5, 9.7, 9.3, 9.5, 9.2, 9.2, 11.5, 11.5, 9.7, 9.5, 12.5, 12.5, 9.4, 11.0, 11.7, 12.2, 12.5, 10.3, 11.5, 9.8, 9.2, 11.3, 9.8, 9.8, 10.7, 9.9, 12.3, 12.0, 10.0, 9.4, 9.9, 9.4, 9.3, 13.0, 11.9, 12.8, 11.0, 11.7, 10.4, 9.8, 9.4, 9.9, 10.0, 10.2, 10.0, 11.8, 10.0, 9.0, 9.4, 12.0, 9.9, 8.7, 10.6, 9.2, 10.8, 11.8, 11.0, 12.0, 13.3, 10.8, 9.4, 10.0, 9.4, 9.4, 9.2, 9.7, 9.2, 9.6, 9.2, 10.0, 12.9, 10.0, 9.5, 9.1, 9.9, 13.0, 9.9, 11.0, 11.0, 9.4, 9.9, 10.8, 10.5, 10.5, 9.1, 10.1, 10.8, 10.8, 11.3, 9.6, 9.5, 9.5, 9.3, 11.7, 9.5, 9.3, 11.7, 10.5, 10.4, 9.9, 11.8, 12.3, 10.9, 11.0, 10.9, 12.3, 11.4, 10.6, 9.3, 10.4, 11.0, 9.2, 12.8, 9.5, 9.9, 9.5, 10.2, 11.2, 9.9, 9.3, 9.8, 11.3, 11.2, 11.6, 12.5, 10.1, 10.5, 11.2, 10.2, 10.8, 10.8, 9.1, 10.0, 11.2, 11.1, 13.4, 10.3, 9.6, 11.2, 9.0, 11.3, 9.3, 11.8, 9.0, 9.2, 9.7, 11.5, 14.0, 9.2, 9.8, 10.6, 11.4, 10.4, 10.6, 9.4, 10.2, 9.7, 11.0, 10.2, 10.1, 9.2, 11.7, 9.4, 9.4, 13.4, 10.0, 10.0, 10.0, 10.8, 10.2, 10.6, 13.3, 13.4, 11.6, 12.1, 11.0, 9.0, 11.1, 11.0, 11.6, 9.0, 12.0, 12.0, 10.9, 10.8, 12.5, 10.8, 9.5, 10.2, 11.4, 9.5, 10.2, 9.7, 11.8, 11.8, 9.3, 11.9, 8.4, 11.7, 11.0, 10.0, 9.1, 9.8, 9.4, 9.5, 9.9, 11.0, 11.4, 8.7, 9.4, 10.3, 10.3, 10.3, 12.8, 10.0, 10.3, 9.4, 10.7, 12.0, 11.2, 9.6, 11.0, 9.9, 11.0, 8.4, 9.1, 9.5, 10.7, 10.4, 9.4, 9.5, 10.0, 10.0, 11.5, 11.1, 11.1, 11.7, 11.1, 11.7, 12.7, 11.4, 9.2, 9.2, 10.1, 12.7, 11.4, 9.0, 9.0, 10.7, 11.7, 11.0, 11.7, 10.4, 9.6, 10.0, 10.2, 10.0, 9.5, 9.8, 9.8, 9.6, 9.6, 9.2, 9.9, 10.7, 9.6, 10.6, 9.3, 14.0, 10.5, 9.7, 11.5, 9.7, 9.0, 9.5, 9.3, 9.3, 10.0, 9.8, 9.3, 10.0, 9.0, 9.3, 9.0, 9.1, 9.2, 12.2, 10.5, 10.4, 12.7, 9.2, 9.4, 10.0, 9.8, 10.2, 9.7, 9.7, 9.8, 10.2, 9.3, 9.4, 9.4, 9.5, 12.1, 10.2, 10.2, 9.1, 9.1, 9.3, 9.3, 9.3, 9.5, 10.5, 11.3, 9.5, 9.7, 9.4, 9.4, 10.2, 10.3, 9.4, 9.5, 9.4, 9.5, 9.4, 10.1, 10.1, 11.0, 11.2, 11.3, 9.6, 11.2, 14.9, 12.0, 9.5, 9.4, 9.6, 10.5, 9.6, 11.0, 9.6, 9.0, 9.6, 10.2, 10.2, 9.7, 9.5, 9.2, 11.0, 9.2, 10.0, 9.5, 9.5, 9.5, 9.3, 10.2, 9.3, 9.9, 10.0, 9.6, 9.0, 10.2, 9.8, 11.3, 9.4, 11.3, 9.1, 9.7, 9.4, 9.4, 10.7, 9.8, 9.0, 9.4, 9.4, 12.8, 9.5, 9.5, 9.7, 10.8, 10.1, 9.5, 9.4, 9.6, 9.7, 9.9, 10.0, 10.5, 11.6, 10.0, 10.1, 9.5, 9.4, 9.4, 9.8, 9.2, 9.4, 10.0, 9.6, 9.5, 9.6, 9.2, 10.0, 9.5, 11.2, 10.4, 11.1, 9.5, 9.5, 12.7, 9.6, 11.5, 9.6, 9.5, 9.3, 9.5, 9.5, 9.3, 9.2, 9.3, 11.5, 9.5, 9.2, 10.0, 9.5, 9.5, 9.0, 9.4, 9.6, 9.5, 9.5, 9.5, 9.4, 9.5, 9.1, 10.7, 11.2, 9.8, 9.8, 9.2, 9.7, 9.6, 10.0, 9.6, 9.5, 9.5, 9.4, 9.5, 9.7, 9.6, 9.7, 9.4, 9.4, 9.5, 9.5, 10.0, 10.3, 10.3, 10.5, 9.8, 9.4, 9.8, 10.0, 9.8, 9.8, 9.5, 9.5, 10.1, 10.1, 9.3, 9.7, 9.6, 9.7, 10.8, 12.5, 10.2, 9.6, 10.8, 10.7, 10.7, 9.4, 10.0, 12.9, 9.6, 9.9, 12.8, 12.5, 12.8, 9.2, 10.3, 10.5, 10.9, 10.8, 11.4, 11.3, 10.8, 10.5, 11.9, 9.4, 9.6, 9.7, 14.0, 9.8, 9.8, 10.3, 10.7, 11.0, 10.7, 12.7, 11.1, 10.9, 11.1, 9.9, 9.9, 9.4, 9.3, 11.7, 11.7, 11.2, 10.0, 12.1, 10.3, 10.9, 9.4, 10.6, 9.8, 9.8, 9.9, 9.8, 9.8, 9.5, 9.5, 9.7, 10.9, 10.9, 11.7, 10.9, 11.3, 10.6, 11.2, 9.5, 11.5, 10.4, 9.7, 9.5, 9.7, 11.3, 11.2, 11.2, 10.9, 11.8, 10.6, 10.0, 11.1, 11.8, 11.8, 10.9, 11.8, 10.0, 9.5, 9.9, 11.4, 12.0, 9.5, 10.0, 10.5, 10.4, 12.1, 11.2, 9.3, 10.1, 9.7, 9.3, 9.7, 9.8, 10.7, 12.5, 10.7, 12.5, 11.0, 11.8, 10.8, 10.8, 10.8, 10.8, 9.5, 11.0, 11.5, 10.8, 11.5, 13.2, 10.9, 12.2, 12.2, 11.5, 11.9, 11.0, 10.1, 11.0, 11.8, 10.5, 11.0, 11.8, 10.1, 11.2, 11.0, 10.2, 9.2, 11.2, 12.0, 10.5, 9.8, 9.5, 9.8, 10.5, 11.8, 11.8, 10.4, 12.9, 11.4, 12.4, 12.5, 10.0, 9.7, 12.1, 11.1, 12.0, 12.4, 11.9, 11.9, 11.9, 12.4, 11.2, 12.1, 12.2, 10.4, 11.3, 11.1, 11.3, 10.0, 11.1, 9.3, 9.5, 11.2, 11.1, 11.0, 11.9, 9.2, 12.2, 10.2, 10.9, 10.9, 11.6, 10.7, 12.1, 9.4, 9.4, 9.1, 11.3, 10.4, 10.5, 10.0, 12.9, 10.5, 10.4, 11.3, 11.4, 9.4, 9.4, 10.9, 9.4, 9.4, 9.4, 9.4, 9.4, 10.1, 12.8, 12.8, 9.1, 12.9, 11.5, 10.6, 11.7, 12.8, 10.3, 12.8, 11.7, 11.7, 12.0, 10.9, 12.3, 10.4, 10.0, 10.0, 11.2, 11.4, 12.6, 12.7, 12.7, 10.4, 11.9, 11.9, 10.5, 12.3, 10.5, 10.4, 12.6, 11.6, 10.1, 10.5, 11.5, 11.0, 9.6, 10.4, 9.7, 10.6, 12.5, 9.2, 12.6, 11.1, 10.2, 9.8, 11.1, 10.9, 12.2, 11.4, 10.7, 10.4, 10.9, 10.8, 10.4, 9.2, 12.9, 12.7, 9.1, 9.1, 12.1, 9.1, 11.6, 12.1, 9.9, 12.5, 11.4, 11.8, 11.8, 10.2, 12.5, 10.9, 10.9, 10.8, 11.1, 9.2, 9.5, 10.7, 9.2, 10.2, 11.4, 11.0, 11.0, 12.3, 11.8, 12.3, 9.5, 12.0, 9.5, 9.6, 11.6, 11.2, 9.9, 9.9, 11.8, 11.4, 11.5, 12.0, 10.8, 10.5, 10.8, 9.4, 12.5, 9.4, 12.4, 12.0, 11.2, 12.0, 12.4, 12.8, 12.3, 11.7, 9.5, 10.8, 10.0, 12.3, 11.0, 9.5, 13.6, 11.3, 11.3, 11.3, 13.3, 12.9, 13.1, 12.3, 12.3, 11.2, 11.5, 11.3, 13.5, 11.5, 10.0, 10.5, 10.4, 9.5, 13.6, 11.2, 11.8, 11.9, 11.4, 11.4, 9.1, 9.5, 9.5, 11.0, 11.4, 10.0, 10.1, 10.4, 9.8, 11.8, 11.6, 12.0, 12.8, 12.5, 9.8, 11.1, 11.4, 9.8, 11.8, 12.9, 10.6, 10.8, 11.1, 10.2, 11.8, 10.0, 10.0, 9.4, 10.2, 12.4, 12.0, 11.5, 10.5, 10.8, 12.3, 9.5, 9.5, 11.5, 11.2, 12.7, 11.4, 11.0, 11.0, 11.4, 10.5, 9.3, 10.9, 11.9, 12.2, 11.9, 10.9, 9.6, 12.5, 10.8, 12.4, 10.8, 9.5, 9.5, 9.5, 9.8, 10.9, 9.5, 9.8, 11.2, 11.7, 9.4, 11.0, 11.0, 11.0, 10.0, 11.0, 11.2, 10.4, 9.3, 10.4, 10.5, 10.4, 11.3, 9.5, 12.0, 10.6, 10.9, 11.5, 11.5, 9.6, 12.0, 10.3, 9.4, 9.2, 9.6, 13.6, 9.5, 11.8, 10.8, 9.5, 9.3, 12.8, 11.5, 9.4, 12.8, 9.6, 11.8, 9.3, 9.8, 12.2, 9.5, 10.3, 10.5, 10.0, 10.5, 11.1, 10.9, 10.9, 9.8, 9.8, 9.5, 10.9, 11.0, 9.2, 11.0, 11.3, 11.3, 9.3, 11.2, 9.8, 9.6, 11.8, 10.3, 10.3, 11.4, 9.5, 14.0, 14.0, 11.7, 11.2, 9.3, 11.2, 9.5, 12.0, 9.7, 9.5, 11.5, 10.4, 10.4, 10.9, 10.2, 10.9, 10.5, 12.4, 13.0, 10.2, 10.2, 11.0, 10.9, 12.4, 9.7, 10.9, 9.5, 9.5, 12.1, 12.2, 10.9, 12.5, 11.7, 11.2, 11.2, 9.2, 9.8, 10.1, 11.1, 10.1, 9.2, 9.8, 12.8, 10.5, 10.1, 10.1, 9.8, 12.5, 11.9, 9.8, 9.1, 10.1, 12.5, 11.4, 11.0, 10.6, 10.6, 10.6, 10.6, 9.3, 9.8, 9.8, 9.2, 9.7, 9.6, 10.0, 12.6, 9.5, 9.5, 9.5, 10.5, 10.5, 10.5, 10.4, 10.5, 11.0, 10.2, 11.4, 9.5, 9.5, 10.8, 10.0, 11.8, 10.3, 10.3, 10.0, 10.1, 10.1, 11.1, 9.5, 10.03333333, 10.9, 10.1, 10.03333333, 9.8, 11.8, 9.5, 9.8, 10.5, 9.8, 10.4, 9.2, 11.6, 9.2, 9.3, 9.8, 9.9, 10.0, 12.2, 9.9, 10.8, 10.8, 9.6, 9.9, 9.9, 9.5, 9.2, 9.6, 9.6, 10.3, 9.7, 12.5, 11.0, 9.8, 10.2, 9.2, 9.55, 9.55, 9.9, 10.2, 11.1, 9.9, 9.9, 11.9, 10.0, 10.7, 11.3, 10.9, 10.7, 12.4, 10.7, 11.9, 10.6, 10.9, 10.1, 9.6, 9.4, 9.6, 12.1, 9.8, 9.9, 9.8, 9.4, 11.4, 11.0, 9.6, 9.6, 12.1, 11.2, 11.0, 11.3, 10.4, 9.9, 11.7, 10.1, 9.0, 9.0, 8.5, 11.1, 10.3, 11.06666667, 11.3, 9.566666667, 9.8, 11.7, 11.1, 9.6, 9.8, 9.7, 9.7, 11.3, 11.3, 11.0, 11.6, 9.0, 10.9, 10.9, 10.55, 9.0, 10.5, 11.9, 10.4, 10.0, 10.4, 10.8, 9.7, 9.7, 10.0, 11.0, 10.0, 9.7, 9.7, 12.6, 11.1, 11.0, 8.8, 13.56666667, 8.8, 13.6, 10.2, 10.6, 10.1, 10.6, 10.3, 10.7, 10.9, 9.7, 10.3, 10.6, 11.4, 10.8, 12.4, 11.4, 11.95, 9.7, 10.0, 10.6, 9.7, 11.5, 10.8, 11.5, 9.6, 9.4, 9.8, 11.0, 11.4, 9.95, 10.8, 11.4, 10.6, 11.1, 9.7, 9.8, 10.4, 10.5, 9.233333333, 9.25, 10.6, 10.3, 10.5, 10.2, 10.3, 9.05, 10.6, 10.4, 10.0, 9.7, 9.6, 10.8, 10.1, 10.2, 11.3, 10.2, 9.9, 9.0, 11.7, 9.7, 10.3, 10.2, 12.0, 9.9, 11.6, 10.9, 10.75, 10.4, 11.2, 10.1, 10.2, 12.1, 10.4, 11.4, 9.5, 9.4, 11.3, 9.4, 11.0, 10.55, 9.9, 11.0, 9.5, 9.9, 9.9, 9.9, 10.1, 10.1, 10.1, 10.9, 11.2, 10.1, 9.2, 11.5, 12.4, 11.1, 9.5, 12.5, 10.5, 11.8, 10.8, 11.9, 11.3, 11.3, 11.9, 11.3, 11.9, 9.8, 11.6, 11.5, 11.4, 10.9, 12.8, 9.2, 11.6, 11.6, 11.0, 9.5, 10.5, 11.2, 11.0, 10.2, 11.0], \"sizemode\": \"area\", \"sizeref\": 0.03725, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"\", \"showlegend\": false, \"type\": \"scattergl\", \"x\": [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 7, 5, 7, 6, 8, 6, 5, 8, 7, 8, 5, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 6, 7, 4, 5, 6, 5, 6, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 7, 5, 8, 5, 6, 5, 5, 6, 8, 5, 7, 7, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 6, 5, 7, 7, 7, 6, 6, 7, 4, 6, 5, 5, 5, 5, 5, 6, 5, 6, 6, 5, 6, 5, 5, 5, 5, 4, 6, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 7, 7, 6, 5, 7, 5, 5, 5, 5, 6, 5, 7, 6, 5, 5, 6, 6, 6, 6, 6, 4, 7, 6, 7, 6, 6, 5, 6, 6, 6, 7, 8, 8, 7, 5, 5, 6, 5, 5, 6, 7, 5, 5, 6, 6, 4, 7, 5, 6, 4, 5, 4, 6, 6, 5, 5, 6, 5, 5, 6, 5, 8, 4, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 4, 5, 5, 4, 5, 6, 5, 7, 5, 6, 7, 5, 5, 5, 5, 5, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 4, 6, 6, 6, 6, 6, 6, 6, 7, 6, 5, 5, 7, 6, 5, 6, 7, 7, 7, 5, 4, 3, 5, 3, 6, 8, 7, 7, 6, 4, 6, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 5, 5, 5, 6, 6, 5, 4, 7, 8, 8, 4, 5, 5, 5, 6, 7, 7, 7, 7, 6, 5, 7, 3, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 7, 6, 7, 8, 6, 6, 5, 6, 6, 5, 7, 6, 7, 5, 6, 6, 5, 5, 6, 6, 6, 5, 8, 5, 6, 5, 5, 6, 6, 6, 5, 7, 7, 6, 6, 5, 6, 6, 7, 6, 6, 5, 7, 7, 6, 7, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 7, 6, 6, 6, 5, 6, 6, 5, 6, 7, 7, 7, 7, 6, 7, 7, 6, 6, 6, 7, 7, 7, 5, 6, 7, 7, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 5, 5, 5, 6, 5, 7, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 7, 6, 6, 6, 7, 6, 6, 5, 5, 5, 5, 5, 7, 4, 8, 7, 5, 8, 7, 5, 7, 6, 8, 6, 6, 3, 5, 6, 6, 7, 5, 5, 7, 7, 7, 6, 7, 5, 6, 5, 5, 5, 5, 6, 5, 5, 6, 6, 5, 5, 6, 5, 6, 7, 6, 5, 7, 6, 6, 6, 5, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 4, 6, 5, 4, 6, 6, 6, 5, 6, 6, 5, 7, 6, 7, 6, 6, 6, 6, 7, 6, 5, 6, 6, 5, 5, 5, 6, 6, 5, 6, 4, 6, 6, 6, 6, 5, 6, 6, 6, 5, 5, 6, 5, 6, 4, 5, 6, 6, 6, 6, 6, 6, 7, 5, 7, 7, 7, 7, 7, 7, 5, 6, 5, 6, 7, 5, 6, 7, 5, 6, 6, 5, 6, 6, 5, 7, 5, 7, 7, 6, 6, 7, 7, 7, 5, 5, 6, 6, 7, 6, 6, 7, 7, 6, 5, 6, 5, 5, 5, 7, 5, 6, 8, 7, 6, 6, 5, 5, 6, 6, 5, 5, 5, 6, 8, 6, 5, 5, 5, 5, 7, 6, 6, 6, 5, 5, 6, 5, 5, 8, 4, 6, 6, 6, 5, 5, 6, 5, 6, 6, 7, 5, 5, 5, 7, 4, 6, 5, 5, 5, 4, 6, 5, 7, 7, 7, 7, 6, 7, 6, 6, 5, 5, 4, 5, 7, 4, 5, 6, 5, 6, 6, 6, 5, 6, 6, 8, 6, 5, 6, 6, 7, 7, 7, 5, 5, 6, 5, 5, 5, 7, 4, 6, 7, 4, 6, 5, 5, 6, 5, 6, 5, 5, 5, 5, 7, 4, 6, 6, 5, 5, 6, 6, 5, 5, 6, 6, 5, 6, 7, 6, 5, 7, 7, 5, 5, 6, 8, 7, 5, 7, 5, 5, 5, 6, 6, 7, 6, 5, 6, 6, 5, 7, 6, 3, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 5, 6, 7, 7, 6, 6, 5, 6, 6, 6, 5, 6, 7, 7, 7, 7, 7, 5, 9, 6, 6, 5, 7, 8, 4, 6, 7, 8, 5, 6, 6, 6, 7, 6, 6, 7, 5, 7, 5, 5, 6, 6, 6, 8, 6, 5, 5, 7, 6, 6, 5, 6, 6, 6, 5, 6, 7, 6, 6, 5, 5, 5, 5, 5, 9, 6, 5, 6, 5, 6, 6, 9, 7, 7, 6, 4, 8, 6, 6, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 5, 5, 7, 6, 7, 5, 7, 5, 7, 7, 5, 5, 7, 5, 8, 7, 6, 6, 5, 6, 7, 8, 7, 6, 5, 5, 6, 3, 5, 7, 9, 6, 6, 8, 7, 6, 6, 6, 6, 7, 6, 7, 6, 7, 6, 7, 5, 7, 7, 6, 6, 6, 6, 6, 7, 6, 5, 6, 8, 4, 4, 8, 4, 5, 5, 5, 5, 5, 4, 5, 7, 6, 6, 7, 7, 6, 6, 6, 8, 5, 5, 7, 5, 5, 7, 5, 6, 5, 5, 5, 5, 5, 6, 7, 5, 6, 7, 7, 7, 7, 5, 5, 4, 5, 5, 6, 6, 5, 6, 5, 5, 7, 7, 6, 6, 7, 6, 6, 6, 5, 6, 6, 7, 7, 7, 7, 6, 7, 6, 5, 6, 5, 7, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 7, 6, 4, 5, 4, 6, 6, 5, 6, 6, 7, 7, 5, 6, 7, 6, 6, 6, 5, 7, 6, 6, 7, 6, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 6, 6, 6, 6, 4, 7, 4, 6, 6, 6, 6, 3, 6, 5, 5, 7, 5, 4, 5, 4, 5, 7, 5, 5, 5, 5, 6, 5, 6, 5, 4, 5, 5, 6, 5, 6, 4, 7, 5, 5, 5, 6, 5, 6, 7, 7, 6, 7, 5, 7, 5, 6, 7, 6, 5, 5, 6, 7, 6, 6, 6, 7, 5, 8, 8, 6, 7, 6, 6, 6, 7, 5, 8, 6, 7, 6, 7, 6, 6, 5, 5, 5, 7, 8, 7, 7, 4, 7, 6, 6, 5, 4, 8, 5, 5, 5, 5, 6, 6, 7, 5, 5, 6, 7, 7, 5, 7, 6, 6, 5, 5, 5, 6, 8, 8, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 4, 6, 4, 4, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 5, 6, 5, 6, 6, 5, 6, 5, 6, 5, 7, 6, 5, 5, 5, 6, 5, 6, 7, 5, 5, 8, 6, 5, 6, 7, 6, 7, 6, 6, 7, 7, 6, 7, 6, 7, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 8, 5, 8, 8, 6, 7, 6, 5, 7, 6, 7, 5, 6, 3, 6, 7, 7, 6, 6, 5, 6, 5, 7, 5, 6, 7, 7, 7, 5, 4, 7, 6, 7, 5, 7, 5, 6, 7, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 8, 7, 5, 6, 7, 5, 5, 5, 6, 6, 7, 5, 6, 6, 6, 7, 5, 8, 7, 6, 7, 7, 7, 6, 6, 6, 6, 4, 4, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 7, 8, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 7, 6, 6, 6, 5, 5, 6, 7, 8, 6, 6, 8, 5, 5, 6, 6, 5, 6, 6, 8, 8, 7, 7, 8, 4, 7, 7, 6, 5, 5, 5, 6, 6, 8, 7, 6, 7, 7, 4, 5, 7, 6, 5, 6, 5, 6, 7, 6, 6, 7, 7, 6, 6, 7, 6, 7, 7, 6, 6, 6, 5, 7, 6, 7, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 6, 7, 6, 8, 8, 5, 4, 8, 6, 7, 6, 6, 6, 8, 6, 6, 5, 6, 3, 5, 7, 4, 6, 5, 4, 6, 6, 6, 5, 7, 5, 4, 5, 7, 6, 5, 5, 5, 7, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 7, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 8, 5, 6, 7, 5, 5, 7, 6, 5, 6, 4, 6, 5, 6, 6, 6, 6, 6, 6, 4, 3, 6, 6, 6, 6, 5, 6, 5, 5, 8, 8, 7, 5, 7, 6, 6, 7, 5, 5, 7, 8, 7, 6, 6, 6, 5, 5, 6, 7, 6, 7, 6, 6, 6, 6, 5, 6, 5, 5, 6, 6, 5, 6, 6, 6, 6, 5, 7, 7, 6, 6, 6, 5, 6, 6, 6, 6, 4, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 4, 4, 6, 5, 7, 6, 5, 6, 5, 5, 6, 5, 5, 6, 6, 5, 4, 6, 6, 4, 5, 4, 5, 6, 7, 5, 6, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 7, 5, 9, 6, 7, 5, 7, 6, 6, 7, 7, 5, 6, 6, 6, 6, 8, 7, 5, 6, 6, 7, 6, 6, 5, 6, 6, 5, 6, 8, 7, 6, 6, 5, 6, 5, 5, 5, 6, 7, 7, 7, 7, 6, 7, 5, 4, 7, 6, 4, 6, 5, 5, 5, 6, 5, 5, 6, 6, 7, 6, 4, 8, 5, 6, 7, 6, 6, 7, 5, 5, 6, 5, 7, 6, 6, 5, 5, 6, 7, 7, 7, 7, 5, 7, 3, 6, 4, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 4, 5, 5, 6, 6, 5, 4, 5, 5, 5, 6, 6, 5, 8, 6, 6, 4, 6, 7, 7, 6, 8, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 4, 6, 6, 6, 6, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 6, 6, 5, 5, 5, 5, 6, 6, 7, 6, 5, 5, 5, 5, 5, 7, 6, 6, 6, 6, 6, 6, 5, 6, 8, 8, 5, 4, 6, 6, 7, 6, 7, 7, 5, 7, 5, 5, 6, 5, 5, 6, 5, 8, 6, 6, 6, 5, 6, 6, 6, 5, 5, 6, 5, 6, 6, 5, 6, 6, 7, 6, 7, 4, 6, 6, 6, 5, 7, 6, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7, 6, 5, 6, 7, 6, 6, 5, 7, 6, 6, 6, 5, 5, 5, 5, 6, 7, 6, 7, 5, 7, 6, 4, 5, 5, 6, 6, 6, 7, 5, 6, 6, 6, 6, 7, 7, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 7, 7, 5, 5, 6, 6, 6, 6, 7, 5, 6, 6, 6, 7, 5, 5, 5, 4, 6, 6, 5, 6, 5, 6, 3, 6, 5, 6, 5, 6, 7, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 7, 5, 5, 4, 7, 6, 5, 5, 5, 6, 6, 5, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 6, 7, 5, 5, 5, 6, 5, 6, 6, 6, 8, 8, 8, 8, 8, 6, 6, 5, 6, 7, 4, 8, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 5, 7, 6, 5, 5, 6, 5, 6, 7, 5, 7, 6, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 5, 5, 7, 3, 5, 5, 5, 5, 6, 5, 7, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 6, 7, 6, 6, 5, 5, 6, 5, 5, 6, 6, 4, 5, 5, 6, 5, 6, 6, 5, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 6, 5, 4, 5, 6, 4, 5, 7, 5, 5, 7, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 5, 7, 6, 6, 6, 5, 5, 6, 6, 5, 6, 6, 4, 5, 4, 6, 6, 4, 6, 7, 6, 6, 5, 5, 5, 7, 7, 7, 7, 7, 5, 5, 7, 7, 5, 7, 5, 6, 6, 6, 5, 5, 6, 7, 5, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 5, 6, 5, 6, 5, 5, 5, 5, 6, 7, 5, 6, 7, 6, 6, 6, 5, 6, 5, 6, 6, 7, 6, 6, 7, 6, 7, 4, 5, 5, 7, 6, 7, 6, 6, 5, 5, 6, 5, 4, 6, 6, 5, 5, 5, 5, 5, 7, 4, 6, 6, 5, 6, 7, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 6, 5, 5, 6, 6, 6, 7, 6, 6, 5, 7, 4, 6, 6, 6, 5, 6, 6, 5, 5, 5, 5, 5, 5, 5, 7, 7, 6, 6, 7, 7, 6, 7, 6, 8, 7, 7, 5, 5, 5, 6, 7, 5, 5, 5, 6, 5, 7, 5, 7, 6, 6, 7, 5, 4, 7, 6, 5, 6, 6, 5, 6, 5, 6, 5, 5, 6, 5, 6, 8, 5, 5, 5, 4, 5, 6, 6, 5, 8, 5, 6, 6, 4, 6, 6, 5, 5, 6, 6, 7, 6, 7, 6, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 7, 5, 4, 3, 6, 6, 6, 6, 5, 4, 4, 6, 8, 6, 8, 5, 4, 4, 4, 8, 8, 6, 7, 6, 5, 5, 5, 6, 6, 6, 4, 4, 6, 6, 5, 5, 6, 6, 5, 4, 6, 6, 4, 4, 4, 5, 6, 5, 5, 5, 7, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 5, 5, 6, 6, 4, 5, 6, 5, 6, 5, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 7, 6, 5, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 5, 5, 6, 6, 5, 5, 7, 6, 6, 7, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 4, 4, 5, 5, 5, 5, 6, 5, 5, 4, 4, 6, 6, 6, 7, 6, 5, 6, 6, 6, 5, 7, 7, 6, 6, 7, 5, 5, 7, 8, 5, 5, 8, 7, 6, 6, 5, 6, 4, 4, 5, 7, 6, 6, 6, 6, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 5, 5, 6, 5, 7, 7, 7, 5, 7, 7, 5, 6, 5, 6, 5, 6, 5, 7, 5, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 7, 6, 5, 7, 7, 7, 7, 7, 7, 6, 7, 4, 6, 7, 5, 5, 7, 5, 5, 6, 5, 6, 7, 5, 6, 7, 7, 6, 6, 6, 6, 6, 5, 5, 7, 5, 5, 7, 7, 7, 7, 6, 5, 5, 7, 7, 5, 5, 7, 7, 6, 5, 6, 7, 5, 5, 5, 6, 5, 5, 6, 6, 6, 5, 5, 5, 6, 7, 7, 5, 6, 6, 5, 5, 7, 5, 5, 5, 4, 7, 7, 6, 6, 6, 6, 8, 7, 5, 7, 7, 6, 5, 7, 7, 7, 6, 7, 7, 6, 6, 5, 6, 6, 6, 6, 5, 6, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 5, 5, 5, 6, 6, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 5, 6, 6, 6, 7, 5, 7, 6, 6, 5, 6, 6, 6, 7, 5, 5, 5, 7, 6, 6, 6, 7, 5, 7, 6, 5, 6, 6, 6, 7, 6, 6, 8, 6, 8, 6, 6, 8, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 5, 7, 6, 7, 7, 8, 8, 8, 6, 7, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 7, 5, 8, 7, 5, 7, 7, 5, 5, 6, 8, 8, 6, 5, 5, 6, 7, 7, 5, 6, 7, 7, 5, 5, 7, 4, 6, 5, 5, 5, 6, 6, 6, 6, 7, 7, 5, 5, 5, 6, 7, 6, 6, 6, 6, 7, 7, 6, 6, 6, 6, 5, 7, 7, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 8, 7, 6, 6, 6, 6, 6, 6, 6, 7, 7, 5, 6, 7, 6, 7, 8, 7, 6, 5, 5, 6, 6, 5, 7, 5, 7, 7, 6, 5, 5, 4, 6, 8, 6, 5, 7, 7, 5, 5, 5, 5, 5, 6, 7, 5, 6, 7, 5, 5, 6, 6, 6, 5, 5, 7, 5, 6, 6, 6, 7, 6, 5, 4, 6, 8, 6, 6, 5, 8, 7, 7, 6, 8, 8, 6, 6, 5, 4, 5, 5, 8, 8, 6, 5, 5, 8, 6, 8, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 6, 6, 5, 7, 7, 6, 5, 7, 5, 8, 6, 6, 5, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 6, 6, 6, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 6, 8, 6, 7, 7, 7, 7, 7, 7, 6, 6, 6, 7, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 4, 5, 6, 6, 7, 6, 5, 6, 8, 8, 6, 5, 6, 6, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 5, 4, 5, 7, 5, 6, 6, 5, 5, 5, 6, 5, 5, 8, 5, 5, 6, 5, 4, 6, 8, 8, 7, 6, 5, 5, 7, 5, 5, 5, 5, 6, 5, 6, 7, 6, 6, 7, 3, 6, 7, 6, 6, 6, 7, 6, 6, 7, 5, 7, 7, 7, 6, 6, 7, 5, 6, 6, 6, 5, 4, 6, 7, 5, 6, 6, 6, 7, 7, 7, 5, 6, 5, 6, 5, 6, 5, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 5, 7, 7, 6, 6, 5, 7, 7, 6, 6, 6, 7, 6, 6, 6, 6, 8, 8, 8, 6, 6, 5, 6, 4, 6, 6, 5, 6, 7, 6, 4, 7, 8, 5, 7, 6, 6, 5, 5, 6, 7, 6, 7, 7, 7, 6, 7, 7, 5, 7, 7, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 4, 7, 5, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 6, 7, 5, 7, 6, 7, 6, 7, 7, 5, 6, 6, 7, 7, 6, 6, 8, 8, 5, 6, 6, 6, 6, 6, 6, 5, 7, 8, 6, 3, 6, 6, 6, 5, 5, 7, 7, 7, 5, 4, 8, 7, 5, 6, 5, 6, 7, 6, 6, 7, 7, 7, 6, 5, 5, 8, 5, 7, 6, 5, 5, 5, 6, 7, 5, 8, 6, 7, 7, 7, 7, 3, 6, 7, 7, 7, 7, 7, 6, 7, 6, 6, 7, 5, 5, 6, 7, 6, 6, 7, 5, 7, 5, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 7, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 5, 6, 6, 6, 8, 5, 7, 7, 7, 6, 6, 6, 8, 5, 6, 7, 6, 8, 6, 6, 5, 5, 6, 6, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 3, 7, 6, 6, 6, 7, 7, 6, 4, 6, 7, 5, 8, 8, 5, 6, 6, 6, 6, 6, 5, 6, 6, 5, 7, 6, 6, 6, 5, 5, 5, 5, 5, 7, 6, 5, 8, 6, 6, 7, 8, 7, 7, 5, 6, 5, 6, 5, 7, 7, 6, 6, 8, 6, 7, 5, 6, 6, 5, 8, 6, 8, 6, 6, 8, 6, 6, 8, 7, 6, 7, 8, 5, 8, 7, 8, 7, 6, 6, 6, 8, 7, 6, 7, 7, 6, 7, 7, 6, 6, 7, 7, 6, 5, 7, 7, 7, 6, 7, 5, 6, 6, 7, 6, 6, 6, 7, 7, 7, 5, 7, 5, 7, 5, 5, 6, 6, 6, 6, 4, 7, 5, 5, 6, 6, 5, 5, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 4, 6, 5, 6, 5, 6, 6, 6, 6, 7, 6, 6, 4, 6, 6, 6, 7, 5, 7, 4, 7, 5, 7, 6, 6, 7, 7, 7, 6, 6, 6, 7, 5, 7, 7, 7, 7, 7, 6, 7, 6, 6, 7, 6, 7, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 5, 7, 6, 7, 7, 6, 6, 7, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 7, 7, 7, 6, 6, 6, 6, 6, 7, 6, 7, 7, 5, 6, 4, 6, 6, 6, 6, 7, 7, 8, 7, 8, 8, 6, 4, 6, 8, 8, 7, 8, 5, 7, 6, 7, 8, 7, 5, 6, 7, 6, 5, 7, 6, 8, 7, 6, 7, 6, 5, 5, 6, 8, 7, 6, 7, 7, 5, 6, 7, 6, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 4, 6, 5, 6, 5, 5, 7, 5, 5, 7, 6, 6, 7, 7, 7, 5, 6, 6, 5, 6, 5, 6, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 5, 6, 5, 6, 7, 5, 5, 5, 8, 6, 5, 5, 5, 6, 6, 7, 5, 5, 8, 5, 5, 5, 6, 5, 4, 6, 6, 5, 5, 6, 5, 6, 7, 7, 5, 6, 6, 5, 6, 7, 5, 5, 5, 6, 5, 5, 6, 6, 5, 6, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 5, 6, 6, 3, 5, 5, 5, 5, 7, 5, 6, 6, 6, 5, 6, 6, 5, 7, 6, 6, 5, 6, 7, 7, 5, 5, 6, 5, 5, 6, 6, 5, 5, 6, 6, 6, 7, 6, 5, 6, 5, 6, 5, 6, 7, 6, 7, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 6, 4, 5, 5, 7, 5, 5, 5, 4, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 6, 6, 6, 7, 5, 5, 4, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 7, 6, 7, 7, 6, 5, 7, 6, 6, 5, 7, 5, 5, 5, 6, 5, 5, 5, 6, 6, 8, 4, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 6, 6, 7, 5, 5, 5, 5, 6, 7, 5, 6, 5, 5, 6, 6, 6, 5, 7, 7, 5, 4, 6, 4, 6, 6, 7, 6, 6, 4, 6, 7, 7, 6, 7, 6, 5, 7, 7, 6, 7, 6, 6, 6, 6, 6, 6, 5, 7, 7, 7, 5, 7, 7, 6, 6, 6, 5, 6, 6, 7, 6, 6, 5, 6, 6, 6, 7, 6, 6, 6, 5, 5, 6, 6, 5, 4, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 5, 6, 5, 6, 5, 5, 5, 4, 5, 5, 7, 7, 7, 7, 7, 6, 6, 6, 7, 6, 5, 7, 7, 6, 5, 6, 6, 6, 5, 5, 6, 5, 5, 8, 6, 5, 6, 6, 5, 6, 7, 5, 4, 6, 5, 6, 6, 6, 6, 6, 6, 5, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 5, 7, 7, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 8, 7, 5, 6, 6, 6, 7, 5, 5, 5, 5, 7, 6, 5, 5, 6, 6, 5, 6, 5, 6, 7, 6, 6, 6, 6, 6, 6, 7, 7, 6, 7, 5, 6, 6, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 8, 6, 7, 7, 5, 6, 5, 6, 7, 6, 6, 7, 5, 6, 6, 6, 7, 7, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 8, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 6, 7, 6, 6, 6, 6, 4, 4, 5, 5, 5, 4, 6, 5, 6, 6, 4, 4, 7, 5, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 7, 6, 6, 7, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 4, 5, 5, 5, 5, 6, 6, 6, 7, 6, 6, 6, 6, 7, 7, 6, 5, 6, 5, 6, 6, 6, 6, 7, 5, 4, 6, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 7, 6, 6, 6, 5, 6, 6, 7, 7, 5, 7, 7, 7, 5, 6, 7, 6, 6, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 7, 6, 5, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 5, 6, 5, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 5, 7, 6, 5, 7, 5, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 6, 6, 5, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 6, 6, 5, 5, 5, 7, 5, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 7, 5, 5, 6, 5, 4, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 5, 5, 6, 6, 7, 6, 6, 7, 7, 7, 5, 5, 5, 6, 6, 6, 7, 7, 6, 7, 7, 5, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 5, 6, 7, 4, 6, 5, 5, 5, 5, 7, 5, 7, 7, 5, 6, 7, 7, 6, 6, 5, 6, 6, 6, 7, 7, 7, 6, 6, 6, 6, 5, 6, 5, 6, 6, 6, 7, 6, 6, 7, 7, 7, 5, 5, 5, 7, 5, 7, 7, 7, 7, 7, 6, 6, 6, 5, 6, 7, 7, 6, 5, 7, 7, 5, 6, 5, 5, 7, 7, 6, 6, 7, 6, 5, 4, 6, 6, 6, 6, 5, 4, 6, 6, 6, 6, 7, 5, 6, 7, 7, 6, 7, 6, 5, 5, 6, 6, 7, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 6, 6, 5, 5, 3, 6, 6, 5, 6, 5, 6, 7, 6, 6, 6, 7, 7, 6, 6, 6, 6, 7, 7, 6, 8, 8, 7, 6, 6, 6, 6, 5, 7, 4, 6, 6, 6, 6, 4, 5, 5, 6, 6, 5, 7, 8, 8, 5, 6, 6, 6, 6, 6, 5, 7, 7, 6, 5, 6, 7, 7, 8, 7, 4, 6, 6, 6, 5, 6, 5, 6, 7, 5, 6, 7, 6, 6, 6, 6, 5, 6, 6, 7, 5, 6, 6, 6, 5, 7, 6, 6, 5, 6, 7, 6, 5, 6, 6, 4, 7, 6, 6, 5, 6, 5, 6, 7, 6, 5, 6, 5, 5, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 5, 6, 6, 6, 6, 6, 7, 6, 5, 6, 6, 6, 7, 5, 4, 6, 6, 6, 5, 6, 5, 6, 7, 7, 5, 6, 6, 6, 5, 6, 5, 6, 7, 6, 5, 5, 5, 6, 5, 5, 5, 7, 7, 5, 5, 5, 5, 5, 5, 5, 7, 5, 4, 6, 6, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 6, 7, 4, 5, 5, 4, 6, 5, 5, 4, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 7, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 4, 5, 5, 5, 6, 5, 4, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 4, 6, 5, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 6, 6, 6, 4, 5, 5, 5, 5, 5, 5, 5, 6, 5, 4, 6, 5, 5, 5, 5, 4, 6, 5, 4, 6, 6, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 7, 4, 7, 5, 5, 5, 6, 7, 7, 5, 5, 7, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 6, 4, 6, 6, 5, 6, 5, 7, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 7, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 7, 5, 4, 5, 5, 5, 7, 4, 8, 6, 6, 6, 6, 5, 5, 5, 6, 6, 6, 8, 7, 6, 7, 5, 7, 5, 5, 6, 6, 7, 5, 7, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 5, 5, 6, 5, 6, 7, 6, 7, 5, 5, 6, 6, 6, 7, 5, 6, 5, 6, 6, 6, 5, 7, 7, 6, 5, 6, 7, 6, 6, 6, 6, 6, 5, 7, 6, 6, 6, 6, 6, 5, 5, 6, 6, 5, 7, 7, 6, 5, 6, 5, 5, 7, 6, 7, 5, 5, 7, 5, 6, 6, 5, 6, 7, 6, 7, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 8, 6, 5, 5, 5, 7, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 7, 6, 4, 6, 5, 5, 7, 5, 5, 6, 5, 6, 5, 7, 7, 5, 7, 5, 7, 6, 6, 5, 6, 7, 5, 6, 5, 6, 5, 6, 6, 6, 5, 8, 6, 7, 7, 7, 6, 5, 5, 6, 6, 6, 6, 6, 7, 5, 8, 5, 5, 7, 3, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 6, 5, 6, 5, 5, 6, 5, 6, 5, 8, 5, 5, 6, 5, 5, 6, 7, 6, 6, 7, 7, 6, 6, 8, 6, 5, 8, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 7, 5, 6, 6, 7, 7, 5, 6, 3, 6, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 5, 6, 6, 6, 5, 6, 7, 5, 5, 6, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 5, 6, 6, 5, 5, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 4, 6, 6, 4, 5, 5, 6, 5, 5, 5, 7, 7, 6, 7, 5, 8, 7, 5, 6, 5, 5, 5, 5, 6, 6, 6, 6, 4, 6, 5, 6, 6, 6, 7, 6, 6, 6, 5, 5, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 4, 5, 5, 5, 5, 7, 6, 5, 5, 5, 5, 5, 7, 5, 4, 7, 6, 5, 5, 5, 6, 5, 5, 5, 7, 6, 4, 6, 5, 6, 6, 5, 5, 6, 6, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6, 4, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 6, 6, 5, 6, 6, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 5, 6, 6, 5, 5, 6, 5, 6, 5, 5, 6, 6, 5, 6, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 5, 5, 7, 6, 6, 5, 5, 7, 6, 6, 7, 7, 7, 5, 6, 5, 6, 5, 4, 6, 5, 6, 6, 5, 5, 5, 7, 5, 5, 5, 5, 7, 5, 8, 6, 4, 6, 3, 4, 5, 5, 7, 7, 7, 5, 7, 5, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 6, 7, 6, 7, 7, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 6, 6, 5, 4, 7, 7, 7, 4, 6, 6, 5, 5, 6, 6, 5, 6, 5, 6, 7, 6, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 3, 5, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 7, 6, 4, 5, 7, 5, 5, 6, 5, 5, 6, 6, 4, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 5, 6, 6, 7, 5, 6, 5, 5, 6, 6, 6, 7, 5, 6, 5, 6, 6, 7, 5, 7, 5, 5, 5, 7, 5, 6, 5, 6, 6, 5, 6, 7, 5, 5, 6, 5, 5, 6, 5, 5, 6, 7, 7, 6, 6, 7, 7, 7, 7, 5, 7, 7, 7, 7, 5, 7, 6, 5, 6, 6, 6, 7, 6, 6, 5, 6, 6, 5, 6, 7, 6, 6, 5, 6, 7, 7, 7, 5, 6, 6, 7, 7, 5, 7, 6, 5, 6, 6, 7, 6, 6, 6, 5, 6, 6, 5, 5, 5, 7, 6, 6, 7, 5, 7, 7, 6, 8, 6, 6, 6, 6, 7, 7, 7, 5, 7, 5, 6, 6, 5, 7, 6, 5, 5, 7, 6, 7, 6, 6, 6, 5, 7, 6, 7, 7, 8, 6, 6, 7, 6, 5, 6, 5, 7, 5, 6, 6, 6, 6, 6, 5, 6, 7, 5, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 5, 8, 6, 6, 6, 4, 7, 6, 6, 5, 6, 6, 5, 7, 7, 7, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 6, 6, 7, 6, 6, 7, 6, 5, 6, 6, 5, 7, 7, 6, 5, 7, 6, 7, 5, 5, 5, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 4, 7, 5, 6, 6, 5, 6, 5, 5, 6, 5, 6, 5, 4, 6, 5, 7, 5, 6, 6, 6, 6, 6, 6, 6, 7, 8, 5, 7, 7, 7, 5, 7, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 7, 5, 6, 5, 5, 4, 6, 4, 6, 6, 4, 4, 5, 5, 6, 5, 6, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 5, 4, 5, 4, 6, 6, 6, 6, 6, 8, 6, 6, 5, 5, 6, 6, 4, 6, 6, 7, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 6, 6, 4, 6, 5, 5, 6, 6, 3, 6, 6, 6, 5, 5, 5, 5, 4, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 6, 5, 7, 6, 6, 6, 6, 5, 6, 6, 5, 6, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 6, 4, 6, 5, 5, 6, 6, 4, 5, 6, 5, 5, 3, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 7, 6, 5, 5, 6, 8, 6, 7, 6, 6, 7, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 5, 5, 5, 6, 4, 6, 6, 6, 5, 5, 5, 5, 6, 6, 7, 6, 6, 5, 5, 5, 6, 7, 6, 5, 5, 6, 6, 5, 5, 5, 8, 7, 7, 7, 5, 6, 6, 6, 5, 5, 7, 6, 4, 6, 6, 5, 5, 7, 4, 7, 3, 5, 5, 6, 5, 5, 7, 5, 7, 3, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 6, 6, 5, 5, 5, 7, 6, 5, 6, 6, 6, 5, 5, 5, 6, 6, 3, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 6, 5, 7, 6, 6, 6, 5, 5, 6, 7, 6, 6, 7, 6, 5, 5, 5, 8, 5, 5, 6, 5, 6, 7, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 7, 6, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 5, 6], \"xaxis\": \"x\", \"y\": [8.8, 9.5, 10.1, 9.9, 9.9, 10.1, 9.6, 8.8, 9.5, 11.0, 12.0, 9.7, 10.8, 12.4, 9.7, 11.4, 9.6, 12.8, 11.3, 9.5, 12.8, 11.0, 10.5, 9.3, 10.0, 10.4, 10.0, 10.5, 11.6, 12.3, 10.0, 10.2, 10.8, 9.0, 10.2, 12.8, 10.0, 11.2, 8.6, 8.6, 9.4, 9.4, 9.8, 9.5, 9.5, 10.0, 9.8, 9.8, 9.8, 9.8, 11.7, 11.0, 10.9, 10.9, 9.1, 11.0, 9.6, 8.9, 10.2, 9.9, 8.6, 8.9, 10.5, 10.2, 10.3, 9.1, 12.6, 9.8, 10.7, 9.5, 9.0, 9.5, 10.0, 9.1, 10.7, 9.5, 12.7, 12.0, 9.3, 9.0, 10.6, 9.2, 10.0, 9.5, 8.7, 8.7, 8.7, 9.7, 8.7, 8.7, 8.7, 9.0, 12.6, 12.6, 11.5, 9.2, 8.8, 11.4, 10.1, 8.8, 9.1, 9.4, 9.4, 9.0, 9.1, 9.2, 9.4, 9.1, 9.1, 10.3, 8.8, 8.9, 9.2, 9.1, 9.1, 9.7, 11.3, 11.8, 9.2, 9.2, 10.2, 8.8, 9.7, 9.1, 9.8, 11.0, 10.5, 9.7, 10.9, 10.9, 10.6, 9.7, 9.0, 9.2, 8.9, 9.6, 10.7, 8.7, 10.8, 11.8, 10.2, 8.7, 10.8, 9.7, 11.2, 10.9, 10.1, 9.0, 12.0, 9.4, 11.5, 9.9, 9.4, 10.4, 9.7, 8.9, 8.9, 12.4, 12.1, 12.1, 12.4, 9.1, 10.6, 8.9, 9.5, 9.8, 9.6, 12.6, 9.3, 10.0, 12.7, 11.0, 11.4, 11.5, 10.2, 11.4, 12.6, 9.4, 8.7, 9.2, 9.3, 9.2, 8.7, 9.6, 9.3, 9.3, 9.9, 11.0, 12.7, 8.9, 8.9, 8.7, 11.4, 9.6, 9.1, 9.1, 9.1, 8.9, 8.8, 8.9, 9.3, 8.8, 9.6, 12.0, 10.2, 8.8, 9.2, 9.9, 10.2, 9.5, 10.5, 11.2, 9.2, 9.7, 11.1, 9.4, 11.0, 9.4, 9.4, 11.0, 11.0, 9.1, 11.1, 9.1, 10.4, 8.7, 9.7, 9.1, 9.7, 8.7, 8.9, 9.6, 9.5, 9.0, 9.0, 9.0, 9.0, 9.6, 11.1, 9.6, 8.7, 10.4, 11.4, 9.7, 8.7, 11.3, 12.6, 10.9, 10.9, 10.0, 10.0, 9.8, 8.7, 11.7, 9.3, 9.6, 11.0, 11.0, 11.8, 11.4, 10.2, 8.9, 10.2, 9.6, 10.6, 8.9, 9.2, 9.7, 9.7, 9.7, 9.2, 9.7, 9.3, 9.0, 9.5, 9.8, 9.8, 10.6, 10.6, 12.4, 12.6, 12.3, 10.5, 9.3, 8.8, 8.8, 9.7, 9.0, 9.0, 9.0, 9.0, 10.5, 9.1, 9.8, 8.5, 9.4, 9.4, 11.2, 10.0, 10.3, 10.8, 10.5, 10.8, 11.1, 9.9, 9.9, 9.9, 9.9, 10.4, 10.4, 11.5, 12.5, 10.0, 10.0, 10.0, 9.1, 10.6, 10.5, 11.5, 10.1, 10.3, 10.5, 10.6, 10.4, 11.4, 10.5, 10.0, 10.0, 9.6, 10.4, 12.5, 10.6, 11.8, 9.8, 10.8, 11.8, 11.2, 9.3, 10.4, 10.2, 9.0, 10.0, 9.1, 10.0, 10.0, 9.6, 11.2, 8.8, 10.0, 10.0, 11.4, 11.9, 9.6, 11.9, 9.6, 9.0, 9.0, 9.5, 10.4, 10.6, 10.2, 8.9, 9.7, 9.0, 11.4, 12.3, 10.8, 9.4, 10.6, 11.6, 9.4, 10.6, 10.0, 9.2, 12.5, 12.5, 10.4, 10.0, 10.0, 10.4, 10.0, 9.0, 9.2, 9.2, 11.3, 12.5, 10.8, 10.1, 9.7, 9.3, 9.3, 10.6, 10.2, 12.2, 8.8, 10.0, 11.4, 11.4, 9.4, 11.7, 11.4, 8.8, 9.2, 8.7, 12.6, 10.0, 12.8, 9.4, 10.3, 11.4, 9.0, 9.6, 10.5, 10.5, 9.0, 9.6, 9.8, 9.0, 9.8, 10.5, 12.7, 10.4, 10.4, 10.4, 10.5, 10.4, 10.4, 9.4, 9.1, 9.3, 9.4, 9.8, 9.9, 9.2, 12.1, 12.2, 9.8, 12.4, 9.9, 9.2, 11.6, 10.4, 12.9, 9.3, 11.0, 11.5, 12.4, 9.8, 9.8, 10.5, 9.1, 10.1, 10.6, 10.5, 10.5, 9.8, 12.9, 9.5, 9.8, 8.5, 9.5, 9.3, 9.5, 9.4, 8.7, 8.9, 9.4, 9.4, 8.7, 9.6, 9.3, 10.0, 12.5, 9.6, 9.4, 9.5, 12.4, 10.5, 9.2, 10.4, 9.2, 10.6, 9.5, 9.2, 9.6, 9.7, 9.7, 10.7, 10.5, 8.9, 12.1, 12.7, 9.9, 11.4, 10.7, 12.5, 8.6, 12.5, 10.0, 8.6, 9.5, 9.6, 9.9, 9.9, 8.9, 8.9, 8.8, 10.0, 12.0, 10.0, 10.0, 12.1, 11.0, 11.2, 10.3, 10.4, 9.1, 10.4, 10.8, 11.7, 9.8, 9.8, 11.4, 11.2, 11.4, 9.2, 12.5, 12.6, 12.2, 11.2, 9.7, 9.3, 9.0, 9.0, 9.0, 9.1, 9.1, 9.0, 10.4, 9.5, 11.4, 8.7, 9.9, 9.9, 9.0, 10.0, 9.7, 11.8, 10.2, 8.7, 9.6, 11.3, 12.1, 9.6, 12.1, 11.3, 9.4, 10.4, 9.5, 12.3, 9.9, 10.1, 9.2, 10.4, 9.1, 10.0, 11.5, 9.8, 9.8, 9.4, 8.7, 11.6, 8.8, 12.7, 11.7, 10.2, 10.2, 12.7, 11.6, 12.3, 8.7, 9.4, 10.1, 9.7, 10.1, 9.7, 8.9, 10.8, 10.8, 9.5, 9.1, 10.9, 9.4, 10.8, 10.8, 10.5, 9.4, 10.8, 10.5, 11.5, 9.4, 10.8, 10.8, 10.8, 9.8, 9.8, 9.6, 9.6, 9.5, 10.7, 12.4, 11.1, 8.8, 8.7, 8.7, 8.8, 11.7, 10.9, 10.8, 9.6, 9.0, 9.0, 10.4, 11.4, 9.3, 11.0, 9.1, 9.4, 9.4, 10.5, 8.8, 8.8, 10.7, 9.5, 10.9, 10.8, 10.8, 9.2, 10.3, 10.3, 11.0, 9.0, 10.4, 9.5, 9.5, 9.0, 9.5, 9.0, 10.0, 9.1, 9.1, 9.1, 9.1, 9.5, 11.4, 12.2, 11.3, 10.2, 11.3, 10.0, 9.4, 12.2, 9.2, 9.4, 9.6, 9.5, 12.5, 9.6, 10.0, 9.3, 9.3, 11.6, 12.5, 10.6, 9.4, 9.1, 9.0, 11.8, 11.8, 11.8, 10.0, 9.7, 9.5, 9.4, 11.2, 9.0, 10.7, 9.0, 9.1, 10.8, 10.1, 9.9, 9.8, 9.8, 9.5, 9.5, 11.1, 9.5, 9.5, 9.4, 9.7, 13.9, 10.1, 10.5, 12.6, 10.9, 10.0, 11.2, 10.0, 9.2, 9.5, 12.3, 12.3, 10.0, 10.8, 10.5, 9.2, 9.1, 10.5, 10.2, 8.9, 10.4, 11.7, 12.4, 10.9, 10.2, 11.7, 9.4, 10.5, 9.4, 10.4, 9.5, 11.1, 9.1, 9.2, 9.6, 9.1, 9.2, 10.8, 9.6, 12.6, 11.0, 10.2, 9.4, 10.0, 12.2, 10.5, 11.5, 9.8, 11.4, 11.5, 10.2, 9.4, 10.5, 9.1, 12.2, 9.5, 9.3, 9.8, 9.8, 9.8, 9.8, 8.7, 10.2, 9.5, 11.0, 9.2, 10.9, 9.3, 9.3, 9.8, 9.3, 9.3, 9.4, 10.4, 12.1, 11.0, 9.0, 9.5, 8.8, 11.2, 9.3, 9.5, 8.8, 9.0, 9.3, 9.2, 9.2, 10.0, 9.3, 9.2, 10.9, 10.0, 10.9, 9.3, 9.0, 9.2, 9.6, 9.4, 11.1, 8.9, 9.3, 9.3, 9.8, 9.8, 8.9, 9.6, 9.6, 9.0, 9.5, 9.3, 9.2, 9.1, 9.5, 10.5, 9.0, 11.7, 9.1, 9.0, 9.1, 12.4, 9.2, 9.4, 9.6, 11.7, 9.8, 10.2, 12.5, 10.9, 11.0, 10.5, 11.5, 12.8, 12.2, 10.5, 12.8, 11.9, 11.9, 11.9, 12.0, 12.0, 8.8, 8.8, 10.8, 11.0, 11.0, 9.3, 10.8, 8.8, 11.5, 10.8, 9.4, 9.5, 8.6, 9.5, 10.3, 9.4, 9.4, 10.0, 9.4, 10.4, 9.1, 9.9, 12.1, 9.9, 12.5, 9.5, 8.5, 9.0, 10.1, 9.4, 8.6, 10.7, 9.6, 10.1, 10.0, 12.7, 10.2, 8.9, 11.9, 10.0, 9.9, 11.5, 11.5, 9.8, 12.2, 11.4, 11.0, 11.4, 11.0, 9.9, 11.0, 9.4, 12.2, 11.0, 10.3, 10.5, 10.5, 10.9, 10.5, 11.0, 9.7, 8.9, 9.6, 8.8, 11.1, 10.3, 12.2, 9.8, 8.8, 9.9, 9.9, 9.9, 9.2, 9.5, 9.2, 10.3, 11.0, 11.9, 10.2, 9.4, 8.9, 8.9, 10.0, 10.7, 9.8, 9.3, 9.5, 10.0, 9.0, 11.9, 8.9, 10.0, 9.6, 8.9, 8.9, 11.4, 9.0, 10.0, 9.6, 9.7, 9.5, 10.0, 12.2, 8.7, 10.2, 9.6, 10.0, 9.5, 11.5, 9.5, 9.8, 10.1, 10.0, 9.8, 9.5, 9.5, 10.2, 10.2, 9.0, 9.0, 12.3, 9.0, 11.6, 9.5, 11.5, 9.6, 9.0, 12.0, 11.4, 12.3, 12.6, 9.0, 12.0, 11.7, 9.2, 10.3, 8.6, 10.7, 9.8, 9.8, 10.7, 12.5, 11.9, 10.8, 10.5, 10.3, 10.3, 10.8, 12.0, 10.2, 10.2, 9.9, 10.1, 9.5, 10.5, 10.4, 9.5, 9.2, 10.1, 9.8, 9.4, 9.4, 10.4, 11.3, 10.8, 11.3, 9.3, 10.3, 10.5, 10.3, 11.2, 10.3, 9.5, 8.9, 10.2, 9.2, 10.3, 10.5, 9.5, 11.4, 11.4, 11.1, 10.5, 12.0, 9.7, 10.2, 9.5, 10.4, 9.3, 10.5, 10.0, 10.2, 10.2, 9.1, 10.2, 10.7, 9.7, 9.3, 11.0, 10.8, 10.7, 10.7, 8.8, 10.9, 10.5, 10.0, 10.4, 9.2, 12.6, 9.0, 9.2, 11.3, 10.3, 10.4, 10.0, 10.7, 9.0, 10.7, 8.7, 11.6, 9.4, 9.5, 9.5, 10.9, 9.7, 9.1, 11.1, 12.6, 11.0, 11.3, 9.7, 10.9, 10.9, 9.3, 12.7, 10.1, 10.0, 9.8, 10.1, 9.0, 9.4, 9.4, 9.2, 10.1, 8.6, 11.2, 11.2, 9.2, 10.6, 9.3, 8.9, 10.6, 10.6, 8.8, 11.0, 10.2, 10.1, 10.1, 14.0, 9.4, 11.8, 11.4, 10.7, 8.6, 11.5, 11.2, 12.6, 12.6, 9.3, 12.6, 12.1, 9.9, 10.7, 10.0, 10.4, 10.5, 9.7, 10.5, 9.0, 9.2, 10.1, 11.4, 10.8, 10.9, 9.2, 12.9, 12.0, 9.5, 11.8, 9.1, 9.7, 9.1, 10.0, 10.4, 9.5, 12.3, 11.7, 9.5, 11.5, 10.6, 10.2, 9.5, 10.5, 10.5, 8.9, 10.6, 9.5, 10.8, 9.5, 8.9, 8.9, 9.4, 10.6, 9.0, 10.5, 9.0, 9.0, 9.4, 9.0, 9.6, 9.0, 10.2, 9.4, 10.4, 10.4, 9.5, 10.6, 11.0, 9.6, 9.9, 9.6, 12.8, 11.4, 10.0, 9.1, 9.4, 10.2, 9.2, 9.4, 9.6, 10.1, 11.4, 10.6, 12.8, 8.9, 9.3, 11.1, 9.9, 9.6, 12.8, 10.7, 9.2, 9.1, 9.6, 9.2, 10.7, 9.1, 9.2, 10.7, 10.8, 10.8, 9.0, 10.7, 10.7, 9.4, 8.8, 9.0, 11.5, 12.5, 10.5, 9.7, 11.3, 10.7, 10.8, 10.6, 11.7, 9.2, 11.1, 11.7, 11.0, 12.5, 10.0, 10.6, 12.3, 12.7, 12.3, 10.5, 12.5, 12.4, 8.7, 12.4, 12.6, 11.0, 10.1, 10.5, 12.7, 10.9, 13.5, 9.7, 9.2, 10.6, 13.3, 13.5, 10.1, 9.4, 10.6, 11.3, 10.8, 10.4, 10.5, 9.3, 9.3, 12.2, 9.2, 10.3, 9.4, 10.2, 9.0, 9.3, 9.2, 9.4, 9.4, 9.5, 9.9, 11.1, 12.3, 8.6, 9.4, 9.4, 8.6, 10.9, 9.4, 10.9, 9.4, 9.2, 8.6, 9.4, 10.8, 10.5, 12.5, 12.1, 8.7, 12.7, 12.1, 12.5, 11.4, 12.9, 12.8, 11.2, 9.7, 9.7, 10.3, 11.6, 11.6, 9.7, 10.9, 12.6, 12.4, 11.5, 10.2, 11.4, 9.6, 10.3, 9.3, 10.7, 12.8, 9.5, 10.4, 10.3, 9.9, 10.7, 10.5, 9.6, 9.3, 10.0, 11.2, 10.8, 10.3, 8.8, 12.8, 13.2, 10.1, 11.0, 10.8, 12.8, 9.2, 10.5, 11.7, 9.5, 9.5, 8.8, 9.3, 12.6, 12.4, 10.1, 11.2, 10.0, 10.0, 10.8, 10.0, 10.4, 10.8, 9.8, 12.2, 12.7, 12.2, 11.9, 11.2, 10.4, 12.8, 12.7, 10.1, 10.0, 9.0, 11.4, 8.9, 9.3, 12.0, 10.8, 10.5, 10.6, 11.3, 9.5, 11.4, 10.1, 10.9, 8.9, 8.9, 9.3, 10.4, 12.0, 9.5, 9.5, 12.4, 11.2, 11.4, 11.4, 11.1, 10.4, 12.0, 12.3, 9.1, 10.5, 11.4, 9.5, 13.7, 13.4, 11.3, 10.0, 10.1, 12.2, 13.4, 9.3, 13.7, 12.3, 11.3, 8.9, 8.9, 11.5, 8.9, 9.3, 11.1, 10.9, 11.6, 10.2, 10.5, 11.4, 8.9, 10.6, 11.6, 11.5, 12.3, 10.8, 11.3, 9.3, 10.0, 11.0, 10.2, 10.8, 10.1, 11.6, 9.1, 10.0, 10.8, 11.4, 12.7, 11.3, 10.4, 9.6, 10.1, 9.6, 12.1, 12.2, 11.3, 9.6, 9.2, 10.4, 9.5, 8.9, 8.8, 10.5, 9.4, 12.2, 11.3, 12.2, 12.2, 11.2, 11.2, 11.5, 11.3, 9.3, 11.3, 11.8, 9.2, 9.2, 12.2, 12.2, 12.2, 10.6, 12.4, 10.8, 11.2, 11.0, 12.7, 10.2, 11.5, 12.3, 9.8, 9.3, 11.8, 11.3, 11.4, 10.8, 9.5, 10.2, 10.7, 10.8, 11.5, 10.7, 10.2, 10.1, 10.4, 9.5, 9.1, 10.6, 9.4, 9.8, 9.5, 9.3, 10.3, 11.1, 10.0, 12.3, 12.4, 12.3, 10.4, 12.1, 12.5, 13.0, 11.0, 10.1, 9.2, 12.6, 12.2, 9.8, 11.0, 10.0, 9.8, 10.5, 10.0, 11.2, 11.0, 11.2, 11.0, 10.5, 10.6, 10.6, 12.0, 10.1, 10.1, 9.2, 11.0, 10.0, 8.7, 8.7, 11.1, 11.0, 11.1, 8.7, 8.7, 11.2, 11.1, 10.8, 9.0, 10.3, 9.9, 10.0, 9.8, 10.8, 9.0, 9.1, 10.6, 10.6, 9.9, 10.6, 9.9, 9.9, 12.8, 10.3, 10.6, 8.7, 12.6, 11.0, 11.2, 10.7, 9.6, 10.6, 9.0, 10.5, 12.8, 10.1, 12.2, 12.8, 10.1, 10.1, 9.2, 9.9, 9.7, 9.9, 9.9, 9.7, 10.3, 10.3, 10.5, 10.5, 9.8, 10.6, 10.1, 9.0, 9.5, 11.5, 11.9, 10.1, 9.2, 8.7, 9.8, 9.2, 8.7, 11.2, 12.3, 10.4, 10.7, 10.5, 9.4, 9.2, 11.9, 9.2, 9.9, 11.4, 9.4, 10.7, 12.7, 13.5, 9.5, 12.9, 12.5, 9.5, 8.6, 10.0, 12.5, 10.1, 11.3, 10.6, 10.8, 10.7, 9.0, 9.2, 8.5, 11.3, 11.3, 9.4, 8.7, 9.4, 10.5, 9.7, 10.2, 9.4, 11.5, 9.6, 11.4, 11.5, 12.2, 11.0, 9.2, 10.2, 10.0, 9.7, 9.2, 10.5, 10.0, 10.1, 9.1, 10.2, 9.1, 10.5, 10.1, 12.1, 10.2, 9.4, 12.8, 9.0, 10.9, 8.8, 9.0, 10.2, 9.2, 11.3, 8.8, 9.3, 9.4, 10.3, 10.8, 8.8, 9.0, 11.5, 10.8, 11.8, 10.5, 9.9, 9.8, 11.4, 9.3, 9.3, 10.3, 8.9, 11.4, 11.1, 10.4, 10.1, 9.0, 11.9, 9.0, 9.0, 9.1, 9.0, 10.0, 9.1, 9.4, 11.4, 9.7, 9.0, 11.8, 10.2, 9.2, 11.0, 10.0, 12.2, 11.8, 11.6, 10.2, 10.3, 8.6, 9.6, 9.6, 11.3, 9.9, 9.6, 10.6, 9.8, 10.5, 10.8, 10.0, 10.1, 9.4, 11.5, 10.8, 9.9, 9.0, 9.4, 10.8, 10.9, 12.0, 11.5, 10.5, 9.3, 11.8, 10.0, 9.4, 11.4, 10.4, 9.5, 11.9, 11.1, 9.6, 12.0, 8.7, 9.6, 10.0, 11.4, 9.6, 12.9, 9.7, 9.3, 9.1, 8.6, 9.9, 9.3, 10.9, 10.2, 9.7, 11.4, 9.5, 10.2, 11.1, 9.7, 9.3, 8.8, 10.6, 9.3, 10.2, 10.2, 11.0, 9.6, 9.3, 8.8, 8.8, 8.9, 10.0, 12.2, 10.9, 9.5, 10.9, 10.9, 10.8, 12.0, 9.8, 9.5, 11.0, 11.0, 9.8, 10.5, 11.4, 10.1, 11.6, 11.4, 11.8, 12.1, 12.0, 12.1, 9.1, 9.3, 10.4, 9.1, 9.4, 9.6, 12.0, 11.3, 8.7, 9.9, 9.3, 9.5, 8.7, 9.9, 9.3, 9.4, 9.4, 8.8, 9.4, 8.8, 9.9, 9.4, 12.6, 11.1, 12.8, 12.0, 12.0, 9.2, 12.3, 13.0, 12.0, 10.9, 12.8, 10.0, 9.0, 10.4, 9.0, 10.0, 10.0, 11.3, 11.3, 12.0, 11.3, 12.0, 10.6, 9.3, 9.4, 11.0, 9.3, 9.4, 10.5, 11.0, 9.5, 11.2, 12.3, 9.0, 9.0, 9.0, 9.0, 11.4, 11.0, 12.3, 10.4, 10.3, 10.5, 9.8, 10.0, 9.7, 9.7, 9.8, 10.5, 10.0, 11.5, 9.5, 10.5, 10.2, 9.8, 11.6, 11.8, 10.1, 10.3, 10.4, 8.9, 8.9, 10.8, 9.2, 9.6, 10.4, 8.7, 9.2, 9.2, 9.2, 9.2, 9.2, 10.2, 9.2, 9.0, 9.7, 9.6, 10.0, 9.2, 9.1, 8.7, 8.7, 9.5, 9.5, 8.9, 8.9, 9.9, 12.6, 9.7, 10.4, 9.1, 10.4, 9.5, 8.9, 10.6, 12.0, 12.5, 9.6, 9.2, 9.9, 11.7, 9.6, 12.0, 12.5, 9.2, 9.9, 8.9, 9.0, 10.2, 9.6, 9.4, 10.4, 10.4, 10.0, 10.0, 10.5, 11.4, 10.2, 10.4, 11.0, 10.1, 9.2, 10.3, 10.2, 10.4, 11.1, 9.9, 9.0, 8.6, 9.0, 8.6, 9.5, 9.0, 10.0, 9.0, 9.0, 10.2, 9.6, 9.7, 10.2, 13.0, 10.8, 9.7, 9.0, 9.9, 9.2, 8.7, 10.1, 10.1, 9.5, 9.9, 8.7, 9.0, 8.6, 10.5, 9.5, 10.1, 11.7, 10.7, 11.7, 9.2, 8.8, 8.8, 9.5, 10.2, 9.1, 10.5, 9.0, 8.9, 8.9, 8.9, 8.9, 8.9, 9.1, 10.1, 10.0, 9.5, 12.3, 9.1, 8.9, 9.6, 11.6, 8.8, 8.9, 8.8, 8.9, 8.9, 9.0, 10.0, 10.0, 11.1, 11.6, 10.6, 8.8, 8.9, 10.1, 10.0, 12.2, 11.0, 10.0, 11.1, 10.4, 11.8, 10.8, 12.5, 11.8, 11.6, 10.4, 11.5, 10.1, 9.2, 10.1, 9.2, 8.9, 10.1, 8.9, 9.7, 9.2, 11.0, 10.7, 10.8, 9.8, 11.0, 10.4, 10.2, 10.7, 9.0, 10.6, 9.5, 9.0, 9.2, 11.0, 9.9, 10.6, 9.3, 9.6, 9.5, 9.7, 9.7, 8.7, 8.7, 12.4, 12.4, 10.6, 8.7, 12.0, 9.0, 8.8, 9.5, 10.8, 11.4, 10.3, 9.5, 9.9, 10.2, 10.2, 11.0, 12.1, 9.1, 9.5, 9.5, 9.8, 9.5, 10.3, 9.6, 10.2, 10.5, 10.4, 9.6, 10.7, 10.5, 10.6, 9.6, 9.6, 9.5, 9.4, 9.8, 9.6, 9.2, 9.5, 9.2, 9.4, 9.4, 9.3, 9.1, 9.5, 9.1, 10.6, 9.5, 12.4, 8.7, 8.8, 10.6, 9.1, 9.0, 10.3, 9.1, 9.5, 8.8, 8.8, 8.8, 9.9, 9.5, 8.8, 11.7, 10.8, 12.0, 10.3, 9.0, 12.2, 9.9, 9.0, 12.2, 10.1, 9.3, 9.5, 9.2, 11.7, 11.0, 9.6, 9.6, 11.9, 10.8, 10.1, 10.9, 10.1, 10.4, 9.2, 9.6, 9.6, 9.0, 11.5, 10.2, 9.9, 9.6, 10.6, 9.2, 11.8, 12.2, 9.6, 10.6, 10.3, 10.2, 10.7, 11.7, 12.0, 10.6, 12.2, 11.0, 12.4, 9.4, 12.0, 11.6, 9.4, 9.4, 9.1, 9.1, 9.1, 9.1, 9.1, 9.2, 9.2, 9.1, 9.1, 9.2, 9.0, 9.2, 10.8, 9.5, 11.0, 10.0, 9.5, 10.1, 9.5, 9.5, 9.5, 9.4, 9.4, 12.7, 9.7, 9.7, 9.4, 9.4, 9.5, 11.7, 11.7, 9.7, 9.5, 9.1, 10.3, 9.7, 9.9, 9.9, 10.2, 12.1, 11.3, 11.4, 12.2, 9.9, 10.3, 12.2, 10.4, 11.4, 9.9, 10.0, 11.5, 10.5, 12.5, 10.5, 9.9, 11.4, 9.8, 11.4, 9.2, 8.9, 8.9, 9.5, 11.5, 9.5, 11.5, 9.5, 9.7, 9.7, 9.5, 9.4, 9.0, 10.6, 9.5, 9.1, 9.4, 8.8, 10.4, 8.9, 10.6, 9.0, 10.6, 10.6, 9.0, 8.8, 10.5, 9.5, 9.0, 10.4, 10.0, 10.4, 9.0, 9.3, 9.0, 9.3, 9.0, 11.5, 9.0, 10.4, 9.0, 10.6, 10.4, 8.5, 9.3, 10.5, 9.9, 10.4, 10.1, 10.5, 9.2, 9.4, 10.6, 9.4, 8.7, 10.2, 10.3, 9.5, 9.5, 9.5, 9.5, 9.4, 9.4, 9.5, 12.6, 10.5, 10.8, 9.9, 12.6, 12.2, 10.0, 10.6, 9.5, 12.8, 12.2, 12.6, 9.4, 9.0, 9.1, 9.4, 12.2, 10.0, 9.2, 9.3, 9.8, 9.2, 12.0, 9.3, 12.6, 12.2, 11.0, 12.0, 8.8, 8.9, 12.7, 11.8, 10.2, 9.9, 11.1, 9.4, 9.7, 9.7, 9.7, 9.7, 9.8, 9.3, 10.5, 9.3, 12.6, 8.9, 10.3, 10.6, 9.0, 9.7, 9.5, 10.3, 9.7, 12.3, 10.5, 9.5, 10.0, 8.8, 10.9, 12.2, 9.5, 10.0, 9.6, 8.7, 10.7, 11.1, 12.5, 10.4, 11.5, 9.4, 9.3, 10.1, 9.7, 10.5, 9.7, 9.2, 9.8, 9.0, 9.1, 10.4, 10.7, 10.5, 9.2, 11.5, 10.4, 12.0, 12.2, 12.0, 9.8, 9.3, 9.6, 9.5, 10.2, 10.4, 11.0, 10.4, 8.7, 9.9, 9.9, 11.3, 12.0, 10.7, 10.1, 9.6, 9.6, 8.7, 10.3, 9.1, 11.8, 11.9, 10.3, 10.0, 10.2, 10.0, 12.7, 9.6, 9.5, 12.7, 11.0, 9.1, 10.2, 10.1, 9.2, 9.4, 10.2, 9.2, 10.0, 10.1, 9.0, 9.5, 9.1, 13.3, 9.5, 9.2, 10.1, 9.2, 10.1, 11.2, 9.8, 11.2, 9.8, 9.4, 9.0, 9.4, 8.9, 9.1, 9.8, 9.4, 10.0, 9.4, 9.9, 10.0, 11.5, 9.2, 10.0, 9.2, 10.0, 10.0, 9.8, 10.5, 10.6, 9.4, 9.4, 11.0, 10.8, 9.0, 9.6, 10.6, 10.6, 9.6, 9.2, 9.2, 9.5, 9.5, 10.3, 8.8, 8.7, 8.7, 10.2, 10.1, 9.5, 9.5, 11.6, 10.7, 10.1, 11.1, 9.8, 9.0, 11.1, 9.5, 9.4, 10.2, 9.8, 9.5, 9.5, 9.0, 10.1, 8.8, 11.9, 11.9, 9.3, 10.0, 9.5, 9.3, 9.7, 9.7, 10.2, 10.8, 8.8, 8.8, 11.4, 8.8, 9.8, 9.4, 9.4, 9.4, 9.4, 9.7, 12.3, 9.8, 9.0, 9.2, 9.4, 9.9, 9.8, 12.3, 11.9, 10.2, 9.5, 11.9, 9.2, 9.7, 11.5, 10.4, 11.6, 9.7, 10.4, 11.5, 10.2, 9.8, 9.0, 10.5, 9.4, 9.4, 10.8, 10.7, 10.6, 9.2, 9.5, 9.5, 10.0, 10.6, 10.6, 10.6, 9.2, 11.0, 11.2, 9.6, 9.4, 9.5, 9.3, 9.4, 9.5, 9.4, 11.2, 11.2, 11.2, 8.8, 11.2, 11.2, 9.4, 11.1, 9.6, 11.1, 9.4, 10.6, 8.9, 12.3, 11.4, 9.6, 10.3, 11.4, 12.1, 9.9, 9.7, 10.5, 8.9, 9.4, 9.6, 12.6, 9.2, 10.4, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.2, 9.0, 9.7, 10.1, 11.0, 10.8, 10.8, 13.5, 10.6, 9.8, 11.7, 9.8, 9.0, 11.3, 9.4, 11.7, 11.3, 11.3, 12.0, 10.6, 10.8, 10.8, 12.0, 9.4, 9.4, 11.3, 9.4, 12.0, 10.3, 10.3, 10.3, 11.3, 9.4, 8.7, 9.4, 11.3, 10.3, 12.0, 8.0, 10.4, 10.7, 10.2, 10.9, 10.5, 11.7, 8.6, 9.0, 8.7, 12.8, 9.0, 8.7, 11.8, 11.6, 11.8, 10.6, 9.7, 10.3, 10.2, 10.1, 10.9, 9.3, 10.2, 10.2, 9.5, 9.3, 12.9, 8.7, 9.4, 10.1, 10.0, 11.1, 10.3, 12.2, 9.3, 11.3, 10.8, 11.2, 12.5, 9.3, 12.9, 11.2, 12.6, 9.3, 12.9, 12.9, 9.5, 11.9, 10.3, 10.3, 11.2, 12.0, 9.6, 9.2, 12.9, 9.3, 12.1, 9.6, 11.2, 11.2, 12.9, 9.2, 9.3, 9.2, 9.3, 10.7, 9.8, 10.3, 10.7, 11.3, 8.8, 10.8, 9.8, 9.3, 11.5, 8.8, 8.8, 8.8, 9.4, 9.4, 9.6, 8.8, 9.3, 8.9, 8.9, 10.0, 9.1, 9.3, 9.4, 10.1, 8.9, 10.8, 10.0, 10.9, 12.0, 9.3, 12.3, 10.4, 10.9, 10.5, 9.8, 10.5, 9.9, 11.4, 9.2, 9.7, 10.0, 11.4, 10.3, 9.9, 10.5, 9.8, 9.3, 12.4, 9.3, 9.3, 9.5, 10.5, 10.5, 12.8, 10.8, 10.0, 11.8, 10.0, 11.8, 12.0, 12.6, 11.9, 10.6, 9.2, 10.0, 9.2, 9.3, 10.2, 10.2, 8.7, 10.7, 12.1, 9.5, 11.2, 12.0, 9.5, 12.1, 10.7, 8.8, 10.8, 13.1, 12.5, 11.7, 11.7, 11.6, 11.3, 12.5, 11.4, 12.2, 11.7, 10.4, 10.4, 10.4, 9.1, 12.2, 9.1, 9.4, 9.4, 10.4, 9.2, 9.4, 13.5, 9.4, 10.9, 13.5, 9.4, 11.4, 12.4, 9.2, 9.4, 10.5, 11.5, 10.9, 10.8, 8.9, 8.9, 9.4, 12.2, 12.1, 10.9, 10.1, 12.2, 13.0, 11.0, 10.8, 13.0, 9.3, 11.4, 9.2, 9.9, 10.5, 12.4, 9.5, 10.5, 9.1, 11.5, 11.5, 11.2, 10.8, 9.4, 11.0, 11.3, 11.2, 10.5, 9.1, 10.4, 11.2, 11.1, 11.2, 10.5, 10.0, 10.0, 10.9, 10.9, 11.2, 11.7, 10.0, 9.5, 9.0, 10.0, 11.9, 10.6, 11.0, 11.2, 12.0, 12.6, 11.2, 10.5, 10.2, 11.0, 12.2, 12.3, 10.6, 10.4, 12.0, 12.7, 10.6, 12.3, 12.7, 11.4, 12.0, 12.4, 12.1, 11.4, 10.7, 9.3, 12.7, 11.7, 10.7, 11.8, 9.9, 13.4, 12.8, 12.8, 10.5, 11.5, 10.5, 13.0, 12.4, 10.2, 9.0, 12.0, 11.7, 10.0, 10.3, 9.0, 11.1, 9.0, 10.5, 11.9, 9.4, 11.4, 10.8, 9.8, 9.3, 11.4, 11.3, 11.3, 9.5, 9.4, 11.9, 9.3, 11.4, 11.4, 12.7, 13.5, 11.2, 10.7, 10.8, 10.5, 13.0, 10.8, 9.1, 10.1, 11.9, 12.0, 12.0, 9.1, 11.6, 11.9, 10.2, 10.8, 9.8, 11.4, 9.8, 10.1, 9.8, 9.8, 10.7, 10.6, 9.3, 9.8, 10.7, 14.0, 11.0, 11.0, 9.4, 9.0, 9.0, 10.0, 9.0, 9.0, 12.4, 11.3, 12.0, 11.7, 10.0, 13.2, 11.0, 11.0, 9.2, 13.0, 10.6, 13.0, 9.0, 9.0, 11.5, 11.0, 11.5, 9.9, 10.4, 9.0, 9.9, 11.0, 12.1, 9.7, 9.7, 12.2, 12.4, 10.5, 10.4, 12.0, 12.7, 10.9, 10.9, 10.9, 11.4, 11.0, 12.6, 11.6, 10.5, 10.9, 10.9, 12.5, 12.1, 11.3, 13.3, 10.9, 10.9, 10.5, 11.6, 11.4, 11.0, 12.1, 11.0, 12.6, 13.0, 8.8, 9.5, 11.8, 12.2, 10.7, 11.0, 11.4, 10.7, 12.0, 11.9, 11.4, 11.8, 10.6, 9.7, 11.0, 10.7, 11.0, 10.5, 10.4, 10.5, 12.0, 12.0, 9.2, 10.9, 9.5, 9.4, 11.3, 10.4, 9.4, 11.3, 8.8, 10.8, 9.4, 9.4, 9.2, 10.3, 9.9, 12.4, 11.9, 11.7, 9.4, 9.6, 9.4, 10.4, 9.5, 11.9, 12.5, 13.4, 12.7, 9.1, 10.5, 10.4, 10.4, 12.5, 10.4, 9.0, 9.8, 9.0, 10.7, 12.4, 12.5, 12.5, 12.1, 11.3, 12.0, 10.4, 12.2, 8.6, 9.1, 12.1, 12.0, 10.5, 10.4, 11.9, 13.7, 11.3, 10.5, 13.7, 10.1, 12.3, 12.0, 11.3, 9.5, 11.4, 11.9, 10.0, 10.0, 11.3, 11.7, 11.0, 12.2, 10.7, 10.9, 10.2, 11.9, 11.1, 11.2, 11.4, 10.6, 10.3, 10.4, 11.9, 11.9, 10.4, 9.2, 11.3, 11.3, 11.0, 11.9, 12.9, 10.8, 9.1, 10.4, 12.9, 12.2, 9.2, 10.3, 11.0, 11.0, 11.7, 12.0, 12.7, 8.8, 11.3, 12.8, 11.2, 8.9, 11.2, 11.1, 10.8, 9.3, 8.9, 12.7, 12.0, 11.2, 8.8, 8.8, 8.8, 10.4, 8.8, 10.4, 14.0, 8.8, 13.1, 12.3, 12.6, 12.0, 9.5, 12.0, 12.7, 10.5, 12.9, 9.5, 12.0, 12.7, 11.9, 12.0, 12.5, 12.1, 12.5, 9.9, 10.7, 12.0, 12.2, 12.4, 12.4, 10.3, 12.0, 10.5, 9.5, 10.5, 12.3, 11.9, 9.8, 12.3, 11.4, 11.0, 10.8, 12.8, 11.0, 10.2, 12.5, 11.6, 11.9, 9.8, 11.0, 10.9, 11.0, 12.5, 11.0, 12.0, 12.4, 12.5, 12.8, 11.0, 9.1, 12.4, 12.9, 10.9, 10.8, 10.6, 9.0, 12.0, 11.8, 10.6, 12.3, 11.5, 11.1, 9.0, 9.9, 12.8, 12.9, 12.9, 12.0, 12.0, 11.2, 13.3, 9.9, 9.5, 9.4, 11.0, 9.4, 11.5, 12.5, 11.9, 10.4, 11.2, 12.5, 11.0, 9.8, 12.3, 11.0, 12.6, 11.6, 12.3, 13.4, 9.8, 11.5, 11.6, 11.1, 11.0, 11.3, 9.9, 12.6, 11.8, 11.4, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 13.0, 9.3, 12.6, 9.6, 8.0, 11.8, 10.2, 12.7, 9.4, 10.2, 12.0, 11.3, 11.8, 10.9, 9.8, 12.2, 11.1, 9.4, 11.4, 10.2, 12.8, 10.1, 9.4, 12.2, 10.9, 10.9, 10.9, 9.4, 9.4, 11.4, 12.9, 9.4, 12.0, 10.1, 9.4, 9.4, 9.2, 11.8, 12.3, 11.4, 12.9, 12.3, 13.5, 12.8, 12.8, 12.8, 11.0, 10.6, 12.4, 12.9, 11.1, 12.9, 11.8, 9.1, 12.7, 12.0, 11.2, 12.4, 10.4, 10.4, 12.7, 12.5, 12.0, 11.6, 12.6, 10.2, 10.4, 11.5, 11.0, 10.1, 10.5, 12.1, 9.9, 11.4, 9.5, 9.5, 9.5, 10.9, 9.5, 12.6, 9.5, 11.1, 9.5, 9.5, 10.6, 10.6, 10.8, 10.9, 9.9, 11.3, 12.6, 12.5, 12.4, 11.8, 12.2, 10.7, 11.3, 12.5, 12.4, 11.3, 9.9, 11.3, 12.6, 11.5, 12.3, 12.2, 13.2, 10.2, 11.5, 13.2, 12.2, 11.0, 13.2, 9.5, 10.2, 10.2, 11.4, 12.5, 9.2, 12.1, 10.7, 12.1, 11.2, 10.6, 11.8, 12.5, 9.2, 12.6, 12.8, 12.3, 12.3, 12.4, 12.3, 9.1, 9.1, 10.6, 10.3, 9.5, 11.1, 10.8, 11.2, 10.8, 11.4, 11.2, 10.2, 11.1, 9.5, 10.2, 11.0, 11.5, 9.8, 10.1, 8.8, 11.5, 12.7, 9.8, 12.9, 9.8, 12.7, 8.5, 12.7, 13.1, 9.1, 12.5, 9.1, 9.1, 11.2, 12.5, 9.1, 9.1, 9.1, 11.5, 12.9, 12.5, 12.3, 11.4, 9.4, 9.1, 9.4, 12.0, 11.1, 11.8, 11.4, 9.1, 12.1, 10.4, 9.2, 13.0, 12.1, 11.5, 11.5, 10.0, 11.1, 12.4, 12.2, 10.6, 11.1, 13.9, 9.2, 10.5, 11.3, 12.9, 12.9, 9.6, 12.9, 12.9, 8.8, 13.2, 9.2, 11.3, 10.5, 10.5, 12.6, 9.5, 9.8, 13.4, 11.8, 9.8, 13.1, 12.6, 10.4, 13.4, 13.0, 13.4, 10.2, 11.7, 9.5, 11.7, 11.4, 11.8, 11.2, 13.0, 13.0, 10.9, 11.6, 11.3, 12.0, 10.5, 13.1, 13.0, 10.9, 9.1, 13.4, 11.5, 11.2, 10.9, 13.5, 9.1, 9.9, 10.5, 11.7, 11.0, 13.0, 13.6, 12.3, 13.3, 13.7, 11.1, 13.4, 9.1, 11.3, 9.4, 9.1, 11.6, 11.6, 12.4, 9.8, 11.1, 13.1, 9.7, 9.2, 11.7, 10.6, 9.7, 9.2, 10.9, 10.1, 12.2, 12.7, 13.0, 11.2, 9.4, 11.0, 11.0, 9.2, 9.4, 9.2, 12.3, 11.0, 10.0, 9.0, 9.0, 9.0, 11.1, 9.9, 12.2, 11.1, 9.0, 11.8, 12.9, 9.0, 12.4, 9.0, 12.9, 11.2, 12.6, 11.5, 11.3, 11.2, 11.5, 10.5, 12.6, 11.9, 10.1, 11.0, 10.6, 11.3, 11.2, 11.5, 11.1, 12.8, 12.3, 10.4, 11.5, 11.7, 10.7, 9.5, 9.5, 9.5, 12.0, 10.8, 10.7, 10.7, 10.7, 12.1, 11.9, 10.8, 12.3, 9.4, 9.9, 10.4, 10.4, 12.6, 12.5, 9.4, 9.2, 11.2, 9.2, 9.2, 9.4, 11.2, 10.8, 9.2, 9.2, 12.5, 9.3, 11.4, 10.0, 10.6, 10.7, 10.0, 12.5, 10.6, 12.8, 9.3, 11.4, 9.5, 9.5, 9.5, 10.8, 10.8, 8.8, 10.8, 11.0, 12.4, 11.3, 11.2, 12.5, 10.0, 11.0, 10.5, 10.5, 11.0, 11.4, 11.3, 12.2, 12.6, 11.1, 12.3, 10.4, 8.8, 9.5, 8.8, 10.4, 13.0, 12.2, 10.5, 10.8, 13.2, 13.0, 10.0, 10.4, 12.4, 12.9, 13.2, 10.5, 13.0, 11.2, 12.7, 9.4, 12.9, 13.0, 13.6, 9.1, 10.4, 13.6, 12.2, 8.7, 10.5, 10.2, 12.5, 11.3, 10.2, 12.6, 10.2, 9.8, 10.8, 12.5, 12.5, 11.5, 11.4, 10.5, 12.6, 8.7, 11.0, 11.3, 10.2, 11.6, 9.8, 10.1, 9.2, 9.1, 9.1, 9.1, 9.1, 11.7, 12.6, 9.0, 10.1, 13.6, 9.1, 9.2, 8.8, 10.0, 9.1, 11.2, 9.2, 9.2, 9.5, 11.9, 9.8, 9.8, 10.8, 11.3, 12.1, 11.3, 10.8, 13.5, 10.3, 9.0, 11.6, 10.3, 12.5, 8.6, 13.4, 12.7, 9.2, 10.2, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.9, 9.0, 9.0, 11.0, 9.0, 10.0, 10.7, 10.7, 13.4, 11.0, 10.0, 10.7, 10.7, 11.0, 11.0, 11.1, 10.9, 11.5, 13.4, 9.4, 9.4, 9.4, 10.6, 9.4, 12.0, 10.2, 10.6, 13.5, 9.7, 12.2, 12.3, 12.2, 11.4, 12.7, 9.7, 10.8, 11.0, 9.5, 10.1, 13.2, 8.8, 9.5, 9.5, 9.5, 9.5, 9.5, 10.4, 9.9, 10.0, 10.1, 9.4, 9.3, 10.9, 11.4, 10.3, 11.0, 10.9, 10.8, 10.3, 11.0, 9.3, 10.2, 10.2, 10.8, 10.5, 11.1, 10.9, 11.4, 10.3, 12.9, 9.9, 11.3, 11.5, 11.5, 10.7, 10.4, 12.5, 9.5, 11.3, 13.0, 11.5, 11.5, 11.3, 13.2, 11.5, 9.6, 9.6, 9.7, 9.2, 8.4, 12.4, 12.4, 9.2, 8.4, 11.7, 11.0, 11.9, 13.2, 11.7, 9.1, 12.6, 9.1, 10.5, 10.6, 12.6, 13.7, 12.0, 12.5, 12.1, 11.3, 12.0, 10.3, 12.7, 9.2, 9.2, 9.5, 10.1, 10.1, 13.0, 13.1, 11.0, 9.2, 9.4, 9.5, 10.2, 10.1, 8.6, 9.0, 9.6, 9.9, 10.5, 11.4, 9.4, 11.1, 8.9, 8.9, 10.8, 12.2, 8.9, 12.5, 12.2, 12.5, 8.9, 10.8, 11.4, 10.8, 10.6, 9.2, 12.2, 12.3, 10.4, 10.4, 11.0, 10.6, 9.2, 13.5, 11.4, 11.5, 14.0, 12.5, 12.5, 12.8, 11.2, 11.2, 13.6, 9.2, 12.5, 11.1, 11.2, 14.0, 13.6, 9.4, 14.2, 13.2, 11.2, 10.2, 12.8, 10.1, 10.1, 10.3, 9.9, 11.5, 9.0, 9.0, 12.1, 13.3, 11.5, 11.0, 10.7, 9.4, 10.3, 9.3, 12.0, 11.0, 9.3, 10.1, 11.1, 9.9, 11.0, 11.0, 12.5, 12.7, 9.3, 9.3, 10.1, 8.8, 11.2, 10.8, 8.8, 11.2, 10.3, 12.0, 9.5, 9.5, 9.8, 9.0, 13.0, 11.8, 8.8, 11.2, 9.5, 9.4, 9.5, 10.4, 9.8, 10.4, 10.3, 9.4, 9.5, 11.9, 12.8, 13.0, 10.4, 10.4, 10.7, 10.7, 11.9, 10.4, 12.8, 9.9, 9.9, 9.4, 11.4, 9.9, 9.4, 9.2, 10.5, 11.0, 11.0, 12.1, 11.0, 12.8, 10.5, 10.5, 10.5, 9.5, 9.2, 11.1, 12.3, 11.1, 12.6, 9.5, 9.2, 10.8, 11.3, 12.8, 10.5, 9.8, 8.5, 9.3, 9.2, 11.4, 8.5, 9.3, 8.4, 9.2, 9.2, 10.4, 11.6, 12.4, 10.4, 9.3, 12.2, 11.0, 11.4, 9.5, 9.2, 11.1, 9.2, 11.0, 9.9, 9.9, 9.5, 12.4, 9.4, 9.3, 8.7, 8.7, 8.7, 8.7, 9.0, 10.7, 10.7, 11.3, 8.7, 11.7, 9.3, 8.7, 9.0, 11.7, 10.7, 11.4, 10.7, 11.3, 10.0, 10.0, 11.2, 9.7, 12.5, 12.9, 11.8, 10.6, 11.8, 10.7, 9.9, 12.0, 10.4, 8.5, 9.9, 9.4, 10.4, 11.0, 11.0, 10.4, 9.8, 9.4, 10.6, 10.1, 11.5, 11.4, 9.2, 9.7, 11.3, 9.6, 8.9, 10.0, 9.2, 9.0, 12.8, 9.0, 9.5, 10.0, 11.0, 9.2, 10.6, 10.0, 10.0, 11.7, 12.5, 11.1, 9.7, 12.3, 12.2, 11.3, 11.6, 11.3, 11.1, 11.2, 11.3, 12.0, 8.8, 8.8, 12.0, 12.0, 9.0, 9.3, 8.7, 12.8, 11.5, 10.0, 10.0, 10.3, 10.4, 13.4, 11.2, 9.1, 9.1, 10.8, 12.5, 11.3, 12.8, 9.1, 12.7, 11.0, 10.4, 10.4, 10.7, 10.9, 10.4, 10.4, 9.7, 11.0, 9.6, 13.9, 9.4, 12.5, 9.6, 9.5, 9.6, 9.5, 9.6, 8.7, 8.7, 8.7, 8.7, 8.7, 8.7, 10.4, 10.7, 12.0, 12.1, 13.1, 12.4, 12.6, 8.7, 12.0, 11.6, 9.3, 9.3, 11.1, 10.2, 10.6, 11.3, 9.4, 9.3, 11.1, 9.9, 11.8, 12.6, 9.4, 10.5, 12.3, 11.3, 9.6, 12.0, 11.2, 10.2, 12.4, 10.2, 13.4, 12.6, 9.8, 9.1, 12.4, 12.5, 11.7, 12.9, 10.1, 10.3, 11.7, 10.3, 10.8, 11.2, 11.8, 9.8, 10.0, 8.8, 10.1, 9.5, 9.5, 9.5, 9.2, 12.2, 9.5, 11.3, 12.1, 9.2, 11.2, 12.5, 10.6, 10.4, 10.1, 9.9, 11.0, 10.0, 12.7, 12.1, 10.4, 10.4, 9.2, 9.2, 10.5, 9.2, 11.9, 10.1, 11.1, 10.8, 11.8, 9.2, 9.2, 12.3, 10.1, 11.4, 10.4, 9.8, 9.9, 9.8, 11.2, 10.9, 9.2, 9.2, 12.0, 12.1, 12.4, 11.2, 12.7, 12.2, 12.2, 12.2, 11.2, 12.7, 12.7, 12.1, 9.4, 10.1, 9.4, 8.9, 8.9, 8.9, 8.9, 13.0, 10.3, 10.1, 10.5, 8.9, 10.1, 10.1, 11.0, 11.0, 11.0, 11.0, 10.0, 10.5, 9.7, 10.1, 9.4, 11.2, 9.4, 10.8, 9.4, 11.2, 11.0, 12.4, 9.4, 9.4, 9.5, 10.0, 12.5, 10.9, 10.5, 10.8, 11.0, 11.8, 12.6, 10.2, 12.0, 12.5, 11.5, 11.94, 12.89333333, 9.4, 12.2, 11.94, 12.89333333, 9.5, 10.6, 10.5, 11.46666667, 11.4, 9.5, 9.2, 9.5, 10.98, 9.4, 9.5, 9.2, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 10.4, 8.8, 10.03333333, 11.3, 10.4, 9.2, 11.1, 9.2, 11.3, 9.1, 9.4, 13.2, 12.7, 10.7, 11.43333333, 11.1, 12.7, 10.53333333, 11.6, 9.533333333, 9.8, 10.7, 12.0, 12.8, 9.5, 10.93333333, 9.1, 12.6, 9.5, 10.9, 10.93333333, 9.6, 9.3, 11.36666667, 12.5, 9.5, 11.0, 9.4, 11.33333333, 8.8, 9.4, 11.06666667, 12.2, 11.0, 11.33333333, 9.5, 9.5, 11.0, 11.2, 9.3, 10.8, 9.2, 9.4, 9.2, 10.5, 10.8, 9.4, 9.8, 9.8, 9.8, 9.4, 9.8, 12.1, 12.3, 9.733333333, 9.4, 9.4, 12.8, 11.05, 9.4, 12.8, 9.733333333, 13.1, 11.5, 13.1, 11.5, 9.1, 9.75, 10.5, 8.8, 8.8, 8.8, 8.8, 10.5, 10.5, 8.8, 9.9, 9.9, 9.9, 12.2, 10.8, 8.7, 13.2, 12.7, 9.4, 11.2, 11.33333333, 11.9, 11.35, 10.5, 9.8, 9.1, 12.4, 9.1, 9.8, 11.3, 11.3, 13.1, 12.5, 10.3, 10.7, 10.4, 9.5, 9.8, 12.5, 9.4, 9.0, 9.0, 9.0, 13.0, 9.9, 9.4, 10.6, 13.4, 12.5, 9.3, 9.3, 11.0, 10.3, 11.3, 10.9, 11.3, 12.1, 11.1, 9.8, 10.1, 12.4, 12.7, 9.6, 9.6, 9.1, 12.8, 9.6, 12.4, 9.55, 9.1, 12.5, 9.9, 11.2, 13.0, 13.0, 11.7, 13.1, 12.0, 10.55, 11.45, 10.2, 11.45, 9.3, 10.8, 12.2, 11.0, 10.4, 11.4, 14.05, 10.7, 10.2, 11.2, 12.33333333, 11.5, 9.5, 13.4, 12.5, 12.5, 11.2, 8.8, 11.2, 12.7, 9.8, 9.8, 11.7, 9.8, 9.6, 9.8, 9.7, 10.0, 11.7, 12.3, 9.8, 9.0, 9.1, 9.1, 9.1, 11.4, 10.5, 12.4, 9.1, 9.1, 10.1, 10.9, 11.05, 12.75, 12.7, 11.1, 11.1, 12.75, 13.0, 12.0, 11.5, 10.5, 11.1, 11.1, 11.1, 13.1, 12.75, 12.7, 9.6, 11.7, 9.7, 10.9, 10.7, 13.8, 12.15, 10.8, 10.7, 10.8, 10.8, 12.0, 10.8, 12.2, 9.4, 11.4, 12.5, 13.05, 12.4, 12.9, 12.0, 11.3, 10.0, 11.8, 9.4, 8.8, 11.1, 10.5, 9.3, 11.4, 11.8, 12.4, 11.6, 11.1, 12.4, 11.1, 11.0, 12.2, 11.0, 12.9, 10.9, 13.4, 10.7, 11.0, 11.4, 10.2, 11.0, 9.1, 11.0, 11.5, 12.0, 11.2, 11.2, 12.6, 11.0, 10.8, 10.9, 9.8, 9.8, 9.5, 11.26666667, 10.8, 13.4, 11.3, 8.9, 11.2, 11.5, 13.0, 12.6, 13.1, 11.2, 11.7, 10.9, 10.9, 11.6, 10.4, 10.9, 11.7, 10.8, 11.2, 10.0, 10.56666667, 11.73333333, 10.6, 10.5, 11.75, 11.4, 12.4, 10.1, 12.3, 13.1, 10.65, 11.4, 9.3, 10.2, 10.2, 13.1, 9.6, 12.8, 10.96666667, 10.96666667, 10.96666667, 11.0, 13.4, 11.2, 12.4, 11.2, 12.4, 10.13333333, 10.13333333, 12.4, 9.1, 10.15, 10.15, 11.5, 8.9, 10.46666667, 10.46666667, 11.8, 11.63333333, 10.6, 9.6, 11.8, 8.9, 10.5, 10.2, 13.1, 11.8, 12.2, 11.45, 10.5, 10.2, 9.0, 9.0, 9.0, 9.0, 9.1, 8.8, 9.0, 9.1, 12.9, 13.0, 12.9, 9.2, 9.8, 9.8, 10.1, 10.1, 10.9, 9.6, 10.4, 11.8, 10.8, 10.6, 12.7, 12.2, 10.8, 10.4, 11.1, 11.8, 10.0, 10.8, 10.3, 9.9, 10.0, 12.25, 10.2, 9.4, 9.7, 10.2, 10.4, 12.2, 9.4, 10.6, 10.7, 11.85, 11.7, 11.7, 10.15, 11.63333333, 10.8, 10.8, 12.3, 12.5, 11.65, 9.6, 10.9, 10.8, 11.2, 10.0, 10.5, 9.1, 10.5, 9.3, 9.3, 11.2, 10.6, 12.1, 12.0, 9.7, 12.4, 13.6, 13.6, 11.8, 10.0, 10.0, 9.1, 11.9, 11.75, 11.4, 13.0, 12.4, 9.4, 9.6, 9.6, 9.6, 9.6, 9.1, 12.0, 11.2, 10.1, 10.3, 12.3, 10.55, 10.9, 9.7, 9.8, 8.9, 8.9, 10.2, 11.7, 12.8, 12.8, 10.2, 13.55, 11.6, 8.9, 13.8, 9.4, 9.4, 10.7, 10.7, 12.3, 10.3, 10.4, 11.6, 10.7, 12.8, 11.9, 12.1, 9.2, 9.5, 11.0, 10.9, 10.4, 9.1, 11.4, 11.4, 9.7, 12.4, 13.7, 10.6, 11.2, 13.13333333, 12.4, 9.7, 11.0, 11.3, 12.0, 9.2, 10.7, 10.7, 11.4, 9.2, 12.1, 11.1, 9.7, 10.7, 10.9, 12.0, 10.6, 9.6, 13.1, 11.0, 11.6, 11.95, 11.1, 11.5, 11.3, 11.9, 9.5, 12.2, 12.2, 11.1, 9.6, 11.1, 9.6, 11.4, 11.4, 12.06666667, 9.0, 9.0, 11.4, 9.6, 11.0, 11.0, 11.2, 11.55, 13.3, 9.633333333, 13.6, 11.2, 13.0, 10.8, 9.8, 11.45, 12.05, 9.7, 11.9, 10.0, 9.7, 11.6, 8.8, 9.5, 9.533333333, 9.533333333, 9.4, 10.7, 11.5, 9.6, 9.55, 12.15, 13.0, 9.2, 9.4, 11.8, 10.6, 9.7, 11.2, 9.6, 9.4, 12.8, 11.8, 9.4, 9.8, 9.8, 9.8, 9.4, 9.4, 9.4, 10.0, 9.5, 10.5, 9.2, 10.5, 9.9, 9.1, 9.2, 9.2, 10.5, 9.3, 9.0, 9.2, 9.4, 9.7, 9.5, 9.4, 9.7, 9.3, 9.5, 9.5, 9.4, 9.8, 10.1, 10.6, 9.8, 9.4, 9.2, 9.6, 10.8, 9.7, 9.8, 10.5, 10.5, 9.3, 10.5, 10.3, 9.5, 13.1, 9.2, 9.5, 9.2, 9.2, 9.2, 9.4, 9.4, 9.4, 10.2, 9.5, 9.6, 9.4, 10.0, 9.4, 9.2, 9.3, 9.5, 9.8, 10.9, 10.9, 9.6, 10.7, 10.7, 10.5, 9.5, 9.5, 9.5, 9.2, 9.6, 10.5, 10.5, 10.7, 10.1, 9.1, 9.2, 9.4, 9.1, 9.4, 10.3, 10.1, 9.9, 9.6, 9.5, 9.0, 9.5, 9.9, 9.8, 9.6, 10.5, 12.9, 10.7, 9.2, 9.8, 9.0, 10.2, 10.4, 9.0, 9.2, 9.4, 9.2, 9.3, 9.3, 9.6, 9.3, 9.5, 9.8, 9.8, 9.7, 9.5, 10.5, 10.0, 9.4, 10.9, 9.2, 9.0, 10.9, 9.2, 9.5, 9.5, 9.4, 10.9, 10.9, 10.5, 9.4, 9.4, 13.0, 13.0, 9.8, 9.9, 9.6, 9.5, 9.2, 9.5, 9.5, 9.6, 9.5, 14.0, 9.4, 14.0, 9.4, 10.0, 9.3, 10.2, 10.5, 10.3, 9.4, 10.1, 10.1, 10.5, 10.5, 10.5, 10.5, 9.3, 9.3, 9.6, 9.2, 10.0, 9.4, 9.4, 9.5, 10.2, 9.0, 10.4, 9.5, 9.1, 9.2, 9.2, 11.5, 9.5, 9.5, 9.5, 10.5, 9.6, 9.5, 9.5, 9.3, 9.3, 9.3, 9.3, 9.7, 9.2, 9.7, 9.5, 9.5, 9.4, 9.8, 9.5, 9.7, 9.7, 9.4, 10.2, 10.1, 13.0, 11.4, 10.3, 9.3, 9.5, 9.2, 9.2, 10.8, 10.8, 9.3, 9.4, 10.5, 12.4, 10.0, 10.2, 10.1, 9.8, 10.5, 11.0, 9.1, 9.7, 9.5, 9.4, 9.4, 9.5, 10.0, 10.4, 10.5, 9.5, 9.8, 10.5, 11.0, 12.2, 9.9, 9.6, 11.0, 9.0, 9.0, 9.0, 9.2, 9.0, 9.0, 9.3, 10.9, 9.8, 9.2, 9.2, 9.9, 9.5, 9.3, 9.8, 9.9, 10.0, 9.9, 10.5, 9.5, 9.9, 9.3, 9.2, 9.2, 9.4, 10.5, 9.3, 9.4, 10.0, 9.3, 10.9, 10.2, 9.8, 12.8, 9.4, 10.1, 10.7, 10.1, 10.1, 9.4, 9.4, 10.7, 9.4, 10.1, 12.6, 10.5, 9.3, 9.9, 9.1, 10.5, 9.8, 9.8, 10.3, 10.3, 10.6, 9.2, 10.6, 10.5, 10.3, 10.1, 9.5, 9.5, 9.9, 9.6, 9.7, 9.6, 10.7, 10.1, 10.0, 9.5, 9.2, 9.3, 9.4, 9.5, 9.5, 9.5, 9.3, 9.4, 9.5, 9.4, 11.0, 11.0, 10.1, 10.4, 11.5, 10.4, 11.5, 9.7, 9.3, 9.5, 9.2, 9.2, 11.5, 11.5, 9.7, 9.5, 12.5, 12.5, 9.4, 11.0, 11.7, 12.2, 12.5, 10.3, 11.5, 9.8, 9.2, 11.3, 9.8, 9.8, 10.7, 9.9, 12.3, 12.0, 10.0, 9.4, 9.9, 9.4, 9.3, 13.0, 11.9, 12.8, 11.0, 11.7, 10.4, 9.8, 9.4, 9.9, 10.0, 10.2, 10.0, 11.8, 10.0, 9.0, 9.4, 12.0, 9.9, 8.7, 10.6, 9.2, 10.8, 11.8, 11.0, 12.0, 13.3, 10.8, 9.4, 10.0, 9.4, 9.4, 9.2, 9.7, 9.2, 9.6, 9.2, 10.0, 12.9, 10.0, 9.5, 9.1, 9.9, 13.0, 9.9, 11.0, 11.0, 9.4, 9.9, 10.8, 10.5, 10.5, 9.1, 10.1, 10.8, 10.8, 11.3, 9.6, 9.5, 9.5, 9.3, 11.7, 9.5, 9.3, 11.7, 10.5, 10.4, 9.9, 11.8, 12.3, 10.9, 11.0, 10.9, 12.3, 11.4, 10.6, 9.3, 10.4, 11.0, 9.2, 12.8, 9.5, 9.9, 9.5, 10.2, 11.2, 9.9, 9.3, 9.8, 11.3, 11.2, 11.6, 12.5, 10.1, 10.5, 11.2, 10.2, 10.8, 10.8, 9.1, 10.0, 11.2, 11.1, 13.4, 10.3, 9.6, 11.2, 9.0, 11.3, 9.3, 11.8, 9.0, 9.2, 9.7, 11.5, 14.0, 9.2, 9.8, 10.6, 11.4, 10.4, 10.6, 9.4, 10.2, 9.7, 11.0, 10.2, 10.1, 9.2, 11.7, 9.4, 9.4, 13.4, 10.0, 10.0, 10.0, 10.8, 10.2, 10.6, 13.3, 13.4, 11.6, 12.1, 11.0, 9.0, 11.1, 11.0, 11.6, 9.0, 12.0, 12.0, 10.9, 10.8, 12.5, 10.8, 9.5, 10.2, 11.4, 9.5, 10.2, 9.7, 11.8, 11.8, 9.3, 11.9, 8.4, 11.7, 11.0, 10.0, 9.1, 9.8, 9.4, 9.5, 9.9, 11.0, 11.4, 8.7, 9.4, 10.3, 10.3, 10.3, 12.8, 10.0, 10.3, 9.4, 10.7, 12.0, 11.2, 9.6, 11.0, 9.9, 11.0, 8.4, 9.1, 9.5, 10.7, 10.4, 9.4, 9.5, 10.0, 10.0, 11.5, 11.1, 11.1, 11.7, 11.1, 11.7, 12.7, 11.4, 9.2, 9.2, 10.1, 12.7, 11.4, 9.0, 9.0, 10.7, 11.7, 11.0, 11.7, 10.4, 9.6, 10.0, 10.2, 10.0, 9.5, 9.8, 9.8, 9.6, 9.6, 9.2, 9.9, 10.7, 9.6, 10.6, 9.3, 14.0, 10.5, 9.7, 11.5, 9.7, 9.0, 9.5, 9.3, 9.3, 10.0, 9.8, 9.3, 10.0, 9.0, 9.3, 9.0, 9.1, 9.2, 12.2, 10.5, 10.4, 12.7, 9.2, 9.4, 10.0, 9.8, 10.2, 9.7, 9.7, 9.8, 10.2, 9.3, 9.4, 9.4, 9.5, 12.1, 10.2, 10.2, 9.1, 9.1, 9.3, 9.3, 9.3, 9.5, 10.5, 11.3, 9.5, 9.7, 9.4, 9.4, 10.2, 10.3, 9.4, 9.5, 9.4, 9.5, 9.4, 10.1, 10.1, 11.0, 11.2, 11.3, 9.6, 11.2, 14.9, 12.0, 9.5, 9.4, 9.6, 10.5, 9.6, 11.0, 9.6, 9.0, 9.6, 10.2, 10.2, 9.7, 9.5, 9.2, 11.0, 9.2, 10.0, 9.5, 9.5, 9.5, 9.3, 10.2, 9.3, 9.9, 10.0, 9.6, 9.0, 10.2, 9.8, 11.3, 9.4, 11.3, 9.1, 9.7, 9.4, 9.4, 10.7, 9.8, 9.0, 9.4, 9.4, 12.8, 9.5, 9.5, 9.7, 10.8, 10.1, 9.5, 9.4, 9.6, 9.7, 9.9, 10.0, 10.5, 11.6, 10.0, 10.1, 9.5, 9.4, 9.4, 9.8, 9.2, 9.4, 10.0, 9.6, 9.5, 9.6, 9.2, 10.0, 9.5, 11.2, 10.4, 11.1, 9.5, 9.5, 12.7, 9.6, 11.5, 9.6, 9.5, 9.3, 9.5, 9.5, 9.3, 9.2, 9.3, 11.5, 9.5, 9.2, 10.0, 9.5, 9.5, 9.0, 9.4, 9.6, 9.5, 9.5, 9.5, 9.4, 9.5, 9.1, 10.7, 11.2, 9.8, 9.8, 9.2, 9.7, 9.6, 10.0, 9.6, 9.5, 9.5, 9.4, 9.5, 9.7, 9.6, 9.7, 9.4, 9.4, 9.5, 9.5, 10.0, 10.3, 10.3, 10.5, 9.8, 9.4, 9.8, 10.0, 9.8, 9.8, 9.5, 9.5, 10.1, 10.1, 9.3, 9.7, 9.6, 9.7, 10.8, 12.5, 10.2, 9.6, 10.8, 10.7, 10.7, 9.4, 10.0, 12.9, 9.6, 9.9, 12.8, 12.5, 12.8, 9.2, 10.3, 10.5, 10.9, 10.8, 11.4, 11.3, 10.8, 10.5, 11.9, 9.4, 9.6, 9.7, 14.0, 9.8, 9.8, 10.3, 10.7, 11.0, 10.7, 12.7, 11.1, 10.9, 11.1, 9.9, 9.9, 9.4, 9.3, 11.7, 11.7, 11.2, 10.0, 12.1, 10.3, 10.9, 9.4, 10.6, 9.8, 9.8, 9.9, 9.8, 9.8, 9.5, 9.5, 9.7, 10.9, 10.9, 11.7, 10.9, 11.3, 10.6, 11.2, 9.5, 11.5, 10.4, 9.7, 9.5, 9.7, 11.3, 11.2, 11.2, 10.9, 11.8, 10.6, 10.0, 11.1, 11.8, 11.8, 10.9, 11.8, 10.0, 9.5, 9.9, 11.4, 12.0, 9.5, 10.0, 10.5, 10.4, 12.1, 11.2, 9.3, 10.1, 9.7, 9.3, 9.7, 9.8, 10.7, 12.5, 10.7, 12.5, 11.0, 11.8, 10.8, 10.8, 10.8, 10.8, 9.5, 11.0, 11.5, 10.8, 11.5, 13.2, 10.9, 12.2, 12.2, 11.5, 11.9, 11.0, 10.1, 11.0, 11.8, 10.5, 11.0, 11.8, 10.1, 11.2, 11.0, 10.2, 9.2, 11.2, 12.0, 10.5, 9.8, 9.5, 9.8, 10.5, 11.8, 11.8, 10.4, 12.9, 11.4, 12.4, 12.5, 10.0, 9.7, 12.1, 11.1, 12.0, 12.4, 11.9, 11.9, 11.9, 12.4, 11.2, 12.1, 12.2, 10.4, 11.3, 11.1, 11.3, 10.0, 11.1, 9.3, 9.5, 11.2, 11.1, 11.0, 11.9, 9.2, 12.2, 10.2, 10.9, 10.9, 11.6, 10.7, 12.1, 9.4, 9.4, 9.1, 11.3, 10.4, 10.5, 10.0, 12.9, 10.5, 10.4, 11.3, 11.4, 9.4, 9.4, 10.9, 9.4, 9.4, 9.4, 9.4, 9.4, 10.1, 12.8, 12.8, 9.1, 12.9, 11.5, 10.6, 11.7, 12.8, 10.3, 12.8, 11.7, 11.7, 12.0, 10.9, 12.3, 10.4, 10.0, 10.0, 11.2, 11.4, 12.6, 12.7, 12.7, 10.4, 11.9, 11.9, 10.5, 12.3, 10.5, 10.4, 12.6, 11.6, 10.1, 10.5, 11.5, 11.0, 9.6, 10.4, 9.7, 10.6, 12.5, 9.2, 12.6, 11.1, 10.2, 9.8, 11.1, 10.9, 12.2, 11.4, 10.7, 10.4, 10.9, 10.8, 10.4, 9.2, 12.9, 12.7, 9.1, 9.1, 12.1, 9.1, 11.6, 12.1, 9.9, 12.5, 11.4, 11.8, 11.8, 10.2, 12.5, 10.9, 10.9, 10.8, 11.1, 9.2, 9.5, 10.7, 9.2, 10.2, 11.4, 11.0, 11.0, 12.3, 11.8, 12.3, 9.5, 12.0, 9.5, 9.6, 11.6, 11.2, 9.9, 9.9, 11.8, 11.4, 11.5, 12.0, 10.8, 10.5, 10.8, 9.4, 12.5, 9.4, 12.4, 12.0, 11.2, 12.0, 12.4, 12.8, 12.3, 11.7, 9.5, 10.8, 10.0, 12.3, 11.0, 9.5, 13.6, 11.3, 11.3, 11.3, 13.3, 12.9, 13.1, 12.3, 12.3, 11.2, 11.5, 11.3, 13.5, 11.5, 10.0, 10.5, 10.4, 9.5, 13.6, 11.2, 11.8, 11.9, 11.4, 11.4, 9.1, 9.5, 9.5, 11.0, 11.4, 10.0, 10.1, 10.4, 9.8, 11.8, 11.6, 12.0, 12.8, 12.5, 9.8, 11.1, 11.4, 9.8, 11.8, 12.9, 10.6, 10.8, 11.1, 10.2, 11.8, 10.0, 10.0, 9.4, 10.2, 12.4, 12.0, 11.5, 10.5, 10.8, 12.3, 9.5, 9.5, 11.5, 11.2, 12.7, 11.4, 11.0, 11.0, 11.4, 10.5, 9.3, 10.9, 11.9, 12.2, 11.9, 10.9, 9.6, 12.5, 10.8, 12.4, 10.8, 9.5, 9.5, 9.5, 9.8, 10.9, 9.5, 9.8, 11.2, 11.7, 9.4, 11.0, 11.0, 11.0, 10.0, 11.0, 11.2, 10.4, 9.3, 10.4, 10.5, 10.4, 11.3, 9.5, 12.0, 10.6, 10.9, 11.5, 11.5, 9.6, 12.0, 10.3, 9.4, 9.2, 9.6, 13.6, 9.5, 11.8, 10.8, 9.5, 9.3, 12.8, 11.5, 9.4, 12.8, 9.6, 11.8, 9.3, 9.8, 12.2, 9.5, 10.3, 10.5, 10.0, 10.5, 11.1, 10.9, 10.9, 9.8, 9.8, 9.5, 10.9, 11.0, 9.2, 11.0, 11.3, 11.3, 9.3, 11.2, 9.8, 9.6, 11.8, 10.3, 10.3, 11.4, 9.5, 14.0, 14.0, 11.7, 11.2, 9.3, 11.2, 9.5, 12.0, 9.7, 9.5, 11.5, 10.4, 10.4, 10.9, 10.2, 10.9, 10.5, 12.4, 13.0, 10.2, 10.2, 11.0, 10.9, 12.4, 9.7, 10.9, 9.5, 9.5, 12.1, 12.2, 10.9, 12.5, 11.7, 11.2, 11.2, 9.2, 9.8, 10.1, 11.1, 10.1, 9.2, 9.8, 12.8, 10.5, 10.1, 10.1, 9.8, 12.5, 11.9, 9.8, 9.1, 10.1, 12.5, 11.4, 11.0, 10.6, 10.6, 10.6, 10.6, 9.3, 9.8, 9.8, 9.2, 9.7, 9.6, 10.0, 12.6, 9.5, 9.5, 9.5, 10.5, 10.5, 10.5, 10.4, 10.5, 11.0, 10.2, 11.4, 9.5, 9.5, 10.8, 10.0, 11.8, 10.3, 10.3, 10.0, 10.1, 10.1, 11.1, 9.5, 10.03333333, 10.9, 10.1, 10.03333333, 9.8, 11.8, 9.5, 9.8, 10.5, 9.8, 10.4, 9.2, 11.6, 9.2, 9.3, 9.8, 9.9, 10.0, 12.2, 9.9, 10.8, 10.8, 9.6, 9.9, 9.9, 9.5, 9.2, 9.6, 9.6, 10.3, 9.7, 12.5, 11.0, 9.8, 10.2, 9.2, 9.55, 9.55, 9.9, 10.2, 11.1, 9.9, 9.9, 11.9, 10.0, 10.7, 11.3, 10.9, 10.7, 12.4, 10.7, 11.9, 10.6, 10.9, 10.1, 9.6, 9.4, 9.6, 12.1, 9.8, 9.9, 9.8, 9.4, 11.4, 11.0, 9.6, 9.6, 12.1, 11.2, 11.0, 11.3, 10.4, 9.9, 11.7, 10.1, 9.0, 9.0, 8.5, 11.1, 10.3, 11.06666667, 11.3, 9.566666667, 9.8, 11.7, 11.1, 9.6, 9.8, 9.7, 9.7, 11.3, 11.3, 11.0, 11.6, 9.0, 10.9, 10.9, 10.55, 9.0, 10.5, 11.9, 10.4, 10.0, 10.4, 10.8, 9.7, 9.7, 10.0, 11.0, 10.0, 9.7, 9.7, 12.6, 11.1, 11.0, 8.8, 13.56666667, 8.8, 13.6, 10.2, 10.6, 10.1, 10.6, 10.3, 10.7, 10.9, 9.7, 10.3, 10.6, 11.4, 10.8, 12.4, 11.4, 11.95, 9.7, 10.0, 10.6, 9.7, 11.5, 10.8, 11.5, 9.6, 9.4, 9.8, 11.0, 11.4, 9.95, 10.8, 11.4, 10.6, 11.1, 9.7, 9.8, 10.4, 10.5, 9.233333333, 9.25, 10.6, 10.3, 10.5, 10.2, 10.3, 9.05, 10.6, 10.4, 10.0, 9.7, 9.6, 10.8, 10.1, 10.2, 11.3, 10.2, 9.9, 9.0, 11.7, 9.7, 10.3, 10.2, 12.0, 9.9, 11.6, 10.9, 10.75, 10.4, 11.2, 10.1, 10.2, 12.1, 10.4, 11.4, 9.5, 9.4, 11.3, 9.4, 11.0, 10.55, 9.9, 11.0, 9.5, 9.9, 9.9, 9.9, 10.1, 10.1, 10.1, 10.9, 11.2, 10.1, 9.2, 11.5, 12.4, 11.1, 9.5, 12.5, 10.5, 11.8, 10.8, 11.9, 11.3, 11.3, 11.9, 11.3, 11.9, 9.8, 11.6, 11.5, 11.4, 10.9, 12.8, 9.2, 11.6, 11.6, 11.0, 9.5, 10.5, 11.2, 11.0, 10.2, 11.0], \"yaxis\": \"y\"}], {\"coloraxis\": {\"colorbar\": {\"title\": {\"text\": \"quality\"}}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"height\": 800, \"legend\": {\"itemsizing\": \"constant\", \"tracegroupgap\": 0}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"text\": \"quality vs alcohol (0.44 corr)\"}, \"width\": 800, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"quality\"}}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"alcohol\"}}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('9fe7e498-9dd8-4f23-b6dc-b2f404ecb8f4'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; ### 4.5.2 Plotly with IpyWidgets def my_plot ( x = df . columns , y = df . columns , color = df . columns , size = df . columns ): corr = df . corr () pearson = corr [ x ][ y ] fig = px . scatter ( df , x = x , y = y , color = color , size = size , title = ' {} vs {} ( {:.2f} corr)' . format ( x , y , pearson ), width = 800 , height = 800 ) fig . show () interact ( my_plot ) interactive(children=(Dropdown(description='x', options=('type', 'fixed acidity', 'volatile acidity', 'citric \u2026","title":"Object Oriented Programming"},{"location":"S4_Object_Oriented_Programming/#technology-fundamentals-course-1-session-4-visualization-and-oop","text":"Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assitants Varsha Bang, Harsha Vardhan Contact vbang@uw.edu, harshav@uw.edu In this session we'll be discussing visualization strategies. And, more specifically, how we can manipulate our pandas dataframes to give us the visualizations we desire. Before we get there, however, we're going to start by introducing a python module called Matplotlib.","title":"Technology Fundamentals Course 1, Session 4: Visualization and OOP"},{"location":"S4_Object_Oriented_Programming/#41-visualization-with-matplotlib","text":"Lets start by importing our matplotlib module. Pyplot is a module of Matplotlib that provides functions to add plot elements like text, lines, and images. typically we import this module like so import matplotlib.pyplot as plt where plt is shorthand for the matplotlib.pyplot library import matplotlib.pyplot as plt","title":"4.1 Visualization with Matplotlib"},{"location":"S4_Object_Oriented_Programming/#411-the-basics","text":"Matplotlib is strongly object oriented and its principal objects are the figure and the axes . But before we get into that I want us to explore the most basic use case. In this basic use case, we don't declare the figure and axes objects explicitly, but rather work directly in the pyplot namespace. I'm going to create a list of x and y values and plot them with pyplot x = [1,2,3,4,5,6,7] y = [1,1,2,3,5,8,13] plt.plot(x,y) x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] y = [ 1 , 1 , 2 , 3 , 5 , 8 , 13 ] plt . plot ( x , y ) [<matplotlib.lines.Line2D at 0x7fcd31e36250>] We can label the axes of our figure using the xlabel and ylabel attributes, and label our title using the title attribute. plt.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13]) plt.title('The Fibonacci Sequence') plt.xlabel('Order in Sequence') plt.ylabel('Value') plt . plot ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ],[ 1 , 1 , 2 , 3 , 5 , 8 , 13 ]) plt . title ( 'The Fibonacci Sequence' ) plt . xlabel ( 'Order in Sequence' ) plt . ylabel ( 'Value' ) Text(0, 0.5, 'Value') What do we think about the out-of-the-box formatting of pyplot ? What are some things we can do to make it better? Could we make it bigger? Perhaps different dimensions? Does anyone recognize that default line color? Before we make any changes, let's become acquianted with the more appropriate way to work in matplotlib.pyplot . In this formality, we explicitly create our figure and axes objects. # This is one way to do it... # plt.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13]) # but we can also do it this way, concretely declaring the figure, axes # objects directly # We declare the figure fig = plt.figure() # and then add axes ax = fig.add_subplot(111) You can think of the figure as a canvas, where you specify dimensions and possibly unifying attributes of its contents, like, background color, border, etc. You use the canvas, the figure , to containerize your other objects, primarily your axes , and to save its contents with savefig . You can think of an axes as the actual graphs or plots themselves. And when we declare these objects, we have access to all the methods of matplotlib.pyplot (e.g. .plot , .scatter , .hist etc.) You can place many of these axes into the figure container in a variety of ways. The last component of a pyplot figure are the axis , the graphical axis we typically think of. # This is one way to do it... # plt.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13]) # but we can also do it this way, concretely declaring the figure, axes # objects directly # We declare the figure fig = plt . figure () # and then add axes ax = fig . add_subplot ( 111 ) plt.subplots returns a figure and axes object(s) together: ### We can also do it in 1 line fig, ax = plt.subplots(1, 1, figsize=(8,8)) and we'll go ahead and adjust the figure size with the parameter figsize and set it equal to a tuple containing the x and y dimensions of the figure in inches. ### We can also do it in 1 line fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) To recap, by convention we typically separate our plots into three components: a Figure, its Axes, and their Axis: Figure : It is a whole figure which may contain one or more than one axes (plots). You can think of a figure as a canvas which contains plots. Axes : It is what we generally think of as a plot. A figure can contain many axes . It contains two or three (in the case of 3D) axis objects. Each axes has a title, an x-label and a y-label. Axis : They are the traditional axis we think of in a graph and take care of generating the graph limits. Example: fig, ax = plt.subplots(1, 1, figsize=(8,8)) is creating the figure ( fig ) and axes ( ax ) explicitly, and depending on whether we create 2D or 3D plots, the axes will contain 2-3 axis .","title":"4.1.1 The Basics"},{"location":"S4_Object_Oriented_Programming/#exercise-1-adjust-figure-size","text":"create a figure and axes using plt.subplots() . adjust the figure size to be 6 inches (width) by 3 inches (height). Plot the values of the fibonacci sequence we defined earlier (Bonus) Repeat, this time inverting the y-values using list splicing (Bonus) Explore other plt.plot() attributes using the built in Colab tooltip Plotting building blocks for Exercise 1: * plt.subplots() * ax.plot() * slicing [::] x = [1,2,3,4,5,6,7] y = [1,1,2,3,5,8,13] # Cell for Exercise 1 x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] y = [ 1 , 1 , 2 , 3 , 5 , 8 , 13 ]","title":"Exercise 1: Adjust Figure Size"},{"location":"S4_Object_Oriented_Programming/#412-manipulating-plot-attributes","text":"We can manipulate many parameters of a figure 's axes : marker , linestyle , and color , to name a few. Each of these parameters takes string values. fig, ax = plt.subplots(1,1, figsize=(5,5)) ax.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13], marker='^', linestyle='--', color='tab:blue') ax.plot([1,2,3,4,5,6,7],[0,3,8,6,5,4,1], marker='.', linestyle='-.', color='#59A41F') ax.set_title('My Random Values') ax.set_xlabel('Order in Sequence') ax.set_ylabel('Value') List of marker styles {'': 'nothing', ' ': 'nothing', '*': 'star', '+': 'plus', ',': 'pixel', '.': 'point', 0: 'tickleft', '1': 'tri_down', 1: 'tickright', 10: 'caretupbase', 11: 'caretdownbase', '2': 'tri_up', 2: 'tickup', '3': 'tri_left', 3: 'tickdown', '4': 'tri_right', 4: 'caretleft', 5: 'caretright', 6: 'caretup', 7: 'caretdown', '8': 'octagon', 8: 'caretleftbase', 9: 'caretrightbase', '<': 'triangle_left', '>': 'triangle_right', 'D': 'diamond', 'H': 'hexagon2', 'None': 'nothing', None: 'nothing', 'P': 'plus_filled', 'X': 'x_filled', '^': 'triangle_up', '_': 'hline', 'd': 'thin_diamond', 'h': 'hexagon1', 'o': 'circle', 'p': 'pentagon', 's': 'square', 'v': 'triangle_down', 'x': 'x', '|': 'vline'} ``` List of line styles {'': '_draw_nothing', ' ': '_draw_nothing', '-': '_draw_solid', '--': '_draw_dashed', '-.': '_draw_dash_dot', ':': '_draw_dotted', 'None': '_draw_nothing'} ``` List of base colors {'b': (0, 0, 1), 'c': (0, 0.75, 0.75), 'g': (0, 0.5, 0), 'k': (0, 0, 0), 'm': (0.75, 0, 0.75), 'r': (1, 0, 0), 'w': (1, 1, 1), 'y': (0.75, 0.75, 0)} list access import matplotlib as mp mp.markers.MarkerStyle.markers mp.lines.lineStyles mp.colors.BASE_COLORS Taking these long lists of available parameters, I'm going to play around with a few and see how they appear in our plot. import matplotlib as mp mp . markers . MarkerStyle . markers # mp.lines.lineStyles # mp.colors.BASE_COLORS {'': 'nothing', ' ': 'nothing', '*': 'star', '+': 'plus', ',': 'pixel', '.': 'point', 0: 'tickleft', '1': 'tri_down', 1: 'tickright', 10: 'caretupbase', 11: 'caretdownbase', '2': 'tri_up', 2: 'tickup', '3': 'tri_left', 3: 'tickdown', '4': 'tri_right', 4: 'caretleft', 5: 'caretright', 6: 'caretup', 7: 'caretdown', '8': 'octagon', 8: 'caretleftbase', 9: 'caretrightbase', '<': 'triangle_left', '>': 'triangle_right', 'D': 'diamond', 'H': 'hexagon2', 'None': 'nothing', None: 'nothing', 'P': 'plus_filled', 'X': 'x_filled', '^': 'triangle_up', '_': 'hline', 'd': 'thin_diamond', 'h': 'hexagon1', 'o': 'circle', 'p': 'pentagon', 's': 'square', 'v': 'triangle_down', 'x': 'x', '|': 'vline'} plt . plot ([ 1 , 2 , 3 ], [ 4 , 5 , 6 ]) plt . title ( 'title' ) Text(0.5, 1.0, 'title') ax . title Text(0.5, 1.0, '') fig , ax = plt . subplots ( 1 , 1 , figsize = ( 5 , 5 )) ax . plot ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ],[ 1 , 1 , 2 , 3 , 5 , 8 , 13 ], marker = 's' , linestyle = ':' , color = 'tab:blue' ) ax . plot ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ],[ 0 , 3 , 8 , 6 , 5 , 4 , 1 ], marker = '.' , linestyle = '-.' , color = '#3E1515' ) ax . set_title ( 'My Random Values' ) ax . set_xlabel ( 'Order in Sequence' ) ax . set_ylabel ( 'Value' ) Text(0, 0.5, 'Value') If we want to make a scatter plot without any lines at all, we set the linestyle to an empty string fig, ax = plt.subplots(1,1, figsize=(5,5)) plt.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13], marker='*', linestyle='', color='tab:green') ax.set_title('The Fibonacci Sequence') ax.set_xlabel('Order in Sequence') ax.set_ylabel('Value') fig , ax = plt . subplots ( 1 , 1 , figsize = ( 5 , 5 )) plt . plot ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ],[ 1 , 1 , 2 , 3 , 5 , 8 , 13 ], marker = 'h' , linestyle = '' , ms = 10 , color = 'tab:green' ) ax . set_title ( 'The Fibonacci Sequence' ) ax . set_xlabel ( 'Order in Sequence' ) ax . set_ylabel ( 'Value' ) Text(0, 0.5, 'Value')","title":"4.1.2 Manipulating Plot Attributes"},{"location":"S4_Object_Oriented_Programming/#exercise-2-choose-lines-colors-and-markers","text":"Recreate the \"My Random Values\" plot with a variety of markers, linestyles, and colors. (Bonus) Can you set the markers and lines to colors belonging to the Tableau 20? Try it with and without the hex values! Plotting building blocks for Exercise 2: * marker='' * linestyle='' * color='' # Cell for Exercise 2 ### DO NOT CHANGE BELOW ### x = [1,2,3,4,5,6,7] y1 = [1,1,2,3,5,8,13] y2 = [0,3,8,6,5,4,1] y3 = [10,15,12,9,3,2,1] y4 = [2,4,2,1,2,4,5] fig, ax = plt.subplots(1,1, figsize=(5,5)) ax.set_title('My Random Values') ax.set_xlabel('Order in Sequence') ax.set_ylabel('Value') ### END OF DO NOT CHANGE ### ### change these lines w/ marker, linestyle, color attributes ax.plot(x,y1) ax.plot(x,y2) ax.plot(x,y3) ax.plot(x,y4) # Cell for Exercise 2 ### DO NOT CHANGE BELOW ### x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] y1 = [ 1 , 1 , 2 , 3 , 5 , 8 , 13 ] y2 = [ 0 , 3 , 8 , 6 , 5 , 4 , 1 ] y3 = [ 10 , 15 , 12 , 9 , 3 , 2 , 1 ] y4 = [ 2 , 4 , 2 , 1 , 2 , 4 , 5 ] fig , ax = plt . subplots ( 1 , 1 , figsize = ( 5 , 5 )) ax . set_title ( 'My Random Values' ) ax . set_xlabel ( 'Order in Sequence' ) ax . set_ylabel ( 'Value' ) ### END OF DO NOT CHANGE ### ### change these lines w/ marker, linestyle, color attributes ax . plot ( x , y1 ) ax . plot ( x , y2 ) ax . plot ( x , y3 ) ax . plot ( x , y4 ) [<matplotlib.lines.Line2D at 0x7fcd316d14d0>]","title":"Exercise 2: Choose Lines, Colors, and Markers"},{"location":"S4_Object_Oriented_Programming/#413-subplots","text":"Remember that fig, ax = plt.subplots() satement we used earlier? We're now going to use that same approach but this time, the second variable that is returned (what we call ax in the cell bellow) is no longer an axes object! Instead, it is an array of axes objects. I'm also going to introduce another module, random , to generate some random values import random fig, ax = plt.subplots(2, 2, figsize=(10,10)) ax[0,1].plot(range(10), [random.random() for i in range(10)], c='tab:orange') ax[1,0].plot(range(10), [random.random() for i in range(10)], c='tab:green') ax[1,1].plot(range(10), [random.random() for i in range(10)], c='tab:red') ax[0,0].plot(range(10), [random.random() for i in range(10)], c='tab:blue') quick note: In the above cell we use something called list comprehension to quickly populate a list of objects (in this case those objects are floats). We won't dive too deeply into that now, but you can think of list comprehension as a more concise way of writing a for() loop. In future cases where list comprehension appears in this notebook I will include code snipets of the corresponding for loop. import random # this list comprehension print([random.random() for i in range(10)]) # produces the same output as this for loop ls = [] for i in range(10): ls.append(random.random()) print(ls) import random random . seed ( 42 ) # this list comprehension print ([ random . random () for i in range ( 10 )]) random . seed ( 42 ) # produces the same output as this for loop ls = [] for i in range ( 10 ): ls . append ( random . random ()) print ( ls ) [0.6394267984578837, 0.025010755222666936, 0.27502931836911926, 0.22321073814882275, 0.7364712141640124, 0.6766994874229113, 0.8921795677048454, 0.08693883262941615, 0.4219218196852704, 0.029797219438070344] [0.6394267984578837, 0.025010755222666936, 0.27502931836911926, 0.22321073814882275, 0.7364712141640124, 0.6766994874229113, 0.8921795677048454, 0.08693883262941615, 0.4219218196852704, 0.029797219438070344] The second thing we'll need to talk about is the grid of the ax object fig , ax = plt . subplots ( 2 , 2 ) ax . shape (2, 2) ax array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7fcd316f9210>, <matplotlib.axes._subplots.AxesSubplot object at 0x7fcd316490d0>], [<matplotlib.axes._subplots.AxesSubplot object at 0x7fcd315fb710>, <matplotlib.axes._subplots.AxesSubplot object at 0x7fcd315b0d50>]], dtype=object) This is exactly like accessing a matrix: matrix[row,column] = element we have the pandas equivalent: df.iloc[0,1] = element import random fig , ax = plt . subplots ( 2 , 2 , figsize = ( 10 , 10 )) ax [ 0 , 0 ] . plot ( range ( 10 ), [ random . random () for i in range ( 10 )], c = 'tab:blue' ) ax [ 0 , 1 ] . plot ( range ( 10 ), [ random . random () for i in range ( 10 )], c = 'tab:orange' ) ax [ 1 , 0 ] . plot ( range ( 10 ), [ random . random () for i in range ( 10 )], c = 'tab:green' ) ax [ 1 , 1 ] . plot ( range ( 10 ), [ random . random () for i in range ( 10 )], c = 'tab:red' ) [<matplotlib.lines.Line2D at 0x7fcd313e3a50>]","title":"4.1.3 Subplots"},{"location":"S4_Object_Oriented_Programming/#exercise-3-subplots","text":"Create a 2x1 figure where the first axes is a plot of the fibonacci sequence up to the 10th sequence value and the second axes is a plot of 10 random integers with values between 10 and 20 (exclusive). Use different markers, colors, and lines for each plot. Since the focus of this tutorial is on visualization, I'll go ahead and provide my own code for generating random integers between 10 and 20 (exclusive). If you have extra time, prove to yourself that this code works! (remember docstrings are your friend!) import random [round(random.random() * 8) + 11 for i in range(10)] # Cell for Exercise 3 ### DO NOT CHANGE ### import random # create the fig, ax objects fig, ax = plt.subplots(1, 2, figsize=(10, 5)) # generate x, y1, and y2 x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y1 = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55] y2 = [round(random.random() * 8) + 11 for i in range(10)] ### END OF DO NOT CHANGE ### # Note: no skeleton code here is given for the figure, I want you to write this # code out yourself. Here is pseudo-code to get you started: # plot the left axes, set the title and axes labels # title: Fibonacci Sequence; xlabel: x values; ylabel: y values ### YOUR CODE HERE ### # plot the right axes, set the title and axes labels # title: My Random Values; xlabel: x values; ylabel: y values ### YOUR CODE HERE ### # Cell for Exercise 3 ### DO NOT CHANGE ### import random # create the fig, ax objects fig , ax = plt . subplots ( 1 , 2 , figsize = ( 10 , 5 )) # generate x, y1, and y2 x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] y1 = [ 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 ] y2 = [ round ( random . random () * 8 ) + 11 for i in range ( 10 )] ### END OF DO NOT CHANGE ### # Note: no skeleton code here is given for the figure, I want you to write this # code out yourself. Here is pseudo-code to get you started: # plot the left axes, set the title and axes labels # title: Fibonacci Sequence; xlabel: x values; ylabel: y values ### YOUR CODE HERE ### # plot the right axes, set the title and axes labels # title: My Random Values; xlabel: x values; ylabel: y values ### YOUR CODE HERE ###","title":"Exercise 3: Subplots"},{"location":"S4_Object_Oriented_Programming/#42-visualization-with-pandas","text":"Now lets discover the power of pandas plots! While the objectives of the exercizes may be to make certain visualizations, throughout our experience we'll be using pandas tricks to create the data splices we need, so in the following is a mix of new plotting stuff, with pandas data selection/splicing stuff. We're also going to import a new module called seaborn . It is another plotting library based off matplotlib . We're going to use it to pull some stylistic features. import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from sklearn.datasets import load_boston import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from ipywidgets import interact The following few cells should look familiar from last tutorial session, we're going to use some essential pandas methods to get a general sense of what our dataset looks like There are many ways to construct a dataframe, as an exercise, you might think of otherways to perform that task here. df = pd.read_csv(\"https://raw.githubusercontent.com/wesleybeckner/ds_for_engineers/main/data/wine_quality/winequalityN.csv\") df.describe() # In your subsequent time with pandas you'll discover that there are a host of # ways to populate a dataframe. In the following, I can create a dataframe # simply by using read_csv because the data is formated in a way that # pandas can easily intuit. df = pd . read_csv ( \"https://raw.githubusercontent.com/wesleybeckner/\" \\ \"technology_explorers/main/assets/imdb_movies.csv\" ) /usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (3) have mixed types.Specify dtype option on import or set low_memory=False. interactivity=interactivity, compiler=compiler, result=result) # we check the shape of our data to see if its as we expect df . shape (85855, 22) # we check the column names df . columns Index(['imdb_title_id', 'title', 'original_title', 'year', 'date_published', 'genre', 'duration', 'country', 'language', 'director', 'writer', 'production_company', 'actors', 'description', 'avg_vote', 'votes', 'budget', 'usa_gross_income', 'worlwide_gross_income', 'metascore', 'reviews_from_users', 'reviews_from_critics'], dtype='object') Lets start by looking at basic description of our data. This gives us a sense of what visualizations we can employ to begin understanding our dataset. df . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } duration avg_vote votes metascore reviews_from_users reviews_from_critics count 85855.000000 85855.000000 8.585500e+04 13305.000000 78258.000000 74058.000000 mean 100.351418 5.898656 9.493490e+03 55.896881 46.040826 27.479989 std 22.553848 1.234987 5.357436e+04 17.784874 178.511411 58.339158 min 41.000000 1.000000 9.900000e+01 1.000000 1.000000 1.000000 25% 88.000000 5.200000 2.050000e+02 43.000000 4.000000 3.000000 50% 96.000000 6.100000 4.840000e+02 57.000000 9.000000 8.000000 75% 108.000000 6.800000 1.766500e+03 69.000000 27.000000 23.000000 max 808.000000 9.900000 2.278845e+06 100.000000 10472.000000 999.000000 df . loc [:, df . dtypes == object ] . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre country language director writer production_company actors description budget usa_gross_income worlwide_gross_income count 85855 85855 85855 85855 85855 85855 85791 85022 85768 84283 81400 85786 83740 23710 15326 31016 unique 85855 82094 80852 168 22012 1257 4907 4377 34733 66859 32050 85729 83611 4642 14857 30414 top tt0131549 Anna Anna 2017 2010 Drama USA English Jes\u00fas Franco Jing Wong Metro-Goldwyn-Mayer (MGM) Nobuyo \u00d4yama, Noriko Ohara, Michiko Nomura, Ka... The story of $ 1000000 $ 1000000 $ 8144 freq 1 10 10 3223 113 12543 28511 35939 87 84 1284 9 15 758 19 15 The first thing we notice is that all the data is numerical that we can pull standard statistical information from (mean, std, max, etc.) What kind of visualizations do you think of with data like this? I tend to think of scatter, box, and histogram plots for numerical data and bar or sunburst charts for categorical data.","title":"4.2 Visualization with Pandas"},{"location":"S4_Object_Oriented_Programming/#421-scatter-plots","text":"The way to generate a plot in the fewest keystrokes is to simply call the plot() method within the dataframe object df.plot() # the simplest plot we can make is the following so let's start here. # We can generate a figure simply by using the plot() method of our dataframe # object. df . plot () <matplotlib.axes._subplots.AxesSubplot at 0x7fcd186a5390> This gives us a raw view of the data, but here I'd like to introduce some standard plotting steps: recall the fig , ax format we used previously. fig, ax = plt.subplots(1, 1, figsize = (10, 5)) df.plot(ax=ax) fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) df . plot ( ax = ax ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd1dad9950> To make this into a scatter plot, we set the linestyle (or ls) to an empty string, and select a marker type. fig, ax = plt.subplots(1, 1, figsize = (10, 5)) df.plot(ax=ax, linestyle='', marker='.') fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) df . plot ( ax = ax , ls = '' , marker = '.' , ms = 2 ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd1856f350>","title":"4.2.1 Scatter Plots"},{"location":"S4_Object_Oriented_Programming/#exercise-4-scatter-plots-with-pandas","text":"Make a plot of duration vs metascore # Cell for Exercise 4 <matplotlib.axes._subplots.AxesSubplot at 0x7fcd18498ad0>","title":"Exercise 4: Scatter Plots with Pandas"},{"location":"S4_Object_Oriented_Programming/#422-bar-plots","text":"One of the more common methods of depicting aggregate data is bar plots. We almost always see these kinds of plots used to display and compare between averages, but sometimes between singular data values as well. fig, ax = plt.subplots(1, 1, figsize=(10,7.5)) df.groupby('country').filter(lambda x: x.shape[0] > 100).\\ groupby('country')['duration'].mean().sort_values()\\ [-20:].plot(kind='barh', ax=ax) fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 7.5 )) df . groupby ( 'country' ) . filter ( lambda x : x . shape [ 0 ] > 100 ) . \\ groupby ( 'country' )[ 'duration' ] . mean () . sort_values () \\ [ - 20 :] . plot ( kind = 'barh' , ax = ax ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd08681210>","title":"4.2.2 Bar Plots"},{"location":"S4_Object_Oriented_Programming/#423-box-plots","text":"Maybe we thought it was usefull to see the feature data in the scatter plots ( we can visually scan for correlations between feature sets, check outliers, etc.) but perhaps more instructive, is a boxplot. A box plot or boxplot is a statistical method for graphically depicting aggregate data through their quartiles. It will be useful to inspect the boxplot API to see the default behavior for representing the quartiles and outliers. fig, ax = plt.subplots(1, 1, figsize = (10, 5)) df.plot(kind='box', ax=ax) fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 7.5 )) df . groupby ( 'country' ) . filter (( lambda x : ( x . shape [ 0 ] > 100 ) & # filter by number of datapoints ( x [ 'duration' ] . mean () < 100 )) # filter by average movie time ) . boxplot ( by = 'country' , column = 'duration' , rot = 90 , ax = ax ) /usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray return array(a, dtype, copy=False, order=order) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd04c5d9d0>","title":"4.2.3 Box Plots"},{"location":"S4_Object_Oriented_Programming/#424-histograms","text":"What are some other kinds of plots we can make? A good one to be aware of is the histogram. plt.title('Demo Hist') plt.xlabel('Duration') plt.ylabel('Frequency') plt.hist(df['duration']) plt . title ( 'Demo Hist' ) plt . xlabel ( 'Duration' ) plt . ylabel ( 'Frequency' ) plt . hist ( df [ 'duration' ]) (array([7.2368e+04, 1.3197e+04, 2.2800e+02, 4.0000e+01, 1.1000e+01, 4.0000e+00, 4.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00]), array([ 41. , 117.7, 194.4, 271.1, 347.8, 424.5, 501.2, 577.9, 654.6, 731.3, 808. ]), <a list of 10 Patch objects>) df [ 'duration' ] . plot ( kind = 'hist' ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd0471d210>","title":"4.2.4 Histograms"},{"location":"S4_Object_Oriented_Programming/#425-kernel-density-estimates","text":"Another useful plot type for data analysis is the kernel density estimate. You can think of this plot as exactly like a histogram, except instead of creating bins in which to accrue datapoints, you deposit a gaussian distribution around every datapoint in your dataset. By this mechanism, you avoid creating bias in your data summary as you otherwise would be when predifining bin sizes and locations in a histogram. fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) df [ 'duration' ] . plot ( kind = 'kde' , ax = ax ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd046ac7d0>","title":"4.2.5 Kernel Density Estimates"},{"location":"S4_Object_Oriented_Programming/#4251-enrichment-skew-and-tailedness","text":"While we're on the topic of KDEs/histograms and other statistical plots, this is a convenient time to talk about skew and tailedness or, otherwise known as kurtosis df.skew() indicates the skewdness of the data df.kurtosis() indicates the tailedness of the data # from scipy.stats import skewnorm from ipywidgets import FloatSlider slider = FloatSlider ( value = 0.5 , min = 0.5 , max = 5 , step = 0.5 , description = 'Shape:' , disabled = False , continuous_update = False , orientation = 'horizontal' , readout = True , readout_format = '.1f' ) import numpy as np def inspect_kurt_skew ( a = slider ): # theres another hyperparameter, lambda for the center # of weibull. the shape parameter is sometimes called # a, or k fig , ax = plt . subplots ( 1 , 1 , figsize = ( 5 , 5 )) s = np . random . weibull ( a , 1000 ) statdf = pd . DataFrame ( s ) statdf [ 0 ] . plot ( kind = 'kde' , ax = ax ) print ( \"skew: {:.2f} \" . format ( statdf [ 0 ] . skew ())) print ( \"kurtosis: {:.2f} \" . format ( statdf [ 0 ] . kurt ())) interact ( inspect_kurt_skew ) interactive(children=(FloatSlider(value=0.5, continuous_update=False, description='Shape:', max=5.0, min=0.5, \u2026 <function __main__.inspect_kurt_skew>","title":"4.2.5.1 Enrichment: Skew and Tailedness"},{"location":"S4_Object_Oriented_Programming/#426-correlation-plots","text":"Often, we'll want to quantify the strength of a relationship between input variables. We can do this by calculating correlations. We won't go into great detail here about how Pearson's correlation is calculated, but the StatQuest videos on this subject are here for reference (and are really good... if you can stomach Starmer's humor) StatQuest: Correlation StatQuest: Covariance The main takeaway is that pearson's correlation ranges from -1 to 1 and indicates how positively or negatively correlated the variables in question are. For our purposes, this can give insight into what variables will be important in our machine learning model. We can get the pearson's correlation between all the input features using the dataframe.corr() method. Fig: pearson's correlation value and corresponding scatter plot of feature-x and feature-y df . corr () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } duration avg_vote votes metascore reviews_from_users reviews_from_critics duration 1.000000 0.242432 0.125618 0.210531 0.130836 0.135465 avg_vote 0.242432 1.000000 0.166972 0.691338 0.138185 0.200526 votes 0.125618 0.166972 1.000000 0.194730 0.766237 0.671635 metascore 0.210531 0.691338 0.194730 1.000000 0.126131 0.236107 reviews_from_users 0.130836 0.138185 0.766237 0.126131 1.000000 0.671634 reviews_from_critics 0.135465 0.200526 0.671635 0.236107 0.671634 1.000000 So we have this raw table of pearsons correlations between each of our input features, how do we and how should we turn this into a plot? Typically we'd use a heat map on an feature vs feature grid to view this kind of data. In the following I'm going to use some numpy methods you may not have seen before. Links to the documentation for these methods are at the end of the notebook. import numpy as np fig, ax = plt.subplots(1, 1, figsize = (10,10)) # create a mask to white-out the upper triangle mask = np.triu(np.ones_like(df.corr(), dtype=bool)) # we'll want a divergent colormap for this so our eye # is not attracted to the values close to 0 cmap = sns.diverging_palette(230, 20, as_cmap=True) sns.heatmap(df.corr(), mask=mask, cmap=cmap, ax=ax) sns . heatmap ( df . corr ()) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd023a6a10> import numpy as np fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 10 )) # create a mask to white-out the upper triangle mask = np . triu ( np . ones_like ( df . corr (), dtype = bool )) # we'll want a divergent colormap for this so our eye # is not attracted to the values close to 0 cmap = sns . diverging_palette ( 230 , 20 , as_cmap = True ) sns . heatmap ( df . corr (), mask = mask , cmap = cmap , ax = ax ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd0239fc90> What do we notice? looks like reviews and votes are all pretty correlated. Surprising?","title":"4.2.6 Correlation Plots"},{"location":"S4_Object_Oriented_Programming/#43-visualization-with-ipywidgets","text":"","title":"4.3 Visualization with IpyWidgets"},{"location":"S4_Object_Oriented_Programming/#431-interact","text":"Here we're going to introduce a very basic use case of IPython's widgets using interact . The interact method ( ipywidgets.interact ) automatically creates user interface (UI) controls for exploring code and data interactively. It is the easiest way to get started using IPython\u2019s widgets. from ipywidgets import interact def my_plot(col=filtdf.select_dtypes('number').columns): fig, ax = plt.subplots(1,1,figsize=(10,5)) filtdf.boxplot(column=col, by='country', ax=ax) interact(my_plot) def my_plot ( col = filtdf . select_dtypes ( 'number' ) . columns ): fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) filtdf . boxplot ( column = col , by = 'country' , ax = ax ) After defining our function that returns our plot, and defining input parameters for the fields we would like to interact with, we call our function with interact interact(my_plot) Let's say we want to look at information from the IMDb data based on country. Because there are so many countries in the database, let's filter it down to only the top 5 countries. How could we do this using value_counts ? Let's try this below top_5_countries = df [ 'country' ] . value_counts ()[: 5 ] . keys () # get list of top 5 countries filtdf = df . loc [ df [ 'country' ] . isin ( top_5_countries )] # only select rows whose country is in the list filtdf . boxplot ( column = 'duration' , by = 'country' ) /usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray return array(a, dtype, copy=False, order=order) <matplotlib.axes._subplots.AxesSubplot at 0x7fccddd7dc90> interact ( my_plot ) interactive(children=(Dropdown(description='col', options=('duration', 'avg_vote', 'votes', 'metascore', 'revi\u2026 <function __main__.my_plot> Let's break this down. Normally, I would just set my y-variable to a value, so that when I call my function, my figure is generated with the corresponding data field: def my_plot ( col = 'duration' ): fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) filtdf . boxplot ( column = col , by = 'country' , ax = ax ) my_plot () /usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray return array(a, dtype, copy=False, order=order) Instead, we want to give interact() a list of values for the user to select from, this is the difference between a regular function, and one we might feed into interact. y = ['duration', 'avg_vote', 'votes', 'metascore', 'reviews_from_users', 'reviews_from_critics'] list ( filtdf . select_dtypes ( 'number' ) . columns ) ['duration', 'avg_vote', 'votes', 'metascore', 'reviews_from_users', 'reviews_from_critics']","title":"4.3.1 Interact"},{"location":"S4_Object_Oriented_Programming/#exercise-5-ipywidgets-and-figures-in-functions","text":"In the previous section we created a single dropdown menu to select our y variable for our plot. Here, we would like to do the same thing, but this time filter your dataframe for only the top 10 directors that most frequently occur in the IMDb datafile. When you build the interactive plot, grouby director this time instead of country. # Code block for Exercise 5 interact ( my_plot ) interactive(children=(Dropdown(description='col', options=('duration', 'avg_vote', 'votes', 'metascore', 'revi\u2026 <function __main__.my_plot>","title":"Exercise 5: IpyWidgets and Figures in Functions"},{"location":"S4_Object_Oriented_Programming/#part-2-object-oriented-programming","text":"","title":"Part 2: Object Oriented Programming"},{"location":"S4_Object_Oriented_Programming/#51-classes-instances-methods-and-attribtues","text":"A class is created with the reserved word class A class can have attributes # define a class class MyClass : some_attribute = 5 We use the class blueprint MyClass to create an instance We can now access attributes belonging to that class: # create instance instance = MyClass () # access attributes of the instance of MyClass instance . some_attribute 5 attributes can be changed: instance . some_attribute = 50 instance . some_attribute 50 In practice we always use the __init__() function, which is executed when the class is being initiated. class Pokeball : def __init__ ( self , contains = None , type_name = \"poke ball\" ): self . contains = contains self . type_name = type_name self . catch_rate = 0.50 # note this attribute is not accessible upon init # empty pokeball pokeball1 = Pokeball () # used pokeball of a different type pokeball1 = Pokeball ( \"Pikachu\" , \"master ball\" ) > what is the special keyword [`self`](http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html) doing? The `self` parameter is a reference to the current instance of the class and is used to access variables belonging to the class. classes can also contain methods import random class Pokeball : def __init__ ( self , contains = None , type_name = \"poke ball\" ): self . contains = contains self . type_name = type_name self . catch_rate = 0.50 # note this attribute is not accessible upon init # the method catch, will update self.contains, if a catch is successful # it will also use self.catch_rate to set the performance of the catch def catch ( self , pokemon ): if self . contains == None : if random . random () < self . catch_rate : self . contains = pokemon print ( f \" { pokemon } captured!\" ) else : print ( f \" { pokemon } escaped!\" ) pass else : print ( \"pokeball is not empty!\" ) pokeball = Pokeball () pokeball . catch ( \"picachu\" ) picachu captured! pokeball . contains 'picachu' ### Q1 Create a release method for the class Pokeball: ## 5.2 Inheritance Inheritance allows you to adopt into a child class, the methods/attributes of a parent class class MasterBall ( Pokeball ): pass masterball = MasterBall () masterball . type_name 'poke ball' HMMM we don't like that type name. let's make sure we change some of the inherited attributes! We'll do this again with the `__init__` function class MasterBall ( Pokeball ): def __init__ ( self , contains = None , type_name = \"Masterball\" , catch_rate = 0.8 ): self . contains = contains self . type_name = type_name self . catch_rate = catch_rate masterball = MasterBall () masterball . type_name 'Masterball' masterball . catch ( \"charmander\" ) charmander captured! We can also write this, this way: class MasterBall ( Pokeball ): def __init__ ( self , contains = None , type_name = \"Masterball\" ): Pokeball . __init__ ( self , contains , type_name ) self . catch_rate = 0.8 masterball = MasterBall () masterball . type_name 'Masterball' masterball = MasterBall () masterball . catch ( \"charmander\" ) charmander captured! The keyword `super` will let us write even more succintly: class MasterBall ( Pokeball ): def __init__ ( self , contains = None , type_name = \"Masterball\" ): super () . __init__ ( contains , type_name ) self . catch_rate = 0.8 masterball = MasterBall () masterball . catch ( \"charmander\" ) charmander captured! ### Q2 Write another class object called `GreatBall` that inherits the properties of `Pokeball`, has a `catch_rate` of 0.6, and `type_name` of Greatball # Code Cell for L2 Q2 ## 5.3 Interacting Objects ### Q3 Write another class object called `Pokemon`. It has the [attributes](https://bulbapedia.bulbagarden.net/wiki/Type): * name * weight * speed * type Now create a class object called `FastBall`, it inherits the properties of `Pokeball` but has a new condition on `catch` method: if pokemon.speed > 100 then there is 100% chance of catch success. > what changes do you have to make to the way we've been interacting with pokeball to make this new requirement work? # Code Cell for L2 Q3 ### Q4 In the above task, did you have to write any code to test that your new classes worked?! We will talk about that more at a later time, but for now, wrap any testing that you did into a new function called `test_classes` in the code cell below # Code Cell for L2 Q4 # References * [`numpy.triu`](https://numpy.org/doc/stable/reference/generated/numpy.triu.html) * [`numpy.ones_like`](https://numpy.org/doc/stable/reference/generated/numpy.ones_like.html) * [`ipywidgets`](https://ipywidgets.readthedocs.io/en/latest/) * [StatQuest: Correlation](https://youtu.be/xZ_z8KWkhXE?t=822) * [StatQuest: Covariance](https://www.youtube.com/watch?v=qtaqvPAeEJY&ab_channel=StatQuestwithJoshStarmer) # Enrichment Topics ## 4.4 Other Plot Types ### 4.4.1 Bar Plots (Advanced) Similar to how we created bar plots with pandas, we can use matplotlib to make barplots pokemon = ['Charmander', 'Pikachu', 'Squirtle', 'Bulbasaur'] hp = [10, 12, 8, 16] plt.bar(pokemon, hp, color='tab:blue') plt.title('Pokemon HP') plt.xlabel('Pokemon') plt.ylabel('HP') pokemon = [ 'Charmander' , 'Pikachu' , 'Squirtle' , 'Bulbasaur' ] hp = [ 10 , 12 , 8 , 16 ] plt . bar ( pokemon , hp , color = 'tab:blue' ) plt . title ( 'Pokemon HP' ) plt . xlabel ( 'Pokemon' ) plt . ylabel ( 'HP' ) Text(0, 0.5, 'HP') ![png](S4_Object_Oriented_Programming_files/S4_Object_Oriented_Programming_130_1.png) Doing the same but with horizontally oriented bars pokemon = ['Charmander', 'Pikachu', 'Squirtle', 'Bulbasaur'] hp = [10, 12, 8, 16] plt.barh(pokemon, hp, color='tab:blue') plt.title('Pokemon HP') plt.ylabel('Pokemon') plt.xlabel('HP') pokemon = [ 'Charmander' , 'Pikachu' , 'Squirtle' , 'Bulbasaur' ] hp = [ 10 , 12 , 8 , 16 ] plt . barh ( pokemon , hp , color = 'tab:blue' ) plt . title ( 'Pokemon HP' ) plt . ylabel ( 'Pokemon' ) plt . xlabel ( 'HP' ) Text(0.5, 0, 'HP') ![png](S4_Object_Oriented_Programming_files/S4_Object_Oriented_Programming_132_1.png) We can also add error bars pokemon = ['Charmander', 'Pikachu', 'Squirtle', 'Bulbasaur'] hp = [10, 12, 8, 16] variance = [i * random.random()*.25 for i in hp] plt.barh(pokemon, hp, xerr=variance, color='tab:blue') plt.title('Pokemon HP') plt.ylabel('Pokemon') plt.xlabel('HP') for loop version of list comprehension hp = [10, 12, 8, 16] variance = [] for i in hp: variance.append(i * random.random()*.25) print(variance) pokemon = [ 'Charmander' , 'Pikachu' , 'Squirtle' , 'Bulbasaur' ] hp = [ 10 , 12 , 8 , 16 ] variance = [ i * random . random () * .25 for i in hp ] plt . barh ( pokemon , hp , xerr = variance , color = 'tab:blue' ) plt . title ( 'Pokemon HP' ) plt . ylabel ( 'Pokemon' ) plt . xlabel ( 'HP' ) Text(0.5, 0, 'HP') ![png](S4_Object_Oriented_Programming_files/S4_Object_Oriented_Programming_134_1.png) ### 4.4.2 3D Plots You can also create 3D plots in matplotlib using `ax.scatter3D` ax = plt.axes(projection='3d') ax.scatter3D(range(10),[i*random.random()*.25 for i in range(10)]) for loop version of list comprehension: ls = [] for i in range(10): ls.append(i*random.random()*.25) print(ls) ax = plt . axes ( projection = '3d' ) ax . scatter3D ( range ( 10 ),[ i * random . random () * .25 for i in range ( 10 )]) ![png](S4_Object_Oriented_Programming_files/S4_Object_Oriented_Programming_136_1.png) ## 4.5 Visualization with Plotly Another great plotting library, that is gaining in popularity (especially in enterprise settings) is plotly. As an added exercise, if you have additional time, explore some of the [plotly examples](https://plotly.com/python/) then recreate the breakout room assignment using plotly instead of matplotlib. ### 4.5.1 Scatter Plot with Size and Color import plotly.express as px x = 'quality' y = 'alcohol' color = 'quality' size = 'alcohol' corr = df . corr () pearson = corr [ x ][ y ] fig = px . scatter ( df , x = x , y = y , color = color , size = size , title = ' {} vs {} ( {:.2f} corr)' . format ( x , y , pearson ), width = 800 , height = 800 ) fig . show () if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} window.PlotlyConfig = {MathJaxConfig: 'local'}; window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"9fe7e498-9dd8-4f23-b6dc-b2f404ecb8f4\")) { Plotly.newPlot( '9fe7e498-9dd8-4f23-b6dc-b2f404ecb8f4', [{\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"quality=%{marker.color}<br>alcohol=%{marker.size}\", \"legendgroup\": \"\", \"marker\": {\"color\": [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 7, 5, 7, 6, 8, 6, 5, 8, 7, 8, 5, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 6, 7, 4, 5, 6, 5, 6, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 7, 5, 8, 5, 6, 5, 5, 6, 8, 5, 7, 7, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 6, 5, 7, 7, 7, 6, 6, 7, 4, 6, 5, 5, 5, 5, 5, 6, 5, 6, 6, 5, 6, 5, 5, 5, 5, 4, 6, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 7, 7, 6, 5, 7, 5, 5, 5, 5, 6, 5, 7, 6, 5, 5, 6, 6, 6, 6, 6, 4, 7, 6, 7, 6, 6, 5, 6, 6, 6, 7, 8, 8, 7, 5, 5, 6, 5, 5, 6, 7, 5, 5, 6, 6, 4, 7, 5, 6, 4, 5, 4, 6, 6, 5, 5, 6, 5, 5, 6, 5, 8, 4, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 4, 5, 5, 4, 5, 6, 5, 7, 5, 6, 7, 5, 5, 5, 5, 5, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 4, 6, 6, 6, 6, 6, 6, 6, 7, 6, 5, 5, 7, 6, 5, 6, 7, 7, 7, 5, 4, 3, 5, 3, 6, 8, 7, 7, 6, 4, 6, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 5, 5, 5, 6, 6, 5, 4, 7, 8, 8, 4, 5, 5, 5, 6, 7, 7, 7, 7, 6, 5, 7, 3, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 7, 6, 7, 8, 6, 6, 5, 6, 6, 5, 7, 6, 7, 5, 6, 6, 5, 5, 6, 6, 6, 5, 8, 5, 6, 5, 5, 6, 6, 6, 5, 7, 7, 6, 6, 5, 6, 6, 7, 6, 6, 5, 7, 7, 6, 7, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 7, 6, 6, 6, 5, 6, 6, 5, 6, 7, 7, 7, 7, 6, 7, 7, 6, 6, 6, 7, 7, 7, 5, 6, 7, 7, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 5, 5, 5, 6, 5, 7, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 7, 6, 6, 6, 7, 6, 6, 5, 5, 5, 5, 5, 7, 4, 8, 7, 5, 8, 7, 5, 7, 6, 8, 6, 6, 3, 5, 6, 6, 7, 5, 5, 7, 7, 7, 6, 7, 5, 6, 5, 5, 5, 5, 6, 5, 5, 6, 6, 5, 5, 6, 5, 6, 7, 6, 5, 7, 6, 6, 6, 5, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 4, 6, 5, 4, 6, 6, 6, 5, 6, 6, 5, 7, 6, 7, 6, 6, 6, 6, 7, 6, 5, 6, 6, 5, 5, 5, 6, 6, 5, 6, 4, 6, 6, 6, 6, 5, 6, 6, 6, 5, 5, 6, 5, 6, 4, 5, 6, 6, 6, 6, 6, 6, 7, 5, 7, 7, 7, 7, 7, 7, 5, 6, 5, 6, 7, 5, 6, 7, 5, 6, 6, 5, 6, 6, 5, 7, 5, 7, 7, 6, 6, 7, 7, 7, 5, 5, 6, 6, 7, 6, 6, 7, 7, 6, 5, 6, 5, 5, 5, 7, 5, 6, 8, 7, 6, 6, 5, 5, 6, 6, 5, 5, 5, 6, 8, 6, 5, 5, 5, 5, 7, 6, 6, 6, 5, 5, 6, 5, 5, 8, 4, 6, 6, 6, 5, 5, 6, 5, 6, 6, 7, 5, 5, 5, 7, 4, 6, 5, 5, 5, 4, 6, 5, 7, 7, 7, 7, 6, 7, 6, 6, 5, 5, 4, 5, 7, 4, 5, 6, 5, 6, 6, 6, 5, 6, 6, 8, 6, 5, 6, 6, 7, 7, 7, 5, 5, 6, 5, 5, 5, 7, 4, 6, 7, 4, 6, 5, 5, 6, 5, 6, 5, 5, 5, 5, 7, 4, 6, 6, 5, 5, 6, 6, 5, 5, 6, 6, 5, 6, 7, 6, 5, 7, 7, 5, 5, 6, 8, 7, 5, 7, 5, 5, 5, 6, 6, 7, 6, 5, 6, 6, 5, 7, 6, 3, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 5, 6, 7, 7, 6, 6, 5, 6, 6, 6, 5, 6, 7, 7, 7, 7, 7, 5, 9, 6, 6, 5, 7, 8, 4, 6, 7, 8, 5, 6, 6, 6, 7, 6, 6, 7, 5, 7, 5, 5, 6, 6, 6, 8, 6, 5, 5, 7, 6, 6, 5, 6, 6, 6, 5, 6, 7, 6, 6, 5, 5, 5, 5, 5, 9, 6, 5, 6, 5, 6, 6, 9, 7, 7, 6, 4, 8, 6, 6, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 5, 5, 7, 6, 7, 5, 7, 5, 7, 7, 5, 5, 7, 5, 8, 7, 6, 6, 5, 6, 7, 8, 7, 6, 5, 5, 6, 3, 5, 7, 9, 6, 6, 8, 7, 6, 6, 6, 6, 7, 6, 7, 6, 7, 6, 7, 5, 7, 7, 6, 6, 6, 6, 6, 7, 6, 5, 6, 8, 4, 4, 8, 4, 5, 5, 5, 5, 5, 4, 5, 7, 6, 6, 7, 7, 6, 6, 6, 8, 5, 5, 7, 5, 5, 7, 5, 6, 5, 5, 5, 5, 5, 6, 7, 5, 6, 7, 7, 7, 7, 5, 5, 4, 5, 5, 6, 6, 5, 6, 5, 5, 7, 7, 6, 6, 7, 6, 6, 6, 5, 6, 6, 7, 7, 7, 7, 6, 7, 6, 5, 6, 5, 7, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 7, 6, 4, 5, 4, 6, 6, 5, 6, 6, 7, 7, 5, 6, 7, 6, 6, 6, 5, 7, 6, 6, 7, 6, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 6, 6, 6, 6, 4, 7, 4, 6, 6, 6, 6, 3, 6, 5, 5, 7, 5, 4, 5, 4, 5, 7, 5, 5, 5, 5, 6, 5, 6, 5, 4, 5, 5, 6, 5, 6, 4, 7, 5, 5, 5, 6, 5, 6, 7, 7, 6, 7, 5, 7, 5, 6, 7, 6, 5, 5, 6, 7, 6, 6, 6, 7, 5, 8, 8, 6, 7, 6, 6, 6, 7, 5, 8, 6, 7, 6, 7, 6, 6, 5, 5, 5, 7, 8, 7, 7, 4, 7, 6, 6, 5, 4, 8, 5, 5, 5, 5, 6, 6, 7, 5, 5, 6, 7, 7, 5, 7, 6, 6, 5, 5, 5, 6, 8, 8, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 4, 6, 4, 4, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 5, 6, 5, 6, 6, 5, 6, 5, 6, 5, 7, 6, 5, 5, 5, 6, 5, 6, 7, 5, 5, 8, 6, 5, 6, 7, 6, 7, 6, 6, 7, 7, 6, 7, 6, 7, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 8, 5, 8, 8, 6, 7, 6, 5, 7, 6, 7, 5, 6, 3, 6, 7, 7, 6, 6, 5, 6, 5, 7, 5, 6, 7, 7, 7, 5, 4, 7, 6, 7, 5, 7, 5, 6, 7, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 8, 7, 5, 6, 7, 5, 5, 5, 6, 6, 7, 5, 6, 6, 6, 7, 5, 8, 7, 6, 7, 7, 7, 6, 6, 6, 6, 4, 4, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 7, 8, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 7, 6, 6, 6, 5, 5, 6, 7, 8, 6, 6, 8, 5, 5, 6, 6, 5, 6, 6, 8, 8, 7, 7, 8, 4, 7, 7, 6, 5, 5, 5, 6, 6, 8, 7, 6, 7, 7, 4, 5, 7, 6, 5, 6, 5, 6, 7, 6, 6, 7, 7, 6, 6, 7, 6, 7, 7, 6, 6, 6, 5, 7, 6, 7, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 6, 7, 6, 8, 8, 5, 4, 8, 6, 7, 6, 6, 6, 8, 6, 6, 5, 6, 3, 5, 7, 4, 6, 5, 4, 6, 6, 6, 5, 7, 5, 4, 5, 7, 6, 5, 5, 5, 7, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 7, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 8, 5, 6, 7, 5, 5, 7, 6, 5, 6, 4, 6, 5, 6, 6, 6, 6, 6, 6, 4, 3, 6, 6, 6, 6, 5, 6, 5, 5, 8, 8, 7, 5, 7, 6, 6, 7, 5, 5, 7, 8, 7, 6, 6, 6, 5, 5, 6, 7, 6, 7, 6, 6, 6, 6, 5, 6, 5, 5, 6, 6, 5, 6, 6, 6, 6, 5, 7, 7, 6, 6, 6, 5, 6, 6, 6, 6, 4, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 4, 4, 6, 5, 7, 6, 5, 6, 5, 5, 6, 5, 5, 6, 6, 5, 4, 6, 6, 4, 5, 4, 5, 6, 7, 5, 6, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 7, 5, 9, 6, 7, 5, 7, 6, 6, 7, 7, 5, 6, 6, 6, 6, 8, 7, 5, 6, 6, 7, 6, 6, 5, 6, 6, 5, 6, 8, 7, 6, 6, 5, 6, 5, 5, 5, 6, 7, 7, 7, 7, 6, 7, 5, 4, 7, 6, 4, 6, 5, 5, 5, 6, 5, 5, 6, 6, 7, 6, 4, 8, 5, 6, 7, 6, 6, 7, 5, 5, 6, 5, 7, 6, 6, 5, 5, 6, 7, 7, 7, 7, 5, 7, 3, 6, 4, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 4, 5, 5, 6, 6, 5, 4, 5, 5, 5, 6, 6, 5, 8, 6, 6, 4, 6, 7, 7, 6, 8, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 4, 6, 6, 6, 6, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 6, 6, 5, 5, 5, 5, 6, 6, 7, 6, 5, 5, 5, 5, 5, 7, 6, 6, 6, 6, 6, 6, 5, 6, 8, 8, 5, 4, 6, 6, 7, 6, 7, 7, 5, 7, 5, 5, 6, 5, 5, 6, 5, 8, 6, 6, 6, 5, 6, 6, 6, 5, 5, 6, 5, 6, 6, 5, 6, 6, 7, 6, 7, 4, 6, 6, 6, 5, 7, 6, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7, 6, 5, 6, 7, 6, 6, 5, 7, 6, 6, 6, 5, 5, 5, 5, 6, 7, 6, 7, 5, 7, 6, 4, 5, 5, 6, 6, 6, 7, 5, 6, 6, 6, 6, 7, 7, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 7, 7, 5, 5, 6, 6, 6, 6, 7, 5, 6, 6, 6, 7, 5, 5, 5, 4, 6, 6, 5, 6, 5, 6, 3, 6, 5, 6, 5, 6, 7, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 7, 5, 5, 4, 7, 6, 5, 5, 5, 6, 6, 5, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 6, 7, 5, 5, 5, 6, 5, 6, 6, 6, 8, 8, 8, 8, 8, 6, 6, 5, 6, 7, 4, 8, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 5, 7, 6, 5, 5, 6, 5, 6, 7, 5, 7, 6, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 5, 5, 7, 3, 5, 5, 5, 5, 6, 5, 7, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 6, 7, 6, 6, 5, 5, 6, 5, 5, 6, 6, 4, 5, 5, 6, 5, 6, 6, 5, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 6, 5, 4, 5, 6, 4, 5, 7, 5, 5, 7, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 5, 7, 6, 6, 6, 5, 5, 6, 6, 5, 6, 6, 4, 5, 4, 6, 6, 4, 6, 7, 6, 6, 5, 5, 5, 7, 7, 7, 7, 7, 5, 5, 7, 7, 5, 7, 5, 6, 6, 6, 5, 5, 6, 7, 5, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 5, 6, 5, 6, 5, 5, 5, 5, 6, 7, 5, 6, 7, 6, 6, 6, 5, 6, 5, 6, 6, 7, 6, 6, 7, 6, 7, 4, 5, 5, 7, 6, 7, 6, 6, 5, 5, 6, 5, 4, 6, 6, 5, 5, 5, 5, 5, 7, 4, 6, 6, 5, 6, 7, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 6, 5, 5, 6, 6, 6, 7, 6, 6, 5, 7, 4, 6, 6, 6, 5, 6, 6, 5, 5, 5, 5, 5, 5, 5, 7, 7, 6, 6, 7, 7, 6, 7, 6, 8, 7, 7, 5, 5, 5, 6, 7, 5, 5, 5, 6, 5, 7, 5, 7, 6, 6, 7, 5, 4, 7, 6, 5, 6, 6, 5, 6, 5, 6, 5, 5, 6, 5, 6, 8, 5, 5, 5, 4, 5, 6, 6, 5, 8, 5, 6, 6, 4, 6, 6, 5, 5, 6, 6, 7, 6, 7, 6, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 7, 5, 4, 3, 6, 6, 6, 6, 5, 4, 4, 6, 8, 6, 8, 5, 4, 4, 4, 8, 8, 6, 7, 6, 5, 5, 5, 6, 6, 6, 4, 4, 6, 6, 5, 5, 6, 6, 5, 4, 6, 6, 4, 4, 4, 5, 6, 5, 5, 5, 7, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 5, 5, 6, 6, 4, 5, 6, 5, 6, 5, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 7, 6, 5, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 5, 5, 6, 6, 5, 5, 7, 6, 6, 7, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 4, 4, 5, 5, 5, 5, 6, 5, 5, 4, 4, 6, 6, 6, 7, 6, 5, 6, 6, 6, 5, 7, 7, 6, 6, 7, 5, 5, 7, 8, 5, 5, 8, 7, 6, 6, 5, 6, 4, 4, 5, 7, 6, 6, 6, 6, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 5, 5, 6, 5, 7, 7, 7, 5, 7, 7, 5, 6, 5, 6, 5, 6, 5, 7, 5, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 7, 6, 5, 7, 7, 7, 7, 7, 7, 6, 7, 4, 6, 7, 5, 5, 7, 5, 5, 6, 5, 6, 7, 5, 6, 7, 7, 6, 6, 6, 6, 6, 5, 5, 7, 5, 5, 7, 7, 7, 7, 6, 5, 5, 7, 7, 5, 5, 7, 7, 6, 5, 6, 7, 5, 5, 5, 6, 5, 5, 6, 6, 6, 5, 5, 5, 6, 7, 7, 5, 6, 6, 5, 5, 7, 5, 5, 5, 4, 7, 7, 6, 6, 6, 6, 8, 7, 5, 7, 7, 6, 5, 7, 7, 7, 6, 7, 7, 6, 6, 5, 6, 6, 6, 6, 5, 6, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 5, 5, 5, 6, 6, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 5, 6, 6, 6, 7, 5, 7, 6, 6, 5, 6, 6, 6, 7, 5, 5, 5, 7, 6, 6, 6, 7, 5, 7, 6, 5, 6, 6, 6, 7, 6, 6, 8, 6, 8, 6, 6, 8, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 5, 7, 6, 7, 7, 8, 8, 8, 6, 7, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 7, 5, 8, 7, 5, 7, 7, 5, 5, 6, 8, 8, 6, 5, 5, 6, 7, 7, 5, 6, 7, 7, 5, 5, 7, 4, 6, 5, 5, 5, 6, 6, 6, 6, 7, 7, 5, 5, 5, 6, 7, 6, 6, 6, 6, 7, 7, 6, 6, 6, 6, 5, 7, 7, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 8, 7, 6, 6, 6, 6, 6, 6, 6, 7, 7, 5, 6, 7, 6, 7, 8, 7, 6, 5, 5, 6, 6, 5, 7, 5, 7, 7, 6, 5, 5, 4, 6, 8, 6, 5, 7, 7, 5, 5, 5, 5, 5, 6, 7, 5, 6, 7, 5, 5, 6, 6, 6, 5, 5, 7, 5, 6, 6, 6, 7, 6, 5, 4, 6, 8, 6, 6, 5, 8, 7, 7, 6, 8, 8, 6, 6, 5, 4, 5, 5, 8, 8, 6, 5, 5, 8, 6, 8, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 6, 6, 5, 7, 7, 6, 5, 7, 5, 8, 6, 6, 5, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 6, 6, 6, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 6, 8, 6, 7, 7, 7, 7, 7, 7, 6, 6, 6, 7, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 4, 5, 6, 6, 7, 6, 5, 6, 8, 8, 6, 5, 6, 6, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 5, 4, 5, 7, 5, 6, 6, 5, 5, 5, 6, 5, 5, 8, 5, 5, 6, 5, 4, 6, 8, 8, 7, 6, 5, 5, 7, 5, 5, 5, 5, 6, 5, 6, 7, 6, 6, 7, 3, 6, 7, 6, 6, 6, 7, 6, 6, 7, 5, 7, 7, 7, 6, 6, 7, 5, 6, 6, 6, 5, 4, 6, 7, 5, 6, 6, 6, 7, 7, 7, 5, 6, 5, 6, 5, 6, 5, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 5, 7, 7, 6, 6, 5, 7, 7, 6, 6, 6, 7, 6, 6, 6, 6, 8, 8, 8, 6, 6, 5, 6, 4, 6, 6, 5, 6, 7, 6, 4, 7, 8, 5, 7, 6, 6, 5, 5, 6, 7, 6, 7, 7, 7, 6, 7, 7, 5, 7, 7, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 4, 7, 5, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 6, 7, 5, 7, 6, 7, 6, 7, 7, 5, 6, 6, 7, 7, 6, 6, 8, 8, 5, 6, 6, 6, 6, 6, 6, 5, 7, 8, 6, 3, 6, 6, 6, 5, 5, 7, 7, 7, 5, 4, 8, 7, 5, 6, 5, 6, 7, 6, 6, 7, 7, 7, 6, 5, 5, 8, 5, 7, 6, 5, 5, 5, 6, 7, 5, 8, 6, 7, 7, 7, 7, 3, 6, 7, 7, 7, 7, 7, 6, 7, 6, 6, 7, 5, 5, 6, 7, 6, 6, 7, 5, 7, 5, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 7, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 5, 6, 6, 6, 8, 5, 7, 7, 7, 6, 6, 6, 8, 5, 6, 7, 6, 8, 6, 6, 5, 5, 6, 6, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 3, 7, 6, 6, 6, 7, 7, 6, 4, 6, 7, 5, 8, 8, 5, 6, 6, 6, 6, 6, 5, 6, 6, 5, 7, 6, 6, 6, 5, 5, 5, 5, 5, 7, 6, 5, 8, 6, 6, 7, 8, 7, 7, 5, 6, 5, 6, 5, 7, 7, 6, 6, 8, 6, 7, 5, 6, 6, 5, 8, 6, 8, 6, 6, 8, 6, 6, 8, 7, 6, 7, 8, 5, 8, 7, 8, 7, 6, 6, 6, 8, 7, 6, 7, 7, 6, 7, 7, 6, 6, 7, 7, 6, 5, 7, 7, 7, 6, 7, 5, 6, 6, 7, 6, 6, 6, 7, 7, 7, 5, 7, 5, 7, 5, 5, 6, 6, 6, 6, 4, 7, 5, 5, 6, 6, 5, 5, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 4, 6, 5, 6, 5, 6, 6, 6, 6, 7, 6, 6, 4, 6, 6, 6, 7, 5, 7, 4, 7, 5, 7, 6, 6, 7, 7, 7, 6, 6, 6, 7, 5, 7, 7, 7, 7, 7, 6, 7, 6, 6, 7, 6, 7, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 5, 7, 6, 7, 7, 6, 6, 7, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 7, 7, 7, 6, 6, 6, 6, 6, 7, 6, 7, 7, 5, 6, 4, 6, 6, 6, 6, 7, 7, 8, 7, 8, 8, 6, 4, 6, 8, 8, 7, 8, 5, 7, 6, 7, 8, 7, 5, 6, 7, 6, 5, 7, 6, 8, 7, 6, 7, 6, 5, 5, 6, 8, 7, 6, 7, 7, 5, 6, 7, 6, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 4, 6, 5, 6, 5, 5, 7, 5, 5, 7, 6, 6, 7, 7, 7, 5, 6, 6, 5, 6, 5, 6, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 5, 6, 5, 6, 7, 5, 5, 5, 8, 6, 5, 5, 5, 6, 6, 7, 5, 5, 8, 5, 5, 5, 6, 5, 4, 6, 6, 5, 5, 6, 5, 6, 7, 7, 5, 6, 6, 5, 6, 7, 5, 5, 5, 6, 5, 5, 6, 6, 5, 6, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 5, 6, 6, 3, 5, 5, 5, 5, 7, 5, 6, 6, 6, 5, 6, 6, 5, 7, 6, 6, 5, 6, 7, 7, 5, 5, 6, 5, 5, 6, 6, 5, 5, 6, 6, 6, 7, 6, 5, 6, 5, 6, 5, 6, 7, 6, 7, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 6, 4, 5, 5, 7, 5, 5, 5, 4, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 6, 6, 6, 7, 5, 5, 4, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 7, 6, 7, 7, 6, 5, 7, 6, 6, 5, 7, 5, 5, 5, 6, 5, 5, 5, 6, 6, 8, 4, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 6, 6, 7, 5, 5, 5, 5, 6, 7, 5, 6, 5, 5, 6, 6, 6, 5, 7, 7, 5, 4, 6, 4, 6, 6, 7, 6, 6, 4, 6, 7, 7, 6, 7, 6, 5, 7, 7, 6, 7, 6, 6, 6, 6, 6, 6, 5, 7, 7, 7, 5, 7, 7, 6, 6, 6, 5, 6, 6, 7, 6, 6, 5, 6, 6, 6, 7, 6, 6, 6, 5, 5, 6, 6, 5, 4, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 5, 6, 5, 6, 5, 5, 5, 4, 5, 5, 7, 7, 7, 7, 7, 6, 6, 6, 7, 6, 5, 7, 7, 6, 5, 6, 6, 6, 5, 5, 6, 5, 5, 8, 6, 5, 6, 6, 5, 6, 7, 5, 4, 6, 5, 6, 6, 6, 6, 6, 6, 5, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 5, 7, 7, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 8, 7, 5, 6, 6, 6, 7, 5, 5, 5, 5, 7, 6, 5, 5, 6, 6, 5, 6, 5, 6, 7, 6, 6, 6, 6, 6, 6, 7, 7, 6, 7, 5, 6, 6, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 8, 6, 7, 7, 5, 6, 5, 6, 7, 6, 6, 7, 5, 6, 6, 6, 7, 7, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 8, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 6, 7, 6, 6, 6, 6, 4, 4, 5, 5, 5, 4, 6, 5, 6, 6, 4, 4, 7, 5, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 7, 6, 6, 7, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 4, 5, 5, 5, 5, 6, 6, 6, 7, 6, 6, 6, 6, 7, 7, 6, 5, 6, 5, 6, 6, 6, 6, 7, 5, 4, 6, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 7, 6, 6, 6, 5, 6, 6, 7, 7, 5, 7, 7, 7, 5, 6, 7, 6, 6, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 7, 6, 5, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 5, 6, 5, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 5, 7, 6, 5, 7, 5, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 6, 6, 5, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 6, 6, 5, 5, 5, 7, 5, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 7, 5, 5, 6, 5, 4, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 5, 5, 6, 6, 7, 6, 6, 7, 7, 7, 5, 5, 5, 6, 6, 6, 7, 7, 6, 7, 7, 5, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 5, 6, 7, 4, 6, 5, 5, 5, 5, 7, 5, 7, 7, 5, 6, 7, 7, 6, 6, 5, 6, 6, 6, 7, 7, 7, 6, 6, 6, 6, 5, 6, 5, 6, 6, 6, 7, 6, 6, 7, 7, 7, 5, 5, 5, 7, 5, 7, 7, 7, 7, 7, 6, 6, 6, 5, 6, 7, 7, 6, 5, 7, 7, 5, 6, 5, 5, 7, 7, 6, 6, 7, 6, 5, 4, 6, 6, 6, 6, 5, 4, 6, 6, 6, 6, 7, 5, 6, 7, 7, 6, 7, 6, 5, 5, 6, 6, 7, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 6, 6, 5, 5, 3, 6, 6, 5, 6, 5, 6, 7, 6, 6, 6, 7, 7, 6, 6, 6, 6, 7, 7, 6, 8, 8, 7, 6, 6, 6, 6, 5, 7, 4, 6, 6, 6, 6, 4, 5, 5, 6, 6, 5, 7, 8, 8, 5, 6, 6, 6, 6, 6, 5, 7, 7, 6, 5, 6, 7, 7, 8, 7, 4, 6, 6, 6, 5, 6, 5, 6, 7, 5, 6, 7, 6, 6, 6, 6, 5, 6, 6, 7, 5, 6, 6, 6, 5, 7, 6, 6, 5, 6, 7, 6, 5, 6, 6, 4, 7, 6, 6, 5, 6, 5, 6, 7, 6, 5, 6, 5, 5, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 5, 6, 6, 6, 6, 6, 7, 6, 5, 6, 6, 6, 7, 5, 4, 6, 6, 6, 5, 6, 5, 6, 7, 7, 5, 6, 6, 6, 5, 6, 5, 6, 7, 6, 5, 5, 5, 6, 5, 5, 5, 7, 7, 5, 5, 5, 5, 5, 5, 5, 7, 5, 4, 6, 6, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 6, 7, 4, 5, 5, 4, 6, 5, 5, 4, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 7, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 4, 5, 5, 5, 6, 5, 4, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 4, 6, 5, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 6, 6, 6, 4, 5, 5, 5, 5, 5, 5, 5, 6, 5, 4, 6, 5, 5, 5, 5, 4, 6, 5, 4, 6, 6, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 7, 4, 7, 5, 5, 5, 6, 7, 7, 5, 5, 7, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 6, 4, 6, 6, 5, 6, 5, 7, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 7, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 7, 5, 4, 5, 5, 5, 7, 4, 8, 6, 6, 6, 6, 5, 5, 5, 6, 6, 6, 8, 7, 6, 7, 5, 7, 5, 5, 6, 6, 7, 5, 7, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 5, 5, 6, 5, 6, 7, 6, 7, 5, 5, 6, 6, 6, 7, 5, 6, 5, 6, 6, 6, 5, 7, 7, 6, 5, 6, 7, 6, 6, 6, 6, 6, 5, 7, 6, 6, 6, 6, 6, 5, 5, 6, 6, 5, 7, 7, 6, 5, 6, 5, 5, 7, 6, 7, 5, 5, 7, 5, 6, 6, 5, 6, 7, 6, 7, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 8, 6, 5, 5, 5, 7, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 7, 6, 4, 6, 5, 5, 7, 5, 5, 6, 5, 6, 5, 7, 7, 5, 7, 5, 7, 6, 6, 5, 6, 7, 5, 6, 5, 6, 5, 6, 6, 6, 5, 8, 6, 7, 7, 7, 6, 5, 5, 6, 6, 6, 6, 6, 7, 5, 8, 5, 5, 7, 3, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 6, 5, 6, 5, 5, 6, 5, 6, 5, 8, 5, 5, 6, 5, 5, 6, 7, 6, 6, 7, 7, 6, 6, 8, 6, 5, 8, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 7, 5, 6, 6, 7, 7, 5, 6, 3, 6, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 5, 6, 6, 6, 5, 6, 7, 5, 5, 6, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 5, 6, 6, 5, 5, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 4, 6, 6, 4, 5, 5, 6, 5, 5, 5, 7, 7, 6, 7, 5, 8, 7, 5, 6, 5, 5, 5, 5, 6, 6, 6, 6, 4, 6, 5, 6, 6, 6, 7, 6, 6, 6, 5, 5, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 4, 5, 5, 5, 5, 7, 6, 5, 5, 5, 5, 5, 7, 5, 4, 7, 6, 5, 5, 5, 6, 5, 5, 5, 7, 6, 4, 6, 5, 6, 6, 5, 5, 6, 6, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6, 4, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 6, 6, 5, 6, 6, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 5, 6, 6, 5, 5, 6, 5, 6, 5, 5, 6, 6, 5, 6, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 5, 5, 7, 6, 6, 5, 5, 7, 6, 6, 7, 7, 7, 5, 6, 5, 6, 5, 4, 6, 5, 6, 6, 5, 5, 5, 7, 5, 5, 5, 5, 7, 5, 8, 6, 4, 6, 3, 4, 5, 5, 7, 7, 7, 5, 7, 5, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 6, 7, 6, 7, 7, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 6, 6, 5, 4, 7, 7, 7, 4, 6, 6, 5, 5, 6, 6, 5, 6, 5, 6, 7, 6, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 3, 5, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 7, 6, 4, 5, 7, 5, 5, 6, 5, 5, 6, 6, 4, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 5, 6, 6, 7, 5, 6, 5, 5, 6, 6, 6, 7, 5, 6, 5, 6, 6, 7, 5, 7, 5, 5, 5, 7, 5, 6, 5, 6, 6, 5, 6, 7, 5, 5, 6, 5, 5, 6, 5, 5, 6, 7, 7, 6, 6, 7, 7, 7, 7, 5, 7, 7, 7, 7, 5, 7, 6, 5, 6, 6, 6, 7, 6, 6, 5, 6, 6, 5, 6, 7, 6, 6, 5, 6, 7, 7, 7, 5, 6, 6, 7, 7, 5, 7, 6, 5, 6, 6, 7, 6, 6, 6, 5, 6, 6, 5, 5, 5, 7, 6, 6, 7, 5, 7, 7, 6, 8, 6, 6, 6, 6, 7, 7, 7, 5, 7, 5, 6, 6, 5, 7, 6, 5, 5, 7, 6, 7, 6, 6, 6, 5, 7, 6, 7, 7, 8, 6, 6, 7, 6, 5, 6, 5, 7, 5, 6, 6, 6, 6, 6, 5, 6, 7, 5, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 5, 8, 6, 6, 6, 4, 7, 6, 6, 5, 6, 6, 5, 7, 7, 7, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 6, 6, 7, 6, 6, 7, 6, 5, 6, 6, 5, 7, 7, 6, 5, 7, 6, 7, 5, 5, 5, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 4, 7, 5, 6, 6, 5, 6, 5, 5, 6, 5, 6, 5, 4, 6, 5, 7, 5, 6, 6, 6, 6, 6, 6, 6, 7, 8, 5, 7, 7, 7, 5, 7, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 7, 5, 6, 5, 5, 4, 6, 4, 6, 6, 4, 4, 5, 5, 6, 5, 6, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 5, 4, 5, 4, 6, 6, 6, 6, 6, 8, 6, 6, 5, 5, 6, 6, 4, 6, 6, 7, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 6, 6, 4, 6, 5, 5, 6, 6, 3, 6, 6, 6, 5, 5, 5, 5, 4, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 6, 5, 7, 6, 6, 6, 6, 5, 6, 6, 5, 6, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 6, 4, 6, 5, 5, 6, 6, 4, 5, 6, 5, 5, 3, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 7, 6, 5, 5, 6, 8, 6, 7, 6, 6, 7, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 5, 5, 5, 6, 4, 6, 6, 6, 5, 5, 5, 5, 6, 6, 7, 6, 6, 5, 5, 5, 6, 7, 6, 5, 5, 6, 6, 5, 5, 5, 8, 7, 7, 7, 5, 6, 6, 6, 5, 5, 7, 6, 4, 6, 6, 5, 5, 7, 4, 7, 3, 5, 5, 6, 5, 5, 7, 5, 7, 3, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 6, 6, 5, 5, 5, 7, 6, 5, 6, 6, 6, 5, 5, 5, 6, 6, 3, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 6, 5, 7, 6, 6, 6, 5, 5, 6, 7, 6, 6, 7, 6, 5, 5, 5, 8, 5, 5, 6, 5, 6, 7, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 7, 6, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 5, 6], \"coloraxis\": \"coloraxis\", \"size\": [8.8, 9.5, 10.1, 9.9, 9.9, 10.1, 9.6, 8.8, 9.5, 11.0, 12.0, 9.7, 10.8, 12.4, 9.7, 11.4, 9.6, 12.8, 11.3, 9.5, 12.8, 11.0, 10.5, 9.3, 10.0, 10.4, 10.0, 10.5, 11.6, 12.3, 10.0, 10.2, 10.8, 9.0, 10.2, 12.8, 10.0, 11.2, 8.6, 8.6, 9.4, 9.4, 9.8, 9.5, 9.5, 10.0, 9.8, 9.8, 9.8, 9.8, 11.7, 11.0, 10.9, 10.9, 9.1, 11.0, 9.6, 8.9, 10.2, 9.9, 8.6, 8.9, 10.5, 10.2, 10.3, 9.1, 12.6, 9.8, 10.7, 9.5, 9.0, 9.5, 10.0, 9.1, 10.7, 9.5, 12.7, 12.0, 9.3, 9.0, 10.6, 9.2, 10.0, 9.5, 8.7, 8.7, 8.7, 9.7, 8.7, 8.7, 8.7, 9.0, 12.6, 12.6, 11.5, 9.2, 8.8, 11.4, 10.1, 8.8, 9.1, 9.4, 9.4, 9.0, 9.1, 9.2, 9.4, 9.1, 9.1, 10.3, 8.8, 8.9, 9.2, 9.1, 9.1, 9.7, 11.3, 11.8, 9.2, 9.2, 10.2, 8.8, 9.7, 9.1, 9.8, 11.0, 10.5, 9.7, 10.9, 10.9, 10.6, 9.7, 9.0, 9.2, 8.9, 9.6, 10.7, 8.7, 10.8, 11.8, 10.2, 8.7, 10.8, 9.7, 11.2, 10.9, 10.1, 9.0, 12.0, 9.4, 11.5, 9.9, 9.4, 10.4, 9.7, 8.9, 8.9, 12.4, 12.1, 12.1, 12.4, 9.1, 10.6, 8.9, 9.5, 9.8, 9.6, 12.6, 9.3, 10.0, 12.7, 11.0, 11.4, 11.5, 10.2, 11.4, 12.6, 9.4, 8.7, 9.2, 9.3, 9.2, 8.7, 9.6, 9.3, 9.3, 9.9, 11.0, 12.7, 8.9, 8.9, 8.7, 11.4, 9.6, 9.1, 9.1, 9.1, 8.9, 8.8, 8.9, 9.3, 8.8, 9.6, 12.0, 10.2, 8.8, 9.2, 9.9, 10.2, 9.5, 10.5, 11.2, 9.2, 9.7, 11.1, 9.4, 11.0, 9.4, 9.4, 11.0, 11.0, 9.1, 11.1, 9.1, 10.4, 8.7, 9.7, 9.1, 9.7, 8.7, 8.9, 9.6, 9.5, 9.0, 9.0, 9.0, 9.0, 9.6, 11.1, 9.6, 8.7, 10.4, 11.4, 9.7, 8.7, 11.3, 12.6, 10.9, 10.9, 10.0, 10.0, 9.8, 8.7, 11.7, 9.3, 9.6, 11.0, 11.0, 11.8, 11.4, 10.2, 8.9, 10.2, 9.6, 10.6, 8.9, 9.2, 9.7, 9.7, 9.7, 9.2, 9.7, 9.3, 9.0, 9.5, 9.8, 9.8, 10.6, 10.6, 12.4, 12.6, 12.3, 10.5, 9.3, 8.8, 8.8, 9.7, 9.0, 9.0, 9.0, 9.0, 10.5, 9.1, 9.8, 8.5, 9.4, 9.4, 11.2, 10.0, 10.3, 10.8, 10.5, 10.8, 11.1, 9.9, 9.9, 9.9, 9.9, 10.4, 10.4, 11.5, 12.5, 10.0, 10.0, 10.0, 9.1, 10.6, 10.5, 11.5, 10.1, 10.3, 10.5, 10.6, 10.4, 11.4, 10.5, 10.0, 10.0, 9.6, 10.4, 12.5, 10.6, 11.8, 9.8, 10.8, 11.8, 11.2, 9.3, 10.4, 10.2, 9.0, 10.0, 9.1, 10.0, 10.0, 9.6, 11.2, 8.8, 10.0, 10.0, 11.4, 11.9, 9.6, 11.9, 9.6, 9.0, 9.0, 9.5, 10.4, 10.6, 10.2, 8.9, 9.7, 9.0, 11.4, 12.3, 10.8, 9.4, 10.6, 11.6, 9.4, 10.6, 10.0, 9.2, 12.5, 12.5, 10.4, 10.0, 10.0, 10.4, 10.0, 9.0, 9.2, 9.2, 11.3, 12.5, 10.8, 10.1, 9.7, 9.3, 9.3, 10.6, 10.2, 12.2, 8.8, 10.0, 11.4, 11.4, 9.4, 11.7, 11.4, 8.8, 9.2, 8.7, 12.6, 10.0, 12.8, 9.4, 10.3, 11.4, 9.0, 9.6, 10.5, 10.5, 9.0, 9.6, 9.8, 9.0, 9.8, 10.5, 12.7, 10.4, 10.4, 10.4, 10.5, 10.4, 10.4, 9.4, 9.1, 9.3, 9.4, 9.8, 9.9, 9.2, 12.1, 12.2, 9.8, 12.4, 9.9, 9.2, 11.6, 10.4, 12.9, 9.3, 11.0, 11.5, 12.4, 9.8, 9.8, 10.5, 9.1, 10.1, 10.6, 10.5, 10.5, 9.8, 12.9, 9.5, 9.8, 8.5, 9.5, 9.3, 9.5, 9.4, 8.7, 8.9, 9.4, 9.4, 8.7, 9.6, 9.3, 10.0, 12.5, 9.6, 9.4, 9.5, 12.4, 10.5, 9.2, 10.4, 9.2, 10.6, 9.5, 9.2, 9.6, 9.7, 9.7, 10.7, 10.5, 8.9, 12.1, 12.7, 9.9, 11.4, 10.7, 12.5, 8.6, 12.5, 10.0, 8.6, 9.5, 9.6, 9.9, 9.9, 8.9, 8.9, 8.8, 10.0, 12.0, 10.0, 10.0, 12.1, 11.0, 11.2, 10.3, 10.4, 9.1, 10.4, 10.8, 11.7, 9.8, 9.8, 11.4, 11.2, 11.4, 9.2, 12.5, 12.6, 12.2, 11.2, 9.7, 9.3, 9.0, 9.0, 9.0, 9.1, 9.1, 9.0, 10.4, 9.5, 11.4, 8.7, 9.9, 9.9, 9.0, 10.0, 9.7, 11.8, 10.2, 8.7, 9.6, 11.3, 12.1, 9.6, 12.1, 11.3, 9.4, 10.4, 9.5, 12.3, 9.9, 10.1, 9.2, 10.4, 9.1, 10.0, 11.5, 9.8, 9.8, 9.4, 8.7, 11.6, 8.8, 12.7, 11.7, 10.2, 10.2, 12.7, 11.6, 12.3, 8.7, 9.4, 10.1, 9.7, 10.1, 9.7, 8.9, 10.8, 10.8, 9.5, 9.1, 10.9, 9.4, 10.8, 10.8, 10.5, 9.4, 10.8, 10.5, 11.5, 9.4, 10.8, 10.8, 10.8, 9.8, 9.8, 9.6, 9.6, 9.5, 10.7, 12.4, 11.1, 8.8, 8.7, 8.7, 8.8, 11.7, 10.9, 10.8, 9.6, 9.0, 9.0, 10.4, 11.4, 9.3, 11.0, 9.1, 9.4, 9.4, 10.5, 8.8, 8.8, 10.7, 9.5, 10.9, 10.8, 10.8, 9.2, 10.3, 10.3, 11.0, 9.0, 10.4, 9.5, 9.5, 9.0, 9.5, 9.0, 10.0, 9.1, 9.1, 9.1, 9.1, 9.5, 11.4, 12.2, 11.3, 10.2, 11.3, 10.0, 9.4, 12.2, 9.2, 9.4, 9.6, 9.5, 12.5, 9.6, 10.0, 9.3, 9.3, 11.6, 12.5, 10.6, 9.4, 9.1, 9.0, 11.8, 11.8, 11.8, 10.0, 9.7, 9.5, 9.4, 11.2, 9.0, 10.7, 9.0, 9.1, 10.8, 10.1, 9.9, 9.8, 9.8, 9.5, 9.5, 11.1, 9.5, 9.5, 9.4, 9.7, 13.9, 10.1, 10.5, 12.6, 10.9, 10.0, 11.2, 10.0, 9.2, 9.5, 12.3, 12.3, 10.0, 10.8, 10.5, 9.2, 9.1, 10.5, 10.2, 8.9, 10.4, 11.7, 12.4, 10.9, 10.2, 11.7, 9.4, 10.5, 9.4, 10.4, 9.5, 11.1, 9.1, 9.2, 9.6, 9.1, 9.2, 10.8, 9.6, 12.6, 11.0, 10.2, 9.4, 10.0, 12.2, 10.5, 11.5, 9.8, 11.4, 11.5, 10.2, 9.4, 10.5, 9.1, 12.2, 9.5, 9.3, 9.8, 9.8, 9.8, 9.8, 8.7, 10.2, 9.5, 11.0, 9.2, 10.9, 9.3, 9.3, 9.8, 9.3, 9.3, 9.4, 10.4, 12.1, 11.0, 9.0, 9.5, 8.8, 11.2, 9.3, 9.5, 8.8, 9.0, 9.3, 9.2, 9.2, 10.0, 9.3, 9.2, 10.9, 10.0, 10.9, 9.3, 9.0, 9.2, 9.6, 9.4, 11.1, 8.9, 9.3, 9.3, 9.8, 9.8, 8.9, 9.6, 9.6, 9.0, 9.5, 9.3, 9.2, 9.1, 9.5, 10.5, 9.0, 11.7, 9.1, 9.0, 9.1, 12.4, 9.2, 9.4, 9.6, 11.7, 9.8, 10.2, 12.5, 10.9, 11.0, 10.5, 11.5, 12.8, 12.2, 10.5, 12.8, 11.9, 11.9, 11.9, 12.0, 12.0, 8.8, 8.8, 10.8, 11.0, 11.0, 9.3, 10.8, 8.8, 11.5, 10.8, 9.4, 9.5, 8.6, 9.5, 10.3, 9.4, 9.4, 10.0, 9.4, 10.4, 9.1, 9.9, 12.1, 9.9, 12.5, 9.5, 8.5, 9.0, 10.1, 9.4, 8.6, 10.7, 9.6, 10.1, 10.0, 12.7, 10.2, 8.9, 11.9, 10.0, 9.9, 11.5, 11.5, 9.8, 12.2, 11.4, 11.0, 11.4, 11.0, 9.9, 11.0, 9.4, 12.2, 11.0, 10.3, 10.5, 10.5, 10.9, 10.5, 11.0, 9.7, 8.9, 9.6, 8.8, 11.1, 10.3, 12.2, 9.8, 8.8, 9.9, 9.9, 9.9, 9.2, 9.5, 9.2, 10.3, 11.0, 11.9, 10.2, 9.4, 8.9, 8.9, 10.0, 10.7, 9.8, 9.3, 9.5, 10.0, 9.0, 11.9, 8.9, 10.0, 9.6, 8.9, 8.9, 11.4, 9.0, 10.0, 9.6, 9.7, 9.5, 10.0, 12.2, 8.7, 10.2, 9.6, 10.0, 9.5, 11.5, 9.5, 9.8, 10.1, 10.0, 9.8, 9.5, 9.5, 10.2, 10.2, 9.0, 9.0, 12.3, 9.0, 11.6, 9.5, 11.5, 9.6, 9.0, 12.0, 11.4, 12.3, 12.6, 9.0, 12.0, 11.7, 9.2, 10.3, 8.6, 10.7, 9.8, 9.8, 10.7, 12.5, 11.9, 10.8, 10.5, 10.3, 10.3, 10.8, 12.0, 10.2, 10.2, 9.9, 10.1, 9.5, 10.5, 10.4, 9.5, 9.2, 10.1, 9.8, 9.4, 9.4, 10.4, 11.3, 10.8, 11.3, 9.3, 10.3, 10.5, 10.3, 11.2, 10.3, 9.5, 8.9, 10.2, 9.2, 10.3, 10.5, 9.5, 11.4, 11.4, 11.1, 10.5, 12.0, 9.7, 10.2, 9.5, 10.4, 9.3, 10.5, 10.0, 10.2, 10.2, 9.1, 10.2, 10.7, 9.7, 9.3, 11.0, 10.8, 10.7, 10.7, 8.8, 10.9, 10.5, 10.0, 10.4, 9.2, 12.6, 9.0, 9.2, 11.3, 10.3, 10.4, 10.0, 10.7, 9.0, 10.7, 8.7, 11.6, 9.4, 9.5, 9.5, 10.9, 9.7, 9.1, 11.1, 12.6, 11.0, 11.3, 9.7, 10.9, 10.9, 9.3, 12.7, 10.1, 10.0, 9.8, 10.1, 9.0, 9.4, 9.4, 9.2, 10.1, 8.6, 11.2, 11.2, 9.2, 10.6, 9.3, 8.9, 10.6, 10.6, 8.8, 11.0, 10.2, 10.1, 10.1, 14.0, 9.4, 11.8, 11.4, 10.7, 8.6, 11.5, 11.2, 12.6, 12.6, 9.3, 12.6, 12.1, 9.9, 10.7, 10.0, 10.4, 10.5, 9.7, 10.5, 9.0, 9.2, 10.1, 11.4, 10.8, 10.9, 9.2, 12.9, 12.0, 9.5, 11.8, 9.1, 9.7, 9.1, 10.0, 10.4, 9.5, 12.3, 11.7, 9.5, 11.5, 10.6, 10.2, 9.5, 10.5, 10.5, 8.9, 10.6, 9.5, 10.8, 9.5, 8.9, 8.9, 9.4, 10.6, 9.0, 10.5, 9.0, 9.0, 9.4, 9.0, 9.6, 9.0, 10.2, 9.4, 10.4, 10.4, 9.5, 10.6, 11.0, 9.6, 9.9, 9.6, 12.8, 11.4, 10.0, 9.1, 9.4, 10.2, 9.2, 9.4, 9.6, 10.1, 11.4, 10.6, 12.8, 8.9, 9.3, 11.1, 9.9, 9.6, 12.8, 10.7, 9.2, 9.1, 9.6, 9.2, 10.7, 9.1, 9.2, 10.7, 10.8, 10.8, 9.0, 10.7, 10.7, 9.4, 8.8, 9.0, 11.5, 12.5, 10.5, 9.7, 11.3, 10.7, 10.8, 10.6, 11.7, 9.2, 11.1, 11.7, 11.0, 12.5, 10.0, 10.6, 12.3, 12.7, 12.3, 10.5, 12.5, 12.4, 8.7, 12.4, 12.6, 11.0, 10.1, 10.5, 12.7, 10.9, 13.5, 9.7, 9.2, 10.6, 13.3, 13.5, 10.1, 9.4, 10.6, 11.3, 10.8, 10.4, 10.5, 9.3, 9.3, 12.2, 9.2, 10.3, 9.4, 10.2, 9.0, 9.3, 9.2, 9.4, 9.4, 9.5, 9.9, 11.1, 12.3, 8.6, 9.4, 9.4, 8.6, 10.9, 9.4, 10.9, 9.4, 9.2, 8.6, 9.4, 10.8, 10.5, 12.5, 12.1, 8.7, 12.7, 12.1, 12.5, 11.4, 12.9, 12.8, 11.2, 9.7, 9.7, 10.3, 11.6, 11.6, 9.7, 10.9, 12.6, 12.4, 11.5, 10.2, 11.4, 9.6, 10.3, 9.3, 10.7, 12.8, 9.5, 10.4, 10.3, 9.9, 10.7, 10.5, 9.6, 9.3, 10.0, 11.2, 10.8, 10.3, 8.8, 12.8, 13.2, 10.1, 11.0, 10.8, 12.8, 9.2, 10.5, 11.7, 9.5, 9.5, 8.8, 9.3, 12.6, 12.4, 10.1, 11.2, 10.0, 10.0, 10.8, 10.0, 10.4, 10.8, 9.8, 12.2, 12.7, 12.2, 11.9, 11.2, 10.4, 12.8, 12.7, 10.1, 10.0, 9.0, 11.4, 8.9, 9.3, 12.0, 10.8, 10.5, 10.6, 11.3, 9.5, 11.4, 10.1, 10.9, 8.9, 8.9, 9.3, 10.4, 12.0, 9.5, 9.5, 12.4, 11.2, 11.4, 11.4, 11.1, 10.4, 12.0, 12.3, 9.1, 10.5, 11.4, 9.5, 13.7, 13.4, 11.3, 10.0, 10.1, 12.2, 13.4, 9.3, 13.7, 12.3, 11.3, 8.9, 8.9, 11.5, 8.9, 9.3, 11.1, 10.9, 11.6, 10.2, 10.5, 11.4, 8.9, 10.6, 11.6, 11.5, 12.3, 10.8, 11.3, 9.3, 10.0, 11.0, 10.2, 10.8, 10.1, 11.6, 9.1, 10.0, 10.8, 11.4, 12.7, 11.3, 10.4, 9.6, 10.1, 9.6, 12.1, 12.2, 11.3, 9.6, 9.2, 10.4, 9.5, 8.9, 8.8, 10.5, 9.4, 12.2, 11.3, 12.2, 12.2, 11.2, 11.2, 11.5, 11.3, 9.3, 11.3, 11.8, 9.2, 9.2, 12.2, 12.2, 12.2, 10.6, 12.4, 10.8, 11.2, 11.0, 12.7, 10.2, 11.5, 12.3, 9.8, 9.3, 11.8, 11.3, 11.4, 10.8, 9.5, 10.2, 10.7, 10.8, 11.5, 10.7, 10.2, 10.1, 10.4, 9.5, 9.1, 10.6, 9.4, 9.8, 9.5, 9.3, 10.3, 11.1, 10.0, 12.3, 12.4, 12.3, 10.4, 12.1, 12.5, 13.0, 11.0, 10.1, 9.2, 12.6, 12.2, 9.8, 11.0, 10.0, 9.8, 10.5, 10.0, 11.2, 11.0, 11.2, 11.0, 10.5, 10.6, 10.6, 12.0, 10.1, 10.1, 9.2, 11.0, 10.0, 8.7, 8.7, 11.1, 11.0, 11.1, 8.7, 8.7, 11.2, 11.1, 10.8, 9.0, 10.3, 9.9, 10.0, 9.8, 10.8, 9.0, 9.1, 10.6, 10.6, 9.9, 10.6, 9.9, 9.9, 12.8, 10.3, 10.6, 8.7, 12.6, 11.0, 11.2, 10.7, 9.6, 10.6, 9.0, 10.5, 12.8, 10.1, 12.2, 12.8, 10.1, 10.1, 9.2, 9.9, 9.7, 9.9, 9.9, 9.7, 10.3, 10.3, 10.5, 10.5, 9.8, 10.6, 10.1, 9.0, 9.5, 11.5, 11.9, 10.1, 9.2, 8.7, 9.8, 9.2, 8.7, 11.2, 12.3, 10.4, 10.7, 10.5, 9.4, 9.2, 11.9, 9.2, 9.9, 11.4, 9.4, 10.7, 12.7, 13.5, 9.5, 12.9, 12.5, 9.5, 8.6, 10.0, 12.5, 10.1, 11.3, 10.6, 10.8, 10.7, 9.0, 9.2, 8.5, 11.3, 11.3, 9.4, 8.7, 9.4, 10.5, 9.7, 10.2, 9.4, 11.5, 9.6, 11.4, 11.5, 12.2, 11.0, 9.2, 10.2, 10.0, 9.7, 9.2, 10.5, 10.0, 10.1, 9.1, 10.2, 9.1, 10.5, 10.1, 12.1, 10.2, 9.4, 12.8, 9.0, 10.9, 8.8, 9.0, 10.2, 9.2, 11.3, 8.8, 9.3, 9.4, 10.3, 10.8, 8.8, 9.0, 11.5, 10.8, 11.8, 10.5, 9.9, 9.8, 11.4, 9.3, 9.3, 10.3, 8.9, 11.4, 11.1, 10.4, 10.1, 9.0, 11.9, 9.0, 9.0, 9.1, 9.0, 10.0, 9.1, 9.4, 11.4, 9.7, 9.0, 11.8, 10.2, 9.2, 11.0, 10.0, 12.2, 11.8, 11.6, 10.2, 10.3, 8.6, 9.6, 9.6, 11.3, 9.9, 9.6, 10.6, 9.8, 10.5, 10.8, 10.0, 10.1, 9.4, 11.5, 10.8, 9.9, 9.0, 9.4, 10.8, 10.9, 12.0, 11.5, 10.5, 9.3, 11.8, 10.0, 9.4, 11.4, 10.4, 9.5, 11.9, 11.1, 9.6, 12.0, 8.7, 9.6, 10.0, 11.4, 9.6, 12.9, 9.7, 9.3, 9.1, 8.6, 9.9, 9.3, 10.9, 10.2, 9.7, 11.4, 9.5, 10.2, 11.1, 9.7, 9.3, 8.8, 10.6, 9.3, 10.2, 10.2, 11.0, 9.6, 9.3, 8.8, 8.8, 8.9, 10.0, 12.2, 10.9, 9.5, 10.9, 10.9, 10.8, 12.0, 9.8, 9.5, 11.0, 11.0, 9.8, 10.5, 11.4, 10.1, 11.6, 11.4, 11.8, 12.1, 12.0, 12.1, 9.1, 9.3, 10.4, 9.1, 9.4, 9.6, 12.0, 11.3, 8.7, 9.9, 9.3, 9.5, 8.7, 9.9, 9.3, 9.4, 9.4, 8.8, 9.4, 8.8, 9.9, 9.4, 12.6, 11.1, 12.8, 12.0, 12.0, 9.2, 12.3, 13.0, 12.0, 10.9, 12.8, 10.0, 9.0, 10.4, 9.0, 10.0, 10.0, 11.3, 11.3, 12.0, 11.3, 12.0, 10.6, 9.3, 9.4, 11.0, 9.3, 9.4, 10.5, 11.0, 9.5, 11.2, 12.3, 9.0, 9.0, 9.0, 9.0, 11.4, 11.0, 12.3, 10.4, 10.3, 10.5, 9.8, 10.0, 9.7, 9.7, 9.8, 10.5, 10.0, 11.5, 9.5, 10.5, 10.2, 9.8, 11.6, 11.8, 10.1, 10.3, 10.4, 8.9, 8.9, 10.8, 9.2, 9.6, 10.4, 8.7, 9.2, 9.2, 9.2, 9.2, 9.2, 10.2, 9.2, 9.0, 9.7, 9.6, 10.0, 9.2, 9.1, 8.7, 8.7, 9.5, 9.5, 8.9, 8.9, 9.9, 12.6, 9.7, 10.4, 9.1, 10.4, 9.5, 8.9, 10.6, 12.0, 12.5, 9.6, 9.2, 9.9, 11.7, 9.6, 12.0, 12.5, 9.2, 9.9, 8.9, 9.0, 10.2, 9.6, 9.4, 10.4, 10.4, 10.0, 10.0, 10.5, 11.4, 10.2, 10.4, 11.0, 10.1, 9.2, 10.3, 10.2, 10.4, 11.1, 9.9, 9.0, 8.6, 9.0, 8.6, 9.5, 9.0, 10.0, 9.0, 9.0, 10.2, 9.6, 9.7, 10.2, 13.0, 10.8, 9.7, 9.0, 9.9, 9.2, 8.7, 10.1, 10.1, 9.5, 9.9, 8.7, 9.0, 8.6, 10.5, 9.5, 10.1, 11.7, 10.7, 11.7, 9.2, 8.8, 8.8, 9.5, 10.2, 9.1, 10.5, 9.0, 8.9, 8.9, 8.9, 8.9, 8.9, 9.1, 10.1, 10.0, 9.5, 12.3, 9.1, 8.9, 9.6, 11.6, 8.8, 8.9, 8.8, 8.9, 8.9, 9.0, 10.0, 10.0, 11.1, 11.6, 10.6, 8.8, 8.9, 10.1, 10.0, 12.2, 11.0, 10.0, 11.1, 10.4, 11.8, 10.8, 12.5, 11.8, 11.6, 10.4, 11.5, 10.1, 9.2, 10.1, 9.2, 8.9, 10.1, 8.9, 9.7, 9.2, 11.0, 10.7, 10.8, 9.8, 11.0, 10.4, 10.2, 10.7, 9.0, 10.6, 9.5, 9.0, 9.2, 11.0, 9.9, 10.6, 9.3, 9.6, 9.5, 9.7, 9.7, 8.7, 8.7, 12.4, 12.4, 10.6, 8.7, 12.0, 9.0, 8.8, 9.5, 10.8, 11.4, 10.3, 9.5, 9.9, 10.2, 10.2, 11.0, 12.1, 9.1, 9.5, 9.5, 9.8, 9.5, 10.3, 9.6, 10.2, 10.5, 10.4, 9.6, 10.7, 10.5, 10.6, 9.6, 9.6, 9.5, 9.4, 9.8, 9.6, 9.2, 9.5, 9.2, 9.4, 9.4, 9.3, 9.1, 9.5, 9.1, 10.6, 9.5, 12.4, 8.7, 8.8, 10.6, 9.1, 9.0, 10.3, 9.1, 9.5, 8.8, 8.8, 8.8, 9.9, 9.5, 8.8, 11.7, 10.8, 12.0, 10.3, 9.0, 12.2, 9.9, 9.0, 12.2, 10.1, 9.3, 9.5, 9.2, 11.7, 11.0, 9.6, 9.6, 11.9, 10.8, 10.1, 10.9, 10.1, 10.4, 9.2, 9.6, 9.6, 9.0, 11.5, 10.2, 9.9, 9.6, 10.6, 9.2, 11.8, 12.2, 9.6, 10.6, 10.3, 10.2, 10.7, 11.7, 12.0, 10.6, 12.2, 11.0, 12.4, 9.4, 12.0, 11.6, 9.4, 9.4, 9.1, 9.1, 9.1, 9.1, 9.1, 9.2, 9.2, 9.1, 9.1, 9.2, 9.0, 9.2, 10.8, 9.5, 11.0, 10.0, 9.5, 10.1, 9.5, 9.5, 9.5, 9.4, 9.4, 12.7, 9.7, 9.7, 9.4, 9.4, 9.5, 11.7, 11.7, 9.7, 9.5, 9.1, 10.3, 9.7, 9.9, 9.9, 10.2, 12.1, 11.3, 11.4, 12.2, 9.9, 10.3, 12.2, 10.4, 11.4, 9.9, 10.0, 11.5, 10.5, 12.5, 10.5, 9.9, 11.4, 9.8, 11.4, 9.2, 8.9, 8.9, 9.5, 11.5, 9.5, 11.5, 9.5, 9.7, 9.7, 9.5, 9.4, 9.0, 10.6, 9.5, 9.1, 9.4, 8.8, 10.4, 8.9, 10.6, 9.0, 10.6, 10.6, 9.0, 8.8, 10.5, 9.5, 9.0, 10.4, 10.0, 10.4, 9.0, 9.3, 9.0, 9.3, 9.0, 11.5, 9.0, 10.4, 9.0, 10.6, 10.4, 8.5, 9.3, 10.5, 9.9, 10.4, 10.1, 10.5, 9.2, 9.4, 10.6, 9.4, 8.7, 10.2, 10.3, 9.5, 9.5, 9.5, 9.5, 9.4, 9.4, 9.5, 12.6, 10.5, 10.8, 9.9, 12.6, 12.2, 10.0, 10.6, 9.5, 12.8, 12.2, 12.6, 9.4, 9.0, 9.1, 9.4, 12.2, 10.0, 9.2, 9.3, 9.8, 9.2, 12.0, 9.3, 12.6, 12.2, 11.0, 12.0, 8.8, 8.9, 12.7, 11.8, 10.2, 9.9, 11.1, 9.4, 9.7, 9.7, 9.7, 9.7, 9.8, 9.3, 10.5, 9.3, 12.6, 8.9, 10.3, 10.6, 9.0, 9.7, 9.5, 10.3, 9.7, 12.3, 10.5, 9.5, 10.0, 8.8, 10.9, 12.2, 9.5, 10.0, 9.6, 8.7, 10.7, 11.1, 12.5, 10.4, 11.5, 9.4, 9.3, 10.1, 9.7, 10.5, 9.7, 9.2, 9.8, 9.0, 9.1, 10.4, 10.7, 10.5, 9.2, 11.5, 10.4, 12.0, 12.2, 12.0, 9.8, 9.3, 9.6, 9.5, 10.2, 10.4, 11.0, 10.4, 8.7, 9.9, 9.9, 11.3, 12.0, 10.7, 10.1, 9.6, 9.6, 8.7, 10.3, 9.1, 11.8, 11.9, 10.3, 10.0, 10.2, 10.0, 12.7, 9.6, 9.5, 12.7, 11.0, 9.1, 10.2, 10.1, 9.2, 9.4, 10.2, 9.2, 10.0, 10.1, 9.0, 9.5, 9.1, 13.3, 9.5, 9.2, 10.1, 9.2, 10.1, 11.2, 9.8, 11.2, 9.8, 9.4, 9.0, 9.4, 8.9, 9.1, 9.8, 9.4, 10.0, 9.4, 9.9, 10.0, 11.5, 9.2, 10.0, 9.2, 10.0, 10.0, 9.8, 10.5, 10.6, 9.4, 9.4, 11.0, 10.8, 9.0, 9.6, 10.6, 10.6, 9.6, 9.2, 9.2, 9.5, 9.5, 10.3, 8.8, 8.7, 8.7, 10.2, 10.1, 9.5, 9.5, 11.6, 10.7, 10.1, 11.1, 9.8, 9.0, 11.1, 9.5, 9.4, 10.2, 9.8, 9.5, 9.5, 9.0, 10.1, 8.8, 11.9, 11.9, 9.3, 10.0, 9.5, 9.3, 9.7, 9.7, 10.2, 10.8, 8.8, 8.8, 11.4, 8.8, 9.8, 9.4, 9.4, 9.4, 9.4, 9.7, 12.3, 9.8, 9.0, 9.2, 9.4, 9.9, 9.8, 12.3, 11.9, 10.2, 9.5, 11.9, 9.2, 9.7, 11.5, 10.4, 11.6, 9.7, 10.4, 11.5, 10.2, 9.8, 9.0, 10.5, 9.4, 9.4, 10.8, 10.7, 10.6, 9.2, 9.5, 9.5, 10.0, 10.6, 10.6, 10.6, 9.2, 11.0, 11.2, 9.6, 9.4, 9.5, 9.3, 9.4, 9.5, 9.4, 11.2, 11.2, 11.2, 8.8, 11.2, 11.2, 9.4, 11.1, 9.6, 11.1, 9.4, 10.6, 8.9, 12.3, 11.4, 9.6, 10.3, 11.4, 12.1, 9.9, 9.7, 10.5, 8.9, 9.4, 9.6, 12.6, 9.2, 10.4, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.2, 9.0, 9.7, 10.1, 11.0, 10.8, 10.8, 13.5, 10.6, 9.8, 11.7, 9.8, 9.0, 11.3, 9.4, 11.7, 11.3, 11.3, 12.0, 10.6, 10.8, 10.8, 12.0, 9.4, 9.4, 11.3, 9.4, 12.0, 10.3, 10.3, 10.3, 11.3, 9.4, 8.7, 9.4, 11.3, 10.3, 12.0, 8.0, 10.4, 10.7, 10.2, 10.9, 10.5, 11.7, 8.6, 9.0, 8.7, 12.8, 9.0, 8.7, 11.8, 11.6, 11.8, 10.6, 9.7, 10.3, 10.2, 10.1, 10.9, 9.3, 10.2, 10.2, 9.5, 9.3, 12.9, 8.7, 9.4, 10.1, 10.0, 11.1, 10.3, 12.2, 9.3, 11.3, 10.8, 11.2, 12.5, 9.3, 12.9, 11.2, 12.6, 9.3, 12.9, 12.9, 9.5, 11.9, 10.3, 10.3, 11.2, 12.0, 9.6, 9.2, 12.9, 9.3, 12.1, 9.6, 11.2, 11.2, 12.9, 9.2, 9.3, 9.2, 9.3, 10.7, 9.8, 10.3, 10.7, 11.3, 8.8, 10.8, 9.8, 9.3, 11.5, 8.8, 8.8, 8.8, 9.4, 9.4, 9.6, 8.8, 9.3, 8.9, 8.9, 10.0, 9.1, 9.3, 9.4, 10.1, 8.9, 10.8, 10.0, 10.9, 12.0, 9.3, 12.3, 10.4, 10.9, 10.5, 9.8, 10.5, 9.9, 11.4, 9.2, 9.7, 10.0, 11.4, 10.3, 9.9, 10.5, 9.8, 9.3, 12.4, 9.3, 9.3, 9.5, 10.5, 10.5, 12.8, 10.8, 10.0, 11.8, 10.0, 11.8, 12.0, 12.6, 11.9, 10.6, 9.2, 10.0, 9.2, 9.3, 10.2, 10.2, 8.7, 10.7, 12.1, 9.5, 11.2, 12.0, 9.5, 12.1, 10.7, 8.8, 10.8, 13.1, 12.5, 11.7, 11.7, 11.6, 11.3, 12.5, 11.4, 12.2, 11.7, 10.4, 10.4, 10.4, 9.1, 12.2, 9.1, 9.4, 9.4, 10.4, 9.2, 9.4, 13.5, 9.4, 10.9, 13.5, 9.4, 11.4, 12.4, 9.2, 9.4, 10.5, 11.5, 10.9, 10.8, 8.9, 8.9, 9.4, 12.2, 12.1, 10.9, 10.1, 12.2, 13.0, 11.0, 10.8, 13.0, 9.3, 11.4, 9.2, 9.9, 10.5, 12.4, 9.5, 10.5, 9.1, 11.5, 11.5, 11.2, 10.8, 9.4, 11.0, 11.3, 11.2, 10.5, 9.1, 10.4, 11.2, 11.1, 11.2, 10.5, 10.0, 10.0, 10.9, 10.9, 11.2, 11.7, 10.0, 9.5, 9.0, 10.0, 11.9, 10.6, 11.0, 11.2, 12.0, 12.6, 11.2, 10.5, 10.2, 11.0, 12.2, 12.3, 10.6, 10.4, 12.0, 12.7, 10.6, 12.3, 12.7, 11.4, 12.0, 12.4, 12.1, 11.4, 10.7, 9.3, 12.7, 11.7, 10.7, 11.8, 9.9, 13.4, 12.8, 12.8, 10.5, 11.5, 10.5, 13.0, 12.4, 10.2, 9.0, 12.0, 11.7, 10.0, 10.3, 9.0, 11.1, 9.0, 10.5, 11.9, 9.4, 11.4, 10.8, 9.8, 9.3, 11.4, 11.3, 11.3, 9.5, 9.4, 11.9, 9.3, 11.4, 11.4, 12.7, 13.5, 11.2, 10.7, 10.8, 10.5, 13.0, 10.8, 9.1, 10.1, 11.9, 12.0, 12.0, 9.1, 11.6, 11.9, 10.2, 10.8, 9.8, 11.4, 9.8, 10.1, 9.8, 9.8, 10.7, 10.6, 9.3, 9.8, 10.7, 14.0, 11.0, 11.0, 9.4, 9.0, 9.0, 10.0, 9.0, 9.0, 12.4, 11.3, 12.0, 11.7, 10.0, 13.2, 11.0, 11.0, 9.2, 13.0, 10.6, 13.0, 9.0, 9.0, 11.5, 11.0, 11.5, 9.9, 10.4, 9.0, 9.9, 11.0, 12.1, 9.7, 9.7, 12.2, 12.4, 10.5, 10.4, 12.0, 12.7, 10.9, 10.9, 10.9, 11.4, 11.0, 12.6, 11.6, 10.5, 10.9, 10.9, 12.5, 12.1, 11.3, 13.3, 10.9, 10.9, 10.5, 11.6, 11.4, 11.0, 12.1, 11.0, 12.6, 13.0, 8.8, 9.5, 11.8, 12.2, 10.7, 11.0, 11.4, 10.7, 12.0, 11.9, 11.4, 11.8, 10.6, 9.7, 11.0, 10.7, 11.0, 10.5, 10.4, 10.5, 12.0, 12.0, 9.2, 10.9, 9.5, 9.4, 11.3, 10.4, 9.4, 11.3, 8.8, 10.8, 9.4, 9.4, 9.2, 10.3, 9.9, 12.4, 11.9, 11.7, 9.4, 9.6, 9.4, 10.4, 9.5, 11.9, 12.5, 13.4, 12.7, 9.1, 10.5, 10.4, 10.4, 12.5, 10.4, 9.0, 9.8, 9.0, 10.7, 12.4, 12.5, 12.5, 12.1, 11.3, 12.0, 10.4, 12.2, 8.6, 9.1, 12.1, 12.0, 10.5, 10.4, 11.9, 13.7, 11.3, 10.5, 13.7, 10.1, 12.3, 12.0, 11.3, 9.5, 11.4, 11.9, 10.0, 10.0, 11.3, 11.7, 11.0, 12.2, 10.7, 10.9, 10.2, 11.9, 11.1, 11.2, 11.4, 10.6, 10.3, 10.4, 11.9, 11.9, 10.4, 9.2, 11.3, 11.3, 11.0, 11.9, 12.9, 10.8, 9.1, 10.4, 12.9, 12.2, 9.2, 10.3, 11.0, 11.0, 11.7, 12.0, 12.7, 8.8, 11.3, 12.8, 11.2, 8.9, 11.2, 11.1, 10.8, 9.3, 8.9, 12.7, 12.0, 11.2, 8.8, 8.8, 8.8, 10.4, 8.8, 10.4, 14.0, 8.8, 13.1, 12.3, 12.6, 12.0, 9.5, 12.0, 12.7, 10.5, 12.9, 9.5, 12.0, 12.7, 11.9, 12.0, 12.5, 12.1, 12.5, 9.9, 10.7, 12.0, 12.2, 12.4, 12.4, 10.3, 12.0, 10.5, 9.5, 10.5, 12.3, 11.9, 9.8, 12.3, 11.4, 11.0, 10.8, 12.8, 11.0, 10.2, 12.5, 11.6, 11.9, 9.8, 11.0, 10.9, 11.0, 12.5, 11.0, 12.0, 12.4, 12.5, 12.8, 11.0, 9.1, 12.4, 12.9, 10.9, 10.8, 10.6, 9.0, 12.0, 11.8, 10.6, 12.3, 11.5, 11.1, 9.0, 9.9, 12.8, 12.9, 12.9, 12.0, 12.0, 11.2, 13.3, 9.9, 9.5, 9.4, 11.0, 9.4, 11.5, 12.5, 11.9, 10.4, 11.2, 12.5, 11.0, 9.8, 12.3, 11.0, 12.6, 11.6, 12.3, 13.4, 9.8, 11.5, 11.6, 11.1, 11.0, 11.3, 9.9, 12.6, 11.8, 11.4, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 13.0, 9.3, 12.6, 9.6, 8.0, 11.8, 10.2, 12.7, 9.4, 10.2, 12.0, 11.3, 11.8, 10.9, 9.8, 12.2, 11.1, 9.4, 11.4, 10.2, 12.8, 10.1, 9.4, 12.2, 10.9, 10.9, 10.9, 9.4, 9.4, 11.4, 12.9, 9.4, 12.0, 10.1, 9.4, 9.4, 9.2, 11.8, 12.3, 11.4, 12.9, 12.3, 13.5, 12.8, 12.8, 12.8, 11.0, 10.6, 12.4, 12.9, 11.1, 12.9, 11.8, 9.1, 12.7, 12.0, 11.2, 12.4, 10.4, 10.4, 12.7, 12.5, 12.0, 11.6, 12.6, 10.2, 10.4, 11.5, 11.0, 10.1, 10.5, 12.1, 9.9, 11.4, 9.5, 9.5, 9.5, 10.9, 9.5, 12.6, 9.5, 11.1, 9.5, 9.5, 10.6, 10.6, 10.8, 10.9, 9.9, 11.3, 12.6, 12.5, 12.4, 11.8, 12.2, 10.7, 11.3, 12.5, 12.4, 11.3, 9.9, 11.3, 12.6, 11.5, 12.3, 12.2, 13.2, 10.2, 11.5, 13.2, 12.2, 11.0, 13.2, 9.5, 10.2, 10.2, 11.4, 12.5, 9.2, 12.1, 10.7, 12.1, 11.2, 10.6, 11.8, 12.5, 9.2, 12.6, 12.8, 12.3, 12.3, 12.4, 12.3, 9.1, 9.1, 10.6, 10.3, 9.5, 11.1, 10.8, 11.2, 10.8, 11.4, 11.2, 10.2, 11.1, 9.5, 10.2, 11.0, 11.5, 9.8, 10.1, 8.8, 11.5, 12.7, 9.8, 12.9, 9.8, 12.7, 8.5, 12.7, 13.1, 9.1, 12.5, 9.1, 9.1, 11.2, 12.5, 9.1, 9.1, 9.1, 11.5, 12.9, 12.5, 12.3, 11.4, 9.4, 9.1, 9.4, 12.0, 11.1, 11.8, 11.4, 9.1, 12.1, 10.4, 9.2, 13.0, 12.1, 11.5, 11.5, 10.0, 11.1, 12.4, 12.2, 10.6, 11.1, 13.9, 9.2, 10.5, 11.3, 12.9, 12.9, 9.6, 12.9, 12.9, 8.8, 13.2, 9.2, 11.3, 10.5, 10.5, 12.6, 9.5, 9.8, 13.4, 11.8, 9.8, 13.1, 12.6, 10.4, 13.4, 13.0, 13.4, 10.2, 11.7, 9.5, 11.7, 11.4, 11.8, 11.2, 13.0, 13.0, 10.9, 11.6, 11.3, 12.0, 10.5, 13.1, 13.0, 10.9, 9.1, 13.4, 11.5, 11.2, 10.9, 13.5, 9.1, 9.9, 10.5, 11.7, 11.0, 13.0, 13.6, 12.3, 13.3, 13.7, 11.1, 13.4, 9.1, 11.3, 9.4, 9.1, 11.6, 11.6, 12.4, 9.8, 11.1, 13.1, 9.7, 9.2, 11.7, 10.6, 9.7, 9.2, 10.9, 10.1, 12.2, 12.7, 13.0, 11.2, 9.4, 11.0, 11.0, 9.2, 9.4, 9.2, 12.3, 11.0, 10.0, 9.0, 9.0, 9.0, 11.1, 9.9, 12.2, 11.1, 9.0, 11.8, 12.9, 9.0, 12.4, 9.0, 12.9, 11.2, 12.6, 11.5, 11.3, 11.2, 11.5, 10.5, 12.6, 11.9, 10.1, 11.0, 10.6, 11.3, 11.2, 11.5, 11.1, 12.8, 12.3, 10.4, 11.5, 11.7, 10.7, 9.5, 9.5, 9.5, 12.0, 10.8, 10.7, 10.7, 10.7, 12.1, 11.9, 10.8, 12.3, 9.4, 9.9, 10.4, 10.4, 12.6, 12.5, 9.4, 9.2, 11.2, 9.2, 9.2, 9.4, 11.2, 10.8, 9.2, 9.2, 12.5, 9.3, 11.4, 10.0, 10.6, 10.7, 10.0, 12.5, 10.6, 12.8, 9.3, 11.4, 9.5, 9.5, 9.5, 10.8, 10.8, 8.8, 10.8, 11.0, 12.4, 11.3, 11.2, 12.5, 10.0, 11.0, 10.5, 10.5, 11.0, 11.4, 11.3, 12.2, 12.6, 11.1, 12.3, 10.4, 8.8, 9.5, 8.8, 10.4, 13.0, 12.2, 10.5, 10.8, 13.2, 13.0, 10.0, 10.4, 12.4, 12.9, 13.2, 10.5, 13.0, 11.2, 12.7, 9.4, 12.9, 13.0, 13.6, 9.1, 10.4, 13.6, 12.2, 8.7, 10.5, 10.2, 12.5, 11.3, 10.2, 12.6, 10.2, 9.8, 10.8, 12.5, 12.5, 11.5, 11.4, 10.5, 12.6, 8.7, 11.0, 11.3, 10.2, 11.6, 9.8, 10.1, 9.2, 9.1, 9.1, 9.1, 9.1, 11.7, 12.6, 9.0, 10.1, 13.6, 9.1, 9.2, 8.8, 10.0, 9.1, 11.2, 9.2, 9.2, 9.5, 11.9, 9.8, 9.8, 10.8, 11.3, 12.1, 11.3, 10.8, 13.5, 10.3, 9.0, 11.6, 10.3, 12.5, 8.6, 13.4, 12.7, 9.2, 10.2, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.9, 9.0, 9.0, 11.0, 9.0, 10.0, 10.7, 10.7, 13.4, 11.0, 10.0, 10.7, 10.7, 11.0, 11.0, 11.1, 10.9, 11.5, 13.4, 9.4, 9.4, 9.4, 10.6, 9.4, 12.0, 10.2, 10.6, 13.5, 9.7, 12.2, 12.3, 12.2, 11.4, 12.7, 9.7, 10.8, 11.0, 9.5, 10.1, 13.2, 8.8, 9.5, 9.5, 9.5, 9.5, 9.5, 10.4, 9.9, 10.0, 10.1, 9.4, 9.3, 10.9, 11.4, 10.3, 11.0, 10.9, 10.8, 10.3, 11.0, 9.3, 10.2, 10.2, 10.8, 10.5, 11.1, 10.9, 11.4, 10.3, 12.9, 9.9, 11.3, 11.5, 11.5, 10.7, 10.4, 12.5, 9.5, 11.3, 13.0, 11.5, 11.5, 11.3, 13.2, 11.5, 9.6, 9.6, 9.7, 9.2, 8.4, 12.4, 12.4, 9.2, 8.4, 11.7, 11.0, 11.9, 13.2, 11.7, 9.1, 12.6, 9.1, 10.5, 10.6, 12.6, 13.7, 12.0, 12.5, 12.1, 11.3, 12.0, 10.3, 12.7, 9.2, 9.2, 9.5, 10.1, 10.1, 13.0, 13.1, 11.0, 9.2, 9.4, 9.5, 10.2, 10.1, 8.6, 9.0, 9.6, 9.9, 10.5, 11.4, 9.4, 11.1, 8.9, 8.9, 10.8, 12.2, 8.9, 12.5, 12.2, 12.5, 8.9, 10.8, 11.4, 10.8, 10.6, 9.2, 12.2, 12.3, 10.4, 10.4, 11.0, 10.6, 9.2, 13.5, 11.4, 11.5, 14.0, 12.5, 12.5, 12.8, 11.2, 11.2, 13.6, 9.2, 12.5, 11.1, 11.2, 14.0, 13.6, 9.4, 14.2, 13.2, 11.2, 10.2, 12.8, 10.1, 10.1, 10.3, 9.9, 11.5, 9.0, 9.0, 12.1, 13.3, 11.5, 11.0, 10.7, 9.4, 10.3, 9.3, 12.0, 11.0, 9.3, 10.1, 11.1, 9.9, 11.0, 11.0, 12.5, 12.7, 9.3, 9.3, 10.1, 8.8, 11.2, 10.8, 8.8, 11.2, 10.3, 12.0, 9.5, 9.5, 9.8, 9.0, 13.0, 11.8, 8.8, 11.2, 9.5, 9.4, 9.5, 10.4, 9.8, 10.4, 10.3, 9.4, 9.5, 11.9, 12.8, 13.0, 10.4, 10.4, 10.7, 10.7, 11.9, 10.4, 12.8, 9.9, 9.9, 9.4, 11.4, 9.9, 9.4, 9.2, 10.5, 11.0, 11.0, 12.1, 11.0, 12.8, 10.5, 10.5, 10.5, 9.5, 9.2, 11.1, 12.3, 11.1, 12.6, 9.5, 9.2, 10.8, 11.3, 12.8, 10.5, 9.8, 8.5, 9.3, 9.2, 11.4, 8.5, 9.3, 8.4, 9.2, 9.2, 10.4, 11.6, 12.4, 10.4, 9.3, 12.2, 11.0, 11.4, 9.5, 9.2, 11.1, 9.2, 11.0, 9.9, 9.9, 9.5, 12.4, 9.4, 9.3, 8.7, 8.7, 8.7, 8.7, 9.0, 10.7, 10.7, 11.3, 8.7, 11.7, 9.3, 8.7, 9.0, 11.7, 10.7, 11.4, 10.7, 11.3, 10.0, 10.0, 11.2, 9.7, 12.5, 12.9, 11.8, 10.6, 11.8, 10.7, 9.9, 12.0, 10.4, 8.5, 9.9, 9.4, 10.4, 11.0, 11.0, 10.4, 9.8, 9.4, 10.6, 10.1, 11.5, 11.4, 9.2, 9.7, 11.3, 9.6, 8.9, 10.0, 9.2, 9.0, 12.8, 9.0, 9.5, 10.0, 11.0, 9.2, 10.6, 10.0, 10.0, 11.7, 12.5, 11.1, 9.7, 12.3, 12.2, 11.3, 11.6, 11.3, 11.1, 11.2, 11.3, 12.0, 8.8, 8.8, 12.0, 12.0, 9.0, 9.3, 8.7, 12.8, 11.5, 10.0, 10.0, 10.3, 10.4, 13.4, 11.2, 9.1, 9.1, 10.8, 12.5, 11.3, 12.8, 9.1, 12.7, 11.0, 10.4, 10.4, 10.7, 10.9, 10.4, 10.4, 9.7, 11.0, 9.6, 13.9, 9.4, 12.5, 9.6, 9.5, 9.6, 9.5, 9.6, 8.7, 8.7, 8.7, 8.7, 8.7, 8.7, 10.4, 10.7, 12.0, 12.1, 13.1, 12.4, 12.6, 8.7, 12.0, 11.6, 9.3, 9.3, 11.1, 10.2, 10.6, 11.3, 9.4, 9.3, 11.1, 9.9, 11.8, 12.6, 9.4, 10.5, 12.3, 11.3, 9.6, 12.0, 11.2, 10.2, 12.4, 10.2, 13.4, 12.6, 9.8, 9.1, 12.4, 12.5, 11.7, 12.9, 10.1, 10.3, 11.7, 10.3, 10.8, 11.2, 11.8, 9.8, 10.0, 8.8, 10.1, 9.5, 9.5, 9.5, 9.2, 12.2, 9.5, 11.3, 12.1, 9.2, 11.2, 12.5, 10.6, 10.4, 10.1, 9.9, 11.0, 10.0, 12.7, 12.1, 10.4, 10.4, 9.2, 9.2, 10.5, 9.2, 11.9, 10.1, 11.1, 10.8, 11.8, 9.2, 9.2, 12.3, 10.1, 11.4, 10.4, 9.8, 9.9, 9.8, 11.2, 10.9, 9.2, 9.2, 12.0, 12.1, 12.4, 11.2, 12.7, 12.2, 12.2, 12.2, 11.2, 12.7, 12.7, 12.1, 9.4, 10.1, 9.4, 8.9, 8.9, 8.9, 8.9, 13.0, 10.3, 10.1, 10.5, 8.9, 10.1, 10.1, 11.0, 11.0, 11.0, 11.0, 10.0, 10.5, 9.7, 10.1, 9.4, 11.2, 9.4, 10.8, 9.4, 11.2, 11.0, 12.4, 9.4, 9.4, 9.5, 10.0, 12.5, 10.9, 10.5, 10.8, 11.0, 11.8, 12.6, 10.2, 12.0, 12.5, 11.5, 11.94, 12.89333333, 9.4, 12.2, 11.94, 12.89333333, 9.5, 10.6, 10.5, 11.46666667, 11.4, 9.5, 9.2, 9.5, 10.98, 9.4, 9.5, 9.2, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 10.4, 8.8, 10.03333333, 11.3, 10.4, 9.2, 11.1, 9.2, 11.3, 9.1, 9.4, 13.2, 12.7, 10.7, 11.43333333, 11.1, 12.7, 10.53333333, 11.6, 9.533333333, 9.8, 10.7, 12.0, 12.8, 9.5, 10.93333333, 9.1, 12.6, 9.5, 10.9, 10.93333333, 9.6, 9.3, 11.36666667, 12.5, 9.5, 11.0, 9.4, 11.33333333, 8.8, 9.4, 11.06666667, 12.2, 11.0, 11.33333333, 9.5, 9.5, 11.0, 11.2, 9.3, 10.8, 9.2, 9.4, 9.2, 10.5, 10.8, 9.4, 9.8, 9.8, 9.8, 9.4, 9.8, 12.1, 12.3, 9.733333333, 9.4, 9.4, 12.8, 11.05, 9.4, 12.8, 9.733333333, 13.1, 11.5, 13.1, 11.5, 9.1, 9.75, 10.5, 8.8, 8.8, 8.8, 8.8, 10.5, 10.5, 8.8, 9.9, 9.9, 9.9, 12.2, 10.8, 8.7, 13.2, 12.7, 9.4, 11.2, 11.33333333, 11.9, 11.35, 10.5, 9.8, 9.1, 12.4, 9.1, 9.8, 11.3, 11.3, 13.1, 12.5, 10.3, 10.7, 10.4, 9.5, 9.8, 12.5, 9.4, 9.0, 9.0, 9.0, 13.0, 9.9, 9.4, 10.6, 13.4, 12.5, 9.3, 9.3, 11.0, 10.3, 11.3, 10.9, 11.3, 12.1, 11.1, 9.8, 10.1, 12.4, 12.7, 9.6, 9.6, 9.1, 12.8, 9.6, 12.4, 9.55, 9.1, 12.5, 9.9, 11.2, 13.0, 13.0, 11.7, 13.1, 12.0, 10.55, 11.45, 10.2, 11.45, 9.3, 10.8, 12.2, 11.0, 10.4, 11.4, 14.05, 10.7, 10.2, 11.2, 12.33333333, 11.5, 9.5, 13.4, 12.5, 12.5, 11.2, 8.8, 11.2, 12.7, 9.8, 9.8, 11.7, 9.8, 9.6, 9.8, 9.7, 10.0, 11.7, 12.3, 9.8, 9.0, 9.1, 9.1, 9.1, 11.4, 10.5, 12.4, 9.1, 9.1, 10.1, 10.9, 11.05, 12.75, 12.7, 11.1, 11.1, 12.75, 13.0, 12.0, 11.5, 10.5, 11.1, 11.1, 11.1, 13.1, 12.75, 12.7, 9.6, 11.7, 9.7, 10.9, 10.7, 13.8, 12.15, 10.8, 10.7, 10.8, 10.8, 12.0, 10.8, 12.2, 9.4, 11.4, 12.5, 13.05, 12.4, 12.9, 12.0, 11.3, 10.0, 11.8, 9.4, 8.8, 11.1, 10.5, 9.3, 11.4, 11.8, 12.4, 11.6, 11.1, 12.4, 11.1, 11.0, 12.2, 11.0, 12.9, 10.9, 13.4, 10.7, 11.0, 11.4, 10.2, 11.0, 9.1, 11.0, 11.5, 12.0, 11.2, 11.2, 12.6, 11.0, 10.8, 10.9, 9.8, 9.8, 9.5, 11.26666667, 10.8, 13.4, 11.3, 8.9, 11.2, 11.5, 13.0, 12.6, 13.1, 11.2, 11.7, 10.9, 10.9, 11.6, 10.4, 10.9, 11.7, 10.8, 11.2, 10.0, 10.56666667, 11.73333333, 10.6, 10.5, 11.75, 11.4, 12.4, 10.1, 12.3, 13.1, 10.65, 11.4, 9.3, 10.2, 10.2, 13.1, 9.6, 12.8, 10.96666667, 10.96666667, 10.96666667, 11.0, 13.4, 11.2, 12.4, 11.2, 12.4, 10.13333333, 10.13333333, 12.4, 9.1, 10.15, 10.15, 11.5, 8.9, 10.46666667, 10.46666667, 11.8, 11.63333333, 10.6, 9.6, 11.8, 8.9, 10.5, 10.2, 13.1, 11.8, 12.2, 11.45, 10.5, 10.2, 9.0, 9.0, 9.0, 9.0, 9.1, 8.8, 9.0, 9.1, 12.9, 13.0, 12.9, 9.2, 9.8, 9.8, 10.1, 10.1, 10.9, 9.6, 10.4, 11.8, 10.8, 10.6, 12.7, 12.2, 10.8, 10.4, 11.1, 11.8, 10.0, 10.8, 10.3, 9.9, 10.0, 12.25, 10.2, 9.4, 9.7, 10.2, 10.4, 12.2, 9.4, 10.6, 10.7, 11.85, 11.7, 11.7, 10.15, 11.63333333, 10.8, 10.8, 12.3, 12.5, 11.65, 9.6, 10.9, 10.8, 11.2, 10.0, 10.5, 9.1, 10.5, 9.3, 9.3, 11.2, 10.6, 12.1, 12.0, 9.7, 12.4, 13.6, 13.6, 11.8, 10.0, 10.0, 9.1, 11.9, 11.75, 11.4, 13.0, 12.4, 9.4, 9.6, 9.6, 9.6, 9.6, 9.1, 12.0, 11.2, 10.1, 10.3, 12.3, 10.55, 10.9, 9.7, 9.8, 8.9, 8.9, 10.2, 11.7, 12.8, 12.8, 10.2, 13.55, 11.6, 8.9, 13.8, 9.4, 9.4, 10.7, 10.7, 12.3, 10.3, 10.4, 11.6, 10.7, 12.8, 11.9, 12.1, 9.2, 9.5, 11.0, 10.9, 10.4, 9.1, 11.4, 11.4, 9.7, 12.4, 13.7, 10.6, 11.2, 13.13333333, 12.4, 9.7, 11.0, 11.3, 12.0, 9.2, 10.7, 10.7, 11.4, 9.2, 12.1, 11.1, 9.7, 10.7, 10.9, 12.0, 10.6, 9.6, 13.1, 11.0, 11.6, 11.95, 11.1, 11.5, 11.3, 11.9, 9.5, 12.2, 12.2, 11.1, 9.6, 11.1, 9.6, 11.4, 11.4, 12.06666667, 9.0, 9.0, 11.4, 9.6, 11.0, 11.0, 11.2, 11.55, 13.3, 9.633333333, 13.6, 11.2, 13.0, 10.8, 9.8, 11.45, 12.05, 9.7, 11.9, 10.0, 9.7, 11.6, 8.8, 9.5, 9.533333333, 9.533333333, 9.4, 10.7, 11.5, 9.6, 9.55, 12.15, 13.0, 9.2, 9.4, 11.8, 10.6, 9.7, 11.2, 9.6, 9.4, 12.8, 11.8, 9.4, 9.8, 9.8, 9.8, 9.4, 9.4, 9.4, 10.0, 9.5, 10.5, 9.2, 10.5, 9.9, 9.1, 9.2, 9.2, 10.5, 9.3, 9.0, 9.2, 9.4, 9.7, 9.5, 9.4, 9.7, 9.3, 9.5, 9.5, 9.4, 9.8, 10.1, 10.6, 9.8, 9.4, 9.2, 9.6, 10.8, 9.7, 9.8, 10.5, 10.5, 9.3, 10.5, 10.3, 9.5, 13.1, 9.2, 9.5, 9.2, 9.2, 9.2, 9.4, 9.4, 9.4, 10.2, 9.5, 9.6, 9.4, 10.0, 9.4, 9.2, 9.3, 9.5, 9.8, 10.9, 10.9, 9.6, 10.7, 10.7, 10.5, 9.5, 9.5, 9.5, 9.2, 9.6, 10.5, 10.5, 10.7, 10.1, 9.1, 9.2, 9.4, 9.1, 9.4, 10.3, 10.1, 9.9, 9.6, 9.5, 9.0, 9.5, 9.9, 9.8, 9.6, 10.5, 12.9, 10.7, 9.2, 9.8, 9.0, 10.2, 10.4, 9.0, 9.2, 9.4, 9.2, 9.3, 9.3, 9.6, 9.3, 9.5, 9.8, 9.8, 9.7, 9.5, 10.5, 10.0, 9.4, 10.9, 9.2, 9.0, 10.9, 9.2, 9.5, 9.5, 9.4, 10.9, 10.9, 10.5, 9.4, 9.4, 13.0, 13.0, 9.8, 9.9, 9.6, 9.5, 9.2, 9.5, 9.5, 9.6, 9.5, 14.0, 9.4, 14.0, 9.4, 10.0, 9.3, 10.2, 10.5, 10.3, 9.4, 10.1, 10.1, 10.5, 10.5, 10.5, 10.5, 9.3, 9.3, 9.6, 9.2, 10.0, 9.4, 9.4, 9.5, 10.2, 9.0, 10.4, 9.5, 9.1, 9.2, 9.2, 11.5, 9.5, 9.5, 9.5, 10.5, 9.6, 9.5, 9.5, 9.3, 9.3, 9.3, 9.3, 9.7, 9.2, 9.7, 9.5, 9.5, 9.4, 9.8, 9.5, 9.7, 9.7, 9.4, 10.2, 10.1, 13.0, 11.4, 10.3, 9.3, 9.5, 9.2, 9.2, 10.8, 10.8, 9.3, 9.4, 10.5, 12.4, 10.0, 10.2, 10.1, 9.8, 10.5, 11.0, 9.1, 9.7, 9.5, 9.4, 9.4, 9.5, 10.0, 10.4, 10.5, 9.5, 9.8, 10.5, 11.0, 12.2, 9.9, 9.6, 11.0, 9.0, 9.0, 9.0, 9.2, 9.0, 9.0, 9.3, 10.9, 9.8, 9.2, 9.2, 9.9, 9.5, 9.3, 9.8, 9.9, 10.0, 9.9, 10.5, 9.5, 9.9, 9.3, 9.2, 9.2, 9.4, 10.5, 9.3, 9.4, 10.0, 9.3, 10.9, 10.2, 9.8, 12.8, 9.4, 10.1, 10.7, 10.1, 10.1, 9.4, 9.4, 10.7, 9.4, 10.1, 12.6, 10.5, 9.3, 9.9, 9.1, 10.5, 9.8, 9.8, 10.3, 10.3, 10.6, 9.2, 10.6, 10.5, 10.3, 10.1, 9.5, 9.5, 9.9, 9.6, 9.7, 9.6, 10.7, 10.1, 10.0, 9.5, 9.2, 9.3, 9.4, 9.5, 9.5, 9.5, 9.3, 9.4, 9.5, 9.4, 11.0, 11.0, 10.1, 10.4, 11.5, 10.4, 11.5, 9.7, 9.3, 9.5, 9.2, 9.2, 11.5, 11.5, 9.7, 9.5, 12.5, 12.5, 9.4, 11.0, 11.7, 12.2, 12.5, 10.3, 11.5, 9.8, 9.2, 11.3, 9.8, 9.8, 10.7, 9.9, 12.3, 12.0, 10.0, 9.4, 9.9, 9.4, 9.3, 13.0, 11.9, 12.8, 11.0, 11.7, 10.4, 9.8, 9.4, 9.9, 10.0, 10.2, 10.0, 11.8, 10.0, 9.0, 9.4, 12.0, 9.9, 8.7, 10.6, 9.2, 10.8, 11.8, 11.0, 12.0, 13.3, 10.8, 9.4, 10.0, 9.4, 9.4, 9.2, 9.7, 9.2, 9.6, 9.2, 10.0, 12.9, 10.0, 9.5, 9.1, 9.9, 13.0, 9.9, 11.0, 11.0, 9.4, 9.9, 10.8, 10.5, 10.5, 9.1, 10.1, 10.8, 10.8, 11.3, 9.6, 9.5, 9.5, 9.3, 11.7, 9.5, 9.3, 11.7, 10.5, 10.4, 9.9, 11.8, 12.3, 10.9, 11.0, 10.9, 12.3, 11.4, 10.6, 9.3, 10.4, 11.0, 9.2, 12.8, 9.5, 9.9, 9.5, 10.2, 11.2, 9.9, 9.3, 9.8, 11.3, 11.2, 11.6, 12.5, 10.1, 10.5, 11.2, 10.2, 10.8, 10.8, 9.1, 10.0, 11.2, 11.1, 13.4, 10.3, 9.6, 11.2, 9.0, 11.3, 9.3, 11.8, 9.0, 9.2, 9.7, 11.5, 14.0, 9.2, 9.8, 10.6, 11.4, 10.4, 10.6, 9.4, 10.2, 9.7, 11.0, 10.2, 10.1, 9.2, 11.7, 9.4, 9.4, 13.4, 10.0, 10.0, 10.0, 10.8, 10.2, 10.6, 13.3, 13.4, 11.6, 12.1, 11.0, 9.0, 11.1, 11.0, 11.6, 9.0, 12.0, 12.0, 10.9, 10.8, 12.5, 10.8, 9.5, 10.2, 11.4, 9.5, 10.2, 9.7, 11.8, 11.8, 9.3, 11.9, 8.4, 11.7, 11.0, 10.0, 9.1, 9.8, 9.4, 9.5, 9.9, 11.0, 11.4, 8.7, 9.4, 10.3, 10.3, 10.3, 12.8, 10.0, 10.3, 9.4, 10.7, 12.0, 11.2, 9.6, 11.0, 9.9, 11.0, 8.4, 9.1, 9.5, 10.7, 10.4, 9.4, 9.5, 10.0, 10.0, 11.5, 11.1, 11.1, 11.7, 11.1, 11.7, 12.7, 11.4, 9.2, 9.2, 10.1, 12.7, 11.4, 9.0, 9.0, 10.7, 11.7, 11.0, 11.7, 10.4, 9.6, 10.0, 10.2, 10.0, 9.5, 9.8, 9.8, 9.6, 9.6, 9.2, 9.9, 10.7, 9.6, 10.6, 9.3, 14.0, 10.5, 9.7, 11.5, 9.7, 9.0, 9.5, 9.3, 9.3, 10.0, 9.8, 9.3, 10.0, 9.0, 9.3, 9.0, 9.1, 9.2, 12.2, 10.5, 10.4, 12.7, 9.2, 9.4, 10.0, 9.8, 10.2, 9.7, 9.7, 9.8, 10.2, 9.3, 9.4, 9.4, 9.5, 12.1, 10.2, 10.2, 9.1, 9.1, 9.3, 9.3, 9.3, 9.5, 10.5, 11.3, 9.5, 9.7, 9.4, 9.4, 10.2, 10.3, 9.4, 9.5, 9.4, 9.5, 9.4, 10.1, 10.1, 11.0, 11.2, 11.3, 9.6, 11.2, 14.9, 12.0, 9.5, 9.4, 9.6, 10.5, 9.6, 11.0, 9.6, 9.0, 9.6, 10.2, 10.2, 9.7, 9.5, 9.2, 11.0, 9.2, 10.0, 9.5, 9.5, 9.5, 9.3, 10.2, 9.3, 9.9, 10.0, 9.6, 9.0, 10.2, 9.8, 11.3, 9.4, 11.3, 9.1, 9.7, 9.4, 9.4, 10.7, 9.8, 9.0, 9.4, 9.4, 12.8, 9.5, 9.5, 9.7, 10.8, 10.1, 9.5, 9.4, 9.6, 9.7, 9.9, 10.0, 10.5, 11.6, 10.0, 10.1, 9.5, 9.4, 9.4, 9.8, 9.2, 9.4, 10.0, 9.6, 9.5, 9.6, 9.2, 10.0, 9.5, 11.2, 10.4, 11.1, 9.5, 9.5, 12.7, 9.6, 11.5, 9.6, 9.5, 9.3, 9.5, 9.5, 9.3, 9.2, 9.3, 11.5, 9.5, 9.2, 10.0, 9.5, 9.5, 9.0, 9.4, 9.6, 9.5, 9.5, 9.5, 9.4, 9.5, 9.1, 10.7, 11.2, 9.8, 9.8, 9.2, 9.7, 9.6, 10.0, 9.6, 9.5, 9.5, 9.4, 9.5, 9.7, 9.6, 9.7, 9.4, 9.4, 9.5, 9.5, 10.0, 10.3, 10.3, 10.5, 9.8, 9.4, 9.8, 10.0, 9.8, 9.8, 9.5, 9.5, 10.1, 10.1, 9.3, 9.7, 9.6, 9.7, 10.8, 12.5, 10.2, 9.6, 10.8, 10.7, 10.7, 9.4, 10.0, 12.9, 9.6, 9.9, 12.8, 12.5, 12.8, 9.2, 10.3, 10.5, 10.9, 10.8, 11.4, 11.3, 10.8, 10.5, 11.9, 9.4, 9.6, 9.7, 14.0, 9.8, 9.8, 10.3, 10.7, 11.0, 10.7, 12.7, 11.1, 10.9, 11.1, 9.9, 9.9, 9.4, 9.3, 11.7, 11.7, 11.2, 10.0, 12.1, 10.3, 10.9, 9.4, 10.6, 9.8, 9.8, 9.9, 9.8, 9.8, 9.5, 9.5, 9.7, 10.9, 10.9, 11.7, 10.9, 11.3, 10.6, 11.2, 9.5, 11.5, 10.4, 9.7, 9.5, 9.7, 11.3, 11.2, 11.2, 10.9, 11.8, 10.6, 10.0, 11.1, 11.8, 11.8, 10.9, 11.8, 10.0, 9.5, 9.9, 11.4, 12.0, 9.5, 10.0, 10.5, 10.4, 12.1, 11.2, 9.3, 10.1, 9.7, 9.3, 9.7, 9.8, 10.7, 12.5, 10.7, 12.5, 11.0, 11.8, 10.8, 10.8, 10.8, 10.8, 9.5, 11.0, 11.5, 10.8, 11.5, 13.2, 10.9, 12.2, 12.2, 11.5, 11.9, 11.0, 10.1, 11.0, 11.8, 10.5, 11.0, 11.8, 10.1, 11.2, 11.0, 10.2, 9.2, 11.2, 12.0, 10.5, 9.8, 9.5, 9.8, 10.5, 11.8, 11.8, 10.4, 12.9, 11.4, 12.4, 12.5, 10.0, 9.7, 12.1, 11.1, 12.0, 12.4, 11.9, 11.9, 11.9, 12.4, 11.2, 12.1, 12.2, 10.4, 11.3, 11.1, 11.3, 10.0, 11.1, 9.3, 9.5, 11.2, 11.1, 11.0, 11.9, 9.2, 12.2, 10.2, 10.9, 10.9, 11.6, 10.7, 12.1, 9.4, 9.4, 9.1, 11.3, 10.4, 10.5, 10.0, 12.9, 10.5, 10.4, 11.3, 11.4, 9.4, 9.4, 10.9, 9.4, 9.4, 9.4, 9.4, 9.4, 10.1, 12.8, 12.8, 9.1, 12.9, 11.5, 10.6, 11.7, 12.8, 10.3, 12.8, 11.7, 11.7, 12.0, 10.9, 12.3, 10.4, 10.0, 10.0, 11.2, 11.4, 12.6, 12.7, 12.7, 10.4, 11.9, 11.9, 10.5, 12.3, 10.5, 10.4, 12.6, 11.6, 10.1, 10.5, 11.5, 11.0, 9.6, 10.4, 9.7, 10.6, 12.5, 9.2, 12.6, 11.1, 10.2, 9.8, 11.1, 10.9, 12.2, 11.4, 10.7, 10.4, 10.9, 10.8, 10.4, 9.2, 12.9, 12.7, 9.1, 9.1, 12.1, 9.1, 11.6, 12.1, 9.9, 12.5, 11.4, 11.8, 11.8, 10.2, 12.5, 10.9, 10.9, 10.8, 11.1, 9.2, 9.5, 10.7, 9.2, 10.2, 11.4, 11.0, 11.0, 12.3, 11.8, 12.3, 9.5, 12.0, 9.5, 9.6, 11.6, 11.2, 9.9, 9.9, 11.8, 11.4, 11.5, 12.0, 10.8, 10.5, 10.8, 9.4, 12.5, 9.4, 12.4, 12.0, 11.2, 12.0, 12.4, 12.8, 12.3, 11.7, 9.5, 10.8, 10.0, 12.3, 11.0, 9.5, 13.6, 11.3, 11.3, 11.3, 13.3, 12.9, 13.1, 12.3, 12.3, 11.2, 11.5, 11.3, 13.5, 11.5, 10.0, 10.5, 10.4, 9.5, 13.6, 11.2, 11.8, 11.9, 11.4, 11.4, 9.1, 9.5, 9.5, 11.0, 11.4, 10.0, 10.1, 10.4, 9.8, 11.8, 11.6, 12.0, 12.8, 12.5, 9.8, 11.1, 11.4, 9.8, 11.8, 12.9, 10.6, 10.8, 11.1, 10.2, 11.8, 10.0, 10.0, 9.4, 10.2, 12.4, 12.0, 11.5, 10.5, 10.8, 12.3, 9.5, 9.5, 11.5, 11.2, 12.7, 11.4, 11.0, 11.0, 11.4, 10.5, 9.3, 10.9, 11.9, 12.2, 11.9, 10.9, 9.6, 12.5, 10.8, 12.4, 10.8, 9.5, 9.5, 9.5, 9.8, 10.9, 9.5, 9.8, 11.2, 11.7, 9.4, 11.0, 11.0, 11.0, 10.0, 11.0, 11.2, 10.4, 9.3, 10.4, 10.5, 10.4, 11.3, 9.5, 12.0, 10.6, 10.9, 11.5, 11.5, 9.6, 12.0, 10.3, 9.4, 9.2, 9.6, 13.6, 9.5, 11.8, 10.8, 9.5, 9.3, 12.8, 11.5, 9.4, 12.8, 9.6, 11.8, 9.3, 9.8, 12.2, 9.5, 10.3, 10.5, 10.0, 10.5, 11.1, 10.9, 10.9, 9.8, 9.8, 9.5, 10.9, 11.0, 9.2, 11.0, 11.3, 11.3, 9.3, 11.2, 9.8, 9.6, 11.8, 10.3, 10.3, 11.4, 9.5, 14.0, 14.0, 11.7, 11.2, 9.3, 11.2, 9.5, 12.0, 9.7, 9.5, 11.5, 10.4, 10.4, 10.9, 10.2, 10.9, 10.5, 12.4, 13.0, 10.2, 10.2, 11.0, 10.9, 12.4, 9.7, 10.9, 9.5, 9.5, 12.1, 12.2, 10.9, 12.5, 11.7, 11.2, 11.2, 9.2, 9.8, 10.1, 11.1, 10.1, 9.2, 9.8, 12.8, 10.5, 10.1, 10.1, 9.8, 12.5, 11.9, 9.8, 9.1, 10.1, 12.5, 11.4, 11.0, 10.6, 10.6, 10.6, 10.6, 9.3, 9.8, 9.8, 9.2, 9.7, 9.6, 10.0, 12.6, 9.5, 9.5, 9.5, 10.5, 10.5, 10.5, 10.4, 10.5, 11.0, 10.2, 11.4, 9.5, 9.5, 10.8, 10.0, 11.8, 10.3, 10.3, 10.0, 10.1, 10.1, 11.1, 9.5, 10.03333333, 10.9, 10.1, 10.03333333, 9.8, 11.8, 9.5, 9.8, 10.5, 9.8, 10.4, 9.2, 11.6, 9.2, 9.3, 9.8, 9.9, 10.0, 12.2, 9.9, 10.8, 10.8, 9.6, 9.9, 9.9, 9.5, 9.2, 9.6, 9.6, 10.3, 9.7, 12.5, 11.0, 9.8, 10.2, 9.2, 9.55, 9.55, 9.9, 10.2, 11.1, 9.9, 9.9, 11.9, 10.0, 10.7, 11.3, 10.9, 10.7, 12.4, 10.7, 11.9, 10.6, 10.9, 10.1, 9.6, 9.4, 9.6, 12.1, 9.8, 9.9, 9.8, 9.4, 11.4, 11.0, 9.6, 9.6, 12.1, 11.2, 11.0, 11.3, 10.4, 9.9, 11.7, 10.1, 9.0, 9.0, 8.5, 11.1, 10.3, 11.06666667, 11.3, 9.566666667, 9.8, 11.7, 11.1, 9.6, 9.8, 9.7, 9.7, 11.3, 11.3, 11.0, 11.6, 9.0, 10.9, 10.9, 10.55, 9.0, 10.5, 11.9, 10.4, 10.0, 10.4, 10.8, 9.7, 9.7, 10.0, 11.0, 10.0, 9.7, 9.7, 12.6, 11.1, 11.0, 8.8, 13.56666667, 8.8, 13.6, 10.2, 10.6, 10.1, 10.6, 10.3, 10.7, 10.9, 9.7, 10.3, 10.6, 11.4, 10.8, 12.4, 11.4, 11.95, 9.7, 10.0, 10.6, 9.7, 11.5, 10.8, 11.5, 9.6, 9.4, 9.8, 11.0, 11.4, 9.95, 10.8, 11.4, 10.6, 11.1, 9.7, 9.8, 10.4, 10.5, 9.233333333, 9.25, 10.6, 10.3, 10.5, 10.2, 10.3, 9.05, 10.6, 10.4, 10.0, 9.7, 9.6, 10.8, 10.1, 10.2, 11.3, 10.2, 9.9, 9.0, 11.7, 9.7, 10.3, 10.2, 12.0, 9.9, 11.6, 10.9, 10.75, 10.4, 11.2, 10.1, 10.2, 12.1, 10.4, 11.4, 9.5, 9.4, 11.3, 9.4, 11.0, 10.55, 9.9, 11.0, 9.5, 9.9, 9.9, 9.9, 10.1, 10.1, 10.1, 10.9, 11.2, 10.1, 9.2, 11.5, 12.4, 11.1, 9.5, 12.5, 10.5, 11.8, 10.8, 11.9, 11.3, 11.3, 11.9, 11.3, 11.9, 9.8, 11.6, 11.5, 11.4, 10.9, 12.8, 9.2, 11.6, 11.6, 11.0, 9.5, 10.5, 11.2, 11.0, 10.2, 11.0], \"sizemode\": \"area\", \"sizeref\": 0.03725, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"\", \"showlegend\": false, \"type\": \"scattergl\", \"x\": [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 7, 5, 7, 6, 8, 6, 5, 8, 7, 8, 5, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 6, 7, 4, 5, 6, 5, 6, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 7, 5, 8, 5, 6, 5, 5, 6, 8, 5, 7, 7, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 6, 5, 7, 7, 7, 6, 6, 7, 4, 6, 5, 5, 5, 5, 5, 6, 5, 6, 6, 5, 6, 5, 5, 5, 5, 4, 6, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 7, 7, 6, 5, 7, 5, 5, 5, 5, 6, 5, 7, 6, 5, 5, 6, 6, 6, 6, 6, 4, 7, 6, 7, 6, 6, 5, 6, 6, 6, 7, 8, 8, 7, 5, 5, 6, 5, 5, 6, 7, 5, 5, 6, 6, 4, 7, 5, 6, 4, 5, 4, 6, 6, 5, 5, 6, 5, 5, 6, 5, 8, 4, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 4, 5, 5, 4, 5, 6, 5, 7, 5, 6, 7, 5, 5, 5, 5, 5, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 4, 6, 6, 6, 6, 6, 6, 6, 7, 6, 5, 5, 7, 6, 5, 6, 7, 7, 7, 5, 4, 3, 5, 3, 6, 8, 7, 7, 6, 4, 6, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 5, 5, 5, 6, 6, 5, 4, 7, 8, 8, 4, 5, 5, 5, 6, 7, 7, 7, 7, 6, 5, 7, 3, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 7, 6, 7, 8, 6, 6, 5, 6, 6, 5, 7, 6, 7, 5, 6, 6, 5, 5, 6, 6, 6, 5, 8, 5, 6, 5, 5, 6, 6, 6, 5, 7, 7, 6, 6, 5, 6, 6, 7, 6, 6, 5, 7, 7, 6, 7, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 7, 6, 6, 6, 5, 6, 6, 5, 6, 7, 7, 7, 7, 6, 7, 7, 6, 6, 6, 7, 7, 7, 5, 6, 7, 7, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 5, 5, 5, 6, 5, 7, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 7, 6, 6, 6, 7, 6, 6, 5, 5, 5, 5, 5, 7, 4, 8, 7, 5, 8, 7, 5, 7, 6, 8, 6, 6, 3, 5, 6, 6, 7, 5, 5, 7, 7, 7, 6, 7, 5, 6, 5, 5, 5, 5, 6, 5, 5, 6, 6, 5, 5, 6, 5, 6, 7, 6, 5, 7, 6, 6, 6, 5, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 4, 6, 5, 4, 6, 6, 6, 5, 6, 6, 5, 7, 6, 7, 6, 6, 6, 6, 7, 6, 5, 6, 6, 5, 5, 5, 6, 6, 5, 6, 4, 6, 6, 6, 6, 5, 6, 6, 6, 5, 5, 6, 5, 6, 4, 5, 6, 6, 6, 6, 6, 6, 7, 5, 7, 7, 7, 7, 7, 7, 5, 6, 5, 6, 7, 5, 6, 7, 5, 6, 6, 5, 6, 6, 5, 7, 5, 7, 7, 6, 6, 7, 7, 7, 5, 5, 6, 6, 7, 6, 6, 7, 7, 6, 5, 6, 5, 5, 5, 7, 5, 6, 8, 7, 6, 6, 5, 5, 6, 6, 5, 5, 5, 6, 8, 6, 5, 5, 5, 5, 7, 6, 6, 6, 5, 5, 6, 5, 5, 8, 4, 6, 6, 6, 5, 5, 6, 5, 6, 6, 7, 5, 5, 5, 7, 4, 6, 5, 5, 5, 4, 6, 5, 7, 7, 7, 7, 6, 7, 6, 6, 5, 5, 4, 5, 7, 4, 5, 6, 5, 6, 6, 6, 5, 6, 6, 8, 6, 5, 6, 6, 7, 7, 7, 5, 5, 6, 5, 5, 5, 7, 4, 6, 7, 4, 6, 5, 5, 6, 5, 6, 5, 5, 5, 5, 7, 4, 6, 6, 5, 5, 6, 6, 5, 5, 6, 6, 5, 6, 7, 6, 5, 7, 7, 5, 5, 6, 8, 7, 5, 7, 5, 5, 5, 6, 6, 7, 6, 5, 6, 6, 5, 7, 6, 3, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 5, 6, 7, 7, 6, 6, 5, 6, 6, 6, 5, 6, 7, 7, 7, 7, 7, 5, 9, 6, 6, 5, 7, 8, 4, 6, 7, 8, 5, 6, 6, 6, 7, 6, 6, 7, 5, 7, 5, 5, 6, 6, 6, 8, 6, 5, 5, 7, 6, 6, 5, 6, 6, 6, 5, 6, 7, 6, 6, 5, 5, 5, 5, 5, 9, 6, 5, 6, 5, 6, 6, 9, 7, 7, 6, 4, 8, 6, 6, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 5, 5, 7, 6, 7, 5, 7, 5, 7, 7, 5, 5, 7, 5, 8, 7, 6, 6, 5, 6, 7, 8, 7, 6, 5, 5, 6, 3, 5, 7, 9, 6, 6, 8, 7, 6, 6, 6, 6, 7, 6, 7, 6, 7, 6, 7, 5, 7, 7, 6, 6, 6, 6, 6, 7, 6, 5, 6, 8, 4, 4, 8, 4, 5, 5, 5, 5, 5, 4, 5, 7, 6, 6, 7, 7, 6, 6, 6, 8, 5, 5, 7, 5, 5, 7, 5, 6, 5, 5, 5, 5, 5, 6, 7, 5, 6, 7, 7, 7, 7, 5, 5, 4, 5, 5, 6, 6, 5, 6, 5, 5, 7, 7, 6, 6, 7, 6, 6, 6, 5, 6, 6, 7, 7, 7, 7, 6, 7, 6, 5, 6, 5, 7, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 7, 6, 4, 5, 4, 6, 6, 5, 6, 6, 7, 7, 5, 6, 7, 6, 6, 6, 5, 7, 6, 6, 7, 6, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 6, 6, 6, 6, 4, 7, 4, 6, 6, 6, 6, 3, 6, 5, 5, 7, 5, 4, 5, 4, 5, 7, 5, 5, 5, 5, 6, 5, 6, 5, 4, 5, 5, 6, 5, 6, 4, 7, 5, 5, 5, 6, 5, 6, 7, 7, 6, 7, 5, 7, 5, 6, 7, 6, 5, 5, 6, 7, 6, 6, 6, 7, 5, 8, 8, 6, 7, 6, 6, 6, 7, 5, 8, 6, 7, 6, 7, 6, 6, 5, 5, 5, 7, 8, 7, 7, 4, 7, 6, 6, 5, 4, 8, 5, 5, 5, 5, 6, 6, 7, 5, 5, 6, 7, 7, 5, 7, 6, 6, 5, 5, 5, 6, 8, 8, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 4, 6, 4, 4, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 5, 6, 5, 6, 6, 5, 6, 5, 6, 5, 7, 6, 5, 5, 5, 6, 5, 6, 7, 5, 5, 8, 6, 5, 6, 7, 6, 7, 6, 6, 7, 7, 6, 7, 6, 7, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 8, 5, 8, 8, 6, 7, 6, 5, 7, 6, 7, 5, 6, 3, 6, 7, 7, 6, 6, 5, 6, 5, 7, 5, 6, 7, 7, 7, 5, 4, 7, 6, 7, 5, 7, 5, 6, 7, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 8, 7, 5, 6, 7, 5, 5, 5, 6, 6, 7, 5, 6, 6, 6, 7, 5, 8, 7, 6, 7, 7, 7, 6, 6, 6, 6, 4, 4, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 7, 8, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 7, 6, 6, 6, 5, 5, 6, 7, 8, 6, 6, 8, 5, 5, 6, 6, 5, 6, 6, 8, 8, 7, 7, 8, 4, 7, 7, 6, 5, 5, 5, 6, 6, 8, 7, 6, 7, 7, 4, 5, 7, 6, 5, 6, 5, 6, 7, 6, 6, 7, 7, 6, 6, 7, 6, 7, 7, 6, 6, 6, 5, 7, 6, 7, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 6, 7, 6, 8, 8, 5, 4, 8, 6, 7, 6, 6, 6, 8, 6, 6, 5, 6, 3, 5, 7, 4, 6, 5, 4, 6, 6, 6, 5, 7, 5, 4, 5, 7, 6, 5, 5, 5, 7, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 7, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 8, 5, 6, 7, 5, 5, 7, 6, 5, 6, 4, 6, 5, 6, 6, 6, 6, 6, 6, 4, 3, 6, 6, 6, 6, 5, 6, 5, 5, 8, 8, 7, 5, 7, 6, 6, 7, 5, 5, 7, 8, 7, 6, 6, 6, 5, 5, 6, 7, 6, 7, 6, 6, 6, 6, 5, 6, 5, 5, 6, 6, 5, 6, 6, 6, 6, 5, 7, 7, 6, 6, 6, 5, 6, 6, 6, 6, 4, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 4, 4, 6, 5, 7, 6, 5, 6, 5, 5, 6, 5, 5, 6, 6, 5, 4, 6, 6, 4, 5, 4, 5, 6, 7, 5, 6, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 7, 5, 9, 6, 7, 5, 7, 6, 6, 7, 7, 5, 6, 6, 6, 6, 8, 7, 5, 6, 6, 7, 6, 6, 5, 6, 6, 5, 6, 8, 7, 6, 6, 5, 6, 5, 5, 5, 6, 7, 7, 7, 7, 6, 7, 5, 4, 7, 6, 4, 6, 5, 5, 5, 6, 5, 5, 6, 6, 7, 6, 4, 8, 5, 6, 7, 6, 6, 7, 5, 5, 6, 5, 7, 6, 6, 5, 5, 6, 7, 7, 7, 7, 5, 7, 3, 6, 4, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 4, 5, 5, 6, 6, 5, 4, 5, 5, 5, 6, 6, 5, 8, 6, 6, 4, 6, 7, 7, 6, 8, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 4, 6, 6, 6, 6, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 6, 6, 5, 5, 5, 5, 6, 6, 7, 6, 5, 5, 5, 5, 5, 7, 6, 6, 6, 6, 6, 6, 5, 6, 8, 8, 5, 4, 6, 6, 7, 6, 7, 7, 5, 7, 5, 5, 6, 5, 5, 6, 5, 8, 6, 6, 6, 5, 6, 6, 6, 5, 5, 6, 5, 6, 6, 5, 6, 6, 7, 6, 7, 4, 6, 6, 6, 5, 7, 6, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7, 6, 5, 6, 7, 6, 6, 5, 7, 6, 6, 6, 5, 5, 5, 5, 6, 7, 6, 7, 5, 7, 6, 4, 5, 5, 6, 6, 6, 7, 5, 6, 6, 6, 6, 7, 7, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 7, 7, 5, 5, 6, 6, 6, 6, 7, 5, 6, 6, 6, 7, 5, 5, 5, 4, 6, 6, 5, 6, 5, 6, 3, 6, 5, 6, 5, 6, 7, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 7, 5, 5, 4, 7, 6, 5, 5, 5, 6, 6, 5, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 6, 7, 5, 5, 5, 6, 5, 6, 6, 6, 8, 8, 8, 8, 8, 6, 6, 5, 6, 7, 4, 8, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 5, 7, 6, 5, 5, 6, 5, 6, 7, 5, 7, 6, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 5, 5, 7, 3, 5, 5, 5, 5, 6, 5, 7, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 6, 7, 6, 6, 5, 5, 6, 5, 5, 6, 6, 4, 5, 5, 6, 5, 6, 6, 5, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 6, 5, 4, 5, 6, 4, 5, 7, 5, 5, 7, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 5, 7, 6, 6, 6, 5, 5, 6, 6, 5, 6, 6, 4, 5, 4, 6, 6, 4, 6, 7, 6, 6, 5, 5, 5, 7, 7, 7, 7, 7, 5, 5, 7, 7, 5, 7, 5, 6, 6, 6, 5, 5, 6, 7, 5, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 5, 6, 5, 6, 5, 5, 5, 5, 6, 7, 5, 6, 7, 6, 6, 6, 5, 6, 5, 6, 6, 7, 6, 6, 7, 6, 7, 4, 5, 5, 7, 6, 7, 6, 6, 5, 5, 6, 5, 4, 6, 6, 5, 5, 5, 5, 5, 7, 4, 6, 6, 5, 6, 7, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 6, 5, 5, 6, 6, 6, 7, 6, 6, 5, 7, 4, 6, 6, 6, 5, 6, 6, 5, 5, 5, 5, 5, 5, 5, 7, 7, 6, 6, 7, 7, 6, 7, 6, 8, 7, 7, 5, 5, 5, 6, 7, 5, 5, 5, 6, 5, 7, 5, 7, 6, 6, 7, 5, 4, 7, 6, 5, 6, 6, 5, 6, 5, 6, 5, 5, 6, 5, 6, 8, 5, 5, 5, 4, 5, 6, 6, 5, 8, 5, 6, 6, 4, 6, 6, 5, 5, 6, 6, 7, 6, 7, 6, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 7, 5, 4, 3, 6, 6, 6, 6, 5, 4, 4, 6, 8, 6, 8, 5, 4, 4, 4, 8, 8, 6, 7, 6, 5, 5, 5, 6, 6, 6, 4, 4, 6, 6, 5, 5, 6, 6, 5, 4, 6, 6, 4, 4, 4, 5, 6, 5, 5, 5, 7, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 5, 5, 6, 6, 4, 5, 6, 5, 6, 5, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 7, 6, 5, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 5, 5, 6, 6, 5, 5, 7, 6, 6, 7, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 4, 4, 5, 5, 5, 5, 6, 5, 5, 4, 4, 6, 6, 6, 7, 6, 5, 6, 6, 6, 5, 7, 7, 6, 6, 7, 5, 5, 7, 8, 5, 5, 8, 7, 6, 6, 5, 6, 4, 4, 5, 7, 6, 6, 6, 6, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 5, 5, 6, 5, 7, 7, 7, 5, 7, 7, 5, 6, 5, 6, 5, 6, 5, 7, 5, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 7, 6, 5, 7, 7, 7, 7, 7, 7, 6, 7, 4, 6, 7, 5, 5, 7, 5, 5, 6, 5, 6, 7, 5, 6, 7, 7, 6, 6, 6, 6, 6, 5, 5, 7, 5, 5, 7, 7, 7, 7, 6, 5, 5, 7, 7, 5, 5, 7, 7, 6, 5, 6, 7, 5, 5, 5, 6, 5, 5, 6, 6, 6, 5, 5, 5, 6, 7, 7, 5, 6, 6, 5, 5, 7, 5, 5, 5, 4, 7, 7, 6, 6, 6, 6, 8, 7, 5, 7, 7, 6, 5, 7, 7, 7, 6, 7, 7, 6, 6, 5, 6, 6, 6, 6, 5, 6, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 5, 5, 5, 6, 6, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 5, 6, 6, 6, 7, 5, 7, 6, 6, 5, 6, 6, 6, 7, 5, 5, 5, 7, 6, 6, 6, 7, 5, 7, 6, 5, 6, 6, 6, 7, 6, 6, 8, 6, 8, 6, 6, 8, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 5, 7, 6, 7, 7, 8, 8, 8, 6, 7, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 7, 5, 8, 7, 5, 7, 7, 5, 5, 6, 8, 8, 6, 5, 5, 6, 7, 7, 5, 6, 7, 7, 5, 5, 7, 4, 6, 5, 5, 5, 6, 6, 6, 6, 7, 7, 5, 5, 5, 6, 7, 6, 6, 6, 6, 7, 7, 6, 6, 6, 6, 5, 7, 7, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 8, 7, 6, 6, 6, 6, 6, 6, 6, 7, 7, 5, 6, 7, 6, 7, 8, 7, 6, 5, 5, 6, 6, 5, 7, 5, 7, 7, 6, 5, 5, 4, 6, 8, 6, 5, 7, 7, 5, 5, 5, 5, 5, 6, 7, 5, 6, 7, 5, 5, 6, 6, 6, 5, 5, 7, 5, 6, 6, 6, 7, 6, 5, 4, 6, 8, 6, 6, 5, 8, 7, 7, 6, 8, 8, 6, 6, 5, 4, 5, 5, 8, 8, 6, 5, 5, 8, 6, 8, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 6, 6, 5, 7, 7, 6, 5, 7, 5, 8, 6, 6, 5, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 6, 6, 6, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 6, 8, 6, 7, 7, 7, 7, 7, 7, 6, 6, 6, 7, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 4, 5, 6, 6, 7, 6, 5, 6, 8, 8, 6, 5, 6, 6, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 5, 4, 5, 7, 5, 6, 6, 5, 5, 5, 6, 5, 5, 8, 5, 5, 6, 5, 4, 6, 8, 8, 7, 6, 5, 5, 7, 5, 5, 5, 5, 6, 5, 6, 7, 6, 6, 7, 3, 6, 7, 6, 6, 6, 7, 6, 6, 7, 5, 7, 7, 7, 6, 6, 7, 5, 6, 6, 6, 5, 4, 6, 7, 5, 6, 6, 6, 7, 7, 7, 5, 6, 5, 6, 5, 6, 5, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 5, 7, 7, 6, 6, 5, 7, 7, 6, 6, 6, 7, 6, 6, 6, 6, 8, 8, 8, 6, 6, 5, 6, 4, 6, 6, 5, 6, 7, 6, 4, 7, 8, 5, 7, 6, 6, 5, 5, 6, 7, 6, 7, 7, 7, 6, 7, 7, 5, 7, 7, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 4, 7, 5, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 6, 7, 5, 7, 6, 7, 6, 7, 7, 5, 6, 6, 7, 7, 6, 6, 8, 8, 5, 6, 6, 6, 6, 6, 6, 5, 7, 8, 6, 3, 6, 6, 6, 5, 5, 7, 7, 7, 5, 4, 8, 7, 5, 6, 5, 6, 7, 6, 6, 7, 7, 7, 6, 5, 5, 8, 5, 7, 6, 5, 5, 5, 6, 7, 5, 8, 6, 7, 7, 7, 7, 3, 6, 7, 7, 7, 7, 7, 6, 7, 6, 6, 7, 5, 5, 6, 7, 6, 6, 7, 5, 7, 5, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 7, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 5, 6, 6, 6, 8, 5, 7, 7, 7, 6, 6, 6, 8, 5, 6, 7, 6, 8, 6, 6, 5, 5, 6, 6, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 3, 7, 6, 6, 6, 7, 7, 6, 4, 6, 7, 5, 8, 8, 5, 6, 6, 6, 6, 6, 5, 6, 6, 5, 7, 6, 6, 6, 5, 5, 5, 5, 5, 7, 6, 5, 8, 6, 6, 7, 8, 7, 7, 5, 6, 5, 6, 5, 7, 7, 6, 6, 8, 6, 7, 5, 6, 6, 5, 8, 6, 8, 6, 6, 8, 6, 6, 8, 7, 6, 7, 8, 5, 8, 7, 8, 7, 6, 6, 6, 8, 7, 6, 7, 7, 6, 7, 7, 6, 6, 7, 7, 6, 5, 7, 7, 7, 6, 7, 5, 6, 6, 7, 6, 6, 6, 7, 7, 7, 5, 7, 5, 7, 5, 5, 6, 6, 6, 6, 4, 7, 5, 5, 6, 6, 5, 5, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 4, 6, 5, 6, 5, 6, 6, 6, 6, 7, 6, 6, 4, 6, 6, 6, 7, 5, 7, 4, 7, 5, 7, 6, 6, 7, 7, 7, 6, 6, 6, 7, 5, 7, 7, 7, 7, 7, 6, 7, 6, 6, 7, 6, 7, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 5, 7, 6, 7, 7, 6, 6, 7, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 7, 7, 7, 6, 6, 6, 6, 6, 7, 6, 7, 7, 5, 6, 4, 6, 6, 6, 6, 7, 7, 8, 7, 8, 8, 6, 4, 6, 8, 8, 7, 8, 5, 7, 6, 7, 8, 7, 5, 6, 7, 6, 5, 7, 6, 8, 7, 6, 7, 6, 5, 5, 6, 8, 7, 6, 7, 7, 5, 6, 7, 6, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 4, 6, 5, 6, 5, 5, 7, 5, 5, 7, 6, 6, 7, 7, 7, 5, 6, 6, 5, 6, 5, 6, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 5, 6, 5, 6, 7, 5, 5, 5, 8, 6, 5, 5, 5, 6, 6, 7, 5, 5, 8, 5, 5, 5, 6, 5, 4, 6, 6, 5, 5, 6, 5, 6, 7, 7, 5, 6, 6, 5, 6, 7, 5, 5, 5, 6, 5, 5, 6, 6, 5, 6, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 5, 6, 6, 3, 5, 5, 5, 5, 7, 5, 6, 6, 6, 5, 6, 6, 5, 7, 6, 6, 5, 6, 7, 7, 5, 5, 6, 5, 5, 6, 6, 5, 5, 6, 6, 6, 7, 6, 5, 6, 5, 6, 5, 6, 7, 6, 7, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 6, 4, 5, 5, 7, 5, 5, 5, 4, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 6, 6, 6, 7, 5, 5, 4, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 7, 6, 7, 7, 6, 5, 7, 6, 6, 5, 7, 5, 5, 5, 6, 5, 5, 5, 6, 6, 8, 4, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 6, 6, 7, 5, 5, 5, 5, 6, 7, 5, 6, 5, 5, 6, 6, 6, 5, 7, 7, 5, 4, 6, 4, 6, 6, 7, 6, 6, 4, 6, 7, 7, 6, 7, 6, 5, 7, 7, 6, 7, 6, 6, 6, 6, 6, 6, 5, 7, 7, 7, 5, 7, 7, 6, 6, 6, 5, 6, 6, 7, 6, 6, 5, 6, 6, 6, 7, 6, 6, 6, 5, 5, 6, 6, 5, 4, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 5, 6, 5, 6, 5, 5, 5, 4, 5, 5, 7, 7, 7, 7, 7, 6, 6, 6, 7, 6, 5, 7, 7, 6, 5, 6, 6, 6, 5, 5, 6, 5, 5, 8, 6, 5, 6, 6, 5, 6, 7, 5, 4, 6, 5, 6, 6, 6, 6, 6, 6, 5, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 5, 7, 7, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 8, 7, 5, 6, 6, 6, 7, 5, 5, 5, 5, 7, 6, 5, 5, 6, 6, 5, 6, 5, 6, 7, 6, 6, 6, 6, 6, 6, 7, 7, 6, 7, 5, 6, 6, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 8, 6, 7, 7, 5, 6, 5, 6, 7, 6, 6, 7, 5, 6, 6, 6, 7, 7, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 8, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 6, 7, 6, 6, 6, 6, 4, 4, 5, 5, 5, 4, 6, 5, 6, 6, 4, 4, 7, 5, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 7, 6, 6, 7, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 4, 5, 5, 5, 5, 6, 6, 6, 7, 6, 6, 6, 6, 7, 7, 6, 5, 6, 5, 6, 6, 6, 6, 7, 5, 4, 6, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 7, 6, 6, 6, 5, 6, 6, 7, 7, 5, 7, 7, 7, 5, 6, 7, 6, 6, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 7, 6, 5, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 5, 6, 5, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 5, 7, 6, 5, 7, 5, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 6, 6, 5, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 6, 6, 5, 5, 5, 7, 5, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 7, 5, 5, 6, 5, 4, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 5, 5, 6, 6, 7, 6, 6, 7, 7, 7, 5, 5, 5, 6, 6, 6, 7, 7, 6, 7, 7, 5, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 5, 6, 7, 4, 6, 5, 5, 5, 5, 7, 5, 7, 7, 5, 6, 7, 7, 6, 6, 5, 6, 6, 6, 7, 7, 7, 6, 6, 6, 6, 5, 6, 5, 6, 6, 6, 7, 6, 6, 7, 7, 7, 5, 5, 5, 7, 5, 7, 7, 7, 7, 7, 6, 6, 6, 5, 6, 7, 7, 6, 5, 7, 7, 5, 6, 5, 5, 7, 7, 6, 6, 7, 6, 5, 4, 6, 6, 6, 6, 5, 4, 6, 6, 6, 6, 7, 5, 6, 7, 7, 6, 7, 6, 5, 5, 6, 6, 7, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 6, 6, 5, 5, 3, 6, 6, 5, 6, 5, 6, 7, 6, 6, 6, 7, 7, 6, 6, 6, 6, 7, 7, 6, 8, 8, 7, 6, 6, 6, 6, 5, 7, 4, 6, 6, 6, 6, 4, 5, 5, 6, 6, 5, 7, 8, 8, 5, 6, 6, 6, 6, 6, 5, 7, 7, 6, 5, 6, 7, 7, 8, 7, 4, 6, 6, 6, 5, 6, 5, 6, 7, 5, 6, 7, 6, 6, 6, 6, 5, 6, 6, 7, 5, 6, 6, 6, 5, 7, 6, 6, 5, 6, 7, 6, 5, 6, 6, 4, 7, 6, 6, 5, 6, 5, 6, 7, 6, 5, 6, 5, 5, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 5, 6, 6, 6, 6, 6, 7, 6, 5, 6, 6, 6, 7, 5, 4, 6, 6, 6, 5, 6, 5, 6, 7, 7, 5, 6, 6, 6, 5, 6, 5, 6, 7, 6, 5, 5, 5, 6, 5, 5, 5, 7, 7, 5, 5, 5, 5, 5, 5, 5, 7, 5, 4, 6, 6, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 6, 7, 4, 5, 5, 4, 6, 5, 5, 4, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 7, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 4, 5, 5, 5, 6, 5, 4, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 4, 6, 5, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 6, 6, 6, 4, 5, 5, 5, 5, 5, 5, 5, 6, 5, 4, 6, 5, 5, 5, 5, 4, 6, 5, 4, 6, 6, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 7, 4, 7, 5, 5, 5, 6, 7, 7, 5, 5, 7, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 6, 4, 6, 6, 5, 6, 5, 7, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 7, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 7, 5, 4, 5, 5, 5, 7, 4, 8, 6, 6, 6, 6, 5, 5, 5, 6, 6, 6, 8, 7, 6, 7, 5, 7, 5, 5, 6, 6, 7, 5, 7, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 5, 5, 6, 5, 6, 7, 6, 7, 5, 5, 6, 6, 6, 7, 5, 6, 5, 6, 6, 6, 5, 7, 7, 6, 5, 6, 7, 6, 6, 6, 6, 6, 5, 7, 6, 6, 6, 6, 6, 5, 5, 6, 6, 5, 7, 7, 6, 5, 6, 5, 5, 7, 6, 7, 5, 5, 7, 5, 6, 6, 5, 6, 7, 6, 7, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 8, 6, 5, 5, 5, 7, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 7, 6, 4, 6, 5, 5, 7, 5, 5, 6, 5, 6, 5, 7, 7, 5, 7, 5, 7, 6, 6, 5, 6, 7, 5, 6, 5, 6, 5, 6, 6, 6, 5, 8, 6, 7, 7, 7, 6, 5, 5, 6, 6, 6, 6, 6, 7, 5, 8, 5, 5, 7, 3, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 6, 5, 6, 5, 5, 6, 5, 6, 5, 8, 5, 5, 6, 5, 5, 6, 7, 6, 6, 7, 7, 6, 6, 8, 6, 5, 8, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 7, 5, 6, 6, 7, 7, 5, 6, 3, 6, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 5, 6, 6, 6, 5, 6, 7, 5, 5, 6, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 5, 6, 6, 5, 5, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 4, 6, 6, 4, 5, 5, 6, 5, 5, 5, 7, 7, 6, 7, 5, 8, 7, 5, 6, 5, 5, 5, 5, 6, 6, 6, 6, 4, 6, 5, 6, 6, 6, 7, 6, 6, 6, 5, 5, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 4, 5, 5, 5, 5, 7, 6, 5, 5, 5, 5, 5, 7, 5, 4, 7, 6, 5, 5, 5, 6, 5, 5, 5, 7, 6, 4, 6, 5, 6, 6, 5, 5, 6, 6, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6, 4, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 6, 6, 5, 6, 6, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 5, 6, 6, 5, 5, 6, 5, 6, 5, 5, 6, 6, 5, 6, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 5, 5, 7, 6, 6, 5, 5, 7, 6, 6, 7, 7, 7, 5, 6, 5, 6, 5, 4, 6, 5, 6, 6, 5, 5, 5, 7, 5, 5, 5, 5, 7, 5, 8, 6, 4, 6, 3, 4, 5, 5, 7, 7, 7, 5, 7, 5, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 6, 7, 6, 7, 7, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 6, 6, 5, 4, 7, 7, 7, 4, 6, 6, 5, 5, 6, 6, 5, 6, 5, 6, 7, 6, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 3, 5, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 7, 6, 4, 5, 7, 5, 5, 6, 5, 5, 6, 6, 4, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 5, 6, 6, 7, 5, 6, 5, 5, 6, 6, 6, 7, 5, 6, 5, 6, 6, 7, 5, 7, 5, 5, 5, 7, 5, 6, 5, 6, 6, 5, 6, 7, 5, 5, 6, 5, 5, 6, 5, 5, 6, 7, 7, 6, 6, 7, 7, 7, 7, 5, 7, 7, 7, 7, 5, 7, 6, 5, 6, 6, 6, 7, 6, 6, 5, 6, 6, 5, 6, 7, 6, 6, 5, 6, 7, 7, 7, 5, 6, 6, 7, 7, 5, 7, 6, 5, 6, 6, 7, 6, 6, 6, 5, 6, 6, 5, 5, 5, 7, 6, 6, 7, 5, 7, 7, 6, 8, 6, 6, 6, 6, 7, 7, 7, 5, 7, 5, 6, 6, 5, 7, 6, 5, 5, 7, 6, 7, 6, 6, 6, 5, 7, 6, 7, 7, 8, 6, 6, 7, 6, 5, 6, 5, 7, 5, 6, 6, 6, 6, 6, 5, 6, 7, 5, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 5, 8, 6, 6, 6, 4, 7, 6, 6, 5, 6, 6, 5, 7, 7, 7, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 6, 6, 7, 6, 6, 7, 6, 5, 6, 6, 5, 7, 7, 6, 5, 7, 6, 7, 5, 5, 5, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 4, 7, 5, 6, 6, 5, 6, 5, 5, 6, 5, 6, 5, 4, 6, 5, 7, 5, 6, 6, 6, 6, 6, 6, 6, 7, 8, 5, 7, 7, 7, 5, 7, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 7, 5, 6, 5, 5, 4, 6, 4, 6, 6, 4, 4, 5, 5, 6, 5, 6, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 5, 4, 5, 4, 6, 6, 6, 6, 6, 8, 6, 6, 5, 5, 6, 6, 4, 6, 6, 7, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 6, 6, 4, 6, 5, 5, 6, 6, 3, 6, 6, 6, 5, 5, 5, 5, 4, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 6, 5, 7, 6, 6, 6, 6, 5, 6, 6, 5, 6, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 6, 4, 6, 5, 5, 6, 6, 4, 5, 6, 5, 5, 3, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 7, 6, 5, 5, 6, 8, 6, 7, 6, 6, 7, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 5, 5, 5, 6, 4, 6, 6, 6, 5, 5, 5, 5, 6, 6, 7, 6, 6, 5, 5, 5, 6, 7, 6, 5, 5, 6, 6, 5, 5, 5, 8, 7, 7, 7, 5, 6, 6, 6, 5, 5, 7, 6, 4, 6, 6, 5, 5, 7, 4, 7, 3, 5, 5, 6, 5, 5, 7, 5, 7, 3, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 6, 6, 5, 5, 5, 7, 6, 5, 6, 6, 6, 5, 5, 5, 6, 6, 3, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 6, 5, 7, 6, 6, 6, 5, 5, 6, 7, 6, 6, 7, 6, 5, 5, 5, 8, 5, 5, 6, 5, 6, 7, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 7, 6, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 5, 6], \"xaxis\": \"x\", \"y\": [8.8, 9.5, 10.1, 9.9, 9.9, 10.1, 9.6, 8.8, 9.5, 11.0, 12.0, 9.7, 10.8, 12.4, 9.7, 11.4, 9.6, 12.8, 11.3, 9.5, 12.8, 11.0, 10.5, 9.3, 10.0, 10.4, 10.0, 10.5, 11.6, 12.3, 10.0, 10.2, 10.8, 9.0, 10.2, 12.8, 10.0, 11.2, 8.6, 8.6, 9.4, 9.4, 9.8, 9.5, 9.5, 10.0, 9.8, 9.8, 9.8, 9.8, 11.7, 11.0, 10.9, 10.9, 9.1, 11.0, 9.6, 8.9, 10.2, 9.9, 8.6, 8.9, 10.5, 10.2, 10.3, 9.1, 12.6, 9.8, 10.7, 9.5, 9.0, 9.5, 10.0, 9.1, 10.7, 9.5, 12.7, 12.0, 9.3, 9.0, 10.6, 9.2, 10.0, 9.5, 8.7, 8.7, 8.7, 9.7, 8.7, 8.7, 8.7, 9.0, 12.6, 12.6, 11.5, 9.2, 8.8, 11.4, 10.1, 8.8, 9.1, 9.4, 9.4, 9.0, 9.1, 9.2, 9.4, 9.1, 9.1, 10.3, 8.8, 8.9, 9.2, 9.1, 9.1, 9.7, 11.3, 11.8, 9.2, 9.2, 10.2, 8.8, 9.7, 9.1, 9.8, 11.0, 10.5, 9.7, 10.9, 10.9, 10.6, 9.7, 9.0, 9.2, 8.9, 9.6, 10.7, 8.7, 10.8, 11.8, 10.2, 8.7, 10.8, 9.7, 11.2, 10.9, 10.1, 9.0, 12.0, 9.4, 11.5, 9.9, 9.4, 10.4, 9.7, 8.9, 8.9, 12.4, 12.1, 12.1, 12.4, 9.1, 10.6, 8.9, 9.5, 9.8, 9.6, 12.6, 9.3, 10.0, 12.7, 11.0, 11.4, 11.5, 10.2, 11.4, 12.6, 9.4, 8.7, 9.2, 9.3, 9.2, 8.7, 9.6, 9.3, 9.3, 9.9, 11.0, 12.7, 8.9, 8.9, 8.7, 11.4, 9.6, 9.1, 9.1, 9.1, 8.9, 8.8, 8.9, 9.3, 8.8, 9.6, 12.0, 10.2, 8.8, 9.2, 9.9, 10.2, 9.5, 10.5, 11.2, 9.2, 9.7, 11.1, 9.4, 11.0, 9.4, 9.4, 11.0, 11.0, 9.1, 11.1, 9.1, 10.4, 8.7, 9.7, 9.1, 9.7, 8.7, 8.9, 9.6, 9.5, 9.0, 9.0, 9.0, 9.0, 9.6, 11.1, 9.6, 8.7, 10.4, 11.4, 9.7, 8.7, 11.3, 12.6, 10.9, 10.9, 10.0, 10.0, 9.8, 8.7, 11.7, 9.3, 9.6, 11.0, 11.0, 11.8, 11.4, 10.2, 8.9, 10.2, 9.6, 10.6, 8.9, 9.2, 9.7, 9.7, 9.7, 9.2, 9.7, 9.3, 9.0, 9.5, 9.8, 9.8, 10.6, 10.6, 12.4, 12.6, 12.3, 10.5, 9.3, 8.8, 8.8, 9.7, 9.0, 9.0, 9.0, 9.0, 10.5, 9.1, 9.8, 8.5, 9.4, 9.4, 11.2, 10.0, 10.3, 10.8, 10.5, 10.8, 11.1, 9.9, 9.9, 9.9, 9.9, 10.4, 10.4, 11.5, 12.5, 10.0, 10.0, 10.0, 9.1, 10.6, 10.5, 11.5, 10.1, 10.3, 10.5, 10.6, 10.4, 11.4, 10.5, 10.0, 10.0, 9.6, 10.4, 12.5, 10.6, 11.8, 9.8, 10.8, 11.8, 11.2, 9.3, 10.4, 10.2, 9.0, 10.0, 9.1, 10.0, 10.0, 9.6, 11.2, 8.8, 10.0, 10.0, 11.4, 11.9, 9.6, 11.9, 9.6, 9.0, 9.0, 9.5, 10.4, 10.6, 10.2, 8.9, 9.7, 9.0, 11.4, 12.3, 10.8, 9.4, 10.6, 11.6, 9.4, 10.6, 10.0, 9.2, 12.5, 12.5, 10.4, 10.0, 10.0, 10.4, 10.0, 9.0, 9.2, 9.2, 11.3, 12.5, 10.8, 10.1, 9.7, 9.3, 9.3, 10.6, 10.2, 12.2, 8.8, 10.0, 11.4, 11.4, 9.4, 11.7, 11.4, 8.8, 9.2, 8.7, 12.6, 10.0, 12.8, 9.4, 10.3, 11.4, 9.0, 9.6, 10.5, 10.5, 9.0, 9.6, 9.8, 9.0, 9.8, 10.5, 12.7, 10.4, 10.4, 10.4, 10.5, 10.4, 10.4, 9.4, 9.1, 9.3, 9.4, 9.8, 9.9, 9.2, 12.1, 12.2, 9.8, 12.4, 9.9, 9.2, 11.6, 10.4, 12.9, 9.3, 11.0, 11.5, 12.4, 9.8, 9.8, 10.5, 9.1, 10.1, 10.6, 10.5, 10.5, 9.8, 12.9, 9.5, 9.8, 8.5, 9.5, 9.3, 9.5, 9.4, 8.7, 8.9, 9.4, 9.4, 8.7, 9.6, 9.3, 10.0, 12.5, 9.6, 9.4, 9.5, 12.4, 10.5, 9.2, 10.4, 9.2, 10.6, 9.5, 9.2, 9.6, 9.7, 9.7, 10.7, 10.5, 8.9, 12.1, 12.7, 9.9, 11.4, 10.7, 12.5, 8.6, 12.5, 10.0, 8.6, 9.5, 9.6, 9.9, 9.9, 8.9, 8.9, 8.8, 10.0, 12.0, 10.0, 10.0, 12.1, 11.0, 11.2, 10.3, 10.4, 9.1, 10.4, 10.8, 11.7, 9.8, 9.8, 11.4, 11.2, 11.4, 9.2, 12.5, 12.6, 12.2, 11.2, 9.7, 9.3, 9.0, 9.0, 9.0, 9.1, 9.1, 9.0, 10.4, 9.5, 11.4, 8.7, 9.9, 9.9, 9.0, 10.0, 9.7, 11.8, 10.2, 8.7, 9.6, 11.3, 12.1, 9.6, 12.1, 11.3, 9.4, 10.4, 9.5, 12.3, 9.9, 10.1, 9.2, 10.4, 9.1, 10.0, 11.5, 9.8, 9.8, 9.4, 8.7, 11.6, 8.8, 12.7, 11.7, 10.2, 10.2, 12.7, 11.6, 12.3, 8.7, 9.4, 10.1, 9.7, 10.1, 9.7, 8.9, 10.8, 10.8, 9.5, 9.1, 10.9, 9.4, 10.8, 10.8, 10.5, 9.4, 10.8, 10.5, 11.5, 9.4, 10.8, 10.8, 10.8, 9.8, 9.8, 9.6, 9.6, 9.5, 10.7, 12.4, 11.1, 8.8, 8.7, 8.7, 8.8, 11.7, 10.9, 10.8, 9.6, 9.0, 9.0, 10.4, 11.4, 9.3, 11.0, 9.1, 9.4, 9.4, 10.5, 8.8, 8.8, 10.7, 9.5, 10.9, 10.8, 10.8, 9.2, 10.3, 10.3, 11.0, 9.0, 10.4, 9.5, 9.5, 9.0, 9.5, 9.0, 10.0, 9.1, 9.1, 9.1, 9.1, 9.5, 11.4, 12.2, 11.3, 10.2, 11.3, 10.0, 9.4, 12.2, 9.2, 9.4, 9.6, 9.5, 12.5, 9.6, 10.0, 9.3, 9.3, 11.6, 12.5, 10.6, 9.4, 9.1, 9.0, 11.8, 11.8, 11.8, 10.0, 9.7, 9.5, 9.4, 11.2, 9.0, 10.7, 9.0, 9.1, 10.8, 10.1, 9.9, 9.8, 9.8, 9.5, 9.5, 11.1, 9.5, 9.5, 9.4, 9.7, 13.9, 10.1, 10.5, 12.6, 10.9, 10.0, 11.2, 10.0, 9.2, 9.5, 12.3, 12.3, 10.0, 10.8, 10.5, 9.2, 9.1, 10.5, 10.2, 8.9, 10.4, 11.7, 12.4, 10.9, 10.2, 11.7, 9.4, 10.5, 9.4, 10.4, 9.5, 11.1, 9.1, 9.2, 9.6, 9.1, 9.2, 10.8, 9.6, 12.6, 11.0, 10.2, 9.4, 10.0, 12.2, 10.5, 11.5, 9.8, 11.4, 11.5, 10.2, 9.4, 10.5, 9.1, 12.2, 9.5, 9.3, 9.8, 9.8, 9.8, 9.8, 8.7, 10.2, 9.5, 11.0, 9.2, 10.9, 9.3, 9.3, 9.8, 9.3, 9.3, 9.4, 10.4, 12.1, 11.0, 9.0, 9.5, 8.8, 11.2, 9.3, 9.5, 8.8, 9.0, 9.3, 9.2, 9.2, 10.0, 9.3, 9.2, 10.9, 10.0, 10.9, 9.3, 9.0, 9.2, 9.6, 9.4, 11.1, 8.9, 9.3, 9.3, 9.8, 9.8, 8.9, 9.6, 9.6, 9.0, 9.5, 9.3, 9.2, 9.1, 9.5, 10.5, 9.0, 11.7, 9.1, 9.0, 9.1, 12.4, 9.2, 9.4, 9.6, 11.7, 9.8, 10.2, 12.5, 10.9, 11.0, 10.5, 11.5, 12.8, 12.2, 10.5, 12.8, 11.9, 11.9, 11.9, 12.0, 12.0, 8.8, 8.8, 10.8, 11.0, 11.0, 9.3, 10.8, 8.8, 11.5, 10.8, 9.4, 9.5, 8.6, 9.5, 10.3, 9.4, 9.4, 10.0, 9.4, 10.4, 9.1, 9.9, 12.1, 9.9, 12.5, 9.5, 8.5, 9.0, 10.1, 9.4, 8.6, 10.7, 9.6, 10.1, 10.0, 12.7, 10.2, 8.9, 11.9, 10.0, 9.9, 11.5, 11.5, 9.8, 12.2, 11.4, 11.0, 11.4, 11.0, 9.9, 11.0, 9.4, 12.2, 11.0, 10.3, 10.5, 10.5, 10.9, 10.5, 11.0, 9.7, 8.9, 9.6, 8.8, 11.1, 10.3, 12.2, 9.8, 8.8, 9.9, 9.9, 9.9, 9.2, 9.5, 9.2, 10.3, 11.0, 11.9, 10.2, 9.4, 8.9, 8.9, 10.0, 10.7, 9.8, 9.3, 9.5, 10.0, 9.0, 11.9, 8.9, 10.0, 9.6, 8.9, 8.9, 11.4, 9.0, 10.0, 9.6, 9.7, 9.5, 10.0, 12.2, 8.7, 10.2, 9.6, 10.0, 9.5, 11.5, 9.5, 9.8, 10.1, 10.0, 9.8, 9.5, 9.5, 10.2, 10.2, 9.0, 9.0, 12.3, 9.0, 11.6, 9.5, 11.5, 9.6, 9.0, 12.0, 11.4, 12.3, 12.6, 9.0, 12.0, 11.7, 9.2, 10.3, 8.6, 10.7, 9.8, 9.8, 10.7, 12.5, 11.9, 10.8, 10.5, 10.3, 10.3, 10.8, 12.0, 10.2, 10.2, 9.9, 10.1, 9.5, 10.5, 10.4, 9.5, 9.2, 10.1, 9.8, 9.4, 9.4, 10.4, 11.3, 10.8, 11.3, 9.3, 10.3, 10.5, 10.3, 11.2, 10.3, 9.5, 8.9, 10.2, 9.2, 10.3, 10.5, 9.5, 11.4, 11.4, 11.1, 10.5, 12.0, 9.7, 10.2, 9.5, 10.4, 9.3, 10.5, 10.0, 10.2, 10.2, 9.1, 10.2, 10.7, 9.7, 9.3, 11.0, 10.8, 10.7, 10.7, 8.8, 10.9, 10.5, 10.0, 10.4, 9.2, 12.6, 9.0, 9.2, 11.3, 10.3, 10.4, 10.0, 10.7, 9.0, 10.7, 8.7, 11.6, 9.4, 9.5, 9.5, 10.9, 9.7, 9.1, 11.1, 12.6, 11.0, 11.3, 9.7, 10.9, 10.9, 9.3, 12.7, 10.1, 10.0, 9.8, 10.1, 9.0, 9.4, 9.4, 9.2, 10.1, 8.6, 11.2, 11.2, 9.2, 10.6, 9.3, 8.9, 10.6, 10.6, 8.8, 11.0, 10.2, 10.1, 10.1, 14.0, 9.4, 11.8, 11.4, 10.7, 8.6, 11.5, 11.2, 12.6, 12.6, 9.3, 12.6, 12.1, 9.9, 10.7, 10.0, 10.4, 10.5, 9.7, 10.5, 9.0, 9.2, 10.1, 11.4, 10.8, 10.9, 9.2, 12.9, 12.0, 9.5, 11.8, 9.1, 9.7, 9.1, 10.0, 10.4, 9.5, 12.3, 11.7, 9.5, 11.5, 10.6, 10.2, 9.5, 10.5, 10.5, 8.9, 10.6, 9.5, 10.8, 9.5, 8.9, 8.9, 9.4, 10.6, 9.0, 10.5, 9.0, 9.0, 9.4, 9.0, 9.6, 9.0, 10.2, 9.4, 10.4, 10.4, 9.5, 10.6, 11.0, 9.6, 9.9, 9.6, 12.8, 11.4, 10.0, 9.1, 9.4, 10.2, 9.2, 9.4, 9.6, 10.1, 11.4, 10.6, 12.8, 8.9, 9.3, 11.1, 9.9, 9.6, 12.8, 10.7, 9.2, 9.1, 9.6, 9.2, 10.7, 9.1, 9.2, 10.7, 10.8, 10.8, 9.0, 10.7, 10.7, 9.4, 8.8, 9.0, 11.5, 12.5, 10.5, 9.7, 11.3, 10.7, 10.8, 10.6, 11.7, 9.2, 11.1, 11.7, 11.0, 12.5, 10.0, 10.6, 12.3, 12.7, 12.3, 10.5, 12.5, 12.4, 8.7, 12.4, 12.6, 11.0, 10.1, 10.5, 12.7, 10.9, 13.5, 9.7, 9.2, 10.6, 13.3, 13.5, 10.1, 9.4, 10.6, 11.3, 10.8, 10.4, 10.5, 9.3, 9.3, 12.2, 9.2, 10.3, 9.4, 10.2, 9.0, 9.3, 9.2, 9.4, 9.4, 9.5, 9.9, 11.1, 12.3, 8.6, 9.4, 9.4, 8.6, 10.9, 9.4, 10.9, 9.4, 9.2, 8.6, 9.4, 10.8, 10.5, 12.5, 12.1, 8.7, 12.7, 12.1, 12.5, 11.4, 12.9, 12.8, 11.2, 9.7, 9.7, 10.3, 11.6, 11.6, 9.7, 10.9, 12.6, 12.4, 11.5, 10.2, 11.4, 9.6, 10.3, 9.3, 10.7, 12.8, 9.5, 10.4, 10.3, 9.9, 10.7, 10.5, 9.6, 9.3, 10.0, 11.2, 10.8, 10.3, 8.8, 12.8, 13.2, 10.1, 11.0, 10.8, 12.8, 9.2, 10.5, 11.7, 9.5, 9.5, 8.8, 9.3, 12.6, 12.4, 10.1, 11.2, 10.0, 10.0, 10.8, 10.0, 10.4, 10.8, 9.8, 12.2, 12.7, 12.2, 11.9, 11.2, 10.4, 12.8, 12.7, 10.1, 10.0, 9.0, 11.4, 8.9, 9.3, 12.0, 10.8, 10.5, 10.6, 11.3, 9.5, 11.4, 10.1, 10.9, 8.9, 8.9, 9.3, 10.4, 12.0, 9.5, 9.5, 12.4, 11.2, 11.4, 11.4, 11.1, 10.4, 12.0, 12.3, 9.1, 10.5, 11.4, 9.5, 13.7, 13.4, 11.3, 10.0, 10.1, 12.2, 13.4, 9.3, 13.7, 12.3, 11.3, 8.9, 8.9, 11.5, 8.9, 9.3, 11.1, 10.9, 11.6, 10.2, 10.5, 11.4, 8.9, 10.6, 11.6, 11.5, 12.3, 10.8, 11.3, 9.3, 10.0, 11.0, 10.2, 10.8, 10.1, 11.6, 9.1, 10.0, 10.8, 11.4, 12.7, 11.3, 10.4, 9.6, 10.1, 9.6, 12.1, 12.2, 11.3, 9.6, 9.2, 10.4, 9.5, 8.9, 8.8, 10.5, 9.4, 12.2, 11.3, 12.2, 12.2, 11.2, 11.2, 11.5, 11.3, 9.3, 11.3, 11.8, 9.2, 9.2, 12.2, 12.2, 12.2, 10.6, 12.4, 10.8, 11.2, 11.0, 12.7, 10.2, 11.5, 12.3, 9.8, 9.3, 11.8, 11.3, 11.4, 10.8, 9.5, 10.2, 10.7, 10.8, 11.5, 10.7, 10.2, 10.1, 10.4, 9.5, 9.1, 10.6, 9.4, 9.8, 9.5, 9.3, 10.3, 11.1, 10.0, 12.3, 12.4, 12.3, 10.4, 12.1, 12.5, 13.0, 11.0, 10.1, 9.2, 12.6, 12.2, 9.8, 11.0, 10.0, 9.8, 10.5, 10.0, 11.2, 11.0, 11.2, 11.0, 10.5, 10.6, 10.6, 12.0, 10.1, 10.1, 9.2, 11.0, 10.0, 8.7, 8.7, 11.1, 11.0, 11.1, 8.7, 8.7, 11.2, 11.1, 10.8, 9.0, 10.3, 9.9, 10.0, 9.8, 10.8, 9.0, 9.1, 10.6, 10.6, 9.9, 10.6, 9.9, 9.9, 12.8, 10.3, 10.6, 8.7, 12.6, 11.0, 11.2, 10.7, 9.6, 10.6, 9.0, 10.5, 12.8, 10.1, 12.2, 12.8, 10.1, 10.1, 9.2, 9.9, 9.7, 9.9, 9.9, 9.7, 10.3, 10.3, 10.5, 10.5, 9.8, 10.6, 10.1, 9.0, 9.5, 11.5, 11.9, 10.1, 9.2, 8.7, 9.8, 9.2, 8.7, 11.2, 12.3, 10.4, 10.7, 10.5, 9.4, 9.2, 11.9, 9.2, 9.9, 11.4, 9.4, 10.7, 12.7, 13.5, 9.5, 12.9, 12.5, 9.5, 8.6, 10.0, 12.5, 10.1, 11.3, 10.6, 10.8, 10.7, 9.0, 9.2, 8.5, 11.3, 11.3, 9.4, 8.7, 9.4, 10.5, 9.7, 10.2, 9.4, 11.5, 9.6, 11.4, 11.5, 12.2, 11.0, 9.2, 10.2, 10.0, 9.7, 9.2, 10.5, 10.0, 10.1, 9.1, 10.2, 9.1, 10.5, 10.1, 12.1, 10.2, 9.4, 12.8, 9.0, 10.9, 8.8, 9.0, 10.2, 9.2, 11.3, 8.8, 9.3, 9.4, 10.3, 10.8, 8.8, 9.0, 11.5, 10.8, 11.8, 10.5, 9.9, 9.8, 11.4, 9.3, 9.3, 10.3, 8.9, 11.4, 11.1, 10.4, 10.1, 9.0, 11.9, 9.0, 9.0, 9.1, 9.0, 10.0, 9.1, 9.4, 11.4, 9.7, 9.0, 11.8, 10.2, 9.2, 11.0, 10.0, 12.2, 11.8, 11.6, 10.2, 10.3, 8.6, 9.6, 9.6, 11.3, 9.9, 9.6, 10.6, 9.8, 10.5, 10.8, 10.0, 10.1, 9.4, 11.5, 10.8, 9.9, 9.0, 9.4, 10.8, 10.9, 12.0, 11.5, 10.5, 9.3, 11.8, 10.0, 9.4, 11.4, 10.4, 9.5, 11.9, 11.1, 9.6, 12.0, 8.7, 9.6, 10.0, 11.4, 9.6, 12.9, 9.7, 9.3, 9.1, 8.6, 9.9, 9.3, 10.9, 10.2, 9.7, 11.4, 9.5, 10.2, 11.1, 9.7, 9.3, 8.8, 10.6, 9.3, 10.2, 10.2, 11.0, 9.6, 9.3, 8.8, 8.8, 8.9, 10.0, 12.2, 10.9, 9.5, 10.9, 10.9, 10.8, 12.0, 9.8, 9.5, 11.0, 11.0, 9.8, 10.5, 11.4, 10.1, 11.6, 11.4, 11.8, 12.1, 12.0, 12.1, 9.1, 9.3, 10.4, 9.1, 9.4, 9.6, 12.0, 11.3, 8.7, 9.9, 9.3, 9.5, 8.7, 9.9, 9.3, 9.4, 9.4, 8.8, 9.4, 8.8, 9.9, 9.4, 12.6, 11.1, 12.8, 12.0, 12.0, 9.2, 12.3, 13.0, 12.0, 10.9, 12.8, 10.0, 9.0, 10.4, 9.0, 10.0, 10.0, 11.3, 11.3, 12.0, 11.3, 12.0, 10.6, 9.3, 9.4, 11.0, 9.3, 9.4, 10.5, 11.0, 9.5, 11.2, 12.3, 9.0, 9.0, 9.0, 9.0, 11.4, 11.0, 12.3, 10.4, 10.3, 10.5, 9.8, 10.0, 9.7, 9.7, 9.8, 10.5, 10.0, 11.5, 9.5, 10.5, 10.2, 9.8, 11.6, 11.8, 10.1, 10.3, 10.4, 8.9, 8.9, 10.8, 9.2, 9.6, 10.4, 8.7, 9.2, 9.2, 9.2, 9.2, 9.2, 10.2, 9.2, 9.0, 9.7, 9.6, 10.0, 9.2, 9.1, 8.7, 8.7, 9.5, 9.5, 8.9, 8.9, 9.9, 12.6, 9.7, 10.4, 9.1, 10.4, 9.5, 8.9, 10.6, 12.0, 12.5, 9.6, 9.2, 9.9, 11.7, 9.6, 12.0, 12.5, 9.2, 9.9, 8.9, 9.0, 10.2, 9.6, 9.4, 10.4, 10.4, 10.0, 10.0, 10.5, 11.4, 10.2, 10.4, 11.0, 10.1, 9.2, 10.3, 10.2, 10.4, 11.1, 9.9, 9.0, 8.6, 9.0, 8.6, 9.5, 9.0, 10.0, 9.0, 9.0, 10.2, 9.6, 9.7, 10.2, 13.0, 10.8, 9.7, 9.0, 9.9, 9.2, 8.7, 10.1, 10.1, 9.5, 9.9, 8.7, 9.0, 8.6, 10.5, 9.5, 10.1, 11.7, 10.7, 11.7, 9.2, 8.8, 8.8, 9.5, 10.2, 9.1, 10.5, 9.0, 8.9, 8.9, 8.9, 8.9, 8.9, 9.1, 10.1, 10.0, 9.5, 12.3, 9.1, 8.9, 9.6, 11.6, 8.8, 8.9, 8.8, 8.9, 8.9, 9.0, 10.0, 10.0, 11.1, 11.6, 10.6, 8.8, 8.9, 10.1, 10.0, 12.2, 11.0, 10.0, 11.1, 10.4, 11.8, 10.8, 12.5, 11.8, 11.6, 10.4, 11.5, 10.1, 9.2, 10.1, 9.2, 8.9, 10.1, 8.9, 9.7, 9.2, 11.0, 10.7, 10.8, 9.8, 11.0, 10.4, 10.2, 10.7, 9.0, 10.6, 9.5, 9.0, 9.2, 11.0, 9.9, 10.6, 9.3, 9.6, 9.5, 9.7, 9.7, 8.7, 8.7, 12.4, 12.4, 10.6, 8.7, 12.0, 9.0, 8.8, 9.5, 10.8, 11.4, 10.3, 9.5, 9.9, 10.2, 10.2, 11.0, 12.1, 9.1, 9.5, 9.5, 9.8, 9.5, 10.3, 9.6, 10.2, 10.5, 10.4, 9.6, 10.7, 10.5, 10.6, 9.6, 9.6, 9.5, 9.4, 9.8, 9.6, 9.2, 9.5, 9.2, 9.4, 9.4, 9.3, 9.1, 9.5, 9.1, 10.6, 9.5, 12.4, 8.7, 8.8, 10.6, 9.1, 9.0, 10.3, 9.1, 9.5, 8.8, 8.8, 8.8, 9.9, 9.5, 8.8, 11.7, 10.8, 12.0, 10.3, 9.0, 12.2, 9.9, 9.0, 12.2, 10.1, 9.3, 9.5, 9.2, 11.7, 11.0, 9.6, 9.6, 11.9, 10.8, 10.1, 10.9, 10.1, 10.4, 9.2, 9.6, 9.6, 9.0, 11.5, 10.2, 9.9, 9.6, 10.6, 9.2, 11.8, 12.2, 9.6, 10.6, 10.3, 10.2, 10.7, 11.7, 12.0, 10.6, 12.2, 11.0, 12.4, 9.4, 12.0, 11.6, 9.4, 9.4, 9.1, 9.1, 9.1, 9.1, 9.1, 9.2, 9.2, 9.1, 9.1, 9.2, 9.0, 9.2, 10.8, 9.5, 11.0, 10.0, 9.5, 10.1, 9.5, 9.5, 9.5, 9.4, 9.4, 12.7, 9.7, 9.7, 9.4, 9.4, 9.5, 11.7, 11.7, 9.7, 9.5, 9.1, 10.3, 9.7, 9.9, 9.9, 10.2, 12.1, 11.3, 11.4, 12.2, 9.9, 10.3, 12.2, 10.4, 11.4, 9.9, 10.0, 11.5, 10.5, 12.5, 10.5, 9.9, 11.4, 9.8, 11.4, 9.2, 8.9, 8.9, 9.5, 11.5, 9.5, 11.5, 9.5, 9.7, 9.7, 9.5, 9.4, 9.0, 10.6, 9.5, 9.1, 9.4, 8.8, 10.4, 8.9, 10.6, 9.0, 10.6, 10.6, 9.0, 8.8, 10.5, 9.5, 9.0, 10.4, 10.0, 10.4, 9.0, 9.3, 9.0, 9.3, 9.0, 11.5, 9.0, 10.4, 9.0, 10.6, 10.4, 8.5, 9.3, 10.5, 9.9, 10.4, 10.1, 10.5, 9.2, 9.4, 10.6, 9.4, 8.7, 10.2, 10.3, 9.5, 9.5, 9.5, 9.5, 9.4, 9.4, 9.5, 12.6, 10.5, 10.8, 9.9, 12.6, 12.2, 10.0, 10.6, 9.5, 12.8, 12.2, 12.6, 9.4, 9.0, 9.1, 9.4, 12.2, 10.0, 9.2, 9.3, 9.8, 9.2, 12.0, 9.3, 12.6, 12.2, 11.0, 12.0, 8.8, 8.9, 12.7, 11.8, 10.2, 9.9, 11.1, 9.4, 9.7, 9.7, 9.7, 9.7, 9.8, 9.3, 10.5, 9.3, 12.6, 8.9, 10.3, 10.6, 9.0, 9.7, 9.5, 10.3, 9.7, 12.3, 10.5, 9.5, 10.0, 8.8, 10.9, 12.2, 9.5, 10.0, 9.6, 8.7, 10.7, 11.1, 12.5, 10.4, 11.5, 9.4, 9.3, 10.1, 9.7, 10.5, 9.7, 9.2, 9.8, 9.0, 9.1, 10.4, 10.7, 10.5, 9.2, 11.5, 10.4, 12.0, 12.2, 12.0, 9.8, 9.3, 9.6, 9.5, 10.2, 10.4, 11.0, 10.4, 8.7, 9.9, 9.9, 11.3, 12.0, 10.7, 10.1, 9.6, 9.6, 8.7, 10.3, 9.1, 11.8, 11.9, 10.3, 10.0, 10.2, 10.0, 12.7, 9.6, 9.5, 12.7, 11.0, 9.1, 10.2, 10.1, 9.2, 9.4, 10.2, 9.2, 10.0, 10.1, 9.0, 9.5, 9.1, 13.3, 9.5, 9.2, 10.1, 9.2, 10.1, 11.2, 9.8, 11.2, 9.8, 9.4, 9.0, 9.4, 8.9, 9.1, 9.8, 9.4, 10.0, 9.4, 9.9, 10.0, 11.5, 9.2, 10.0, 9.2, 10.0, 10.0, 9.8, 10.5, 10.6, 9.4, 9.4, 11.0, 10.8, 9.0, 9.6, 10.6, 10.6, 9.6, 9.2, 9.2, 9.5, 9.5, 10.3, 8.8, 8.7, 8.7, 10.2, 10.1, 9.5, 9.5, 11.6, 10.7, 10.1, 11.1, 9.8, 9.0, 11.1, 9.5, 9.4, 10.2, 9.8, 9.5, 9.5, 9.0, 10.1, 8.8, 11.9, 11.9, 9.3, 10.0, 9.5, 9.3, 9.7, 9.7, 10.2, 10.8, 8.8, 8.8, 11.4, 8.8, 9.8, 9.4, 9.4, 9.4, 9.4, 9.7, 12.3, 9.8, 9.0, 9.2, 9.4, 9.9, 9.8, 12.3, 11.9, 10.2, 9.5, 11.9, 9.2, 9.7, 11.5, 10.4, 11.6, 9.7, 10.4, 11.5, 10.2, 9.8, 9.0, 10.5, 9.4, 9.4, 10.8, 10.7, 10.6, 9.2, 9.5, 9.5, 10.0, 10.6, 10.6, 10.6, 9.2, 11.0, 11.2, 9.6, 9.4, 9.5, 9.3, 9.4, 9.5, 9.4, 11.2, 11.2, 11.2, 8.8, 11.2, 11.2, 9.4, 11.1, 9.6, 11.1, 9.4, 10.6, 8.9, 12.3, 11.4, 9.6, 10.3, 11.4, 12.1, 9.9, 9.7, 10.5, 8.9, 9.4, 9.6, 12.6, 9.2, 10.4, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.2, 9.0, 9.7, 10.1, 11.0, 10.8, 10.8, 13.5, 10.6, 9.8, 11.7, 9.8, 9.0, 11.3, 9.4, 11.7, 11.3, 11.3, 12.0, 10.6, 10.8, 10.8, 12.0, 9.4, 9.4, 11.3, 9.4, 12.0, 10.3, 10.3, 10.3, 11.3, 9.4, 8.7, 9.4, 11.3, 10.3, 12.0, 8.0, 10.4, 10.7, 10.2, 10.9, 10.5, 11.7, 8.6, 9.0, 8.7, 12.8, 9.0, 8.7, 11.8, 11.6, 11.8, 10.6, 9.7, 10.3, 10.2, 10.1, 10.9, 9.3, 10.2, 10.2, 9.5, 9.3, 12.9, 8.7, 9.4, 10.1, 10.0, 11.1, 10.3, 12.2, 9.3, 11.3, 10.8, 11.2, 12.5, 9.3, 12.9, 11.2, 12.6, 9.3, 12.9, 12.9, 9.5, 11.9, 10.3, 10.3, 11.2, 12.0, 9.6, 9.2, 12.9, 9.3, 12.1, 9.6, 11.2, 11.2, 12.9, 9.2, 9.3, 9.2, 9.3, 10.7, 9.8, 10.3, 10.7, 11.3, 8.8, 10.8, 9.8, 9.3, 11.5, 8.8, 8.8, 8.8, 9.4, 9.4, 9.6, 8.8, 9.3, 8.9, 8.9, 10.0, 9.1, 9.3, 9.4, 10.1, 8.9, 10.8, 10.0, 10.9, 12.0, 9.3, 12.3, 10.4, 10.9, 10.5, 9.8, 10.5, 9.9, 11.4, 9.2, 9.7, 10.0, 11.4, 10.3, 9.9, 10.5, 9.8, 9.3, 12.4, 9.3, 9.3, 9.5, 10.5, 10.5, 12.8, 10.8, 10.0, 11.8, 10.0, 11.8, 12.0, 12.6, 11.9, 10.6, 9.2, 10.0, 9.2, 9.3, 10.2, 10.2, 8.7, 10.7, 12.1, 9.5, 11.2, 12.0, 9.5, 12.1, 10.7, 8.8, 10.8, 13.1, 12.5, 11.7, 11.7, 11.6, 11.3, 12.5, 11.4, 12.2, 11.7, 10.4, 10.4, 10.4, 9.1, 12.2, 9.1, 9.4, 9.4, 10.4, 9.2, 9.4, 13.5, 9.4, 10.9, 13.5, 9.4, 11.4, 12.4, 9.2, 9.4, 10.5, 11.5, 10.9, 10.8, 8.9, 8.9, 9.4, 12.2, 12.1, 10.9, 10.1, 12.2, 13.0, 11.0, 10.8, 13.0, 9.3, 11.4, 9.2, 9.9, 10.5, 12.4, 9.5, 10.5, 9.1, 11.5, 11.5, 11.2, 10.8, 9.4, 11.0, 11.3, 11.2, 10.5, 9.1, 10.4, 11.2, 11.1, 11.2, 10.5, 10.0, 10.0, 10.9, 10.9, 11.2, 11.7, 10.0, 9.5, 9.0, 10.0, 11.9, 10.6, 11.0, 11.2, 12.0, 12.6, 11.2, 10.5, 10.2, 11.0, 12.2, 12.3, 10.6, 10.4, 12.0, 12.7, 10.6, 12.3, 12.7, 11.4, 12.0, 12.4, 12.1, 11.4, 10.7, 9.3, 12.7, 11.7, 10.7, 11.8, 9.9, 13.4, 12.8, 12.8, 10.5, 11.5, 10.5, 13.0, 12.4, 10.2, 9.0, 12.0, 11.7, 10.0, 10.3, 9.0, 11.1, 9.0, 10.5, 11.9, 9.4, 11.4, 10.8, 9.8, 9.3, 11.4, 11.3, 11.3, 9.5, 9.4, 11.9, 9.3, 11.4, 11.4, 12.7, 13.5, 11.2, 10.7, 10.8, 10.5, 13.0, 10.8, 9.1, 10.1, 11.9, 12.0, 12.0, 9.1, 11.6, 11.9, 10.2, 10.8, 9.8, 11.4, 9.8, 10.1, 9.8, 9.8, 10.7, 10.6, 9.3, 9.8, 10.7, 14.0, 11.0, 11.0, 9.4, 9.0, 9.0, 10.0, 9.0, 9.0, 12.4, 11.3, 12.0, 11.7, 10.0, 13.2, 11.0, 11.0, 9.2, 13.0, 10.6, 13.0, 9.0, 9.0, 11.5, 11.0, 11.5, 9.9, 10.4, 9.0, 9.9, 11.0, 12.1, 9.7, 9.7, 12.2, 12.4, 10.5, 10.4, 12.0, 12.7, 10.9, 10.9, 10.9, 11.4, 11.0, 12.6, 11.6, 10.5, 10.9, 10.9, 12.5, 12.1, 11.3, 13.3, 10.9, 10.9, 10.5, 11.6, 11.4, 11.0, 12.1, 11.0, 12.6, 13.0, 8.8, 9.5, 11.8, 12.2, 10.7, 11.0, 11.4, 10.7, 12.0, 11.9, 11.4, 11.8, 10.6, 9.7, 11.0, 10.7, 11.0, 10.5, 10.4, 10.5, 12.0, 12.0, 9.2, 10.9, 9.5, 9.4, 11.3, 10.4, 9.4, 11.3, 8.8, 10.8, 9.4, 9.4, 9.2, 10.3, 9.9, 12.4, 11.9, 11.7, 9.4, 9.6, 9.4, 10.4, 9.5, 11.9, 12.5, 13.4, 12.7, 9.1, 10.5, 10.4, 10.4, 12.5, 10.4, 9.0, 9.8, 9.0, 10.7, 12.4, 12.5, 12.5, 12.1, 11.3, 12.0, 10.4, 12.2, 8.6, 9.1, 12.1, 12.0, 10.5, 10.4, 11.9, 13.7, 11.3, 10.5, 13.7, 10.1, 12.3, 12.0, 11.3, 9.5, 11.4, 11.9, 10.0, 10.0, 11.3, 11.7, 11.0, 12.2, 10.7, 10.9, 10.2, 11.9, 11.1, 11.2, 11.4, 10.6, 10.3, 10.4, 11.9, 11.9, 10.4, 9.2, 11.3, 11.3, 11.0, 11.9, 12.9, 10.8, 9.1, 10.4, 12.9, 12.2, 9.2, 10.3, 11.0, 11.0, 11.7, 12.0, 12.7, 8.8, 11.3, 12.8, 11.2, 8.9, 11.2, 11.1, 10.8, 9.3, 8.9, 12.7, 12.0, 11.2, 8.8, 8.8, 8.8, 10.4, 8.8, 10.4, 14.0, 8.8, 13.1, 12.3, 12.6, 12.0, 9.5, 12.0, 12.7, 10.5, 12.9, 9.5, 12.0, 12.7, 11.9, 12.0, 12.5, 12.1, 12.5, 9.9, 10.7, 12.0, 12.2, 12.4, 12.4, 10.3, 12.0, 10.5, 9.5, 10.5, 12.3, 11.9, 9.8, 12.3, 11.4, 11.0, 10.8, 12.8, 11.0, 10.2, 12.5, 11.6, 11.9, 9.8, 11.0, 10.9, 11.0, 12.5, 11.0, 12.0, 12.4, 12.5, 12.8, 11.0, 9.1, 12.4, 12.9, 10.9, 10.8, 10.6, 9.0, 12.0, 11.8, 10.6, 12.3, 11.5, 11.1, 9.0, 9.9, 12.8, 12.9, 12.9, 12.0, 12.0, 11.2, 13.3, 9.9, 9.5, 9.4, 11.0, 9.4, 11.5, 12.5, 11.9, 10.4, 11.2, 12.5, 11.0, 9.8, 12.3, 11.0, 12.6, 11.6, 12.3, 13.4, 9.8, 11.5, 11.6, 11.1, 11.0, 11.3, 9.9, 12.6, 11.8, 11.4, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 13.0, 9.3, 12.6, 9.6, 8.0, 11.8, 10.2, 12.7, 9.4, 10.2, 12.0, 11.3, 11.8, 10.9, 9.8, 12.2, 11.1, 9.4, 11.4, 10.2, 12.8, 10.1, 9.4, 12.2, 10.9, 10.9, 10.9, 9.4, 9.4, 11.4, 12.9, 9.4, 12.0, 10.1, 9.4, 9.4, 9.2, 11.8, 12.3, 11.4, 12.9, 12.3, 13.5, 12.8, 12.8, 12.8, 11.0, 10.6, 12.4, 12.9, 11.1, 12.9, 11.8, 9.1, 12.7, 12.0, 11.2, 12.4, 10.4, 10.4, 12.7, 12.5, 12.0, 11.6, 12.6, 10.2, 10.4, 11.5, 11.0, 10.1, 10.5, 12.1, 9.9, 11.4, 9.5, 9.5, 9.5, 10.9, 9.5, 12.6, 9.5, 11.1, 9.5, 9.5, 10.6, 10.6, 10.8, 10.9, 9.9, 11.3, 12.6, 12.5, 12.4, 11.8, 12.2, 10.7, 11.3, 12.5, 12.4, 11.3, 9.9, 11.3, 12.6, 11.5, 12.3, 12.2, 13.2, 10.2, 11.5, 13.2, 12.2, 11.0, 13.2, 9.5, 10.2, 10.2, 11.4, 12.5, 9.2, 12.1, 10.7, 12.1, 11.2, 10.6, 11.8, 12.5, 9.2, 12.6, 12.8, 12.3, 12.3, 12.4, 12.3, 9.1, 9.1, 10.6, 10.3, 9.5, 11.1, 10.8, 11.2, 10.8, 11.4, 11.2, 10.2, 11.1, 9.5, 10.2, 11.0, 11.5, 9.8, 10.1, 8.8, 11.5, 12.7, 9.8, 12.9, 9.8, 12.7, 8.5, 12.7, 13.1, 9.1, 12.5, 9.1, 9.1, 11.2, 12.5, 9.1, 9.1, 9.1, 11.5, 12.9, 12.5, 12.3, 11.4, 9.4, 9.1, 9.4, 12.0, 11.1, 11.8, 11.4, 9.1, 12.1, 10.4, 9.2, 13.0, 12.1, 11.5, 11.5, 10.0, 11.1, 12.4, 12.2, 10.6, 11.1, 13.9, 9.2, 10.5, 11.3, 12.9, 12.9, 9.6, 12.9, 12.9, 8.8, 13.2, 9.2, 11.3, 10.5, 10.5, 12.6, 9.5, 9.8, 13.4, 11.8, 9.8, 13.1, 12.6, 10.4, 13.4, 13.0, 13.4, 10.2, 11.7, 9.5, 11.7, 11.4, 11.8, 11.2, 13.0, 13.0, 10.9, 11.6, 11.3, 12.0, 10.5, 13.1, 13.0, 10.9, 9.1, 13.4, 11.5, 11.2, 10.9, 13.5, 9.1, 9.9, 10.5, 11.7, 11.0, 13.0, 13.6, 12.3, 13.3, 13.7, 11.1, 13.4, 9.1, 11.3, 9.4, 9.1, 11.6, 11.6, 12.4, 9.8, 11.1, 13.1, 9.7, 9.2, 11.7, 10.6, 9.7, 9.2, 10.9, 10.1, 12.2, 12.7, 13.0, 11.2, 9.4, 11.0, 11.0, 9.2, 9.4, 9.2, 12.3, 11.0, 10.0, 9.0, 9.0, 9.0, 11.1, 9.9, 12.2, 11.1, 9.0, 11.8, 12.9, 9.0, 12.4, 9.0, 12.9, 11.2, 12.6, 11.5, 11.3, 11.2, 11.5, 10.5, 12.6, 11.9, 10.1, 11.0, 10.6, 11.3, 11.2, 11.5, 11.1, 12.8, 12.3, 10.4, 11.5, 11.7, 10.7, 9.5, 9.5, 9.5, 12.0, 10.8, 10.7, 10.7, 10.7, 12.1, 11.9, 10.8, 12.3, 9.4, 9.9, 10.4, 10.4, 12.6, 12.5, 9.4, 9.2, 11.2, 9.2, 9.2, 9.4, 11.2, 10.8, 9.2, 9.2, 12.5, 9.3, 11.4, 10.0, 10.6, 10.7, 10.0, 12.5, 10.6, 12.8, 9.3, 11.4, 9.5, 9.5, 9.5, 10.8, 10.8, 8.8, 10.8, 11.0, 12.4, 11.3, 11.2, 12.5, 10.0, 11.0, 10.5, 10.5, 11.0, 11.4, 11.3, 12.2, 12.6, 11.1, 12.3, 10.4, 8.8, 9.5, 8.8, 10.4, 13.0, 12.2, 10.5, 10.8, 13.2, 13.0, 10.0, 10.4, 12.4, 12.9, 13.2, 10.5, 13.0, 11.2, 12.7, 9.4, 12.9, 13.0, 13.6, 9.1, 10.4, 13.6, 12.2, 8.7, 10.5, 10.2, 12.5, 11.3, 10.2, 12.6, 10.2, 9.8, 10.8, 12.5, 12.5, 11.5, 11.4, 10.5, 12.6, 8.7, 11.0, 11.3, 10.2, 11.6, 9.8, 10.1, 9.2, 9.1, 9.1, 9.1, 9.1, 11.7, 12.6, 9.0, 10.1, 13.6, 9.1, 9.2, 8.8, 10.0, 9.1, 11.2, 9.2, 9.2, 9.5, 11.9, 9.8, 9.8, 10.8, 11.3, 12.1, 11.3, 10.8, 13.5, 10.3, 9.0, 11.6, 10.3, 12.5, 8.6, 13.4, 12.7, 9.2, 10.2, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.9, 9.0, 9.0, 11.0, 9.0, 10.0, 10.7, 10.7, 13.4, 11.0, 10.0, 10.7, 10.7, 11.0, 11.0, 11.1, 10.9, 11.5, 13.4, 9.4, 9.4, 9.4, 10.6, 9.4, 12.0, 10.2, 10.6, 13.5, 9.7, 12.2, 12.3, 12.2, 11.4, 12.7, 9.7, 10.8, 11.0, 9.5, 10.1, 13.2, 8.8, 9.5, 9.5, 9.5, 9.5, 9.5, 10.4, 9.9, 10.0, 10.1, 9.4, 9.3, 10.9, 11.4, 10.3, 11.0, 10.9, 10.8, 10.3, 11.0, 9.3, 10.2, 10.2, 10.8, 10.5, 11.1, 10.9, 11.4, 10.3, 12.9, 9.9, 11.3, 11.5, 11.5, 10.7, 10.4, 12.5, 9.5, 11.3, 13.0, 11.5, 11.5, 11.3, 13.2, 11.5, 9.6, 9.6, 9.7, 9.2, 8.4, 12.4, 12.4, 9.2, 8.4, 11.7, 11.0, 11.9, 13.2, 11.7, 9.1, 12.6, 9.1, 10.5, 10.6, 12.6, 13.7, 12.0, 12.5, 12.1, 11.3, 12.0, 10.3, 12.7, 9.2, 9.2, 9.5, 10.1, 10.1, 13.0, 13.1, 11.0, 9.2, 9.4, 9.5, 10.2, 10.1, 8.6, 9.0, 9.6, 9.9, 10.5, 11.4, 9.4, 11.1, 8.9, 8.9, 10.8, 12.2, 8.9, 12.5, 12.2, 12.5, 8.9, 10.8, 11.4, 10.8, 10.6, 9.2, 12.2, 12.3, 10.4, 10.4, 11.0, 10.6, 9.2, 13.5, 11.4, 11.5, 14.0, 12.5, 12.5, 12.8, 11.2, 11.2, 13.6, 9.2, 12.5, 11.1, 11.2, 14.0, 13.6, 9.4, 14.2, 13.2, 11.2, 10.2, 12.8, 10.1, 10.1, 10.3, 9.9, 11.5, 9.0, 9.0, 12.1, 13.3, 11.5, 11.0, 10.7, 9.4, 10.3, 9.3, 12.0, 11.0, 9.3, 10.1, 11.1, 9.9, 11.0, 11.0, 12.5, 12.7, 9.3, 9.3, 10.1, 8.8, 11.2, 10.8, 8.8, 11.2, 10.3, 12.0, 9.5, 9.5, 9.8, 9.0, 13.0, 11.8, 8.8, 11.2, 9.5, 9.4, 9.5, 10.4, 9.8, 10.4, 10.3, 9.4, 9.5, 11.9, 12.8, 13.0, 10.4, 10.4, 10.7, 10.7, 11.9, 10.4, 12.8, 9.9, 9.9, 9.4, 11.4, 9.9, 9.4, 9.2, 10.5, 11.0, 11.0, 12.1, 11.0, 12.8, 10.5, 10.5, 10.5, 9.5, 9.2, 11.1, 12.3, 11.1, 12.6, 9.5, 9.2, 10.8, 11.3, 12.8, 10.5, 9.8, 8.5, 9.3, 9.2, 11.4, 8.5, 9.3, 8.4, 9.2, 9.2, 10.4, 11.6, 12.4, 10.4, 9.3, 12.2, 11.0, 11.4, 9.5, 9.2, 11.1, 9.2, 11.0, 9.9, 9.9, 9.5, 12.4, 9.4, 9.3, 8.7, 8.7, 8.7, 8.7, 9.0, 10.7, 10.7, 11.3, 8.7, 11.7, 9.3, 8.7, 9.0, 11.7, 10.7, 11.4, 10.7, 11.3, 10.0, 10.0, 11.2, 9.7, 12.5, 12.9, 11.8, 10.6, 11.8, 10.7, 9.9, 12.0, 10.4, 8.5, 9.9, 9.4, 10.4, 11.0, 11.0, 10.4, 9.8, 9.4, 10.6, 10.1, 11.5, 11.4, 9.2, 9.7, 11.3, 9.6, 8.9, 10.0, 9.2, 9.0, 12.8, 9.0, 9.5, 10.0, 11.0, 9.2, 10.6, 10.0, 10.0, 11.7, 12.5, 11.1, 9.7, 12.3, 12.2, 11.3, 11.6, 11.3, 11.1, 11.2, 11.3, 12.0, 8.8, 8.8, 12.0, 12.0, 9.0, 9.3, 8.7, 12.8, 11.5, 10.0, 10.0, 10.3, 10.4, 13.4, 11.2, 9.1, 9.1, 10.8, 12.5, 11.3, 12.8, 9.1, 12.7, 11.0, 10.4, 10.4, 10.7, 10.9, 10.4, 10.4, 9.7, 11.0, 9.6, 13.9, 9.4, 12.5, 9.6, 9.5, 9.6, 9.5, 9.6, 8.7, 8.7, 8.7, 8.7, 8.7, 8.7, 10.4, 10.7, 12.0, 12.1, 13.1, 12.4, 12.6, 8.7, 12.0, 11.6, 9.3, 9.3, 11.1, 10.2, 10.6, 11.3, 9.4, 9.3, 11.1, 9.9, 11.8, 12.6, 9.4, 10.5, 12.3, 11.3, 9.6, 12.0, 11.2, 10.2, 12.4, 10.2, 13.4, 12.6, 9.8, 9.1, 12.4, 12.5, 11.7, 12.9, 10.1, 10.3, 11.7, 10.3, 10.8, 11.2, 11.8, 9.8, 10.0, 8.8, 10.1, 9.5, 9.5, 9.5, 9.2, 12.2, 9.5, 11.3, 12.1, 9.2, 11.2, 12.5, 10.6, 10.4, 10.1, 9.9, 11.0, 10.0, 12.7, 12.1, 10.4, 10.4, 9.2, 9.2, 10.5, 9.2, 11.9, 10.1, 11.1, 10.8, 11.8, 9.2, 9.2, 12.3, 10.1, 11.4, 10.4, 9.8, 9.9, 9.8, 11.2, 10.9, 9.2, 9.2, 12.0, 12.1, 12.4, 11.2, 12.7, 12.2, 12.2, 12.2, 11.2, 12.7, 12.7, 12.1, 9.4, 10.1, 9.4, 8.9, 8.9, 8.9, 8.9, 13.0, 10.3, 10.1, 10.5, 8.9, 10.1, 10.1, 11.0, 11.0, 11.0, 11.0, 10.0, 10.5, 9.7, 10.1, 9.4, 11.2, 9.4, 10.8, 9.4, 11.2, 11.0, 12.4, 9.4, 9.4, 9.5, 10.0, 12.5, 10.9, 10.5, 10.8, 11.0, 11.8, 12.6, 10.2, 12.0, 12.5, 11.5, 11.94, 12.89333333, 9.4, 12.2, 11.94, 12.89333333, 9.5, 10.6, 10.5, 11.46666667, 11.4, 9.5, 9.2, 9.5, 10.98, 9.4, 9.5, 9.2, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 10.4, 8.8, 10.03333333, 11.3, 10.4, 9.2, 11.1, 9.2, 11.3, 9.1, 9.4, 13.2, 12.7, 10.7, 11.43333333, 11.1, 12.7, 10.53333333, 11.6, 9.533333333, 9.8, 10.7, 12.0, 12.8, 9.5, 10.93333333, 9.1, 12.6, 9.5, 10.9, 10.93333333, 9.6, 9.3, 11.36666667, 12.5, 9.5, 11.0, 9.4, 11.33333333, 8.8, 9.4, 11.06666667, 12.2, 11.0, 11.33333333, 9.5, 9.5, 11.0, 11.2, 9.3, 10.8, 9.2, 9.4, 9.2, 10.5, 10.8, 9.4, 9.8, 9.8, 9.8, 9.4, 9.8, 12.1, 12.3, 9.733333333, 9.4, 9.4, 12.8, 11.05, 9.4, 12.8, 9.733333333, 13.1, 11.5, 13.1, 11.5, 9.1, 9.75, 10.5, 8.8, 8.8, 8.8, 8.8, 10.5, 10.5, 8.8, 9.9, 9.9, 9.9, 12.2, 10.8, 8.7, 13.2, 12.7, 9.4, 11.2, 11.33333333, 11.9, 11.35, 10.5, 9.8, 9.1, 12.4, 9.1, 9.8, 11.3, 11.3, 13.1, 12.5, 10.3, 10.7, 10.4, 9.5, 9.8, 12.5, 9.4, 9.0, 9.0, 9.0, 13.0, 9.9, 9.4, 10.6, 13.4, 12.5, 9.3, 9.3, 11.0, 10.3, 11.3, 10.9, 11.3, 12.1, 11.1, 9.8, 10.1, 12.4, 12.7, 9.6, 9.6, 9.1, 12.8, 9.6, 12.4, 9.55, 9.1, 12.5, 9.9, 11.2, 13.0, 13.0, 11.7, 13.1, 12.0, 10.55, 11.45, 10.2, 11.45, 9.3, 10.8, 12.2, 11.0, 10.4, 11.4, 14.05, 10.7, 10.2, 11.2, 12.33333333, 11.5, 9.5, 13.4, 12.5, 12.5, 11.2, 8.8, 11.2, 12.7, 9.8, 9.8, 11.7, 9.8, 9.6, 9.8, 9.7, 10.0, 11.7, 12.3, 9.8, 9.0, 9.1, 9.1, 9.1, 11.4, 10.5, 12.4, 9.1, 9.1, 10.1, 10.9, 11.05, 12.75, 12.7, 11.1, 11.1, 12.75, 13.0, 12.0, 11.5, 10.5, 11.1, 11.1, 11.1, 13.1, 12.75, 12.7, 9.6, 11.7, 9.7, 10.9, 10.7, 13.8, 12.15, 10.8, 10.7, 10.8, 10.8, 12.0, 10.8, 12.2, 9.4, 11.4, 12.5, 13.05, 12.4, 12.9, 12.0, 11.3, 10.0, 11.8, 9.4, 8.8, 11.1, 10.5, 9.3, 11.4, 11.8, 12.4, 11.6, 11.1, 12.4, 11.1, 11.0, 12.2, 11.0, 12.9, 10.9, 13.4, 10.7, 11.0, 11.4, 10.2, 11.0, 9.1, 11.0, 11.5, 12.0, 11.2, 11.2, 12.6, 11.0, 10.8, 10.9, 9.8, 9.8, 9.5, 11.26666667, 10.8, 13.4, 11.3, 8.9, 11.2, 11.5, 13.0, 12.6, 13.1, 11.2, 11.7, 10.9, 10.9, 11.6, 10.4, 10.9, 11.7, 10.8, 11.2, 10.0, 10.56666667, 11.73333333, 10.6, 10.5, 11.75, 11.4, 12.4, 10.1, 12.3, 13.1, 10.65, 11.4, 9.3, 10.2, 10.2, 13.1, 9.6, 12.8, 10.96666667, 10.96666667, 10.96666667, 11.0, 13.4, 11.2, 12.4, 11.2, 12.4, 10.13333333, 10.13333333, 12.4, 9.1, 10.15, 10.15, 11.5, 8.9, 10.46666667, 10.46666667, 11.8, 11.63333333, 10.6, 9.6, 11.8, 8.9, 10.5, 10.2, 13.1, 11.8, 12.2, 11.45, 10.5, 10.2, 9.0, 9.0, 9.0, 9.0, 9.1, 8.8, 9.0, 9.1, 12.9, 13.0, 12.9, 9.2, 9.8, 9.8, 10.1, 10.1, 10.9, 9.6, 10.4, 11.8, 10.8, 10.6, 12.7, 12.2, 10.8, 10.4, 11.1, 11.8, 10.0, 10.8, 10.3, 9.9, 10.0, 12.25, 10.2, 9.4, 9.7, 10.2, 10.4, 12.2, 9.4, 10.6, 10.7, 11.85, 11.7, 11.7, 10.15, 11.63333333, 10.8, 10.8, 12.3, 12.5, 11.65, 9.6, 10.9, 10.8, 11.2, 10.0, 10.5, 9.1, 10.5, 9.3, 9.3, 11.2, 10.6, 12.1, 12.0, 9.7, 12.4, 13.6, 13.6, 11.8, 10.0, 10.0, 9.1, 11.9, 11.75, 11.4, 13.0, 12.4, 9.4, 9.6, 9.6, 9.6, 9.6, 9.1, 12.0, 11.2, 10.1, 10.3, 12.3, 10.55, 10.9, 9.7, 9.8, 8.9, 8.9, 10.2, 11.7, 12.8, 12.8, 10.2, 13.55, 11.6, 8.9, 13.8, 9.4, 9.4, 10.7, 10.7, 12.3, 10.3, 10.4, 11.6, 10.7, 12.8, 11.9, 12.1, 9.2, 9.5, 11.0, 10.9, 10.4, 9.1, 11.4, 11.4, 9.7, 12.4, 13.7, 10.6, 11.2, 13.13333333, 12.4, 9.7, 11.0, 11.3, 12.0, 9.2, 10.7, 10.7, 11.4, 9.2, 12.1, 11.1, 9.7, 10.7, 10.9, 12.0, 10.6, 9.6, 13.1, 11.0, 11.6, 11.95, 11.1, 11.5, 11.3, 11.9, 9.5, 12.2, 12.2, 11.1, 9.6, 11.1, 9.6, 11.4, 11.4, 12.06666667, 9.0, 9.0, 11.4, 9.6, 11.0, 11.0, 11.2, 11.55, 13.3, 9.633333333, 13.6, 11.2, 13.0, 10.8, 9.8, 11.45, 12.05, 9.7, 11.9, 10.0, 9.7, 11.6, 8.8, 9.5, 9.533333333, 9.533333333, 9.4, 10.7, 11.5, 9.6, 9.55, 12.15, 13.0, 9.2, 9.4, 11.8, 10.6, 9.7, 11.2, 9.6, 9.4, 12.8, 11.8, 9.4, 9.8, 9.8, 9.8, 9.4, 9.4, 9.4, 10.0, 9.5, 10.5, 9.2, 10.5, 9.9, 9.1, 9.2, 9.2, 10.5, 9.3, 9.0, 9.2, 9.4, 9.7, 9.5, 9.4, 9.7, 9.3, 9.5, 9.5, 9.4, 9.8, 10.1, 10.6, 9.8, 9.4, 9.2, 9.6, 10.8, 9.7, 9.8, 10.5, 10.5, 9.3, 10.5, 10.3, 9.5, 13.1, 9.2, 9.5, 9.2, 9.2, 9.2, 9.4, 9.4, 9.4, 10.2, 9.5, 9.6, 9.4, 10.0, 9.4, 9.2, 9.3, 9.5, 9.8, 10.9, 10.9, 9.6, 10.7, 10.7, 10.5, 9.5, 9.5, 9.5, 9.2, 9.6, 10.5, 10.5, 10.7, 10.1, 9.1, 9.2, 9.4, 9.1, 9.4, 10.3, 10.1, 9.9, 9.6, 9.5, 9.0, 9.5, 9.9, 9.8, 9.6, 10.5, 12.9, 10.7, 9.2, 9.8, 9.0, 10.2, 10.4, 9.0, 9.2, 9.4, 9.2, 9.3, 9.3, 9.6, 9.3, 9.5, 9.8, 9.8, 9.7, 9.5, 10.5, 10.0, 9.4, 10.9, 9.2, 9.0, 10.9, 9.2, 9.5, 9.5, 9.4, 10.9, 10.9, 10.5, 9.4, 9.4, 13.0, 13.0, 9.8, 9.9, 9.6, 9.5, 9.2, 9.5, 9.5, 9.6, 9.5, 14.0, 9.4, 14.0, 9.4, 10.0, 9.3, 10.2, 10.5, 10.3, 9.4, 10.1, 10.1, 10.5, 10.5, 10.5, 10.5, 9.3, 9.3, 9.6, 9.2, 10.0, 9.4, 9.4, 9.5, 10.2, 9.0, 10.4, 9.5, 9.1, 9.2, 9.2, 11.5, 9.5, 9.5, 9.5, 10.5, 9.6, 9.5, 9.5, 9.3, 9.3, 9.3, 9.3, 9.7, 9.2, 9.7, 9.5, 9.5, 9.4, 9.8, 9.5, 9.7, 9.7, 9.4, 10.2, 10.1, 13.0, 11.4, 10.3, 9.3, 9.5, 9.2, 9.2, 10.8, 10.8, 9.3, 9.4, 10.5, 12.4, 10.0, 10.2, 10.1, 9.8, 10.5, 11.0, 9.1, 9.7, 9.5, 9.4, 9.4, 9.5, 10.0, 10.4, 10.5, 9.5, 9.8, 10.5, 11.0, 12.2, 9.9, 9.6, 11.0, 9.0, 9.0, 9.0, 9.2, 9.0, 9.0, 9.3, 10.9, 9.8, 9.2, 9.2, 9.9, 9.5, 9.3, 9.8, 9.9, 10.0, 9.9, 10.5, 9.5, 9.9, 9.3, 9.2, 9.2, 9.4, 10.5, 9.3, 9.4, 10.0, 9.3, 10.9, 10.2, 9.8, 12.8, 9.4, 10.1, 10.7, 10.1, 10.1, 9.4, 9.4, 10.7, 9.4, 10.1, 12.6, 10.5, 9.3, 9.9, 9.1, 10.5, 9.8, 9.8, 10.3, 10.3, 10.6, 9.2, 10.6, 10.5, 10.3, 10.1, 9.5, 9.5, 9.9, 9.6, 9.7, 9.6, 10.7, 10.1, 10.0, 9.5, 9.2, 9.3, 9.4, 9.5, 9.5, 9.5, 9.3, 9.4, 9.5, 9.4, 11.0, 11.0, 10.1, 10.4, 11.5, 10.4, 11.5, 9.7, 9.3, 9.5, 9.2, 9.2, 11.5, 11.5, 9.7, 9.5, 12.5, 12.5, 9.4, 11.0, 11.7, 12.2, 12.5, 10.3, 11.5, 9.8, 9.2, 11.3, 9.8, 9.8, 10.7, 9.9, 12.3, 12.0, 10.0, 9.4, 9.9, 9.4, 9.3, 13.0, 11.9, 12.8, 11.0, 11.7, 10.4, 9.8, 9.4, 9.9, 10.0, 10.2, 10.0, 11.8, 10.0, 9.0, 9.4, 12.0, 9.9, 8.7, 10.6, 9.2, 10.8, 11.8, 11.0, 12.0, 13.3, 10.8, 9.4, 10.0, 9.4, 9.4, 9.2, 9.7, 9.2, 9.6, 9.2, 10.0, 12.9, 10.0, 9.5, 9.1, 9.9, 13.0, 9.9, 11.0, 11.0, 9.4, 9.9, 10.8, 10.5, 10.5, 9.1, 10.1, 10.8, 10.8, 11.3, 9.6, 9.5, 9.5, 9.3, 11.7, 9.5, 9.3, 11.7, 10.5, 10.4, 9.9, 11.8, 12.3, 10.9, 11.0, 10.9, 12.3, 11.4, 10.6, 9.3, 10.4, 11.0, 9.2, 12.8, 9.5, 9.9, 9.5, 10.2, 11.2, 9.9, 9.3, 9.8, 11.3, 11.2, 11.6, 12.5, 10.1, 10.5, 11.2, 10.2, 10.8, 10.8, 9.1, 10.0, 11.2, 11.1, 13.4, 10.3, 9.6, 11.2, 9.0, 11.3, 9.3, 11.8, 9.0, 9.2, 9.7, 11.5, 14.0, 9.2, 9.8, 10.6, 11.4, 10.4, 10.6, 9.4, 10.2, 9.7, 11.0, 10.2, 10.1, 9.2, 11.7, 9.4, 9.4, 13.4, 10.0, 10.0, 10.0, 10.8, 10.2, 10.6, 13.3, 13.4, 11.6, 12.1, 11.0, 9.0, 11.1, 11.0, 11.6, 9.0, 12.0, 12.0, 10.9, 10.8, 12.5, 10.8, 9.5, 10.2, 11.4, 9.5, 10.2, 9.7, 11.8, 11.8, 9.3, 11.9, 8.4, 11.7, 11.0, 10.0, 9.1, 9.8, 9.4, 9.5, 9.9, 11.0, 11.4, 8.7, 9.4, 10.3, 10.3, 10.3, 12.8, 10.0, 10.3, 9.4, 10.7, 12.0, 11.2, 9.6, 11.0, 9.9, 11.0, 8.4, 9.1, 9.5, 10.7, 10.4, 9.4, 9.5, 10.0, 10.0, 11.5, 11.1, 11.1, 11.7, 11.1, 11.7, 12.7, 11.4, 9.2, 9.2, 10.1, 12.7, 11.4, 9.0, 9.0, 10.7, 11.7, 11.0, 11.7, 10.4, 9.6, 10.0, 10.2, 10.0, 9.5, 9.8, 9.8, 9.6, 9.6, 9.2, 9.9, 10.7, 9.6, 10.6, 9.3, 14.0, 10.5, 9.7, 11.5, 9.7, 9.0, 9.5, 9.3, 9.3, 10.0, 9.8, 9.3, 10.0, 9.0, 9.3, 9.0, 9.1, 9.2, 12.2, 10.5, 10.4, 12.7, 9.2, 9.4, 10.0, 9.8, 10.2, 9.7, 9.7, 9.8, 10.2, 9.3, 9.4, 9.4, 9.5, 12.1, 10.2, 10.2, 9.1, 9.1, 9.3, 9.3, 9.3, 9.5, 10.5, 11.3, 9.5, 9.7, 9.4, 9.4, 10.2, 10.3, 9.4, 9.5, 9.4, 9.5, 9.4, 10.1, 10.1, 11.0, 11.2, 11.3, 9.6, 11.2, 14.9, 12.0, 9.5, 9.4, 9.6, 10.5, 9.6, 11.0, 9.6, 9.0, 9.6, 10.2, 10.2, 9.7, 9.5, 9.2, 11.0, 9.2, 10.0, 9.5, 9.5, 9.5, 9.3, 10.2, 9.3, 9.9, 10.0, 9.6, 9.0, 10.2, 9.8, 11.3, 9.4, 11.3, 9.1, 9.7, 9.4, 9.4, 10.7, 9.8, 9.0, 9.4, 9.4, 12.8, 9.5, 9.5, 9.7, 10.8, 10.1, 9.5, 9.4, 9.6, 9.7, 9.9, 10.0, 10.5, 11.6, 10.0, 10.1, 9.5, 9.4, 9.4, 9.8, 9.2, 9.4, 10.0, 9.6, 9.5, 9.6, 9.2, 10.0, 9.5, 11.2, 10.4, 11.1, 9.5, 9.5, 12.7, 9.6, 11.5, 9.6, 9.5, 9.3, 9.5, 9.5, 9.3, 9.2, 9.3, 11.5, 9.5, 9.2, 10.0, 9.5, 9.5, 9.0, 9.4, 9.6, 9.5, 9.5, 9.5, 9.4, 9.5, 9.1, 10.7, 11.2, 9.8, 9.8, 9.2, 9.7, 9.6, 10.0, 9.6, 9.5, 9.5, 9.4, 9.5, 9.7, 9.6, 9.7, 9.4, 9.4, 9.5, 9.5, 10.0, 10.3, 10.3, 10.5, 9.8, 9.4, 9.8, 10.0, 9.8, 9.8, 9.5, 9.5, 10.1, 10.1, 9.3, 9.7, 9.6, 9.7, 10.8, 12.5, 10.2, 9.6, 10.8, 10.7, 10.7, 9.4, 10.0, 12.9, 9.6, 9.9, 12.8, 12.5, 12.8, 9.2, 10.3, 10.5, 10.9, 10.8, 11.4, 11.3, 10.8, 10.5, 11.9, 9.4, 9.6, 9.7, 14.0, 9.8, 9.8, 10.3, 10.7, 11.0, 10.7, 12.7, 11.1, 10.9, 11.1, 9.9, 9.9, 9.4, 9.3, 11.7, 11.7, 11.2, 10.0, 12.1, 10.3, 10.9, 9.4, 10.6, 9.8, 9.8, 9.9, 9.8, 9.8, 9.5, 9.5, 9.7, 10.9, 10.9, 11.7, 10.9, 11.3, 10.6, 11.2, 9.5, 11.5, 10.4, 9.7, 9.5, 9.7, 11.3, 11.2, 11.2, 10.9, 11.8, 10.6, 10.0, 11.1, 11.8, 11.8, 10.9, 11.8, 10.0, 9.5, 9.9, 11.4, 12.0, 9.5, 10.0, 10.5, 10.4, 12.1, 11.2, 9.3, 10.1, 9.7, 9.3, 9.7, 9.8, 10.7, 12.5, 10.7, 12.5, 11.0, 11.8, 10.8, 10.8, 10.8, 10.8, 9.5, 11.0, 11.5, 10.8, 11.5, 13.2, 10.9, 12.2, 12.2, 11.5, 11.9, 11.0, 10.1, 11.0, 11.8, 10.5, 11.0, 11.8, 10.1, 11.2, 11.0, 10.2, 9.2, 11.2, 12.0, 10.5, 9.8, 9.5, 9.8, 10.5, 11.8, 11.8, 10.4, 12.9, 11.4, 12.4, 12.5, 10.0, 9.7, 12.1, 11.1, 12.0, 12.4, 11.9, 11.9, 11.9, 12.4, 11.2, 12.1, 12.2, 10.4, 11.3, 11.1, 11.3, 10.0, 11.1, 9.3, 9.5, 11.2, 11.1, 11.0, 11.9, 9.2, 12.2, 10.2, 10.9, 10.9, 11.6, 10.7, 12.1, 9.4, 9.4, 9.1, 11.3, 10.4, 10.5, 10.0, 12.9, 10.5, 10.4, 11.3, 11.4, 9.4, 9.4, 10.9, 9.4, 9.4, 9.4, 9.4, 9.4, 10.1, 12.8, 12.8, 9.1, 12.9, 11.5, 10.6, 11.7, 12.8, 10.3, 12.8, 11.7, 11.7, 12.0, 10.9, 12.3, 10.4, 10.0, 10.0, 11.2, 11.4, 12.6, 12.7, 12.7, 10.4, 11.9, 11.9, 10.5, 12.3, 10.5, 10.4, 12.6, 11.6, 10.1, 10.5, 11.5, 11.0, 9.6, 10.4, 9.7, 10.6, 12.5, 9.2, 12.6, 11.1, 10.2, 9.8, 11.1, 10.9, 12.2, 11.4, 10.7, 10.4, 10.9, 10.8, 10.4, 9.2, 12.9, 12.7, 9.1, 9.1, 12.1, 9.1, 11.6, 12.1, 9.9, 12.5, 11.4, 11.8, 11.8, 10.2, 12.5, 10.9, 10.9, 10.8, 11.1, 9.2, 9.5, 10.7, 9.2, 10.2, 11.4, 11.0, 11.0, 12.3, 11.8, 12.3, 9.5, 12.0, 9.5, 9.6, 11.6, 11.2, 9.9, 9.9, 11.8, 11.4, 11.5, 12.0, 10.8, 10.5, 10.8, 9.4, 12.5, 9.4, 12.4, 12.0, 11.2, 12.0, 12.4, 12.8, 12.3, 11.7, 9.5, 10.8, 10.0, 12.3, 11.0, 9.5, 13.6, 11.3, 11.3, 11.3, 13.3, 12.9, 13.1, 12.3, 12.3, 11.2, 11.5, 11.3, 13.5, 11.5, 10.0, 10.5, 10.4, 9.5, 13.6, 11.2, 11.8, 11.9, 11.4, 11.4, 9.1, 9.5, 9.5, 11.0, 11.4, 10.0, 10.1, 10.4, 9.8, 11.8, 11.6, 12.0, 12.8, 12.5, 9.8, 11.1, 11.4, 9.8, 11.8, 12.9, 10.6, 10.8, 11.1, 10.2, 11.8, 10.0, 10.0, 9.4, 10.2, 12.4, 12.0, 11.5, 10.5, 10.8, 12.3, 9.5, 9.5, 11.5, 11.2, 12.7, 11.4, 11.0, 11.0, 11.4, 10.5, 9.3, 10.9, 11.9, 12.2, 11.9, 10.9, 9.6, 12.5, 10.8, 12.4, 10.8, 9.5, 9.5, 9.5, 9.8, 10.9, 9.5, 9.8, 11.2, 11.7, 9.4, 11.0, 11.0, 11.0, 10.0, 11.0, 11.2, 10.4, 9.3, 10.4, 10.5, 10.4, 11.3, 9.5, 12.0, 10.6, 10.9, 11.5, 11.5, 9.6, 12.0, 10.3, 9.4, 9.2, 9.6, 13.6, 9.5, 11.8, 10.8, 9.5, 9.3, 12.8, 11.5, 9.4, 12.8, 9.6, 11.8, 9.3, 9.8, 12.2, 9.5, 10.3, 10.5, 10.0, 10.5, 11.1, 10.9, 10.9, 9.8, 9.8, 9.5, 10.9, 11.0, 9.2, 11.0, 11.3, 11.3, 9.3, 11.2, 9.8, 9.6, 11.8, 10.3, 10.3, 11.4, 9.5, 14.0, 14.0, 11.7, 11.2, 9.3, 11.2, 9.5, 12.0, 9.7, 9.5, 11.5, 10.4, 10.4, 10.9, 10.2, 10.9, 10.5, 12.4, 13.0, 10.2, 10.2, 11.0, 10.9, 12.4, 9.7, 10.9, 9.5, 9.5, 12.1, 12.2, 10.9, 12.5, 11.7, 11.2, 11.2, 9.2, 9.8, 10.1, 11.1, 10.1, 9.2, 9.8, 12.8, 10.5, 10.1, 10.1, 9.8, 12.5, 11.9, 9.8, 9.1, 10.1, 12.5, 11.4, 11.0, 10.6, 10.6, 10.6, 10.6, 9.3, 9.8, 9.8, 9.2, 9.7, 9.6, 10.0, 12.6, 9.5, 9.5, 9.5, 10.5, 10.5, 10.5, 10.4, 10.5, 11.0, 10.2, 11.4, 9.5, 9.5, 10.8, 10.0, 11.8, 10.3, 10.3, 10.0, 10.1, 10.1, 11.1, 9.5, 10.03333333, 10.9, 10.1, 10.03333333, 9.8, 11.8, 9.5, 9.8, 10.5, 9.8, 10.4, 9.2, 11.6, 9.2, 9.3, 9.8, 9.9, 10.0, 12.2, 9.9, 10.8, 10.8, 9.6, 9.9, 9.9, 9.5, 9.2, 9.6, 9.6, 10.3, 9.7, 12.5, 11.0, 9.8, 10.2, 9.2, 9.55, 9.55, 9.9, 10.2, 11.1, 9.9, 9.9, 11.9, 10.0, 10.7, 11.3, 10.9, 10.7, 12.4, 10.7, 11.9, 10.6, 10.9, 10.1, 9.6, 9.4, 9.6, 12.1, 9.8, 9.9, 9.8, 9.4, 11.4, 11.0, 9.6, 9.6, 12.1, 11.2, 11.0, 11.3, 10.4, 9.9, 11.7, 10.1, 9.0, 9.0, 8.5, 11.1, 10.3, 11.06666667, 11.3, 9.566666667, 9.8, 11.7, 11.1, 9.6, 9.8, 9.7, 9.7, 11.3, 11.3, 11.0, 11.6, 9.0, 10.9, 10.9, 10.55, 9.0, 10.5, 11.9, 10.4, 10.0, 10.4, 10.8, 9.7, 9.7, 10.0, 11.0, 10.0, 9.7, 9.7, 12.6, 11.1, 11.0, 8.8, 13.56666667, 8.8, 13.6, 10.2, 10.6, 10.1, 10.6, 10.3, 10.7, 10.9, 9.7, 10.3, 10.6, 11.4, 10.8, 12.4, 11.4, 11.95, 9.7, 10.0, 10.6, 9.7, 11.5, 10.8, 11.5, 9.6, 9.4, 9.8, 11.0, 11.4, 9.95, 10.8, 11.4, 10.6, 11.1, 9.7, 9.8, 10.4, 10.5, 9.233333333, 9.25, 10.6, 10.3, 10.5, 10.2, 10.3, 9.05, 10.6, 10.4, 10.0, 9.7, 9.6, 10.8, 10.1, 10.2, 11.3, 10.2, 9.9, 9.0, 11.7, 9.7, 10.3, 10.2, 12.0, 9.9, 11.6, 10.9, 10.75, 10.4, 11.2, 10.1, 10.2, 12.1, 10.4, 11.4, 9.5, 9.4, 11.3, 9.4, 11.0, 10.55, 9.9, 11.0, 9.5, 9.9, 9.9, 9.9, 10.1, 10.1, 10.1, 10.9, 11.2, 10.1, 9.2, 11.5, 12.4, 11.1, 9.5, 12.5, 10.5, 11.8, 10.8, 11.9, 11.3, 11.3, 11.9, 11.3, 11.9, 9.8, 11.6, 11.5, 11.4, 10.9, 12.8, 9.2, 11.6, 11.6, 11.0, 9.5, 10.5, 11.2, 11.0, 10.2, 11.0], \"yaxis\": \"y\"}], {\"coloraxis\": {\"colorbar\": {\"title\": {\"text\": \"quality\"}}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"height\": 800, \"legend\": {\"itemsizing\": \"constant\", \"tracegroupgap\": 0}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"text\": \"quality vs alcohol (0.44 corr)\"}, \"width\": 800, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"quality\"}}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"alcohol\"}}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('9fe7e498-9dd8-4f23-b6dc-b2f404ecb8f4'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; ### 4.5.2 Plotly with IpyWidgets def my_plot ( x = df . columns , y = df . columns , color = df . columns , size = df . columns ): corr = df . corr () pearson = corr [ x ][ y ] fig = px . scatter ( df , x = x , y = y , color = color , size = size , title = ' {} vs {} ( {:.2f} corr)' . format ( x , y , pearson ), width = 800 , height = 800 ) fig . show () interact ( my_plot ) interactive(children=(Dropdown(description='x', options=('type', 'fixed acidity', 'volatile acidity', 'citric \u2026","title":"5.1 Classes, Instances, Methods, and Attribtues"},{"location":"S5_Pandas/","text":"Technology Fundamentals Course 1, Session 3: Functions and Pandas Introduction \u00b6 Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assitants Varsha Bang, Harsha Vardhan Contact vbang@uw.edu, harshav@uw.edu Today, we will discuss functions in more depth. We've seen them previously and used them, for example the .append() function for lists, or the even more general print() function. Here, we'll dig into how you can make your own functions to encapsulate code that you will reuse over and over. Then we'll jump into the Pandas package. Packages are collections of related functions. These are the things we import . Pandas is a two dimensional data structure like a spreadsheet in Excel. In fact, we will be importing our first dataset and viewing it, with Pandas! 3.0 Review from Session on Data Structures and Flow Control \u00b6 In our last session, we discussed lists , dictionaries , and flow control . Lists are ordered collections of data that can be used to hold multiple pieces of information while preserving their order. We use [ and ] to access elements by their indices which start with 0 . All things that operate on lists like slices use the concept of an inclusive lower bound and an exclusive upper bound. So, the following gets elements from the list my_list with index values of 0 , 1 , and 2 , but not 3 ! my_list[0:3] What other way is there of writing the same statement using slicing ? Hint, think about leaving out one of the numbers in the slice! Dictionaries are named collections of data that can be used to hold multiple pieces of information as values that are addressed by keys resulting in a key to value data structure. They are accessed with [ and ] but intialized with { and } . E.g. my_dict = { 'cake' : 'Tasty!', 'toenails' : 'Gross!' } my_dict['cake'] Finally, we talked about flow control and using the concept of conditional execution to decide which code statements were executed. Remember this figure? Flow control figure What are the if statments? Where do for loops fit in? 3.1 Functions \u00b6 For loops let you repeat some code for every item in a list. Functions are similar in that they run the same lines of code and, frequently, for new values of some variable (we call these parameters ). They are different in that functions are not limited to looping over items. Functions are a critical part of writing easy to read, reusable code. Create a function like: def function_name (parameters): \"\"\" optional docstring \"\"\" function expressions return [variable] Here is a simple example. It prints a string that was passed in and returns nothing. def print_string(string): \"\"\"This prints out a string passed as the parameter.\"\"\" print(string) return def print_string ( string ): \"\"\"This prints out a string passed as the parameter\"\"\" print ( string ) return To call the function, use: print_string(\"GIX is awesome!\") Note: The function has to be defined before you can call it! print_string ( \"GIX is awesome!\" ) GIX is awesome! 3.1.1 Reserved words: def, return, and yield \u00b6 Notice the highlighted words in our function definition: def and return these are reserved words in python used to define functions. Every function definition requires these reserved words. yield is another reserved word that is similar to return but operates slightly differently. It is beyond the scope of what we are covering in this session. This tutorial from realpython has good information on the topic. # what is return doing in this function? def my_square ( a ): return a ** 2 return is going to output whatever value(s) follow after the keyword return when we call upon our function a = 2 my_square ( a ) 4 I'm going to return two values... def my_square ( a ): return a ** 2 , a and we see how the output updates accordingly my_square ( a ) (4, 2) We can capture these values on the output with... square , new_a = my_square ( a ) print ( square , new_a ) 4 2 3.1.2 Global vs local variables and function parameters \u00b6 In a function, new variables that you create are not saved when the function returns - these are local variables. Variables defined outside of the function can be accessed but not changed - these are global variables. let's define the following function def my_little_func ( a ): b = 10 return a * b my_little_func ( 2 ) 20 if I run the following... # b Let's play with this a little further... ...now let's define b outside the function and call our function with a=5 # what happens here? b = 100 my_little_func ( 5 ) 50 we see that b is still 100, instead of 10 as its defined within the function. This is because b inside of my_little_func is a local variable. it doesn't matter how I define b outside the function because within the function it is set locally. ... Let's do this A LITTLE MORE def my_new_func ( a ): print ( b ) return a * b now if I call on my new function, because b is not defined locally within the function, it takes on the global value. This is typically not happy happy fun fun behavior for us, we want to be explicit about how we define and use our variables (but there are some times when this is appropriate to do) b = 1e4 # side note, what did I do here???? my_new_func ( a ) 10000.0 20000.0 3.1.1.1 Function Parameters \u00b6 Parameters (or arguments) in Python are all passed by reference. This means that if you modify the parameters in the function, they are modified outside of the function. (Enrichment: Exceptions, see below) See the following example: def change_list(my_list): \"\"\"This changes a passed list into this function\"\"\" my_list.append('four'); print('list inside the function: ', my_list) return my_list = [1, 2, 3]; print('list before the function: ', my_list) change_list(my_list); print('list after the function: ', my_list) def change_list ( my_list ): \"\"\"This changes a passed list into this function\"\"\" my_list . append ( 'four' ); print ( 'list inside the function: ' , my_list ) return my_list = [ 1 , 2 , 3 ]; print ( 'list before the function: ' , my_list ) change_list ( my_list ); print ( 'list after the function: ' , my_list ) list before the function: [1, 2, 3] list inside the function: [1, 2, 3, 'four'] list after the function: [1, 2, 3, 'four'] 3.1.1.2 Enrichment: Global, local, and immutables \u00b6 Let's go back to our former example... immutables: integers, float, str, tuples b = \"a string\" b = 10 b = 10.2 b = ( 10 , 2 ) b = [ 10 , 2 ] a = 2 def my_little_func ( a , b ): if type ( b ) == str : b += \"20\" elif ( type ( b ) == int ) or ( type ( b ) == float ): b += 10 elif ( type ( b ) == tuple ): print ( \"AYYY no tuple changes, Dude\" ) pass elif ( type ( b ) == list ): b . append ( 'whoaaaa' ) print ( b ) return print ( b ) my_little_func ( a , b ) print ( b ) [10, 2] [10, 2, 'whoaaaa'] [10, 2, 'whoaaaa'] There is a way to change a global variable within a function with the global keyword. Generally, the use of global variables is not encouraged, instead use parameters. We won't cover the global keyword here but you can explore further on your own if you are interested. b = 10 a = 2 def my_little_func ( a ): global b b += 20 print ( b ) return print ( b ) my_little_func ( a ) print ( b ) 10 30 30 Exercise 1: My first function \u00b6 Write a function that takes one parameter and returns any data structure If you are going to return multiple objects, what data structure that we talked about can be used? Give and example below. # Cell for excerise 1 3.1.3 Parameter types \u00b6 Function calling: positional func(10, 20) keyword func(a=10, b=20) or func(b=20, a=10) Function writing: * default * def func(a=10, b=20) def print_name(first, last='Beckner'): print(f'Your name is {first} {last}') return def print_name ( first , last = 'Beckner' ): print ( \"Your name is {} {} \" . format ( first , last )) return print_name ( last = 'Beckner' , first = 'Wesley' ) Your name is Wesley Beckner Play around with the above function. print_name ( 'Wesley' , last = 'the Technology Fundamentals Instructor' ) Your name is Wesley the Technology Fundamentals Instructor Functions can contain any code that you put anywhere else including: * if ... elif ... else * for ... while * other function calls def print_name_age(first, last, age): print_name(first, last) print('Your age is %d' % (age)) if age > 25 and age < 40: print('You are a millenial!') return def print_name_age ( first , last , age ): print_name ( first , last ) print ( 'Your age is %d ' % ( age )) if age > 25 and age < 40 : print ( 'You are a millenial!' ) return print_name_age(age=29, last='Beckner', first='Wesley') print_name_age ( age = 29 , last = 'Beckner' , first = 'Wesley' ) Your name is Wesley Beckner Your age is 29 You are a millenial! 3.2 The scientific python stack \u00b6 In addition to Python's built-in modules like the math module we explored above, there are also many often-used third-party modules that are core tools for doing data science with Python. Some of the most important ones are: numpy : Numerical Python \u00b6 Numpy is short for \"Numerical Python\", and contains tools for efficient manipulation of arrays of data. If you have used other computational tools like IDL or MatLab, Numpy should feel very familiar. scipy : Scientific Python \u00b6 Scipy is short for \"Scientific Python\", and contains a wide range of functionality for accomplishing common scientific tasks, such as optimization/minimization, numerical integration, interpolation, and much more. We will not look closely at Scipy today, but we will use its functionality later in the course. pandas : Labeled Data Manipulation in Python \u00b6 Pandas is short for \"Panel Data\", and contains tools for doing more advanced manipulation of labeled data in Python, in particular with a columnar data structure called a Data Frame . If you've used the R statistical language (and in particular the so-called \"Hadley Stack\"), much of the functionality in Pandas should feel very familiar. matplotlib : Visualization in Python \u00b6 Matplotlib started out as a Matlab plotting clone in Python, and has grown from there in the 15 years since its creation. It is the most popular data visualization tool currently in the Python data world (though other recent packages are starting to encroach on its monopoly). scikit-learn : Machine Learning in Python \u00b6 Scikit-learn is a machine learning library. It features various classification, regression, and clustering algorithms, including support vector machines, random forests, gradient boosting, k-means, and DBSCAN. The library is designed to interoperate with the Python numerical and scientific libraries NumPy and SciPy. 3.3 Pandas \u00b6 3.3.1 Pandas and Scikit-Learn load_datasets \u00b6 We begin by loading the Panda's package. Packages are collections of functions that share a common utility. We've seen import before. Let's use it to import Pandas and all the richness that pandas has. We'll also use a very useful feature of the scikit-learn toolkit, the load_datasets module. We will do some very rudimentary tasks with this dataset, just to demonstrate the utility of load_datasets , then we will switch over to a more relevant dataset for our purposes. import pandas from sklearn.datasets import load_wine import pandas from sklearn.datasets import load_wine We import a function load_wine that loads a simple data set we can play with called the Wine recognition dataset from the 1980s. You can read more about that dataset here dataset = load_wine() print(dataset.DESCR) dataset = load_wine () print ( dataset . DESCR ) .. _wine_dataset: Wine recognition dataset ------------------------ **Data Set Characteristics:** :Number of Instances: 178 (50 in each of three classes) :Number of Attributes: 13 numeric, predictive attributes and the class :Attribute Information: - Alcohol - Malic acid - Ash - Alcalinity of ash - Magnesium - Total phenols - Flavanoids - Nonflavanoid phenols - Proanthocyanins - Color intensity - Hue - OD280/OD315 of diluted wines - Proline - class: - class_0 - class_1 - class_2 :Summary Statistics: ============================= ==== ===== ======= ===== Min Max Mean SD ============================= ==== ===== ======= ===== Alcohol: 11.0 14.8 13.0 0.8 Malic Acid: 0.74 5.80 2.34 1.12 Ash: 1.36 3.23 2.36 0.27 Alcalinity of Ash: 10.6 30.0 19.5 3.3 Magnesium: 70.0 162.0 99.7 14.3 Total Phenols: 0.98 3.88 2.29 0.63 Flavanoids: 0.34 5.08 2.03 1.00 Nonflavanoid Phenols: 0.13 0.66 0.36 0.12 Proanthocyanins: 0.41 3.58 1.59 0.57 Colour Intensity: 1.3 13.0 5.1 2.3 Hue: 0.48 1.71 0.96 0.23 OD280/OD315 of diluted wines: 1.27 4.00 2.61 0.71 Proline: 278 1680 746 315 ============================= ==== ===== ======= ===== :Missing Attribute Values: None :Class Distribution: class_0 (59), class_1 (71), class_2 (48) :Creator: R.A. Fisher :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov) :Date: July, 1988 This is a copy of UCI ML Wine recognition datasets. https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data The data is the results of a chemical analysis of wines grown in the same region in Italy by three different cultivators. There are thirteen different measurements taken for different constituents found in the three types of wine. Original Owners: Forina, M. et al, PARVUS - An Extendible Package for Data Exploration, Classification and Correlation. Institute of Pharmaceutical and Food Analysis and Technologies, Via Brigata Salerno, 16147 Genoa, Italy. Citation: Lichman, M. (2013). UCI Machine Learning Repository [https://archive.ics.uci.edu/ml]. Irvine, CA: University of California, School of Information and Computer Science. .. topic:: References (1) S. Aeberhard, D. Coomans and O. de Vel, Comparison of Classifiers in High Dimensional Settings, Tech. Rep. no. 92-02, (1992), Dept. of Computer Science and Dept. of Mathematics and Statistics, James Cook University of North Queensland. (Also submitted to Technometrics). The data was used with many others for comparing various classifiers. The classes are separable, though only RDA has achieved 100% correct classification. (RDA : 100%, QDA 99.4%, LDA 98.9%, 1NN 96.1% (z-transformed data)) (All results using the leave-one-out technique) (2) S. Aeberhard, D. Coomans and O. de Vel, \"THE CLASSIFICATION PERFORMANCE OF RDA\" Tech. Rep. no. 92-01, (1992), Dept. of Computer Science and Dept. of Mathematics and Statistics, James Cook University of North Queensland. (Also submitted to Journal of Chemometrics). df = pandas.DataFrame() df = pandas . DataFrame () 3.3.1.1 import ... as ... pattern \u00b6 Because we'll use it so much, we often import under a shortened name using the import ... as ... pattern: import pandas as pd import pandas as pd 3.3.2 Creating pandas dataframes \u00b6 Let's create an empty data frame and put the result into a variable called df . This is a popular choice for a data frame variable name. df = pd.DataFrame() df = pd . DataFrame () Let's open the Wine dataset as a pandas data frame. Notice we change the value of the df variable to point to a new data frame. df = pd.DataFrame(dataset.data, columns=dataset.feature_names) df = pd . DataFrame ( dataset . data , columns = dataset . feature_names ) 3.3.2.1 From excel and csv \u00b6 Please follow this link This is what we call a csv or comma separated value file. We have a method reading these directly into pandas: df = pd . read_csv ( 'https://raw.githubusercontent.com/wesleybeckner/technology_explorers/main/assets/imdb_movies.csv' ) /usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (3) have mixed types.Specify dtype option on import or set low_memory=False. interactivity=interactivity, compiler=compiler, result=result) We can do this in a similar way with excel files. pd . read_excel ( 'https://raw.githubusercontent.com/wesleybeckner/ds_for_engineers/main/data/truffle_margin/margin_data.xlsx' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Base Cake Truffle Type Primary Flavor Secondary Flavor Color Group Width Height Net Sales Quantity in KG EBITDA Product 0 Tiramisu Chocolate Outer Doughnut Egg Nog Amethyst 340 50 8244.500 21833.99 Tiramisu-Chocolate Outer-Doughnut-Egg Nog-Amet... 1 Tiramisu Chocolate Outer Doughnut Egg Nog Amethyst 1340 25 1857.000 21589.48 Tiramisu-Chocolate Outer-Doughnut-Egg Nog-Amet... 2 Tiramisu Chocolate Outer Chocolate Pear Amethyst 310 140 17365.000 19050.69 Tiramisu-Chocolate Outer-Chocolate-Pear-Amethy... 3 Tiramisu Chocolate Outer Doughnut Egg Nog Amethyst 449 50 14309.000 18573.01 Tiramisu-Chocolate Outer-Doughnut-Egg Nog-Amet... 4 Tiramisu Chocolate Outer Doughnut Rock and Rye Amethyst 640 80 25584.500 14790.90 Tiramisu-Chocolate Outer-Doughnut-Rock and Rye... ... ... ... ... ... ... ... ... ... ... ... 2501 Butter Chocolate Outer Lemon Bar Wild Cherry Cream Amethyst 930 50 150352.000 -97839.16 Butter-Chocolate Outer-Lemon Bar-Wild Cherry C... 2502 Butter Chocolate Outer Cream Soda Peppermint Amethyst 900 50 120451.400 -98661.97 Butter-Chocolate Outer-Cream Soda-Peppermint-A... 2503 Butter Jelly Filled Orange Cucumber Burgundy 905 50 143428.580 -122236.96 Butter-Jelly Filled-Orange-Cucumber-Burgundy-9... 2504 Butter Chocolate Outer Horchata Dill Pickle Amethyst 597 45 271495.572 -128504.49 Butter-Chocolate Outer-Horchata-Dill Pickle-Am... 2505 Butter Candy Outer Ginger Lime Vanilla Amethyst 580 50 170567.065 -137897.08 Butter-Candy Outer-Ginger Lime-Vanilla-Amethys... 2506 rows \u00d7 10 columns 3.3.2.2 from lists \u00b6 my_list = [[ 1 , 2 , 3 ], [ 3 , 4 , 5 ], [ 5 , 6 , 7 ], [ 7 , 8 , 9 ]] pd . DataFrame ( my_list ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 0 1 2 3 1 3 4 5 2 5 6 7 3 7 8 9 pd . DataFrame ([[ 1 , 2 , 3 ], [ 3 , 4 , 5 ], [ 5 , 6 , 7 ], [ 7 , 8 , 9 ]], index = [ 'a' , 'b' , 'c' , 'd' ], columns = [ 'x' , 'y' , 'z' ]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x y z a 1 2 3 b 3 4 5 c 5 6 7 d 7 8 9 3.3.2.3 from dictionaries \u00b6 from_dict = pd . DataFrame ({ 'A' : [ 'apple' , 'airplane' ], 'B' : [ 'bannana' , 'bubbles' ]}) from_dict .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 0 apple bannana 1 airplane bubbles from_dict . to_dict () {'A': {0: 'apple', 1: 'airplane'}, 'B': {0: 'bannana', 1: 'bubbles'}} Exercise 2: Create a DataFrame \u00b6 Create a dictionary with the following keys: movies, songs, books . In each key list your top 5 favorites in the cooresponding category. Then use pd.DataFrame to turn this into a dictionary. # Cell for Ex 2 3.3.2.4 on pandas.Series \u00b6 pandas Series objects will percolate in our experience here and there, however they are not so important as for us to wish to spend dedicated time on them. For now, know that they are a lower-level data collection in the pandas framework. You can think of them as an individual column or row in the pandas dataframe. For more practice with these you can refer to this documentation 3.3.3 Viewing pandas dataframes \u00b6 The head() and tail() methods show us the first and last rows of the data. df.head() df.tail() df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics 0 tt0000009 Miss Jerry Miss Jerry 1894 1894-10-09 Romance 45 USA None Alexander Black Alexander Black Alexander Black Photoplays Blanche Bayliss, William Courtenay, Chauncey D... The adventures of a female reporter in the 1890s. 5.9 154 NaN NaN NaN NaN 1.0 2.0 1 tt0000574 The Story of the Kelly Gang The Story of the Kelly Gang 1906 1906-12-26 Biography, Crime, Drama 70 Australia None Charles Tait Charles Tait J. and N. Tait Elizabeth Tait, John Tait, Norman Campbell, Be... True story of notorious Australian outlaw Ned ... 6.1 589 $ 2250 NaN NaN NaN 7.0 7.0 2 tt0001892 Den sorte dr\u00f8m Den sorte dr\u00f8m 1911 1911-08-19 Drama 53 Germany, Denmark NaN Urban Gad Urban Gad, Gebhard Sch\u00e4tzler-Perasini Fotorama Asta Nielsen, Valdemar Psilander, Gunnar Helse... Two men of high rank are both wooing the beaut... 5.8 188 NaN NaN NaN NaN 5.0 2.0 3 tt0002101 Cleopatra Cleopatra 1912 1912-11-13 Drama, History 100 USA English Charles L. Gaskill Victorien Sardou Helen Gardner Picture Players Helen Gardner, Pearl Sindelar, Miss Fielding, ... The fabled queen of Egypt's affair with Roman ... 5.2 446 $ 45000 NaN NaN NaN 25.0 3.0 4 tt0002130 L'Inferno L'Inferno 1911 1911-03-06 Adventure, Drama, Fantasy 68 Italy Italian Francesco Bertolini, Adolfo Padovan Dante Alighieri Milano Film Salvatore Papa, Arturo Pirovano, Giuseppe de L... Loosely adapted from Dante's Divine Comedy and... 7.0 2237 NaN NaN NaN NaN 31.0 14.0 df . tail () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics 85850 tt9908390 Le lion Le lion 2020 2020-01-29 Comedy 95 France, Belgium French Ludovic Colbeau-Justin Alexandre Coquelle, Matthieu Le Naour Monkey Pack Films Dany Boon, Philippe Katerine, Anne Serra, Samu... A psychiatric hospital patient pretends to be ... 5.3 398 NaN NaN $ 3507171 NaN NaN 4.0 85851 tt9911196 De Beentjes van Sint-Hildegard De Beentjes van Sint-Hildegard 2020 2020-02-13 Comedy, Drama 103 Netherlands German, Dutch Johan Nijenhuis Radek Bajgar, Herman Finkers Johan Nijenhuis & Co Herman Finkers, Johanna ter Steege, Leonie ter... A middle-aged veterinary surgeon believes his ... 7.7 724 NaN NaN $ 7299062 NaN 6.0 4.0 85852 tt9911774 Padmavyuhathile Abhimanyu Padmavyuhathile Abhimanyu 2019 2019-03-08 Drama 130 India Malayalam Vineesh Aaradya Vineesh Aaradya, Vineesh Aaradya RMCC Productions Anoop Chandran, Indrans, Sona Nair, Simon Brit... NaN 7.9 265 NaN NaN NaN NaN NaN NaN 85853 tt9914286 Sokagin \u00c7ocuklari Sokagin \u00c7ocuklari 2019 2019-03-15 Drama, Family 98 Turkey Turkish Ahmet Faik Akinci Ahmet Faik Akinci, Kasim U\u00e7kan Gizem Ajans Ahmet Faik Akinci, Belma Mamati, Metin Ke\u00e7eci,... NaN 6.4 194 NaN NaN $ 2833 NaN NaN NaN 85854 tt9914942 La vida sense la Sara Amat La vida sense la Sara Amat 2019 2020-02-05 Drama 74 Spain Catalan Laura Jou Coral Cruz, Pep Puig La Xarxa de Comunicaci\u00f3 Local Maria Morera Colomer, Biel Rossell Pelfort, Is... Pep, a 13-year-old boy, is in love with a girl... 6.7 102 NaN NaN $ 59794 NaN NaN 2.0 The shape attribute shows us the number of elements: df.shape Note it doesn't have the () because it isn't a function - it is an attribute or variable attached to the df object. df . shape (85855, 22) The columns attribute gives us the column names df.columns df . columns Index(['imdb_title_id', 'title', 'original_title', 'year', 'date_published', 'genre', 'duration', 'country', 'language', 'director', 'writer', 'production_company', 'actors', 'description', 'avg_vote', 'votes', 'budget', 'usa_gross_income', 'worlwide_gross_income', 'metascore', 'reviews_from_users', 'reviews_from_critics'], dtype='object') The index attribute gives us the index names df.index df . index RangeIndex(start=0, stop=85855, step=1) The dtypes attribute gives the data types of each column, remember the data type floating point *?: df.dtypes df . dtypes imdb_title_id object title object original_title object year object date_published object genre object duration int64 country object language object director object writer object production_company object actors object description object avg_vote float64 votes int64 budget object usa_gross_income object worlwide_gross_income object metascore float64 reviews_from_users float64 reviews_from_critics float64 dtype: object df . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } duration avg_vote votes metascore reviews_from_users reviews_from_critics count 85855.000000 85855.000000 8.585500e+04 13305.000000 78258.000000 74058.000000 mean 100.351418 5.898656 9.493490e+03 55.896881 46.040826 27.479989 std 22.553848 1.234987 5.357436e+04 17.784874 178.511411 58.339158 min 41.000000 1.000000 9.900000e+01 1.000000 1.000000 1.000000 25% 88.000000 5.200000 2.050000e+02 43.000000 4.000000 3.000000 50% 96.000000 6.100000 4.840000e+02 57.000000 9.000000 8.000000 75% 108.000000 6.800000 1.766500e+03 69.000000 27.000000 23.000000 max 808.000000 9.900000 2.278845e+06 100.000000 10472.000000 999.000000 Exercise 3: Viewing DataFrames \u00b6 Using the dataframe you made in exercise 1, return the following attributes: the datatype stored in each column, the column names, the indices, and the shape. # Cell for Ex 3 3.3.4 Manipulating data with pandas \u00b6 Here we'll cover some key features of manipulating data with pandas 3.3.4.1 Selection \u00b6 Access columns by name using square-bracket indexing: df['duration'] df [ 'duration' ] 0 45 1 70 2 53 3 100 4 68 ... 85850 95 85851 103 85852 130 85853 98 85854 74 Name: duration, Length: 85855, dtype: int64 Mathematical operations on columns happen element-wise : df['duration'] / 60 df [ 'duration' ] / 60 0 0.750000 1 1.166667 2 0.883333 3 1.666667 4 1.133333 ... 85850 1.583333 85851 1.716667 85852 2.166667 85853 1.633333 85854 1.233333 Name: duration, Length: 85855, dtype: float64 Columns can be created (or overwritten) with the assignment operator. Let's create a column with duration in hours. df['duration (hours)'] = df['duration'] / 60 df [ 'duration (hours)' ] = df [ 'duration' ] / 60 Let's use the .head() function to see our new data! df.head() df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) 0 tt0000009 Miss Jerry Miss Jerry 1894 1894-10-09 Romance 45 USA None Alexander Black Alexander Black Alexander Black Photoplays Blanche Bayliss, William Courtenay, Chauncey D... The adventures of a female reporter in the 1890s. 5.9 154 NaN NaN NaN NaN 1.0 2.0 0.750000 1 tt0000574 The Story of the Kelly Gang The Story of the Kelly Gang 1906 1906-12-26 Biography, Crime, Drama 70 Australia None Charles Tait Charles Tait J. and N. Tait Elizabeth Tait, John Tait, Norman Campbell, Be... True story of notorious Australian outlaw Ned ... 6.1 589 $ 2250 NaN NaN NaN 7.0 7.0 1.166667 2 tt0001892 Den sorte dr\u00f8m Den sorte dr\u00f8m 1911 1911-08-19 Drama 53 Germany, Denmark NaN Urban Gad Urban Gad, Gebhard Sch\u00e4tzler-Perasini Fotorama Asta Nielsen, Valdemar Psilander, Gunnar Helse... Two men of high rank are both wooing the beaut... 5.8 188 NaN NaN NaN NaN 5.0 2.0 0.883333 3 tt0002101 Cleopatra Cleopatra 1912 1912-11-13 Drama, History 100 USA English Charles L. Gaskill Victorien Sardou Helen Gardner Picture Players Helen Gardner, Pearl Sindelar, Miss Fielding, ... The fabled queen of Egypt's affair with Roman ... 5.2 446 $ 45000 NaN NaN NaN 25.0 3.0 1.666667 4 tt0002130 L'Inferno L'Inferno 1911 1911-03-06 Adventure, Drama, Fantasy 68 Italy Italian Francesco Bertolini, Adolfo Padovan Dante Alighieri Milano Film Salvatore Papa, Arturo Pirovano, Giuseppe de L... Loosely adapted from Dante's Divine Comedy and... 7.0 2237 NaN NaN NaN NaN 31.0 14.0 1.133333 3.3.4.1.1 loc and iloc \u00b6 Pandas provides a powerful way to work with both rows and columns together, optionally using their label indices or numeric indices. .loc : Purely label-location based indexer for selection by label (but may also be used with a boolean array). Important: If you use slicing in loc, it will return the end index as well .iloc: Purely integer-location based indexing for selection by position (but may also be used with a boolean array). df . columns [ 1 ] 'title' df . loc [: 5 : 2 , [ df . columns [ 1 ]]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } title 0 Miss Jerry 2 Den sorte dr\u00f8m 4 L'Inferno df . iloc [ - 5 :, [ 3 , 5 ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } year genre 85850 2020 Comedy 85851 2020 Comedy, Drama 85852 2019 Drama 85853 2019 Drama, Family 85854 2019 Drama 3.3.4.1.2 column vs index access \u00b6 df [ 'duration' ][ 0 : 10 ] 0 45 1 70 2 53 3 100 4 68 5 60 6 85 7 120 8 120 9 55 Name: duration, dtype: int64 # df[0]['duration'] # will return an error my_list = [[ 10 , 20 , 30 ]] * 4 mydf = pd . DataFrame ( my_list , index = [ 'a' , 'b' , 'c' , 'd' ], columns = [ 'alpha' , 'beta' , 'gamma' ]) mydf .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } alpha beta gamma a 10 20 30 b 10 20 30 c 10 20 30 d 10 20 30 mydf . loc [ 'a' , 'alpha' ] = 'mychange' # using this you will get a setting # with copy warning (depending on your pandas warning settings) # mydf['alpha']['a'] = 'newchange' You want to use loc or iloc when setting new values to pandas dataframes. Exercise 4: Selecting \u00b6 select the first 10 rows of the country, genre, and year columns using loc . Repeat the same exercise using iloc # Cell for Ex 4 3.3.4.2 Filtering \u00b6 filtering down your selection will be BIGLY useful in your data quests 3.3.4.2.1 By String \u00b6 one of the first tools we'll use to filter our dataset is the .str.contains method. Let's take an example. # remember, if we don't remember our column mames we can quickly pull them up # with: df . columns Index(['imdb_title_id', 'title', 'original_title', 'year', 'date_published', 'genre', 'duration', 'country', 'language', 'director', 'writer', 'production_company', 'actors', 'description', 'avg_vote', 'votes', 'budget', 'usa_gross_income', 'worlwide_gross_income', 'metascore', 'reviews_from_users', 'reviews_from_critics', 'duration (hours)'], dtype='object') [ df [ 'description' ] . str . contains ( 'a.i.' , na = False )] [0 False 1 True 2 True 3 False 4 True ... 85850 True 85851 False 85852 False 85853 False 85854 False Name: description, Length: 85855, dtype: bool] df . iloc [ 17920 ][ 'description' ] 'A scientist creates Proteus--an organic super computer with artificial intelligence which becomes obsessed with human beings, and in particular the creators wife.' df [ df [ 'description' ] . str . contains ( 'artificial intelligence' , na = False )] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) 17920 tt0075931 Generazione Proteus Demon Seed 1977 1977-12-31 Horror, Sci-Fi 94 USA English Donald Cammell Dean R. Koontz, Robert Jaffe Metro-Goldwyn-Mayer (MGM) Julie Christie, Fritz Weaver, Gerrit Graham, B... A scientist creates Proteus--an organic super ... 6.3 7994 NaN NaN NaN 55.0 71.0 81.0 1.566667 44484 tt0382992 Stealth - Arma suprema Stealth 2005 2005-09-02 Action, Adventure, Sci-Fi 121 USA English, Korean, Russian, Spanish Rob Cohen W.D. Richter Columbia Pictures Josh Lucas, Jessica Biel, Jamie Foxx, Sam Shep... Deeply ensconced in a top-secret military prog... 5.1 51365 $ 135000000 $ 32116746 $ 79268322 35.0 401.0 150.0 2.016667 65411 tt2209764 Transcendence Transcendence 2014 2014-04-17 Action, Drama, Sci-Fi 119 UK, China, USA English Wally Pfister Jack Paglen Alcon Entertainment Johnny Depp, Rebecca Hall, Paul Bettany, Cilli... A scientist's drive for artificial intelligenc... 6.3 213720 $ 100000000 $ 23022309 $ 103039258 42.0 554.0 373.0 1.983333 68589 tt2769184 Debug Debug 2014 2015-02-07 Horror, Sci-Fi 86 Canada English David Hewlett David Hewlett Copperheart Entertainment Tenika Davis, Jason Momoa, Adrian Holmes, Kjar... Six young computer hackers, sent to work on a ... 4.3 2244 NaN NaN NaN NaN 38.0 30.0 1.433333 71500 tt3502284 Kikaid\u00e2 Reboot Kikaid\u00e2 Reboot 2014 2014-05-24 Action 110 Japan Japanese Ten Shimoyama Sh\u00f4tar\u00f4 Ishinomori, Kento Shimoyama Asatsu-DK Jingi Irie, Kazushige Nagashima, Aimi Satsukaw... Komyoji Nobuhiko is a genius and leader in rob... 5.6 110 NaN NaN NaN NaN 2.0 2.0 1.833333 75759 tt4788944 Robot Sound Robot Sound 2016 2016-01-27 Sci-Fi 117 South Korea Korean, English Ho-jae Lee Soyoung Lee NaN Erik Brown, Soo-bin Chae, Dean Dawson, Lee Han... The plot revolves around a robotic satellite w... 6.9 191 NaN NaN $ 2843718 NaN 3.0 4.0 1.950000 75907 tt4839424 Qi che ren zong dong yuan Qi che ren zong dong yuan 2015 2015-07-03 Animation, Adventure, Family 85 China Mandarin Jianrong Zhuo NaN Xiamen Lanhuoyan Film Animation Co. Christopher Petrosian, Dawei Hu, Xinxuan Liu, ... The film revolves around a genius engineer who... 1.1 121 NaN NaN NaN NaN 2.0 NaN 1.416667 76214 tt4937114 Rogue Warrior: Robot Fighter Rogue Warrior: Robot Fighter 2016 2016-09-02 Action, Sci-Fi 101 USA English Neil Johnson Neil Johnson Empire Motion pictures Tracey Birdsall, William Kircher, Daz Crawford... In the distant future, humanity is overthrown ... 4.9 2574 $ 3800000 NaN NaN NaN 22.0 26.0 1.683333 79921 tt6197070 Blood Machines Blood Machines 2019 2020-09-01 Adventure, Music, Sci-Fi 50 France English Rapha\u00ebl Hernandez, Seth Ickerman Rapha\u00ebl Hernandez, Seth Ickerman Logical Pictures Elisa Lasowski, Anders Heinrichsen, Christian ... An artificial intelligence escapes her spacesh... 6.1 2023 NaN NaN NaN NaN 70.0 55.0 0.833333 83905 tt8196068 Twisted Pair Twisted Pair 2018 2018-10-03 Drama, Fantasy, Sci-Fi 89 USA English Neil Breen Neil Breen Neil Breen Films Neil Breen, Sara Meritt, Siohbon Chevy Ebrahim... Identical twin brothers become hybrid A.I (art... 5.9 1313 $ 3 NaN NaN NaN 69.0 4.0 1.483333 84615 tt8712750 A.M.I. A.M.I. 2019 2019-07-02 Horror, Thriller 77 Canada English Rusty Nixon Rusty Nixon, Evan Tylor 1160594 B.C. Debs Howard, Philip Granger, Bonnie Hay, Sam R... A seventeen year old girl forms a co-dependent... 3.9 1399 NaN NaN NaN NaN 91.0 13.0 1.283333 85361 tt9308170 \u00d6zg\u00fcr D\u00fcnya \u00d6zg\u00fcr D\u00fcnya 2019 2019-03-22 Action, Adventure, Family 122 Turkey Turkish Faruk Aksoy, Sevki Es Faruk Aksoy, H\u00fcseyin Aksu Ay Yapim Murat Serezli, Rabia Soyturk, G\u00fcrbey Ileri, Ha... The story of a game managed by artificial inte... 2.3 340 NaN NaN $ 50537 NaN 2.0 NaN 2.033333 or if you know the exact string you are looking for df [ df [ 'title' ] == \"Fight Club\" ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) 32487 tt0137523 Fight Club Fight Club 1999 1999-10-29 Drama 139 USA, Germany English David Fincher Chuck Palahniuk, Jim Uhls Fox 2000 Pictures Edward Norton, Brad Pitt, Meat Loaf, Zach Gren... An insomniac office worker and a devil-may-car... 8.8 1807440 $ 63000000 $ 37030102 $ 101218804 66.0 3758.0 370.0 2.316667 3.3.4.2.2 By numerical value \u00b6 df [ df [ 'votes' ] > 1000 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) 4 tt0002130 L'Inferno L'Inferno 1911 1911-03-06 Adventure, Drama, Fantasy 68 Italy Italian Francesco Bertolini, Adolfo Padovan Dante Alighieri Milano Film Salvatore Papa, Arturo Pirovano, Giuseppe de L... Loosely adapted from Dante's Divine Comedy and... 7.0 2237 NaN NaN NaN NaN 31.0 14.0 1.133333 11 tt0002844 Fant\u00f4mas - \u00c0 l'ombre de la guillotine Fant\u00f4mas - \u00c0 l'ombre de la guillotine 1913 1913-05-12 Crime, Drama 54 France French Louis Feuillade Marcel Allain, Louis Feuillade Soci\u00e9t\u00e9 des Etablissements L. Gaumont Ren\u00e9 Navarre, Edmund Breon, Georges Melchior, ... Inspector Juve is tasked to investigate and ca... 7.0 1944 NaN NaN NaN NaN 9.0 28.0 0.900000 13 tt0003037 Juve contre Fant\u00f4mas Juve contre Fant\u00f4mas 1913 1913-09-08 Crime, Drama 61 France French Louis Feuillade Marcel Allain, Louis Feuillade Soci\u00e9t\u00e9 des Etablissements L. Gaumont Ren\u00e9 Navarre, Edmund Breon, Georges Melchior, ... In Part Two of Louis Feuillade's 5 1/2-hour ep... 7.0 1349 NaN NaN NaN NaN 8.0 23.0 1.016667 16 tt0003165 Le mort qui tue Le mort qui tue 1913 1913-11-06 Crime, Drama, Mystery 90 France French Louis Feuillade Marcel Allain, Louis Feuillade Soci\u00e9t\u00e9 des Etablissements L. Gaumont Ren\u00e9 Navarre, Edmund Breon, Georges Melchior, ... After a body disappears from inside the prison... 7.0 1050 NaN NaN NaN NaN 6.0 18.0 1.500000 18 tt0003419 Lo studente di Praga Der Student von Prag 1913 1913-08-22 Drama, Fantasy, Horror 85 Germany German, English Paul Wegener, Stellan Rye Hanns Heinz Ewers, Hanns Heinz Ewers Deutsche Bioscop GmbH Paul Wegener, Grete Berger, Lyda Salmonova, Jo... Balduin, a student of Prague, leaves his royst... 6.5 1768 NaN NaN NaN NaN 20.0 26.0 1.416667 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 85811 tt9860728 Falling Inn Love - Ristrutturazione con amore Falling Inn Love 2019 2019-08-29 Comedy, Romance 98 USA English Roger Kumble Elizabeth Hackett, Hilary Galanoy NaN Christina Milian, Adam Demos, Jeffrey Bowyer-C... When city girl Gabriela spontaneously enters a... 5.6 14108 NaN NaN NaN NaN 265.0 32.0 1.633333 85817 tt9866700 Paranormal Investigation Paranormal Investigation 2018 2018-12-01 Horror, Thriller 92 France French Franck Phelizon NaN Baril Pictures Jose Atuncar, Claudine Bertin, Cedric Henquez,... When a young man becomes possessed after playi... 3.7 1299 NaN NaN NaN NaN 334.0 11.0 1.533333 85837 tt9894470 VFW VFW 2019 2020-02-14 Action, Crime, Horror 92 USA English Joe Begos Max Brallier, Matthew McArdle Fangoria Stephen Lang, William Sadler, Fred Williamson,... A group of old war veterans put their lives on... 6.1 4178 NaN NaN $ 23101 72.0 83.0 94.0 1.533333 85839 tt9898858 Coffee & Kareem Coffee & Kareem 2020 2020-04-03 Action, Comedy 88 USA English Michael Dowse Shane Mack Pacific Electric Picture Company Ed Helms, Taraji P. Henson, Terrence Little Ga... Twelve-year-old Kareem Manning hires a crimina... 5.1 10627 NaN NaN NaN 35.0 388.0 64.0 1.466667 85843 tt9900782 Kaithi Kaithi 2019 2019-10-25 Action, Thriller 145 India Tamil Lokesh Kanagaraj Lokesh Kanagaraj, Pon Parthiban Dream Warrior Pictures Karthi, Narain, Ramana, George Maryan, Harish ... A recently released prisoner becomes involved ... 8.5 8400 INR 240000000 NaN $ 524061 NaN 188.0 8.0 2.416667 29362 rows \u00d7 23 columns Exercise 5: Filtering \u00b6 Filter df for all the movies that are longer than 2 hours Filter df for all movies where 'day' is in the title # Cell for Ex 5 3.3.4.3 Select, filter, operation \u00b6 The real power of Pandas comes in its tools for grouping and aggregating data. Here we'll look at value counts and the basics of group-by operations. # a basic select, filter, operate procedure would look like: df [ df [ 'country' ] == 'USA' ][ 'duration' ] . describe () count 28511.000000 mean 93.050437 std 18.576873 min 42.000000 25% 84.000000 50% 91.000000 75% 100.000000 max 398.000000 Name: duration, dtype: float64 we can invert the selection with ~ df [ ~ ( df [ 'country' ] == 'USA' )][ 'duration' ] . describe () count 57344.000000 mean 103.981410 std 23.459158 min 41.000000 25% 90.000000 50% 99.000000 75% 112.000000 max 808.000000 Name: duration, dtype: float64 In preparation for grouping the data, let's bin the instances by their duration (we could have chosen any numerical column). For that, we'll use pd.cut . The documentation for pd.cut can be found here . It is used to bin values into discrete intervals. This is like a histogram where for each bin along the range of data values, you count the number of occurrences of that bin. in our example, we'll use 10 bins and let Pandas decide how to evenly divide the range into the bins. Let's see it in action. df['duration_group'] = pd.cut(df['duration'], 10) df.head() df.dtypes df [ 'duration_group' ] = pd . cut ( df [ 'duration' ], 10 ) df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) duration_group 0 tt0000009 Miss Jerry Miss Jerry 1894 1894-10-09 Romance 45 USA None Alexander Black Alexander Black Alexander Black Photoplays Blanche Bayliss, William Courtenay, Chauncey D... The adventures of a female reporter in the 1890s. 5.9 154 NaN NaN NaN NaN 1.0 2.0 0.750000 (40.233, 117.7] 1 tt0000574 The Story of the Kelly Gang The Story of the Kelly Gang 1906 1906-12-26 Biography, Crime, Drama 70 Australia None Charles Tait Charles Tait J. and N. Tait Elizabeth Tait, John Tait, Norman Campbell, Be... True story of notorious Australian outlaw Ned ... 6.1 589 $ 2250 NaN NaN NaN 7.0 7.0 1.166667 (40.233, 117.7] 2 tt0001892 Den sorte dr\u00f8m Den sorte dr\u00f8m 1911 1911-08-19 Drama 53 Germany, Denmark NaN Urban Gad Urban Gad, Gebhard Sch\u00e4tzler-Perasini Fotorama Asta Nielsen, Valdemar Psilander, Gunnar Helse... Two men of high rank are both wooing the beaut... 5.8 188 NaN NaN NaN NaN 5.0 2.0 0.883333 (40.233, 117.7] 3 tt0002101 Cleopatra Cleopatra 1912 1912-11-13 Drama, History 100 USA English Charles L. Gaskill Victorien Sardou Helen Gardner Picture Players Helen Gardner, Pearl Sindelar, Miss Fielding, ... The fabled queen of Egypt's affair with Roman ... 5.2 446 $ 45000 NaN NaN NaN 25.0 3.0 1.666667 (40.233, 117.7] 4 tt0002130 L'Inferno L'Inferno 1911 1911-03-06 Adventure, Drama, Fantasy 68 Italy Italian Francesco Bertolini, Adolfo Padovan Dante Alighieri Milano Film Salvatore Papa, Arturo Pirovano, Giuseppe de L... Loosely adapted from Dante's Divine Comedy and... 7.0 2237 NaN NaN NaN NaN 31.0 14.0 1.133333 (40.233, 117.7] df . dtypes imdb_title_id object title object original_title object year object date_published object genre object duration int64 country object language object director object writer object production_company object actors object description object avg_vote float64 votes int64 budget object usa_gross_income object worlwide_gross_income object metascore float64 reviews_from_users float64 reviews_from_critics float64 duration (hours) float64 duration_group category dtype: object Pandas includes an array of useful functionality for manipulating and analyzing tabular data. We'll take a look at two of these here. The pandas.value_counts returns statistics on the unique values within each column. We can use it, for example, to break down the movies by their duration group that we just created: pd.value_counts(df['duration_group'], sort=False) pd . value_counts ( df [ 'duration_group' ], sort = False ) (40.233, 117.7] 72368 (117.7, 194.4] 13197 (194.4, 271.1] 228 (271.1, 347.8] 40 (347.8, 424.5] 11 (424.5, 501.2] 4 (501.2, 577.9] 4 (577.9, 654.6] 1 (654.6, 731.3] 1 (731.3, 808.0] 1 Name: duration_group, dtype: int64 What happens if we try this on a continuous valued variable? pd.value_counts(df['duration']) pd . value_counts ( df [ 'duration' ]) 90 5162 95 3194 100 3106 92 2418 93 2414 ... 279 1 301 1 345 1 729 1 319 1 Name: duration, Length: 266, dtype: int64 Exercise 6: value_counts, unique, nunique \u00b6 We can do a little data exploration with this by seeing how common different values are. Play around with these pandas methods: value_counts() unique() nunique() Also be sure to use: selection filteration (and you are already using operation with the above mentioned pandas methods, value_counts, unique, nunique (: ) Do so with 3 different columns in the dataframe # Cell for Exercise 6 3.3.4.4 Group-by Operation \u00b6 One of the killer features of the Pandas dataframe is the ability to do group-by operations. You can visualize the group-by like this (image borrowed from the Python Data Science Handbook ) 3.3.4.5 Summary statistics with groupby: value_counts , count , describe \u00b6 Let's break take this in smaller steps. Recall our duration_group column. pd.value_counts(df['duration_group']) pd . value_counts ( df [ 'duration_group' ]) (40.233, 117.7] 72368 (117.7, 194.4] 13197 (194.4, 271.1] 228 (271.1, 347.8] 40 (347.8, 424.5] 11 (501.2, 577.9] 4 (424.5, 501.2] 4 (731.3, 808.0] 1 (654.6, 731.3] 1 (577.9, 654.6] 1 Name: duration_group, dtype: int64 groupby allows us to look at the number of values for each column and each value. The group by documentation is here . Basically, groupby allows us to create groups of records based on their values. Let's count how many records, or rows, in our data set fall into each bin of our duration data. df.groupby(['duration_group']).count() df . groupby ([ 'duration_group' ]) . count () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) duration_group (40.233, 117.7] 72368 72368 72368 72368 72368 72368 72368 72315 71618 72309 71474 68922 72304 70464 72368 72368 19493 12123 24645 10759 65972 63321 72368 (117.7, 194.4] 13197 13197 13197 13197 13197 13197 13197 13186 13122 13171 12528 12211 13192 12990 13197 13197 4133 3153 6298 2506 12017 10493 13197 (194.4, 271.1] 228 228 228 228 228 228 228 228 221 226 221 207 228 226 228 228 70 40 59 28 215 188 228 (271.1, 347.8] 40 40 40 40 40 40 40 40 40 40 39 39 40 38 40 40 10 5 9 8 37 37 40 (347.8, 424.5] 11 11 11 11 11 11 11 11 10 11 11 10 11 11 11 11 1 3 3 1 9 10 11 (424.5, 501.2] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 1 0 0 1 4 4 4 (501.2, 577.9] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 1 0 0 0 2 3 4 (577.9, 654.6] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 1 (654.6, 731.3] 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 (731.3, 808.0] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 Now, let's find the mean of each of the columns for each duration_group . Notice what happens to the non-numeric columns. df.groupby(['duration_group']).mean() df . groupby ([ 'duration_group' ]) . mean () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } duration avg_vote votes metascore reviews_from_users reviews_from_critics duration (hours) duration_group (40.233, 117.7] 93.147026 5.786671 6604.507932 54.153267 35.944037 24.517601 1.552450 (117.7, 194.4] 136.552550 6.488513 25010.089414 63.042298 100.725639 45.365958 2.275876 (194.4, 271.1] 220.394737 6.997368 30003.302632 76.500000 94.711628 29.015957 3.673246 (271.1, 347.8] 302.975000 6.810000 4201.275000 79.375000 19.378378 21.513514 5.049583 (347.8, 424.5] 384.636364 7.181818 2602.545455 89.000000 18.333333 18.100000 6.410606 (424.5, 501.2] 454.000000 7.700000 2589.000000 59.000000 19.250000 24.500000 7.566667 (501.2, 577.9] 547.500000 7.875000 206.500000 NaN 1.500000 8.666667 9.125000 (577.9, 654.6] 580.000000 5.800000 157.000000 NaN NaN NaN 9.666667 (654.6, 731.3] 729.000000 7.800000 1126.000000 87.000000 13.000000 30.000000 12.150000 (731.3, 808.0] 808.000000 7.700000 473.000000 77.000000 5.000000 23.000000 13.466667 You can specify a groupby using the names of table columns and compute other functions, such as the sum , count , std , and describe . df.groupby(['duration_group'])['metascore'].describe() df . groupby ([ 'duration_group' ])[ 'metascore' ] . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } count mean std min 25% 50% 75% max duration_group (40.233, 117.7] 10759.0 54.153267 17.655622 1.0 41.00 55.0 67.00 100.0 (117.7, 194.4] 2506.0 63.042298 16.265137 9.0 52.00 64.0 75.00 100.0 (194.4, 271.1] 28.0 76.500000 20.532720 10.0 69.75 82.0 90.00 100.0 (271.1, 347.8] 8.0 79.375000 12.070478 56.0 72.25 84.5 88.25 90.0 (347.8, 424.5] 1.0 89.000000 NaN 89.0 89.00 89.0 89.00 89.0 (424.5, 501.2] 1.0 59.000000 NaN 59.0 59.00 59.0 59.00 59.0 (501.2, 577.9] 0.0 NaN NaN NaN NaN NaN NaN NaN (577.9, 654.6] 0.0 NaN NaN NaN NaN NaN NaN NaN (654.6, 731.3] 1.0 87.000000 NaN 87.0 87.00 87.0 87.00 87.0 (731.3, 808.0] 1.0 77.000000 NaN 77.0 77.00 77.0 77.00 77.0 The simplest version of a groupby looks like this, and you can use almost any aggregation function you wish (mean, median, sum, minimum, maximum, standard deviation, count, etc.) <data object>.groupby(<grouping values>).<aggregate>() You can even group by multiple values: for example we can look at the metascore grouped by the duration_group and country . df . groupby ([ 'duration_group' , 'country' ])[ 'metascore' ] . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } count mean std min 25% 50% 75% max duration_group country (40.233, 117.7] Afghanistan, France 0.0 NaN NaN NaN NaN NaN NaN NaN Afghanistan, France, Germany, UK 1.0 64.0 NaN 64.0 64.0 64.0 64.0 64.0 Afghanistan, Iran 0.0 NaN NaN NaN NaN NaN NaN NaN Afghanistan, Ireland, Japan, Iran, Netherlands 1.0 83.0 NaN 83.0 83.0 83.0 83.0 83.0 Albania 0.0 NaN NaN NaN NaN NaN NaN NaN ... ... ... ... ... ... ... ... ... ... (501.2, 577.9] Philippines, Netherlands, Sweden 0.0 NaN NaN NaN NaN NaN NaN NaN Russia 0.0 NaN NaN NaN NaN NaN NaN NaN (577.9, 654.6] Soviet Union 0.0 NaN NaN NaN NaN NaN NaN NaN (654.6, 731.3] France 1.0 87.0 NaN 87.0 87.0 87.0 87.0 87.0 (731.3, 808.0] Argentina 1.0 77.0 NaN 77.0 77.0 77.0 77.0 77.0 5565 rows \u00d7 8 columns Exercise 7: Group-by \u00b6 use pd.cut to perform a grouping of one or more of the dataframe columns use groupby to group by that (those) columns and then perform three different statistical summaries in three separate instances # Cell for excercise 7","title":"Pandas"},{"location":"S5_Pandas/#technology-fundamentals-course-1-session-3-functions-and-pandas-introduction","text":"Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assitants Varsha Bang, Harsha Vardhan Contact vbang@uw.edu, harshav@uw.edu Today, we will discuss functions in more depth. We've seen them previously and used them, for example the .append() function for lists, or the even more general print() function. Here, we'll dig into how you can make your own functions to encapsulate code that you will reuse over and over. Then we'll jump into the Pandas package. Packages are collections of related functions. These are the things we import . Pandas is a two dimensional data structure like a spreadsheet in Excel. In fact, we will be importing our first dataset and viewing it, with Pandas!","title":"Technology Fundamentals Course 1, Session 3: Functions and Pandas Introduction"},{"location":"S5_Pandas/#30-review-from-session-on-data-structures-and-flow-control","text":"In our last session, we discussed lists , dictionaries , and flow control . Lists are ordered collections of data that can be used to hold multiple pieces of information while preserving their order. We use [ and ] to access elements by their indices which start with 0 . All things that operate on lists like slices use the concept of an inclusive lower bound and an exclusive upper bound. So, the following gets elements from the list my_list with index values of 0 , 1 , and 2 , but not 3 ! my_list[0:3] What other way is there of writing the same statement using slicing ? Hint, think about leaving out one of the numbers in the slice! Dictionaries are named collections of data that can be used to hold multiple pieces of information as values that are addressed by keys resulting in a key to value data structure. They are accessed with [ and ] but intialized with { and } . E.g. my_dict = { 'cake' : 'Tasty!', 'toenails' : 'Gross!' } my_dict['cake'] Finally, we talked about flow control and using the concept of conditional execution to decide which code statements were executed. Remember this figure? Flow control figure What are the if statments? Where do for loops fit in?","title":"3.0 Review from Session on Data Structures and Flow Control"},{"location":"S5_Pandas/#31-functions","text":"For loops let you repeat some code for every item in a list. Functions are similar in that they run the same lines of code and, frequently, for new values of some variable (we call these parameters ). They are different in that functions are not limited to looping over items. Functions are a critical part of writing easy to read, reusable code. Create a function like: def function_name (parameters): \"\"\" optional docstring \"\"\" function expressions return [variable] Here is a simple example. It prints a string that was passed in and returns nothing. def print_string(string): \"\"\"This prints out a string passed as the parameter.\"\"\" print(string) return def print_string ( string ): \"\"\"This prints out a string passed as the parameter\"\"\" print ( string ) return To call the function, use: print_string(\"GIX is awesome!\") Note: The function has to be defined before you can call it! print_string ( \"GIX is awesome!\" ) GIX is awesome!","title":"3.1 Functions"},{"location":"S5_Pandas/#311-reserved-words-def-return-and-yield","text":"Notice the highlighted words in our function definition: def and return these are reserved words in python used to define functions. Every function definition requires these reserved words. yield is another reserved word that is similar to return but operates slightly differently. It is beyond the scope of what we are covering in this session. This tutorial from realpython has good information on the topic. # what is return doing in this function? def my_square ( a ): return a ** 2 return is going to output whatever value(s) follow after the keyword return when we call upon our function a = 2 my_square ( a ) 4 I'm going to return two values... def my_square ( a ): return a ** 2 , a and we see how the output updates accordingly my_square ( a ) (4, 2) We can capture these values on the output with... square , new_a = my_square ( a ) print ( square , new_a ) 4 2","title":"3.1.1 Reserved words: def, return, and yield"},{"location":"S5_Pandas/#312-global-vs-local-variables-and-function-parameters","text":"In a function, new variables that you create are not saved when the function returns - these are local variables. Variables defined outside of the function can be accessed but not changed - these are global variables. let's define the following function def my_little_func ( a ): b = 10 return a * b my_little_func ( 2 ) 20 if I run the following... # b Let's play with this a little further... ...now let's define b outside the function and call our function with a=5 # what happens here? b = 100 my_little_func ( 5 ) 50 we see that b is still 100, instead of 10 as its defined within the function. This is because b inside of my_little_func is a local variable. it doesn't matter how I define b outside the function because within the function it is set locally. ... Let's do this A LITTLE MORE def my_new_func ( a ): print ( b ) return a * b now if I call on my new function, because b is not defined locally within the function, it takes on the global value. This is typically not happy happy fun fun behavior for us, we want to be explicit about how we define and use our variables (but there are some times when this is appropriate to do) b = 1e4 # side note, what did I do here???? my_new_func ( a ) 10000.0 20000.0","title":"3.1.2 Global vs local variables and function parameters"},{"location":"S5_Pandas/#3111-function-parameters","text":"Parameters (or arguments) in Python are all passed by reference. This means that if you modify the parameters in the function, they are modified outside of the function. (Enrichment: Exceptions, see below) See the following example: def change_list(my_list): \"\"\"This changes a passed list into this function\"\"\" my_list.append('four'); print('list inside the function: ', my_list) return my_list = [1, 2, 3]; print('list before the function: ', my_list) change_list(my_list); print('list after the function: ', my_list) def change_list ( my_list ): \"\"\"This changes a passed list into this function\"\"\" my_list . append ( 'four' ); print ( 'list inside the function: ' , my_list ) return my_list = [ 1 , 2 , 3 ]; print ( 'list before the function: ' , my_list ) change_list ( my_list ); print ( 'list after the function: ' , my_list ) list before the function: [1, 2, 3] list inside the function: [1, 2, 3, 'four'] list after the function: [1, 2, 3, 'four']","title":"3.1.1.1 Function Parameters"},{"location":"S5_Pandas/#3112-enrichment-global-local-and-immutables","text":"Let's go back to our former example... immutables: integers, float, str, tuples b = \"a string\" b = 10 b = 10.2 b = ( 10 , 2 ) b = [ 10 , 2 ] a = 2 def my_little_func ( a , b ): if type ( b ) == str : b += \"20\" elif ( type ( b ) == int ) or ( type ( b ) == float ): b += 10 elif ( type ( b ) == tuple ): print ( \"AYYY no tuple changes, Dude\" ) pass elif ( type ( b ) == list ): b . append ( 'whoaaaa' ) print ( b ) return print ( b ) my_little_func ( a , b ) print ( b ) [10, 2] [10, 2, 'whoaaaa'] [10, 2, 'whoaaaa'] There is a way to change a global variable within a function with the global keyword. Generally, the use of global variables is not encouraged, instead use parameters. We won't cover the global keyword here but you can explore further on your own if you are interested. b = 10 a = 2 def my_little_func ( a ): global b b += 20 print ( b ) return print ( b ) my_little_func ( a ) print ( b ) 10 30 30","title":"3.1.1.2 Enrichment: Global, local, and immutables"},{"location":"S5_Pandas/#exercise-1-my-first-function","text":"Write a function that takes one parameter and returns any data structure If you are going to return multiple objects, what data structure that we talked about can be used? Give and example below. # Cell for excerise 1","title":"Exercise 1: My first function"},{"location":"S5_Pandas/#313-parameter-types","text":"Function calling: positional func(10, 20) keyword func(a=10, b=20) or func(b=20, a=10) Function writing: * default * def func(a=10, b=20) def print_name(first, last='Beckner'): print(f'Your name is {first} {last}') return def print_name ( first , last = 'Beckner' ): print ( \"Your name is {} {} \" . format ( first , last )) return print_name ( last = 'Beckner' , first = 'Wesley' ) Your name is Wesley Beckner Play around with the above function. print_name ( 'Wesley' , last = 'the Technology Fundamentals Instructor' ) Your name is Wesley the Technology Fundamentals Instructor Functions can contain any code that you put anywhere else including: * if ... elif ... else * for ... while * other function calls def print_name_age(first, last, age): print_name(first, last) print('Your age is %d' % (age)) if age > 25 and age < 40: print('You are a millenial!') return def print_name_age ( first , last , age ): print_name ( first , last ) print ( 'Your age is %d ' % ( age )) if age > 25 and age < 40 : print ( 'You are a millenial!' ) return print_name_age(age=29, last='Beckner', first='Wesley') print_name_age ( age = 29 , last = 'Beckner' , first = 'Wesley' ) Your name is Wesley Beckner Your age is 29 You are a millenial!","title":"3.1.3 Parameter types"},{"location":"S5_Pandas/#32-the-scientific-python-stack","text":"In addition to Python's built-in modules like the math module we explored above, there are also many often-used third-party modules that are core tools for doing data science with Python. Some of the most important ones are:","title":"3.2 The scientific python stack"},{"location":"S5_Pandas/#numpy-numerical-python","text":"Numpy is short for \"Numerical Python\", and contains tools for efficient manipulation of arrays of data. If you have used other computational tools like IDL or MatLab, Numpy should feel very familiar.","title":"numpy: Numerical Python"},{"location":"S5_Pandas/#scipy-scientific-python","text":"Scipy is short for \"Scientific Python\", and contains a wide range of functionality for accomplishing common scientific tasks, such as optimization/minimization, numerical integration, interpolation, and much more. We will not look closely at Scipy today, but we will use its functionality later in the course.","title":"scipy: Scientific Python"},{"location":"S5_Pandas/#pandas-labeled-data-manipulation-in-python","text":"Pandas is short for \"Panel Data\", and contains tools for doing more advanced manipulation of labeled data in Python, in particular with a columnar data structure called a Data Frame . If you've used the R statistical language (and in particular the so-called \"Hadley Stack\"), much of the functionality in Pandas should feel very familiar.","title":"pandas: Labeled Data Manipulation in Python"},{"location":"S5_Pandas/#matplotlib-visualization-in-python","text":"Matplotlib started out as a Matlab plotting clone in Python, and has grown from there in the 15 years since its creation. It is the most popular data visualization tool currently in the Python data world (though other recent packages are starting to encroach on its monopoly).","title":"matplotlib: Visualization in Python"},{"location":"S5_Pandas/#scikit-learn-machine-learning-in-python","text":"Scikit-learn is a machine learning library. It features various classification, regression, and clustering algorithms, including support vector machines, random forests, gradient boosting, k-means, and DBSCAN. The library is designed to interoperate with the Python numerical and scientific libraries NumPy and SciPy.","title":"scikit-learn: Machine Learning in Python"},{"location":"S5_Pandas/#33-pandas","text":"","title":"3.3 Pandas"},{"location":"S5_Pandas/#331-pandas-and-scikit-learn-load_datasets","text":"We begin by loading the Panda's package. Packages are collections of functions that share a common utility. We've seen import before. Let's use it to import Pandas and all the richness that pandas has. We'll also use a very useful feature of the scikit-learn toolkit, the load_datasets module. We will do some very rudimentary tasks with this dataset, just to demonstrate the utility of load_datasets , then we will switch over to a more relevant dataset for our purposes. import pandas from sklearn.datasets import load_wine import pandas from sklearn.datasets import load_wine We import a function load_wine that loads a simple data set we can play with called the Wine recognition dataset from the 1980s. You can read more about that dataset here dataset = load_wine() print(dataset.DESCR) dataset = load_wine () print ( dataset . DESCR ) .. _wine_dataset: Wine recognition dataset ------------------------ **Data Set Characteristics:** :Number of Instances: 178 (50 in each of three classes) :Number of Attributes: 13 numeric, predictive attributes and the class :Attribute Information: - Alcohol - Malic acid - Ash - Alcalinity of ash - Magnesium - Total phenols - Flavanoids - Nonflavanoid phenols - Proanthocyanins - Color intensity - Hue - OD280/OD315 of diluted wines - Proline - class: - class_0 - class_1 - class_2 :Summary Statistics: ============================= ==== ===== ======= ===== Min Max Mean SD ============================= ==== ===== ======= ===== Alcohol: 11.0 14.8 13.0 0.8 Malic Acid: 0.74 5.80 2.34 1.12 Ash: 1.36 3.23 2.36 0.27 Alcalinity of Ash: 10.6 30.0 19.5 3.3 Magnesium: 70.0 162.0 99.7 14.3 Total Phenols: 0.98 3.88 2.29 0.63 Flavanoids: 0.34 5.08 2.03 1.00 Nonflavanoid Phenols: 0.13 0.66 0.36 0.12 Proanthocyanins: 0.41 3.58 1.59 0.57 Colour Intensity: 1.3 13.0 5.1 2.3 Hue: 0.48 1.71 0.96 0.23 OD280/OD315 of diluted wines: 1.27 4.00 2.61 0.71 Proline: 278 1680 746 315 ============================= ==== ===== ======= ===== :Missing Attribute Values: None :Class Distribution: class_0 (59), class_1 (71), class_2 (48) :Creator: R.A. Fisher :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov) :Date: July, 1988 This is a copy of UCI ML Wine recognition datasets. https://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data The data is the results of a chemical analysis of wines grown in the same region in Italy by three different cultivators. There are thirteen different measurements taken for different constituents found in the three types of wine. Original Owners: Forina, M. et al, PARVUS - An Extendible Package for Data Exploration, Classification and Correlation. Institute of Pharmaceutical and Food Analysis and Technologies, Via Brigata Salerno, 16147 Genoa, Italy. Citation: Lichman, M. (2013). UCI Machine Learning Repository [https://archive.ics.uci.edu/ml]. Irvine, CA: University of California, School of Information and Computer Science. .. topic:: References (1) S. Aeberhard, D. Coomans and O. de Vel, Comparison of Classifiers in High Dimensional Settings, Tech. Rep. no. 92-02, (1992), Dept. of Computer Science and Dept. of Mathematics and Statistics, James Cook University of North Queensland. (Also submitted to Technometrics). The data was used with many others for comparing various classifiers. The classes are separable, though only RDA has achieved 100% correct classification. (RDA : 100%, QDA 99.4%, LDA 98.9%, 1NN 96.1% (z-transformed data)) (All results using the leave-one-out technique) (2) S. Aeberhard, D. Coomans and O. de Vel, \"THE CLASSIFICATION PERFORMANCE OF RDA\" Tech. Rep. no. 92-01, (1992), Dept. of Computer Science and Dept. of Mathematics and Statistics, James Cook University of North Queensland. (Also submitted to Journal of Chemometrics). df = pandas.DataFrame() df = pandas . DataFrame ()","title":"3.3.1 Pandas and Scikit-Learn load_datasets"},{"location":"S5_Pandas/#3311-import-as-pattern","text":"Because we'll use it so much, we often import under a shortened name using the import ... as ... pattern: import pandas as pd import pandas as pd","title":"3.3.1.1 import ... as ... pattern"},{"location":"S5_Pandas/#332-creating-pandas-dataframes","text":"Let's create an empty data frame and put the result into a variable called df . This is a popular choice for a data frame variable name. df = pd.DataFrame() df = pd . DataFrame () Let's open the Wine dataset as a pandas data frame. Notice we change the value of the df variable to point to a new data frame. df = pd.DataFrame(dataset.data, columns=dataset.feature_names) df = pd . DataFrame ( dataset . data , columns = dataset . feature_names )","title":"3.3.2 Creating pandas dataframes"},{"location":"S5_Pandas/#3321-from-excel-and-csv","text":"Please follow this link This is what we call a csv or comma separated value file. We have a method reading these directly into pandas: df = pd . read_csv ( 'https://raw.githubusercontent.com/wesleybeckner/technology_explorers/main/assets/imdb_movies.csv' ) /usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (3) have mixed types.Specify dtype option on import or set low_memory=False. interactivity=interactivity, compiler=compiler, result=result) We can do this in a similar way with excel files. pd . read_excel ( 'https://raw.githubusercontent.com/wesleybeckner/ds_for_engineers/main/data/truffle_margin/margin_data.xlsx' ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Base Cake Truffle Type Primary Flavor Secondary Flavor Color Group Width Height Net Sales Quantity in KG EBITDA Product 0 Tiramisu Chocolate Outer Doughnut Egg Nog Amethyst 340 50 8244.500 21833.99 Tiramisu-Chocolate Outer-Doughnut-Egg Nog-Amet... 1 Tiramisu Chocolate Outer Doughnut Egg Nog Amethyst 1340 25 1857.000 21589.48 Tiramisu-Chocolate Outer-Doughnut-Egg Nog-Amet... 2 Tiramisu Chocolate Outer Chocolate Pear Amethyst 310 140 17365.000 19050.69 Tiramisu-Chocolate Outer-Chocolate-Pear-Amethy... 3 Tiramisu Chocolate Outer Doughnut Egg Nog Amethyst 449 50 14309.000 18573.01 Tiramisu-Chocolate Outer-Doughnut-Egg Nog-Amet... 4 Tiramisu Chocolate Outer Doughnut Rock and Rye Amethyst 640 80 25584.500 14790.90 Tiramisu-Chocolate Outer-Doughnut-Rock and Rye... ... ... ... ... ... ... ... ... ... ... ... 2501 Butter Chocolate Outer Lemon Bar Wild Cherry Cream Amethyst 930 50 150352.000 -97839.16 Butter-Chocolate Outer-Lemon Bar-Wild Cherry C... 2502 Butter Chocolate Outer Cream Soda Peppermint Amethyst 900 50 120451.400 -98661.97 Butter-Chocolate Outer-Cream Soda-Peppermint-A... 2503 Butter Jelly Filled Orange Cucumber Burgundy 905 50 143428.580 -122236.96 Butter-Jelly Filled-Orange-Cucumber-Burgundy-9... 2504 Butter Chocolate Outer Horchata Dill Pickle Amethyst 597 45 271495.572 -128504.49 Butter-Chocolate Outer-Horchata-Dill Pickle-Am... 2505 Butter Candy Outer Ginger Lime Vanilla Amethyst 580 50 170567.065 -137897.08 Butter-Candy Outer-Ginger Lime-Vanilla-Amethys... 2506 rows \u00d7 10 columns","title":"3.3.2.1 From excel and csv"},{"location":"S5_Pandas/#3322-from-lists","text":"my_list = [[ 1 , 2 , 3 ], [ 3 , 4 , 5 ], [ 5 , 6 , 7 ], [ 7 , 8 , 9 ]] pd . DataFrame ( my_list ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 0 1 2 3 1 3 4 5 2 5 6 7 3 7 8 9 pd . DataFrame ([[ 1 , 2 , 3 ], [ 3 , 4 , 5 ], [ 5 , 6 , 7 ], [ 7 , 8 , 9 ]], index = [ 'a' , 'b' , 'c' , 'd' ], columns = [ 'x' , 'y' , 'z' ]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } x y z a 1 2 3 b 3 4 5 c 5 6 7 d 7 8 9","title":"3.3.2.2 from lists"},{"location":"S5_Pandas/#3323-from-dictionaries","text":"from_dict = pd . DataFrame ({ 'A' : [ 'apple' , 'airplane' ], 'B' : [ 'bannana' , 'bubbles' ]}) from_dict .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 0 apple bannana 1 airplane bubbles from_dict . to_dict () {'A': {0: 'apple', 1: 'airplane'}, 'B': {0: 'bannana', 1: 'bubbles'}}","title":"3.3.2.3 from dictionaries"},{"location":"S5_Pandas/#exercise-2-create-a-dataframe","text":"Create a dictionary with the following keys: movies, songs, books . In each key list your top 5 favorites in the cooresponding category. Then use pd.DataFrame to turn this into a dictionary. # Cell for Ex 2","title":"Exercise 2: Create a DataFrame"},{"location":"S5_Pandas/#3324-on-pandasseries","text":"pandas Series objects will percolate in our experience here and there, however they are not so important as for us to wish to spend dedicated time on them. For now, know that they are a lower-level data collection in the pandas framework. You can think of them as an individual column or row in the pandas dataframe. For more practice with these you can refer to this documentation","title":"3.3.2.4 on pandas.Series"},{"location":"S5_Pandas/#333-viewing-pandas-dataframes","text":"The head() and tail() methods show us the first and last rows of the data. df.head() df.tail() df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics 0 tt0000009 Miss Jerry Miss Jerry 1894 1894-10-09 Romance 45 USA None Alexander Black Alexander Black Alexander Black Photoplays Blanche Bayliss, William Courtenay, Chauncey D... The adventures of a female reporter in the 1890s. 5.9 154 NaN NaN NaN NaN 1.0 2.0 1 tt0000574 The Story of the Kelly Gang The Story of the Kelly Gang 1906 1906-12-26 Biography, Crime, Drama 70 Australia None Charles Tait Charles Tait J. and N. Tait Elizabeth Tait, John Tait, Norman Campbell, Be... True story of notorious Australian outlaw Ned ... 6.1 589 $ 2250 NaN NaN NaN 7.0 7.0 2 tt0001892 Den sorte dr\u00f8m Den sorte dr\u00f8m 1911 1911-08-19 Drama 53 Germany, Denmark NaN Urban Gad Urban Gad, Gebhard Sch\u00e4tzler-Perasini Fotorama Asta Nielsen, Valdemar Psilander, Gunnar Helse... Two men of high rank are both wooing the beaut... 5.8 188 NaN NaN NaN NaN 5.0 2.0 3 tt0002101 Cleopatra Cleopatra 1912 1912-11-13 Drama, History 100 USA English Charles L. Gaskill Victorien Sardou Helen Gardner Picture Players Helen Gardner, Pearl Sindelar, Miss Fielding, ... The fabled queen of Egypt's affair with Roman ... 5.2 446 $ 45000 NaN NaN NaN 25.0 3.0 4 tt0002130 L'Inferno L'Inferno 1911 1911-03-06 Adventure, Drama, Fantasy 68 Italy Italian Francesco Bertolini, Adolfo Padovan Dante Alighieri Milano Film Salvatore Papa, Arturo Pirovano, Giuseppe de L... Loosely adapted from Dante's Divine Comedy and... 7.0 2237 NaN NaN NaN NaN 31.0 14.0 df . tail () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics 85850 tt9908390 Le lion Le lion 2020 2020-01-29 Comedy 95 France, Belgium French Ludovic Colbeau-Justin Alexandre Coquelle, Matthieu Le Naour Monkey Pack Films Dany Boon, Philippe Katerine, Anne Serra, Samu... A psychiatric hospital patient pretends to be ... 5.3 398 NaN NaN $ 3507171 NaN NaN 4.0 85851 tt9911196 De Beentjes van Sint-Hildegard De Beentjes van Sint-Hildegard 2020 2020-02-13 Comedy, Drama 103 Netherlands German, Dutch Johan Nijenhuis Radek Bajgar, Herman Finkers Johan Nijenhuis & Co Herman Finkers, Johanna ter Steege, Leonie ter... A middle-aged veterinary surgeon believes his ... 7.7 724 NaN NaN $ 7299062 NaN 6.0 4.0 85852 tt9911774 Padmavyuhathile Abhimanyu Padmavyuhathile Abhimanyu 2019 2019-03-08 Drama 130 India Malayalam Vineesh Aaradya Vineesh Aaradya, Vineesh Aaradya RMCC Productions Anoop Chandran, Indrans, Sona Nair, Simon Brit... NaN 7.9 265 NaN NaN NaN NaN NaN NaN 85853 tt9914286 Sokagin \u00c7ocuklari Sokagin \u00c7ocuklari 2019 2019-03-15 Drama, Family 98 Turkey Turkish Ahmet Faik Akinci Ahmet Faik Akinci, Kasim U\u00e7kan Gizem Ajans Ahmet Faik Akinci, Belma Mamati, Metin Ke\u00e7eci,... NaN 6.4 194 NaN NaN $ 2833 NaN NaN NaN 85854 tt9914942 La vida sense la Sara Amat La vida sense la Sara Amat 2019 2020-02-05 Drama 74 Spain Catalan Laura Jou Coral Cruz, Pep Puig La Xarxa de Comunicaci\u00f3 Local Maria Morera Colomer, Biel Rossell Pelfort, Is... Pep, a 13-year-old boy, is in love with a girl... 6.7 102 NaN NaN $ 59794 NaN NaN 2.0 The shape attribute shows us the number of elements: df.shape Note it doesn't have the () because it isn't a function - it is an attribute or variable attached to the df object. df . shape (85855, 22) The columns attribute gives us the column names df.columns df . columns Index(['imdb_title_id', 'title', 'original_title', 'year', 'date_published', 'genre', 'duration', 'country', 'language', 'director', 'writer', 'production_company', 'actors', 'description', 'avg_vote', 'votes', 'budget', 'usa_gross_income', 'worlwide_gross_income', 'metascore', 'reviews_from_users', 'reviews_from_critics'], dtype='object') The index attribute gives us the index names df.index df . index RangeIndex(start=0, stop=85855, step=1) The dtypes attribute gives the data types of each column, remember the data type floating point *?: df.dtypes df . dtypes imdb_title_id object title object original_title object year object date_published object genre object duration int64 country object language object director object writer object production_company object actors object description object avg_vote float64 votes int64 budget object usa_gross_income object worlwide_gross_income object metascore float64 reviews_from_users float64 reviews_from_critics float64 dtype: object df . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } duration avg_vote votes metascore reviews_from_users reviews_from_critics count 85855.000000 85855.000000 8.585500e+04 13305.000000 78258.000000 74058.000000 mean 100.351418 5.898656 9.493490e+03 55.896881 46.040826 27.479989 std 22.553848 1.234987 5.357436e+04 17.784874 178.511411 58.339158 min 41.000000 1.000000 9.900000e+01 1.000000 1.000000 1.000000 25% 88.000000 5.200000 2.050000e+02 43.000000 4.000000 3.000000 50% 96.000000 6.100000 4.840000e+02 57.000000 9.000000 8.000000 75% 108.000000 6.800000 1.766500e+03 69.000000 27.000000 23.000000 max 808.000000 9.900000 2.278845e+06 100.000000 10472.000000 999.000000","title":"3.3.3 Viewing pandas dataframes"},{"location":"S5_Pandas/#exercise-3-viewing-dataframes","text":"Using the dataframe you made in exercise 1, return the following attributes: the datatype stored in each column, the column names, the indices, and the shape. # Cell for Ex 3","title":"Exercise 3: Viewing DataFrames"},{"location":"S5_Pandas/#334-manipulating-data-with-pandas","text":"Here we'll cover some key features of manipulating data with pandas","title":"3.3.4 Manipulating data with pandas"},{"location":"S5_Pandas/#3341-selection","text":"Access columns by name using square-bracket indexing: df['duration'] df [ 'duration' ] 0 45 1 70 2 53 3 100 4 68 ... 85850 95 85851 103 85852 130 85853 98 85854 74 Name: duration, Length: 85855, dtype: int64 Mathematical operations on columns happen element-wise : df['duration'] / 60 df [ 'duration' ] / 60 0 0.750000 1 1.166667 2 0.883333 3 1.666667 4 1.133333 ... 85850 1.583333 85851 1.716667 85852 2.166667 85853 1.633333 85854 1.233333 Name: duration, Length: 85855, dtype: float64 Columns can be created (or overwritten) with the assignment operator. Let's create a column with duration in hours. df['duration (hours)'] = df['duration'] / 60 df [ 'duration (hours)' ] = df [ 'duration' ] / 60 Let's use the .head() function to see our new data! df.head() df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) 0 tt0000009 Miss Jerry Miss Jerry 1894 1894-10-09 Romance 45 USA None Alexander Black Alexander Black Alexander Black Photoplays Blanche Bayliss, William Courtenay, Chauncey D... The adventures of a female reporter in the 1890s. 5.9 154 NaN NaN NaN NaN 1.0 2.0 0.750000 1 tt0000574 The Story of the Kelly Gang The Story of the Kelly Gang 1906 1906-12-26 Biography, Crime, Drama 70 Australia None Charles Tait Charles Tait J. and N. Tait Elizabeth Tait, John Tait, Norman Campbell, Be... True story of notorious Australian outlaw Ned ... 6.1 589 $ 2250 NaN NaN NaN 7.0 7.0 1.166667 2 tt0001892 Den sorte dr\u00f8m Den sorte dr\u00f8m 1911 1911-08-19 Drama 53 Germany, Denmark NaN Urban Gad Urban Gad, Gebhard Sch\u00e4tzler-Perasini Fotorama Asta Nielsen, Valdemar Psilander, Gunnar Helse... Two men of high rank are both wooing the beaut... 5.8 188 NaN NaN NaN NaN 5.0 2.0 0.883333 3 tt0002101 Cleopatra Cleopatra 1912 1912-11-13 Drama, History 100 USA English Charles L. Gaskill Victorien Sardou Helen Gardner Picture Players Helen Gardner, Pearl Sindelar, Miss Fielding, ... The fabled queen of Egypt's affair with Roman ... 5.2 446 $ 45000 NaN NaN NaN 25.0 3.0 1.666667 4 tt0002130 L'Inferno L'Inferno 1911 1911-03-06 Adventure, Drama, Fantasy 68 Italy Italian Francesco Bertolini, Adolfo Padovan Dante Alighieri Milano Film Salvatore Papa, Arturo Pirovano, Giuseppe de L... Loosely adapted from Dante's Divine Comedy and... 7.0 2237 NaN NaN NaN NaN 31.0 14.0 1.133333","title":"3.3.4.1 Selection"},{"location":"S5_Pandas/#33411-loc-and-iloc","text":"Pandas provides a powerful way to work with both rows and columns together, optionally using their label indices or numeric indices. .loc : Purely label-location based indexer for selection by label (but may also be used with a boolean array). Important: If you use slicing in loc, it will return the end index as well .iloc: Purely integer-location based indexing for selection by position (but may also be used with a boolean array). df . columns [ 1 ] 'title' df . loc [: 5 : 2 , [ df . columns [ 1 ]]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } title 0 Miss Jerry 2 Den sorte dr\u00f8m 4 L'Inferno df . iloc [ - 5 :, [ 3 , 5 ]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } year genre 85850 2020 Comedy 85851 2020 Comedy, Drama 85852 2019 Drama 85853 2019 Drama, Family 85854 2019 Drama","title":"3.3.4.1.1 loc and iloc"},{"location":"S5_Pandas/#33412-column-vs-index-access","text":"df [ 'duration' ][ 0 : 10 ] 0 45 1 70 2 53 3 100 4 68 5 60 6 85 7 120 8 120 9 55 Name: duration, dtype: int64 # df[0]['duration'] # will return an error my_list = [[ 10 , 20 , 30 ]] * 4 mydf = pd . DataFrame ( my_list , index = [ 'a' , 'b' , 'c' , 'd' ], columns = [ 'alpha' , 'beta' , 'gamma' ]) mydf .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } alpha beta gamma a 10 20 30 b 10 20 30 c 10 20 30 d 10 20 30 mydf . loc [ 'a' , 'alpha' ] = 'mychange' # using this you will get a setting # with copy warning (depending on your pandas warning settings) # mydf['alpha']['a'] = 'newchange' You want to use loc or iloc when setting new values to pandas dataframes.","title":"3.3.4.1.2 column vs index access"},{"location":"S5_Pandas/#exercise-4-selecting","text":"select the first 10 rows of the country, genre, and year columns using loc . Repeat the same exercise using iloc # Cell for Ex 4","title":"Exercise 4: Selecting"},{"location":"S5_Pandas/#3342-filtering","text":"filtering down your selection will be BIGLY useful in your data quests","title":"3.3.4.2 Filtering"},{"location":"S5_Pandas/#33421-by-string","text":"one of the first tools we'll use to filter our dataset is the .str.contains method. Let's take an example. # remember, if we don't remember our column mames we can quickly pull them up # with: df . columns Index(['imdb_title_id', 'title', 'original_title', 'year', 'date_published', 'genre', 'duration', 'country', 'language', 'director', 'writer', 'production_company', 'actors', 'description', 'avg_vote', 'votes', 'budget', 'usa_gross_income', 'worlwide_gross_income', 'metascore', 'reviews_from_users', 'reviews_from_critics', 'duration (hours)'], dtype='object') [ df [ 'description' ] . str . contains ( 'a.i.' , na = False )] [0 False 1 True 2 True 3 False 4 True ... 85850 True 85851 False 85852 False 85853 False 85854 False Name: description, Length: 85855, dtype: bool] df . iloc [ 17920 ][ 'description' ] 'A scientist creates Proteus--an organic super computer with artificial intelligence which becomes obsessed with human beings, and in particular the creators wife.' df [ df [ 'description' ] . str . contains ( 'artificial intelligence' , na = False )] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) 17920 tt0075931 Generazione Proteus Demon Seed 1977 1977-12-31 Horror, Sci-Fi 94 USA English Donald Cammell Dean R. Koontz, Robert Jaffe Metro-Goldwyn-Mayer (MGM) Julie Christie, Fritz Weaver, Gerrit Graham, B... A scientist creates Proteus--an organic super ... 6.3 7994 NaN NaN NaN 55.0 71.0 81.0 1.566667 44484 tt0382992 Stealth - Arma suprema Stealth 2005 2005-09-02 Action, Adventure, Sci-Fi 121 USA English, Korean, Russian, Spanish Rob Cohen W.D. Richter Columbia Pictures Josh Lucas, Jessica Biel, Jamie Foxx, Sam Shep... Deeply ensconced in a top-secret military prog... 5.1 51365 $ 135000000 $ 32116746 $ 79268322 35.0 401.0 150.0 2.016667 65411 tt2209764 Transcendence Transcendence 2014 2014-04-17 Action, Drama, Sci-Fi 119 UK, China, USA English Wally Pfister Jack Paglen Alcon Entertainment Johnny Depp, Rebecca Hall, Paul Bettany, Cilli... A scientist's drive for artificial intelligenc... 6.3 213720 $ 100000000 $ 23022309 $ 103039258 42.0 554.0 373.0 1.983333 68589 tt2769184 Debug Debug 2014 2015-02-07 Horror, Sci-Fi 86 Canada English David Hewlett David Hewlett Copperheart Entertainment Tenika Davis, Jason Momoa, Adrian Holmes, Kjar... Six young computer hackers, sent to work on a ... 4.3 2244 NaN NaN NaN NaN 38.0 30.0 1.433333 71500 tt3502284 Kikaid\u00e2 Reboot Kikaid\u00e2 Reboot 2014 2014-05-24 Action 110 Japan Japanese Ten Shimoyama Sh\u00f4tar\u00f4 Ishinomori, Kento Shimoyama Asatsu-DK Jingi Irie, Kazushige Nagashima, Aimi Satsukaw... Komyoji Nobuhiko is a genius and leader in rob... 5.6 110 NaN NaN NaN NaN 2.0 2.0 1.833333 75759 tt4788944 Robot Sound Robot Sound 2016 2016-01-27 Sci-Fi 117 South Korea Korean, English Ho-jae Lee Soyoung Lee NaN Erik Brown, Soo-bin Chae, Dean Dawson, Lee Han... The plot revolves around a robotic satellite w... 6.9 191 NaN NaN $ 2843718 NaN 3.0 4.0 1.950000 75907 tt4839424 Qi che ren zong dong yuan Qi che ren zong dong yuan 2015 2015-07-03 Animation, Adventure, Family 85 China Mandarin Jianrong Zhuo NaN Xiamen Lanhuoyan Film Animation Co. Christopher Petrosian, Dawei Hu, Xinxuan Liu, ... The film revolves around a genius engineer who... 1.1 121 NaN NaN NaN NaN 2.0 NaN 1.416667 76214 tt4937114 Rogue Warrior: Robot Fighter Rogue Warrior: Robot Fighter 2016 2016-09-02 Action, Sci-Fi 101 USA English Neil Johnson Neil Johnson Empire Motion pictures Tracey Birdsall, William Kircher, Daz Crawford... In the distant future, humanity is overthrown ... 4.9 2574 $ 3800000 NaN NaN NaN 22.0 26.0 1.683333 79921 tt6197070 Blood Machines Blood Machines 2019 2020-09-01 Adventure, Music, Sci-Fi 50 France English Rapha\u00ebl Hernandez, Seth Ickerman Rapha\u00ebl Hernandez, Seth Ickerman Logical Pictures Elisa Lasowski, Anders Heinrichsen, Christian ... An artificial intelligence escapes her spacesh... 6.1 2023 NaN NaN NaN NaN 70.0 55.0 0.833333 83905 tt8196068 Twisted Pair Twisted Pair 2018 2018-10-03 Drama, Fantasy, Sci-Fi 89 USA English Neil Breen Neil Breen Neil Breen Films Neil Breen, Sara Meritt, Siohbon Chevy Ebrahim... Identical twin brothers become hybrid A.I (art... 5.9 1313 $ 3 NaN NaN NaN 69.0 4.0 1.483333 84615 tt8712750 A.M.I. A.M.I. 2019 2019-07-02 Horror, Thriller 77 Canada English Rusty Nixon Rusty Nixon, Evan Tylor 1160594 B.C. Debs Howard, Philip Granger, Bonnie Hay, Sam R... A seventeen year old girl forms a co-dependent... 3.9 1399 NaN NaN NaN NaN 91.0 13.0 1.283333 85361 tt9308170 \u00d6zg\u00fcr D\u00fcnya \u00d6zg\u00fcr D\u00fcnya 2019 2019-03-22 Action, Adventure, Family 122 Turkey Turkish Faruk Aksoy, Sevki Es Faruk Aksoy, H\u00fcseyin Aksu Ay Yapim Murat Serezli, Rabia Soyturk, G\u00fcrbey Ileri, Ha... The story of a game managed by artificial inte... 2.3 340 NaN NaN $ 50537 NaN 2.0 NaN 2.033333 or if you know the exact string you are looking for df [ df [ 'title' ] == \"Fight Club\" ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) 32487 tt0137523 Fight Club Fight Club 1999 1999-10-29 Drama 139 USA, Germany English David Fincher Chuck Palahniuk, Jim Uhls Fox 2000 Pictures Edward Norton, Brad Pitt, Meat Loaf, Zach Gren... An insomniac office worker and a devil-may-car... 8.8 1807440 $ 63000000 $ 37030102 $ 101218804 66.0 3758.0 370.0 2.316667","title":"3.3.4.2.1 By String"},{"location":"S5_Pandas/#33422-by-numerical-value","text":"df [ df [ 'votes' ] > 1000 ] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) 4 tt0002130 L'Inferno L'Inferno 1911 1911-03-06 Adventure, Drama, Fantasy 68 Italy Italian Francesco Bertolini, Adolfo Padovan Dante Alighieri Milano Film Salvatore Papa, Arturo Pirovano, Giuseppe de L... Loosely adapted from Dante's Divine Comedy and... 7.0 2237 NaN NaN NaN NaN 31.0 14.0 1.133333 11 tt0002844 Fant\u00f4mas - \u00c0 l'ombre de la guillotine Fant\u00f4mas - \u00c0 l'ombre de la guillotine 1913 1913-05-12 Crime, Drama 54 France French Louis Feuillade Marcel Allain, Louis Feuillade Soci\u00e9t\u00e9 des Etablissements L. Gaumont Ren\u00e9 Navarre, Edmund Breon, Georges Melchior, ... Inspector Juve is tasked to investigate and ca... 7.0 1944 NaN NaN NaN NaN 9.0 28.0 0.900000 13 tt0003037 Juve contre Fant\u00f4mas Juve contre Fant\u00f4mas 1913 1913-09-08 Crime, Drama 61 France French Louis Feuillade Marcel Allain, Louis Feuillade Soci\u00e9t\u00e9 des Etablissements L. Gaumont Ren\u00e9 Navarre, Edmund Breon, Georges Melchior, ... In Part Two of Louis Feuillade's 5 1/2-hour ep... 7.0 1349 NaN NaN NaN NaN 8.0 23.0 1.016667 16 tt0003165 Le mort qui tue Le mort qui tue 1913 1913-11-06 Crime, Drama, Mystery 90 France French Louis Feuillade Marcel Allain, Louis Feuillade Soci\u00e9t\u00e9 des Etablissements L. Gaumont Ren\u00e9 Navarre, Edmund Breon, Georges Melchior, ... After a body disappears from inside the prison... 7.0 1050 NaN NaN NaN NaN 6.0 18.0 1.500000 18 tt0003419 Lo studente di Praga Der Student von Prag 1913 1913-08-22 Drama, Fantasy, Horror 85 Germany German, English Paul Wegener, Stellan Rye Hanns Heinz Ewers, Hanns Heinz Ewers Deutsche Bioscop GmbH Paul Wegener, Grete Berger, Lyda Salmonova, Jo... Balduin, a student of Prague, leaves his royst... 6.5 1768 NaN NaN NaN NaN 20.0 26.0 1.416667 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 85811 tt9860728 Falling Inn Love - Ristrutturazione con amore Falling Inn Love 2019 2019-08-29 Comedy, Romance 98 USA English Roger Kumble Elizabeth Hackett, Hilary Galanoy NaN Christina Milian, Adam Demos, Jeffrey Bowyer-C... When city girl Gabriela spontaneously enters a... 5.6 14108 NaN NaN NaN NaN 265.0 32.0 1.633333 85817 tt9866700 Paranormal Investigation Paranormal Investigation 2018 2018-12-01 Horror, Thriller 92 France French Franck Phelizon NaN Baril Pictures Jose Atuncar, Claudine Bertin, Cedric Henquez,... When a young man becomes possessed after playi... 3.7 1299 NaN NaN NaN NaN 334.0 11.0 1.533333 85837 tt9894470 VFW VFW 2019 2020-02-14 Action, Crime, Horror 92 USA English Joe Begos Max Brallier, Matthew McArdle Fangoria Stephen Lang, William Sadler, Fred Williamson,... A group of old war veterans put their lives on... 6.1 4178 NaN NaN $ 23101 72.0 83.0 94.0 1.533333 85839 tt9898858 Coffee & Kareem Coffee & Kareem 2020 2020-04-03 Action, Comedy 88 USA English Michael Dowse Shane Mack Pacific Electric Picture Company Ed Helms, Taraji P. Henson, Terrence Little Ga... Twelve-year-old Kareem Manning hires a crimina... 5.1 10627 NaN NaN NaN 35.0 388.0 64.0 1.466667 85843 tt9900782 Kaithi Kaithi 2019 2019-10-25 Action, Thriller 145 India Tamil Lokesh Kanagaraj Lokesh Kanagaraj, Pon Parthiban Dream Warrior Pictures Karthi, Narain, Ramana, George Maryan, Harish ... A recently released prisoner becomes involved ... 8.5 8400 INR 240000000 NaN $ 524061 NaN 188.0 8.0 2.416667 29362 rows \u00d7 23 columns","title":"3.3.4.2.2 By numerical value"},{"location":"S5_Pandas/#exercise-5-filtering","text":"Filter df for all the movies that are longer than 2 hours Filter df for all movies where 'day' is in the title # Cell for Ex 5","title":"Exercise 5: Filtering"},{"location":"S5_Pandas/#3343-select-filter-operation","text":"The real power of Pandas comes in its tools for grouping and aggregating data. Here we'll look at value counts and the basics of group-by operations. # a basic select, filter, operate procedure would look like: df [ df [ 'country' ] == 'USA' ][ 'duration' ] . describe () count 28511.000000 mean 93.050437 std 18.576873 min 42.000000 25% 84.000000 50% 91.000000 75% 100.000000 max 398.000000 Name: duration, dtype: float64 we can invert the selection with ~ df [ ~ ( df [ 'country' ] == 'USA' )][ 'duration' ] . describe () count 57344.000000 mean 103.981410 std 23.459158 min 41.000000 25% 90.000000 50% 99.000000 75% 112.000000 max 808.000000 Name: duration, dtype: float64 In preparation for grouping the data, let's bin the instances by their duration (we could have chosen any numerical column). For that, we'll use pd.cut . The documentation for pd.cut can be found here . It is used to bin values into discrete intervals. This is like a histogram where for each bin along the range of data values, you count the number of occurrences of that bin. in our example, we'll use 10 bins and let Pandas decide how to evenly divide the range into the bins. Let's see it in action. df['duration_group'] = pd.cut(df['duration'], 10) df.head() df.dtypes df [ 'duration_group' ] = pd . cut ( df [ 'duration' ], 10 ) df . head () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) duration_group 0 tt0000009 Miss Jerry Miss Jerry 1894 1894-10-09 Romance 45 USA None Alexander Black Alexander Black Alexander Black Photoplays Blanche Bayliss, William Courtenay, Chauncey D... The adventures of a female reporter in the 1890s. 5.9 154 NaN NaN NaN NaN 1.0 2.0 0.750000 (40.233, 117.7] 1 tt0000574 The Story of the Kelly Gang The Story of the Kelly Gang 1906 1906-12-26 Biography, Crime, Drama 70 Australia None Charles Tait Charles Tait J. and N. Tait Elizabeth Tait, John Tait, Norman Campbell, Be... True story of notorious Australian outlaw Ned ... 6.1 589 $ 2250 NaN NaN NaN 7.0 7.0 1.166667 (40.233, 117.7] 2 tt0001892 Den sorte dr\u00f8m Den sorte dr\u00f8m 1911 1911-08-19 Drama 53 Germany, Denmark NaN Urban Gad Urban Gad, Gebhard Sch\u00e4tzler-Perasini Fotorama Asta Nielsen, Valdemar Psilander, Gunnar Helse... Two men of high rank are both wooing the beaut... 5.8 188 NaN NaN NaN NaN 5.0 2.0 0.883333 (40.233, 117.7] 3 tt0002101 Cleopatra Cleopatra 1912 1912-11-13 Drama, History 100 USA English Charles L. Gaskill Victorien Sardou Helen Gardner Picture Players Helen Gardner, Pearl Sindelar, Miss Fielding, ... The fabled queen of Egypt's affair with Roman ... 5.2 446 $ 45000 NaN NaN NaN 25.0 3.0 1.666667 (40.233, 117.7] 4 tt0002130 L'Inferno L'Inferno 1911 1911-03-06 Adventure, Drama, Fantasy 68 Italy Italian Francesco Bertolini, Adolfo Padovan Dante Alighieri Milano Film Salvatore Papa, Arturo Pirovano, Giuseppe de L... Loosely adapted from Dante's Divine Comedy and... 7.0 2237 NaN NaN NaN NaN 31.0 14.0 1.133333 (40.233, 117.7] df . dtypes imdb_title_id object title object original_title object year object date_published object genre object duration int64 country object language object director object writer object production_company object actors object description object avg_vote float64 votes int64 budget object usa_gross_income object worlwide_gross_income object metascore float64 reviews_from_users float64 reviews_from_critics float64 duration (hours) float64 duration_group category dtype: object Pandas includes an array of useful functionality for manipulating and analyzing tabular data. We'll take a look at two of these here. The pandas.value_counts returns statistics on the unique values within each column. We can use it, for example, to break down the movies by their duration group that we just created: pd.value_counts(df['duration_group'], sort=False) pd . value_counts ( df [ 'duration_group' ], sort = False ) (40.233, 117.7] 72368 (117.7, 194.4] 13197 (194.4, 271.1] 228 (271.1, 347.8] 40 (347.8, 424.5] 11 (424.5, 501.2] 4 (501.2, 577.9] 4 (577.9, 654.6] 1 (654.6, 731.3] 1 (731.3, 808.0] 1 Name: duration_group, dtype: int64 What happens if we try this on a continuous valued variable? pd.value_counts(df['duration']) pd . value_counts ( df [ 'duration' ]) 90 5162 95 3194 100 3106 92 2418 93 2414 ... 279 1 301 1 345 1 729 1 319 1 Name: duration, Length: 266, dtype: int64","title":"3.3.4.3 Select, filter, operation"},{"location":"S5_Pandas/#exercise-6-value_counts-unique-nunique","text":"We can do a little data exploration with this by seeing how common different values are. Play around with these pandas methods: value_counts() unique() nunique() Also be sure to use: selection filteration (and you are already using operation with the above mentioned pandas methods, value_counts, unique, nunique (: ) Do so with 3 different columns in the dataframe # Cell for Exercise 6","title":"Exercise 6: value_counts, unique, nunique"},{"location":"S5_Pandas/#3344-group-by-operation","text":"One of the killer features of the Pandas dataframe is the ability to do group-by operations. You can visualize the group-by like this (image borrowed from the Python Data Science Handbook )","title":"3.3.4.4 Group-by Operation"},{"location":"S5_Pandas/#3345-summary-statistics-with-groupby-value_counts-count-describe","text":"Let's break take this in smaller steps. Recall our duration_group column. pd.value_counts(df['duration_group']) pd . value_counts ( df [ 'duration_group' ]) (40.233, 117.7] 72368 (117.7, 194.4] 13197 (194.4, 271.1] 228 (271.1, 347.8] 40 (347.8, 424.5] 11 (501.2, 577.9] 4 (424.5, 501.2] 4 (731.3, 808.0] 1 (654.6, 731.3] 1 (577.9, 654.6] 1 Name: duration_group, dtype: int64 groupby allows us to look at the number of values for each column and each value. The group by documentation is here . Basically, groupby allows us to create groups of records based on their values. Let's count how many records, or rows, in our data set fall into each bin of our duration data. df.groupby(['duration_group']).count() df . groupby ([ 'duration_group' ]) . count () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre duration country language director writer production_company actors description avg_vote votes budget usa_gross_income worlwide_gross_income metascore reviews_from_users reviews_from_critics duration (hours) duration_group (40.233, 117.7] 72368 72368 72368 72368 72368 72368 72368 72315 71618 72309 71474 68922 72304 70464 72368 72368 19493 12123 24645 10759 65972 63321 72368 (117.7, 194.4] 13197 13197 13197 13197 13197 13197 13197 13186 13122 13171 12528 12211 13192 12990 13197 13197 4133 3153 6298 2506 12017 10493 13197 (194.4, 271.1] 228 228 228 228 228 228 228 228 221 226 221 207 228 226 228 228 70 40 59 28 215 188 228 (271.1, 347.8] 40 40 40 40 40 40 40 40 40 40 39 39 40 38 40 40 10 5 9 8 37 37 40 (347.8, 424.5] 11 11 11 11 11 11 11 11 10 11 11 10 11 11 11 11 1 3 3 1 9 10 11 (424.5, 501.2] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 1 0 0 1 4 4 4 (501.2, 577.9] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 1 0 0 0 2 3 4 (577.9, 654.6] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 1 (654.6, 731.3] 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 1 1 1 1 1 (731.3, 808.0] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 Now, let's find the mean of each of the columns for each duration_group . Notice what happens to the non-numeric columns. df.groupby(['duration_group']).mean() df . groupby ([ 'duration_group' ]) . mean () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } duration avg_vote votes metascore reviews_from_users reviews_from_critics duration (hours) duration_group (40.233, 117.7] 93.147026 5.786671 6604.507932 54.153267 35.944037 24.517601 1.552450 (117.7, 194.4] 136.552550 6.488513 25010.089414 63.042298 100.725639 45.365958 2.275876 (194.4, 271.1] 220.394737 6.997368 30003.302632 76.500000 94.711628 29.015957 3.673246 (271.1, 347.8] 302.975000 6.810000 4201.275000 79.375000 19.378378 21.513514 5.049583 (347.8, 424.5] 384.636364 7.181818 2602.545455 89.000000 18.333333 18.100000 6.410606 (424.5, 501.2] 454.000000 7.700000 2589.000000 59.000000 19.250000 24.500000 7.566667 (501.2, 577.9] 547.500000 7.875000 206.500000 NaN 1.500000 8.666667 9.125000 (577.9, 654.6] 580.000000 5.800000 157.000000 NaN NaN NaN 9.666667 (654.6, 731.3] 729.000000 7.800000 1126.000000 87.000000 13.000000 30.000000 12.150000 (731.3, 808.0] 808.000000 7.700000 473.000000 77.000000 5.000000 23.000000 13.466667 You can specify a groupby using the names of table columns and compute other functions, such as the sum , count , std , and describe . df.groupby(['duration_group'])['metascore'].describe() df . groupby ([ 'duration_group' ])[ 'metascore' ] . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } count mean std min 25% 50% 75% max duration_group (40.233, 117.7] 10759.0 54.153267 17.655622 1.0 41.00 55.0 67.00 100.0 (117.7, 194.4] 2506.0 63.042298 16.265137 9.0 52.00 64.0 75.00 100.0 (194.4, 271.1] 28.0 76.500000 20.532720 10.0 69.75 82.0 90.00 100.0 (271.1, 347.8] 8.0 79.375000 12.070478 56.0 72.25 84.5 88.25 90.0 (347.8, 424.5] 1.0 89.000000 NaN 89.0 89.00 89.0 89.00 89.0 (424.5, 501.2] 1.0 59.000000 NaN 59.0 59.00 59.0 59.00 59.0 (501.2, 577.9] 0.0 NaN NaN NaN NaN NaN NaN NaN (577.9, 654.6] 0.0 NaN NaN NaN NaN NaN NaN NaN (654.6, 731.3] 1.0 87.000000 NaN 87.0 87.00 87.0 87.00 87.0 (731.3, 808.0] 1.0 77.000000 NaN 77.0 77.00 77.0 77.00 77.0 The simplest version of a groupby looks like this, and you can use almost any aggregation function you wish (mean, median, sum, minimum, maximum, standard deviation, count, etc.) <data object>.groupby(<grouping values>).<aggregate>() You can even group by multiple values: for example we can look at the metascore grouped by the duration_group and country . df . groupby ([ 'duration_group' , 'country' ])[ 'metascore' ] . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } count mean std min 25% 50% 75% max duration_group country (40.233, 117.7] Afghanistan, France 0.0 NaN NaN NaN NaN NaN NaN NaN Afghanistan, France, Germany, UK 1.0 64.0 NaN 64.0 64.0 64.0 64.0 64.0 Afghanistan, Iran 0.0 NaN NaN NaN NaN NaN NaN NaN Afghanistan, Ireland, Japan, Iran, Netherlands 1.0 83.0 NaN 83.0 83.0 83.0 83.0 83.0 Albania 0.0 NaN NaN NaN NaN NaN NaN NaN ... ... ... ... ... ... ... ... ... ... (501.2, 577.9] Philippines, Netherlands, Sweden 0.0 NaN NaN NaN NaN NaN NaN NaN Russia 0.0 NaN NaN NaN NaN NaN NaN NaN (577.9, 654.6] Soviet Union 0.0 NaN NaN NaN NaN NaN NaN NaN (654.6, 731.3] France 1.0 87.0 NaN 87.0 87.0 87.0 87.0 87.0 (731.3, 808.0] Argentina 1.0 77.0 NaN 77.0 77.0 77.0 77.0 77.0 5565 rows \u00d7 8 columns","title":"3.3.4.5 Summary statistics with groupby: value_counts,  count, describe"},{"location":"S5_Pandas/#exercise-7-group-by","text":"use pd.cut to perform a grouping of one or more of the dataframe columns use groupby to group by that (those) columns and then perform three different statistical summaries in three separate instances # Cell for excercise 7","title":"Exercise 7: Group-by"},{"location":"S6_Matplotlib/","text":"Technology Fundamentals Course 1, Session 4: Visualization and OOP \u00b6 Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assitants Varsha Bang, Harsha Vardhan Contact vbang@uw.edu, harshav@uw.edu In this session we'll be discussing visualization strategies. And, more specifically, how we can manipulate our pandas dataframes to give us the visualizations we desire. Before we get there, however, we're going to start by introducing a python module called Matplotlib. 4.1 Visualization with Matplotlib \u00b6 Lets start by importing our matplotlib module. Pyplot is a module of Matplotlib that provides functions to add plot elements like text, lines, and images. typically we import this module like so import matplotlib.pyplot as plt where plt is shorthand for the matplotlib.pyplot library import matplotlib.pyplot as plt 4.1.1 The Basics \u00b6 Matplotlib is strongly object oriented and its principal objects are the figure and the axes . But before we get into that I want us to explore the most basic use case. In this basic use case, we don't declare the figure and axes objects explicitly, but rather work directly in the pyplot namespace. I'm going to create a list of x and y values and plot them with pyplot x = [1,2,3,4,5,6,7] y = [1,1,2,3,5,8,13] plt.plot(x,y) x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] y = [ 1 , 1 , 2 , 3 , 5 , 8 , 13 ] plt . plot ( x , y ) [<matplotlib.lines.Line2D at 0x7fcd31e36250>] We can label the axes of our figure using the xlabel and ylabel attributes, and label our title using the title attribute. plt.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13]) plt.title('The Fibonacci Sequence') plt.xlabel('Order in Sequence') plt.ylabel('Value') plt . plot ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ],[ 1 , 1 , 2 , 3 , 5 , 8 , 13 ]) plt . title ( 'The Fibonacci Sequence' ) plt . xlabel ( 'Order in Sequence' ) plt . ylabel ( 'Value' ) Text(0, 0.5, 'Value') What do we think about the out-of-the-box formatting of pyplot ? What are some things we can do to make it better? Could we make it bigger? Perhaps different dimensions? Does anyone recognize that default line color? Before we make any changes, let's become acquianted with the more appropriate way to work in matplotlib.pyplot . In this formality, we explicitly create our figure and axes objects. # This is one way to do it... # plt.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13]) # but we can also do it this way, concretely declaring the figure, axes # objects directly # We declare the figure fig = plt.figure() # and then add axes ax = fig.add_subplot(111) You can think of the figure as a canvas, where you specify dimensions and possibly unifying attributes of its contents, like, background color, border, etc. You use the canvas, the figure , to containerize your other objects, primarily your axes , and to save its contents with savefig . You can think of an axes as the actual graphs or plots themselves. And when we declare these objects, we have access to all the methods of matplotlib.pyplot (e.g. .plot , .scatter , .hist etc.) You can place many of these axes into the figure container in a variety of ways. The last component of a pyplot figure are the axis , the graphical axis we typically think of. # This is one way to do it... # plt.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13]) # but we can also do it this way, concretely declaring the figure, axes # objects directly # We declare the figure fig = plt . figure () # and then add axes ax = fig . add_subplot ( 111 ) plt.subplots returns a figure and axes object(s) together: ### We can also do it in 1 line fig, ax = plt.subplots(1, 1, figsize=(8,8)) and we'll go ahead and adjust the figure size with the parameter figsize and set it equal to a tuple containing the x and y dimensions of the figure in inches. ### We can also do it in 1 line fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) To recap, by convention we typically separate our plots into three components: a Figure, its Axes, and their Axis: Figure : It is a whole figure which may contain one or more than one axes (plots). You can think of a figure as a canvas which contains plots. Axes : It is what we generally think of as a plot. A figure can contain many axes . It contains two or three (in the case of 3D) axis objects. Each axes has a title, an x-label and a y-label. Axis : They are the traditional axis we think of in a graph and take care of generating the graph limits. Example: fig, ax = plt.subplots(1, 1, figsize=(8,8)) is creating the figure ( fig ) and axes ( ax ) explicitly, and depending on whether we create 2D or 3D plots, the axes will contain 2-3 axis . Exercise 1: Adjust Figure Size \u00b6 create a figure and axes using plt.subplots() . adjust the figure size to be 6 inches (width) by 3 inches (height). Plot the values of the fibonacci sequence we defined earlier (Bonus) Repeat, this time inverting the y-values using list splicing (Bonus) Explore other plt.plot() attributes using the built in Colab tooltip Plotting building blocks for Exercise 1: * plt.subplots() * ax.plot() * slicing [::] x = [1,2,3,4,5,6,7] y = [1,1,2,3,5,8,13] # Cell for Exercise 1 x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] y = [ 1 , 1 , 2 , 3 , 5 , 8 , 13 ] 4.1.2 Manipulating Plot Attributes \u00b6 We can manipulate many parameters of a figure 's axes : marker , linestyle , and color , to name a few. Each of these parameters takes string values. fig, ax = plt.subplots(1,1, figsize=(5,5)) ax.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13], marker='^', linestyle='--', color='tab:blue') ax.plot([1,2,3,4,5,6,7],[0,3,8,6,5,4,1], marker='.', linestyle='-.', color='#59A41F') ax.set_title('My Random Values') ax.set_xlabel('Order in Sequence') ax.set_ylabel('Value') List of marker styles {'': 'nothing', ' ': 'nothing', '*': 'star', '+': 'plus', ',': 'pixel', '.': 'point', 0: 'tickleft', '1': 'tri_down', 1: 'tickright', 10: 'caretupbase', 11: 'caretdownbase', '2': 'tri_up', 2: 'tickup', '3': 'tri_left', 3: 'tickdown', '4': 'tri_right', 4: 'caretleft', 5: 'caretright', 6: 'caretup', 7: 'caretdown', '8': 'octagon', 8: 'caretleftbase', 9: 'caretrightbase', '<': 'triangle_left', '>': 'triangle_right', 'D': 'diamond', 'H': 'hexagon2', 'None': 'nothing', None: 'nothing', 'P': 'plus_filled', 'X': 'x_filled', '^': 'triangle_up', '_': 'hline', 'd': 'thin_diamond', 'h': 'hexagon1', 'o': 'circle', 'p': 'pentagon', 's': 'square', 'v': 'triangle_down', 'x': 'x', '|': 'vline'} ``` List of line styles {'': '_draw_nothing', ' ': '_draw_nothing', '-': '_draw_solid', '--': '_draw_dashed', '-.': '_draw_dash_dot', ':': '_draw_dotted', 'None': '_draw_nothing'} ``` List of base colors {'b': (0, 0, 1), 'c': (0, 0.75, 0.75), 'g': (0, 0.5, 0), 'k': (0, 0, 0), 'm': (0.75, 0, 0.75), 'r': (1, 0, 0), 'w': (1, 1, 1), 'y': (0.75, 0.75, 0)} list access import matplotlib as mp mp.markers.MarkerStyle.markers mp.lines.lineStyles mp.colors.BASE_COLORS Taking these long lists of available parameters, I'm going to play around with a few and see how they appear in our plot. import matplotlib as mp mp . markers . MarkerStyle . markers # mp.lines.lineStyles # mp.colors.BASE_COLORS {'': 'nothing', ' ': 'nothing', '*': 'star', '+': 'plus', ',': 'pixel', '.': 'point', 0: 'tickleft', '1': 'tri_down', 1: 'tickright', 10: 'caretupbase', 11: 'caretdownbase', '2': 'tri_up', 2: 'tickup', '3': 'tri_left', 3: 'tickdown', '4': 'tri_right', 4: 'caretleft', 5: 'caretright', 6: 'caretup', 7: 'caretdown', '8': 'octagon', 8: 'caretleftbase', 9: 'caretrightbase', '<': 'triangle_left', '>': 'triangle_right', 'D': 'diamond', 'H': 'hexagon2', 'None': 'nothing', None: 'nothing', 'P': 'plus_filled', 'X': 'x_filled', '^': 'triangle_up', '_': 'hline', 'd': 'thin_diamond', 'h': 'hexagon1', 'o': 'circle', 'p': 'pentagon', 's': 'square', 'v': 'triangle_down', 'x': 'x', '|': 'vline'} plt . plot ([ 1 , 2 , 3 ], [ 4 , 5 , 6 ]) plt . title ( 'title' ) Text(0.5, 1.0, 'title') ax . title Text(0.5, 1.0, '') fig , ax = plt . subplots ( 1 , 1 , figsize = ( 5 , 5 )) ax . plot ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ],[ 1 , 1 , 2 , 3 , 5 , 8 , 13 ], marker = 's' , linestyle = ':' , color = 'tab:blue' ) ax . plot ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ],[ 0 , 3 , 8 , 6 , 5 , 4 , 1 ], marker = '.' , linestyle = '-.' , color = '#3E1515' ) ax . set_title ( 'My Random Values' ) ax . set_xlabel ( 'Order in Sequence' ) ax . set_ylabel ( 'Value' ) Text(0, 0.5, 'Value') If we want to make a scatter plot without any lines at all, we set the linestyle to an empty string fig, ax = plt.subplots(1,1, figsize=(5,5)) plt.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13], marker='*', linestyle='', color='tab:green') ax.set_title('The Fibonacci Sequence') ax.set_xlabel('Order in Sequence') ax.set_ylabel('Value') fig , ax = plt . subplots ( 1 , 1 , figsize = ( 5 , 5 )) plt . plot ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ],[ 1 , 1 , 2 , 3 , 5 , 8 , 13 ], marker = 'h' , linestyle = '' , ms = 10 , color = 'tab:green' ) ax . set_title ( 'The Fibonacci Sequence' ) ax . set_xlabel ( 'Order in Sequence' ) ax . set_ylabel ( 'Value' ) Text(0, 0.5, 'Value') Exercise 2: Choose Lines, Colors, and Markers \u00b6 Recreate the \"My Random Values\" plot with a variety of markers, linestyles, and colors. (Bonus) Can you set the markers and lines to colors belonging to the Tableau 20? Try it with and without the hex values! Plotting building blocks for Exercise 2: * marker='' * linestyle='' * color='' # Cell for Exercise 2 ### DO NOT CHANGE BELOW ### x = [1,2,3,4,5,6,7] y1 = [1,1,2,3,5,8,13] y2 = [0,3,8,6,5,4,1] y3 = [10,15,12,9,3,2,1] y4 = [2,4,2,1,2,4,5] fig, ax = plt.subplots(1,1, figsize=(5,5)) ax.set_title('My Random Values') ax.set_xlabel('Order in Sequence') ax.set_ylabel('Value') ### END OF DO NOT CHANGE ### ### change these lines w/ marker, linestyle, color attributes ax.plot(x,y1) ax.plot(x,y2) ax.plot(x,y3) ax.plot(x,y4) # Cell for Exercise 2 ### DO NOT CHANGE BELOW ### x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] y1 = [ 1 , 1 , 2 , 3 , 5 , 8 , 13 ] y2 = [ 0 , 3 , 8 , 6 , 5 , 4 , 1 ] y3 = [ 10 , 15 , 12 , 9 , 3 , 2 , 1 ] y4 = [ 2 , 4 , 2 , 1 , 2 , 4 , 5 ] fig , ax = plt . subplots ( 1 , 1 , figsize = ( 5 , 5 )) ax . set_title ( 'My Random Values' ) ax . set_xlabel ( 'Order in Sequence' ) ax . set_ylabel ( 'Value' ) ### END OF DO NOT CHANGE ### ### change these lines w/ marker, linestyle, color attributes ax . plot ( x , y1 ) ax . plot ( x , y2 ) ax . plot ( x , y3 ) ax . plot ( x , y4 ) [<matplotlib.lines.Line2D at 0x7fcd316d14d0>] 4.1.3 Subplots \u00b6 Remember that fig, ax = plt.subplots() satement we used earlier? We're now going to use that same approach but this time, the second variable that is returned (what we call ax in the cell bellow) is no longer an axes object! Instead, it is an array of axes objects. I'm also going to introduce another module, random , to generate some random values import random fig, ax = plt.subplots(2, 2, figsize=(10,10)) ax[0,1].plot(range(10), [random.random() for i in range(10)], c='tab:orange') ax[1,0].plot(range(10), [random.random() for i in range(10)], c='tab:green') ax[1,1].plot(range(10), [random.random() for i in range(10)], c='tab:red') ax[0,0].plot(range(10), [random.random() for i in range(10)], c='tab:blue') quick note: In the above cell we use something called list comprehension to quickly populate a list of objects (in this case those objects are floats). We won't dive too deeply into that now, but you can think of list comprehension as a more concise way of writing a for() loop. In future cases where list comprehension appears in this notebook I will include code snipets of the corresponding for loop. import random # this list comprehension print([random.random() for i in range(10)]) # produces the same output as this for loop ls = [] for i in range(10): ls.append(random.random()) print(ls) import random random . seed ( 42 ) # this list comprehension print ([ random . random () for i in range ( 10 )]) random . seed ( 42 ) # produces the same output as this for loop ls = [] for i in range ( 10 ): ls . append ( random . random ()) print ( ls ) [0.6394267984578837, 0.025010755222666936, 0.27502931836911926, 0.22321073814882275, 0.7364712141640124, 0.6766994874229113, 0.8921795677048454, 0.08693883262941615, 0.4219218196852704, 0.029797219438070344] [0.6394267984578837, 0.025010755222666936, 0.27502931836911926, 0.22321073814882275, 0.7364712141640124, 0.6766994874229113, 0.8921795677048454, 0.08693883262941615, 0.4219218196852704, 0.029797219438070344] The second thing we'll need to talk about is the grid of the ax object fig , ax = plt . subplots ( 2 , 2 ) ax . shape (2, 2) ax array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7fcd316f9210>, <matplotlib.axes._subplots.AxesSubplot object at 0x7fcd316490d0>], [<matplotlib.axes._subplots.AxesSubplot object at 0x7fcd315fb710>, <matplotlib.axes._subplots.AxesSubplot object at 0x7fcd315b0d50>]], dtype=object) This is exactly like accessing a matrix: matrix[row,column] = element we have the pandas equivalent: df.iloc[0,1] = element import random fig , ax = plt . subplots ( 2 , 2 , figsize = ( 10 , 10 )) ax [ 0 , 0 ] . plot ( range ( 10 ), [ random . random () for i in range ( 10 )], c = 'tab:blue' ) ax [ 0 , 1 ] . plot ( range ( 10 ), [ random . random () for i in range ( 10 )], c = 'tab:orange' ) ax [ 1 , 0 ] . plot ( range ( 10 ), [ random . random () for i in range ( 10 )], c = 'tab:green' ) ax [ 1 , 1 ] . plot ( range ( 10 ), [ random . random () for i in range ( 10 )], c = 'tab:red' ) [<matplotlib.lines.Line2D at 0x7fcd313e3a50>] Exercise 3: Subplots \u00b6 Create a 2x1 figure where the first axes is a plot of the fibonacci sequence up to the 10th sequence value and the second axes is a plot of 10 random integers with values between 10 and 20 (exclusive). Use different markers, colors, and lines for each plot. Since the focus of this tutorial is on visualization, I'll go ahead and provide my own code for generating random integers between 10 and 20 (exclusive). If you have extra time, prove to yourself that this code works! (remember docstrings are your friend!) import random [round(random.random() * 8) + 11 for i in range(10)] # Cell for Exercise 3 ### DO NOT CHANGE ### import random # create the fig, ax objects fig, ax = plt.subplots(1, 2, figsize=(10, 5)) # generate x, y1, and y2 x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y1 = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55] y2 = [round(random.random() * 8) + 11 for i in range(10)] ### END OF DO NOT CHANGE ### # Note: no skeleton code here is given for the figure, I want you to write this # code out yourself. Here is pseudo-code to get you started: # plot the left axes, set the title and axes labels # title: Fibonacci Sequence; xlabel: x values; ylabel: y values ### YOUR CODE HERE ### # plot the right axes, set the title and axes labels # title: My Random Values; xlabel: x values; ylabel: y values ### YOUR CODE HERE ### # Cell for Exercise 3 ### DO NOT CHANGE ### import random # create the fig, ax objects fig , ax = plt . subplots ( 1 , 2 , figsize = ( 10 , 5 )) # generate x, y1, and y2 x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] y1 = [ 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 ] y2 = [ round ( random . random () * 8 ) + 11 for i in range ( 10 )] ### END OF DO NOT CHANGE ### # Note: no skeleton code here is given for the figure, I want you to write this # code out yourself. Here is pseudo-code to get you started: # plot the left axes, set the title and axes labels # title: Fibonacci Sequence; xlabel: x values; ylabel: y values ### YOUR CODE HERE ### # plot the right axes, set the title and axes labels # title: My Random Values; xlabel: x values; ylabel: y values ### YOUR CODE HERE ### 4.2 Visualization with Pandas \u00b6 Now lets discover the power of pandas plots! While the objectives of the exercizes may be to make certain visualizations, throughout our experience we'll be using pandas tricks to create the data splices we need, so in the following is a mix of new plotting stuff, with pandas data selection/splicing stuff. We're also going to import a new module called seaborn . It is another plotting library based off matplotlib . We're going to use it to pull some stylistic features. import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from sklearn.datasets import load_boston import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from ipywidgets import interact The following few cells should look familiar from last tutorial session, we're going to use some essential pandas methods to get a general sense of what our dataset looks like There are many ways to construct a dataframe, as an exercise, you might think of otherways to perform that task here. df = pd.read_csv(\"https://raw.githubusercontent.com/wesleybeckner/ds_for_engineers/main/data/wine_quality/winequalityN.csv\") df.describe() # In your subsequent time with pandas you'll discover that there are a host of # ways to populate a dataframe. In the following, I can create a dataframe # simply by using read_csv because the data is formated in a way that # pandas can easily intuit. df = pd . read_csv ( \"https://raw.githubusercontent.com/wesleybeckner/\" \\ \"technology_explorers/main/assets/imdb_movies.csv\" ) /usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (3) have mixed types.Specify dtype option on import or set low_memory=False. interactivity=interactivity, compiler=compiler, result=result) # we check the shape of our data to see if its as we expect df . shape (85855, 22) # we check the column names df . columns Index(['imdb_title_id', 'title', 'original_title', 'year', 'date_published', 'genre', 'duration', 'country', 'language', 'director', 'writer', 'production_company', 'actors', 'description', 'avg_vote', 'votes', 'budget', 'usa_gross_income', 'worlwide_gross_income', 'metascore', 'reviews_from_users', 'reviews_from_critics'], dtype='object') Lets start by looking at basic description of our data. This gives us a sense of what visualizations we can employ to begin understanding our dataset. df . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } duration avg_vote votes metascore reviews_from_users reviews_from_critics count 85855.000000 85855.000000 8.585500e+04 13305.000000 78258.000000 74058.000000 mean 100.351418 5.898656 9.493490e+03 55.896881 46.040826 27.479989 std 22.553848 1.234987 5.357436e+04 17.784874 178.511411 58.339158 min 41.000000 1.000000 9.900000e+01 1.000000 1.000000 1.000000 25% 88.000000 5.200000 2.050000e+02 43.000000 4.000000 3.000000 50% 96.000000 6.100000 4.840000e+02 57.000000 9.000000 8.000000 75% 108.000000 6.800000 1.766500e+03 69.000000 27.000000 23.000000 max 808.000000 9.900000 2.278845e+06 100.000000 10472.000000 999.000000 df . loc [:, df . dtypes == object ] . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre country language director writer production_company actors description budget usa_gross_income worlwide_gross_income count 85855 85855 85855 85855 85855 85855 85791 85022 85768 84283 81400 85786 83740 23710 15326 31016 unique 85855 82094 80852 168 22012 1257 4907 4377 34733 66859 32050 85729 83611 4642 14857 30414 top tt0131549 Anna Anna 2017 2010 Drama USA English Jes\u00fas Franco Jing Wong Metro-Goldwyn-Mayer (MGM) Nobuyo \u00d4yama, Noriko Ohara, Michiko Nomura, Ka... The story of $ 1000000 $ 1000000 $ 8144 freq 1 10 10 3223 113 12543 28511 35939 87 84 1284 9 15 758 19 15 The first thing we notice is that all the data is numerical that we can pull standard statistical information from (mean, std, max, etc.) What kind of visualizations do you think of with data like this? I tend to think of scatter, box, and histogram plots for numerical data and bar or sunburst charts for categorical data. 4.2.1 Scatter Plots \u00b6 The way to generate a plot in the fewest keystrokes is to simply call the plot() method within the dataframe object df.plot() # the simplest plot we can make is the following so let's start here. # We can generate a figure simply by using the plot() method of our dataframe # object. df . plot () <matplotlib.axes._subplots.AxesSubplot at 0x7fcd186a5390> This gives us a raw view of the data, but here I'd like to introduce some standard plotting steps: recall the fig , ax format we used previously. fig, ax = plt.subplots(1, 1, figsize = (10, 5)) df.plot(ax=ax) fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) df . plot ( ax = ax ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd1dad9950> To make this into a scatter plot, we set the linestyle (or ls) to an empty string, and select a marker type. fig, ax = plt.subplots(1, 1, figsize = (10, 5)) df.plot(ax=ax, linestyle='', marker='.') fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) df . plot ( ax = ax , ls = '' , marker = '.' , ms = 2 ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd1856f350> Exercise 4: Scatter Plots with Pandas \u00b6 Make a plot of duration vs metascore # Cell for Exercise 4 <matplotlib.axes._subplots.AxesSubplot at 0x7fcd18498ad0> 4.2.2 Bar Plots \u00b6 One of the more common methods of depicting aggregate data is bar plots. We almost always see these kinds of plots used to display and compare between averages, but sometimes between singular data values as well. fig, ax = plt.subplots(1, 1, figsize=(10,7.5)) df.groupby('country').filter(lambda x: x.shape[0] > 100).\\ groupby('country')['duration'].mean().sort_values()\\ [-20:].plot(kind='barh', ax=ax) fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 7.5 )) df . groupby ( 'country' ) . filter ( lambda x : x . shape [ 0 ] > 100 ) . \\ groupby ( 'country' )[ 'duration' ] . mean () . sort_values () \\ [ - 20 :] . plot ( kind = 'barh' , ax = ax ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd08681210> 4.2.3 Box Plots \u00b6 Maybe we thought it was usefull to see the feature data in the scatter plots ( we can visually scan for correlations between feature sets, check outliers, etc.) but perhaps more instructive, is a boxplot. A box plot or boxplot is a statistical method for graphically depicting aggregate data through their quartiles. It will be useful to inspect the boxplot API to see the default behavior for representing the quartiles and outliers. fig, ax = plt.subplots(1, 1, figsize = (10, 5)) df.plot(kind='box', ax=ax) fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 7.5 )) df . groupby ( 'country' ) . filter (( lambda x : ( x . shape [ 0 ] > 100 ) & # filter by number of datapoints ( x [ 'duration' ] . mean () < 100 )) # filter by average movie time ) . boxplot ( by = 'country' , column = 'duration' , rot = 90 , ax = ax ) /usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray return array(a, dtype, copy=False, order=order) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd04c5d9d0> 4.2.4 Histograms \u00b6 What are some other kinds of plots we can make? A good one to be aware of is the histogram. plt.title('Demo Hist') plt.xlabel('Duration') plt.ylabel('Frequency') plt.hist(df['duration']) plt . title ( 'Demo Hist' ) plt . xlabel ( 'Duration' ) plt . ylabel ( 'Frequency' ) plt . hist ( df [ 'duration' ]) (array([7.2368e+04, 1.3197e+04, 2.2800e+02, 4.0000e+01, 1.1000e+01, 4.0000e+00, 4.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00]), array([ 41. , 117.7, 194.4, 271.1, 347.8, 424.5, 501.2, 577.9, 654.6, 731.3, 808. ]), <a list of 10 Patch objects>) df [ 'duration' ] . plot ( kind = 'hist' ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd0471d210> 4.2.5 Kernel Density Estimates \u00b6 Another useful plot type for data analysis is the kernel density estimate. You can think of this plot as exactly like a histogram, except instead of creating bins in which to accrue datapoints, you deposit a gaussian distribution around every datapoint in your dataset. By this mechanism, you avoid creating bias in your data summary as you otherwise would be when predifining bin sizes and locations in a histogram. fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) df [ 'duration' ] . plot ( kind = 'kde' , ax = ax ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd046ac7d0> 4.2.5.1 Enrichment : Skew and Tailedness \u00b6 While we're on the topic of KDEs/histograms and other statistical plots, this is a convenient time to talk about skew and tailedness or, otherwise known as kurtosis df.skew() indicates the skewdness of the data df.kurtosis() indicates the tailedness of the data # from scipy.stats import skewnorm from ipywidgets import FloatSlider slider = FloatSlider ( value = 0.5 , min = 0.5 , max = 5 , step = 0.5 , description = 'Shape:' , disabled = False , continuous_update = False , orientation = 'horizontal' , readout = True , readout_format = '.1f' ) import numpy as np def inspect_kurt_skew ( a = slider ): # theres another hyperparameter, lambda for the center # of weibull. the shape parameter is sometimes called # a, or k fig , ax = plt . subplots ( 1 , 1 , figsize = ( 5 , 5 )) s = np . random . weibull ( a , 1000 ) statdf = pd . DataFrame ( s ) statdf [ 0 ] . plot ( kind = 'kde' , ax = ax ) print ( \"skew: {:.2f} \" . format ( statdf [ 0 ] . skew ())) print ( \"kurtosis: {:.2f} \" . format ( statdf [ 0 ] . kurt ())) interact ( inspect_kurt_skew ) interactive(children=(FloatSlider(value=0.5, continuous_update=False, description='Shape:', max=5.0, min=0.5, \u2026 <function __main__.inspect_kurt_skew> 4.2.6 Correlation Plots \u00b6 Often, we'll want to quantify the strength of a relationship between input variables. We can do this by calculating correlations. We won't go into great detail here about how Pearson's correlation is calculated, but the StatQuest videos on this subject are here for reference (and are really good... if you can stomach Starmer's humor) StatQuest: Correlation StatQuest: Covariance The main takeaway is that pearson's correlation ranges from -1 to 1 and indicates how positively or negatively correlated the variables in question are. For our purposes, this can give insight into what variables will be important in our machine learning model. We can get the pearson's correlation between all the input features using the dataframe.corr() method. Fig: pearson's correlation value and corresponding scatter plot of feature-x and feature-y df . corr () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } duration avg_vote votes metascore reviews_from_users reviews_from_critics duration 1.000000 0.242432 0.125618 0.210531 0.130836 0.135465 avg_vote 0.242432 1.000000 0.166972 0.691338 0.138185 0.200526 votes 0.125618 0.166972 1.000000 0.194730 0.766237 0.671635 metascore 0.210531 0.691338 0.194730 1.000000 0.126131 0.236107 reviews_from_users 0.130836 0.138185 0.766237 0.126131 1.000000 0.671634 reviews_from_critics 0.135465 0.200526 0.671635 0.236107 0.671634 1.000000 So we have this raw table of pearsons correlations between each of our input features, how do we and how should we turn this into a plot? Typically we'd use a heat map on an feature vs feature grid to view this kind of data. In the following I'm going to use some numpy methods you may not have seen before. Links to the documentation for these methods are at the end of the notebook. import numpy as np fig, ax = plt.subplots(1, 1, figsize = (10,10)) # create a mask to white-out the upper triangle mask = np.triu(np.ones_like(df.corr(), dtype=bool)) # we'll want a divergent colormap for this so our eye # is not attracted to the values close to 0 cmap = sns.diverging_palette(230, 20, as_cmap=True) sns.heatmap(df.corr(), mask=mask, cmap=cmap, ax=ax) sns . heatmap ( df . corr ()) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd023a6a10> import numpy as np fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 10 )) # create a mask to white-out the upper triangle mask = np . triu ( np . ones_like ( df . corr (), dtype = bool )) # we'll want a divergent colormap for this so our eye # is not attracted to the values close to 0 cmap = sns . diverging_palette ( 230 , 20 , as_cmap = True ) sns . heatmap ( df . corr (), mask = mask , cmap = cmap , ax = ax ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd0239fc90> What do we notice? looks like reviews and votes are all pretty correlated. Surprising? 4.3 Visualization with IpyWidgets \u00b6 4.3.1 Interact \u00b6 Here we're going to introduce a very basic use case of IPython's widgets using interact . The interact method ( ipywidgets.interact ) automatically creates user interface (UI) controls for exploring code and data interactively. It is the easiest way to get started using IPython\u2019s widgets. from ipywidgets import interact def my_plot(col=filtdf.select_dtypes('number').columns): fig, ax = plt.subplots(1,1,figsize=(10,5)) filtdf.boxplot(column=col, by='country', ax=ax) interact(my_plot) def my_plot ( col = filtdf . select_dtypes ( 'number' ) . columns ): fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) filtdf . boxplot ( column = col , by = 'country' , ax = ax ) After defining our function that returns our plot, and defining input parameters for the fields we would like to interact with, we call our function with interact interact(my_plot) Let's say we want to look at information from the IMDb data based on country. Because there are so many countries in the database, let's filter it down to only the top 5 countries. How could we do this using value_counts ? Let's try this below top_5_countries = df [ 'country' ] . value_counts ()[: 5 ] . keys () # get list of top 5 countries filtdf = df . loc [ df [ 'country' ] . isin ( top_5_countries )] # only select rows whose country is in the list filtdf . boxplot ( column = 'duration' , by = 'country' ) /usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray return array(a, dtype, copy=False, order=order) <matplotlib.axes._subplots.AxesSubplot at 0x7fccddd7dc90> interact ( my_plot ) interactive(children=(Dropdown(description='col', options=('duration', 'avg_vote', 'votes', 'metascore', 'revi\u2026 <function __main__.my_plot> Let's break this down. Normally, I would just set my y-variable to a value, so that when I call my function, my figure is generated with the corresponding data field: def my_plot ( col = 'duration' ): fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) filtdf . boxplot ( column = col , by = 'country' , ax = ax ) my_plot () /usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray return array(a, dtype, copy=False, order=order) Instead, we want to give interact() a list of values for the user to select from, this is the difference between a regular function, and one we might feed into interact. y = ['duration', 'avg_vote', 'votes', 'metascore', 'reviews_from_users', 'reviews_from_critics'] list ( filtdf . select_dtypes ( 'number' ) . columns ) ['duration', 'avg_vote', 'votes', 'metascore', 'reviews_from_users', 'reviews_from_critics'] Exercise 5: IpyWidgets and Figures in Functions \u00b6 In the previous section we created a single dropdown menu to select our y variable for our plot. Here, we would like to do the same thing, but this time filter your dataframe for only the top 10 directors that most frequently occur in the IMDb datafile. When you build the interactive plot, grouby director this time instead of country. # Code block for Exercise 5 interact ( my_plot ) interactive(children=(Dropdown(description='col', options=('duration', 'avg_vote', 'votes', 'metascore', 'revi\u2026 <function __main__.my_plot> Part 2: Object Oriented Programming \u00b6 5.1 Classes, Instances, Methods, and Attribtues \u00b6 A class is created with the reserved word class A class can have attributes # define a class class MyClass : some_attribute = 5 We use the class blueprint MyClass to create an instance We can now access attributes belonging to that class: # create instance instance = MyClass () # access attributes of the instance of MyClass instance . some_attribute 5 attributes can be changed: instance . some_attribute = 50 instance . some_attribute 50 In practice we always use the __init__() function, which is executed when the class is being initiated. class Pokeball : def __init__ ( self , contains = None , type_name = \"poke ball\" ): self . contains = contains self . type_name = type_name self . catch_rate = 0.50 # note this attribute is not accessible upon init # empty pokeball pokeball1 = Pokeball () # used pokeball of a different type pokeball1 = Pokeball ( \"Pikachu\" , \"master ball\" ) > what is the special keyword [`self`](http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html) doing? The `self` parameter is a reference to the current instance of the class and is used to access variables belonging to the class. classes can also contain methods import random class Pokeball : def __init__ ( self , contains = None , type_name = \"poke ball\" ): self . contains = contains self . type_name = type_name self . catch_rate = 0.50 # note this attribute is not accessible upon init # the method catch, will update self.contains, if a catch is successful # it will also use self.catch_rate to set the performance of the catch def catch ( self , pokemon ): if self . contains == None : if random . random () < self . catch_rate : self . contains = pokemon print ( f \" { pokemon } captured!\" ) else : print ( f \" { pokemon } escaped!\" ) pass else : print ( \"pokeball is not empty!\" ) pokeball = Pokeball () pokeball . catch ( \"picachu\" ) picachu captured! pokeball . contains 'picachu' ### Q1 Create a release method for the class Pokeball: ## 5.2 Inheritance Inheritance allows you to adopt into a child class, the methods/attributes of a parent class class MasterBall ( Pokeball ): pass masterball = MasterBall () masterball . type_name 'poke ball' HMMM we don't like that type name. let's make sure we change some of the inherited attributes! We'll do this again with the `__init__` function class MasterBall ( Pokeball ): def __init__ ( self , contains = None , type_name = \"Masterball\" , catch_rate = 0.8 ): self . contains = contains self . type_name = type_name self . catch_rate = catch_rate masterball = MasterBall () masterball . type_name 'Masterball' masterball . catch ( \"charmander\" ) charmander captured! We can also write this, this way: class MasterBall ( Pokeball ): def __init__ ( self , contains = None , type_name = \"Masterball\" ): Pokeball . __init__ ( self , contains , type_name ) self . catch_rate = 0.8 masterball = MasterBall () masterball . type_name 'Masterball' masterball = MasterBall () masterball . catch ( \"charmander\" ) charmander captured! The keyword `super` will let us write even more succintly: class MasterBall ( Pokeball ): def __init__ ( self , contains = None , type_name = \"Masterball\" ): super () . __init__ ( contains , type_name ) self . catch_rate = 0.8 masterball = MasterBall () masterball . catch ( \"charmander\" ) charmander captured! ### Q2 Write another class object called `GreatBall` that inherits the properties of `Pokeball`, has a `catch_rate` of 0.6, and `type_name` of Greatball # Code Cell for L2 Q2 ## 5.3 Interacting Objects ### Q3 Write another class object called `Pokemon`. It has the [attributes](https://bulbapedia.bulbagarden.net/wiki/Type): * name * weight * speed * type Now create a class object called `FastBall`, it inherits the properties of `Pokeball` but has a new condition on `catch` method: if pokemon.speed > 100 then there is 100% chance of catch success. > what changes do you have to make to the way we've been interacting with pokeball to make this new requirement work? # Code Cell for L2 Q3 ### Q4 In the above task, did you have to write any code to test that your new classes worked?! We will talk about that more at a later time, but for now, wrap any testing that you did into a new function called `test_classes` in the code cell below # Code Cell for L2 Q4 # References * [`numpy.triu`](https://numpy.org/doc/stable/reference/generated/numpy.triu.html) * [`numpy.ones_like`](https://numpy.org/doc/stable/reference/generated/numpy.ones_like.html) * [`ipywidgets`](https://ipywidgets.readthedocs.io/en/latest/) * [StatQuest: Correlation](https://youtu.be/xZ_z8KWkhXE?t=822) * [StatQuest: Covariance](https://www.youtube.com/watch?v=qtaqvPAeEJY&ab_channel=StatQuestwithJoshStarmer) # Enrichment Topics ## 4.4 Other Plot Types ### 4.4.1 Bar Plots (Advanced) Similar to how we created bar plots with pandas, we can use matplotlib to make barplots pokemon = ['Charmander', 'Pikachu', 'Squirtle', 'Bulbasaur'] hp = [10, 12, 8, 16] plt.bar(pokemon, hp, color='tab:blue') plt.title('Pokemon HP') plt.xlabel('Pokemon') plt.ylabel('HP') pokemon = [ 'Charmander' , 'Pikachu' , 'Squirtle' , 'Bulbasaur' ] hp = [ 10 , 12 , 8 , 16 ] plt . bar ( pokemon , hp , color = 'tab:blue' ) plt . title ( 'Pokemon HP' ) plt . xlabel ( 'Pokemon' ) plt . ylabel ( 'HP' ) Text(0, 0.5, 'HP') ![png](S6_Matplotlib_files/S6_Matplotlib_130_1.png) Doing the same but with horizontally oriented bars pokemon = ['Charmander', 'Pikachu', 'Squirtle', 'Bulbasaur'] hp = [10, 12, 8, 16] plt.barh(pokemon, hp, color='tab:blue') plt.title('Pokemon HP') plt.ylabel('Pokemon') plt.xlabel('HP') pokemon = [ 'Charmander' , 'Pikachu' , 'Squirtle' , 'Bulbasaur' ] hp = [ 10 , 12 , 8 , 16 ] plt . barh ( pokemon , hp , color = 'tab:blue' ) plt . title ( 'Pokemon HP' ) plt . ylabel ( 'Pokemon' ) plt . xlabel ( 'HP' ) Text(0.5, 0, 'HP') ![png](S6_Matplotlib_files/S6_Matplotlib_132_1.png) We can also add error bars pokemon = ['Charmander', 'Pikachu', 'Squirtle', 'Bulbasaur'] hp = [10, 12, 8, 16] variance = [i * random.random()*.25 for i in hp] plt.barh(pokemon, hp, xerr=variance, color='tab:blue') plt.title('Pokemon HP') plt.ylabel('Pokemon') plt.xlabel('HP') for loop version of list comprehension hp = [10, 12, 8, 16] variance = [] for i in hp: variance.append(i * random.random()*.25) print(variance) pokemon = [ 'Charmander' , 'Pikachu' , 'Squirtle' , 'Bulbasaur' ] hp = [ 10 , 12 , 8 , 16 ] variance = [ i * random . random () * .25 for i in hp ] plt . barh ( pokemon , hp , xerr = variance , color = 'tab:blue' ) plt . title ( 'Pokemon HP' ) plt . ylabel ( 'Pokemon' ) plt . xlabel ( 'HP' ) Text(0.5, 0, 'HP') ![png](S6_Matplotlib_files/S6_Matplotlib_134_1.png) ### 4.4.2 3D Plots You can also create 3D plots in matplotlib using `ax.scatter3D` ax = plt.axes(projection='3d') ax.scatter3D(range(10),[i*random.random()*.25 for i in range(10)]) for loop version of list comprehension: ls = [] for i in range(10): ls.append(i*random.random()*.25) print(ls) ax = plt . axes ( projection = '3d' ) ax . scatter3D ( range ( 10 ),[ i * random . random () * .25 for i in range ( 10 )]) ![png](S6_Matplotlib_files/S6_Matplotlib_136_1.png) ## 4.5 Visualization with Plotly Another great plotting library, that is gaining in popularity (especially in enterprise settings) is plotly. As an added exercise, if you have additional time, explore some of the [plotly examples](https://plotly.com/python/) then recreate the breakout room assignment using plotly instead of matplotlib. ### 4.5.1 Scatter Plot with Size and Color import plotly.express as px x = 'quality' y = 'alcohol' color = 'quality' size = 'alcohol' corr = df . corr () pearson = corr [ x ][ y ] fig = px . scatter ( df , x = x , y = y , color = color , size = size , title = ' {} vs {} ( {:.2f} corr)' . format ( x , y , pearson ), width = 800 , height = 800 ) fig . show () if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} window.PlotlyConfig = {MathJaxConfig: 'local'}; window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"9fe7e498-9dd8-4f23-b6dc-b2f404ecb8f4\")) { Plotly.newPlot( '9fe7e498-9dd8-4f23-b6dc-b2f404ecb8f4', [{\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"quality=%{marker.color}<br>alcohol=%{marker.size}\", \"legendgroup\": \"\", \"marker\": {\"color\": [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 7, 5, 7, 6, 8, 6, 5, 8, 7, 8, 5, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 6, 7, 4, 5, 6, 5, 6, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 7, 5, 8, 5, 6, 5, 5, 6, 8, 5, 7, 7, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 6, 5, 7, 7, 7, 6, 6, 7, 4, 6, 5, 5, 5, 5, 5, 6, 5, 6, 6, 5, 6, 5, 5, 5, 5, 4, 6, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 7, 7, 6, 5, 7, 5, 5, 5, 5, 6, 5, 7, 6, 5, 5, 6, 6, 6, 6, 6, 4, 7, 6, 7, 6, 6, 5, 6, 6, 6, 7, 8, 8, 7, 5, 5, 6, 5, 5, 6, 7, 5, 5, 6, 6, 4, 7, 5, 6, 4, 5, 4, 6, 6, 5, 5, 6, 5, 5, 6, 5, 8, 4, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 4, 5, 5, 4, 5, 6, 5, 7, 5, 6, 7, 5, 5, 5, 5, 5, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 4, 6, 6, 6, 6, 6, 6, 6, 7, 6, 5, 5, 7, 6, 5, 6, 7, 7, 7, 5, 4, 3, 5, 3, 6, 8, 7, 7, 6, 4, 6, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 5, 5, 5, 6, 6, 5, 4, 7, 8, 8, 4, 5, 5, 5, 6, 7, 7, 7, 7, 6, 5, 7, 3, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 7, 6, 7, 8, 6, 6, 5, 6, 6, 5, 7, 6, 7, 5, 6, 6, 5, 5, 6, 6, 6, 5, 8, 5, 6, 5, 5, 6, 6, 6, 5, 7, 7, 6, 6, 5, 6, 6, 7, 6, 6, 5, 7, 7, 6, 7, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 7, 6, 6, 6, 5, 6, 6, 5, 6, 7, 7, 7, 7, 6, 7, 7, 6, 6, 6, 7, 7, 7, 5, 6, 7, 7, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 5, 5, 5, 6, 5, 7, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 7, 6, 6, 6, 7, 6, 6, 5, 5, 5, 5, 5, 7, 4, 8, 7, 5, 8, 7, 5, 7, 6, 8, 6, 6, 3, 5, 6, 6, 7, 5, 5, 7, 7, 7, 6, 7, 5, 6, 5, 5, 5, 5, 6, 5, 5, 6, 6, 5, 5, 6, 5, 6, 7, 6, 5, 7, 6, 6, 6, 5, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 4, 6, 5, 4, 6, 6, 6, 5, 6, 6, 5, 7, 6, 7, 6, 6, 6, 6, 7, 6, 5, 6, 6, 5, 5, 5, 6, 6, 5, 6, 4, 6, 6, 6, 6, 5, 6, 6, 6, 5, 5, 6, 5, 6, 4, 5, 6, 6, 6, 6, 6, 6, 7, 5, 7, 7, 7, 7, 7, 7, 5, 6, 5, 6, 7, 5, 6, 7, 5, 6, 6, 5, 6, 6, 5, 7, 5, 7, 7, 6, 6, 7, 7, 7, 5, 5, 6, 6, 7, 6, 6, 7, 7, 6, 5, 6, 5, 5, 5, 7, 5, 6, 8, 7, 6, 6, 5, 5, 6, 6, 5, 5, 5, 6, 8, 6, 5, 5, 5, 5, 7, 6, 6, 6, 5, 5, 6, 5, 5, 8, 4, 6, 6, 6, 5, 5, 6, 5, 6, 6, 7, 5, 5, 5, 7, 4, 6, 5, 5, 5, 4, 6, 5, 7, 7, 7, 7, 6, 7, 6, 6, 5, 5, 4, 5, 7, 4, 5, 6, 5, 6, 6, 6, 5, 6, 6, 8, 6, 5, 6, 6, 7, 7, 7, 5, 5, 6, 5, 5, 5, 7, 4, 6, 7, 4, 6, 5, 5, 6, 5, 6, 5, 5, 5, 5, 7, 4, 6, 6, 5, 5, 6, 6, 5, 5, 6, 6, 5, 6, 7, 6, 5, 7, 7, 5, 5, 6, 8, 7, 5, 7, 5, 5, 5, 6, 6, 7, 6, 5, 6, 6, 5, 7, 6, 3, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 5, 6, 7, 7, 6, 6, 5, 6, 6, 6, 5, 6, 7, 7, 7, 7, 7, 5, 9, 6, 6, 5, 7, 8, 4, 6, 7, 8, 5, 6, 6, 6, 7, 6, 6, 7, 5, 7, 5, 5, 6, 6, 6, 8, 6, 5, 5, 7, 6, 6, 5, 6, 6, 6, 5, 6, 7, 6, 6, 5, 5, 5, 5, 5, 9, 6, 5, 6, 5, 6, 6, 9, 7, 7, 6, 4, 8, 6, 6, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 5, 5, 7, 6, 7, 5, 7, 5, 7, 7, 5, 5, 7, 5, 8, 7, 6, 6, 5, 6, 7, 8, 7, 6, 5, 5, 6, 3, 5, 7, 9, 6, 6, 8, 7, 6, 6, 6, 6, 7, 6, 7, 6, 7, 6, 7, 5, 7, 7, 6, 6, 6, 6, 6, 7, 6, 5, 6, 8, 4, 4, 8, 4, 5, 5, 5, 5, 5, 4, 5, 7, 6, 6, 7, 7, 6, 6, 6, 8, 5, 5, 7, 5, 5, 7, 5, 6, 5, 5, 5, 5, 5, 6, 7, 5, 6, 7, 7, 7, 7, 5, 5, 4, 5, 5, 6, 6, 5, 6, 5, 5, 7, 7, 6, 6, 7, 6, 6, 6, 5, 6, 6, 7, 7, 7, 7, 6, 7, 6, 5, 6, 5, 7, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 7, 6, 4, 5, 4, 6, 6, 5, 6, 6, 7, 7, 5, 6, 7, 6, 6, 6, 5, 7, 6, 6, 7, 6, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 6, 6, 6, 6, 4, 7, 4, 6, 6, 6, 6, 3, 6, 5, 5, 7, 5, 4, 5, 4, 5, 7, 5, 5, 5, 5, 6, 5, 6, 5, 4, 5, 5, 6, 5, 6, 4, 7, 5, 5, 5, 6, 5, 6, 7, 7, 6, 7, 5, 7, 5, 6, 7, 6, 5, 5, 6, 7, 6, 6, 6, 7, 5, 8, 8, 6, 7, 6, 6, 6, 7, 5, 8, 6, 7, 6, 7, 6, 6, 5, 5, 5, 7, 8, 7, 7, 4, 7, 6, 6, 5, 4, 8, 5, 5, 5, 5, 6, 6, 7, 5, 5, 6, 7, 7, 5, 7, 6, 6, 5, 5, 5, 6, 8, 8, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 4, 6, 4, 4, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 5, 6, 5, 6, 6, 5, 6, 5, 6, 5, 7, 6, 5, 5, 5, 6, 5, 6, 7, 5, 5, 8, 6, 5, 6, 7, 6, 7, 6, 6, 7, 7, 6, 7, 6, 7, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 8, 5, 8, 8, 6, 7, 6, 5, 7, 6, 7, 5, 6, 3, 6, 7, 7, 6, 6, 5, 6, 5, 7, 5, 6, 7, 7, 7, 5, 4, 7, 6, 7, 5, 7, 5, 6, 7, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 8, 7, 5, 6, 7, 5, 5, 5, 6, 6, 7, 5, 6, 6, 6, 7, 5, 8, 7, 6, 7, 7, 7, 6, 6, 6, 6, 4, 4, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 7, 8, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 7, 6, 6, 6, 5, 5, 6, 7, 8, 6, 6, 8, 5, 5, 6, 6, 5, 6, 6, 8, 8, 7, 7, 8, 4, 7, 7, 6, 5, 5, 5, 6, 6, 8, 7, 6, 7, 7, 4, 5, 7, 6, 5, 6, 5, 6, 7, 6, 6, 7, 7, 6, 6, 7, 6, 7, 7, 6, 6, 6, 5, 7, 6, 7, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 6, 7, 6, 8, 8, 5, 4, 8, 6, 7, 6, 6, 6, 8, 6, 6, 5, 6, 3, 5, 7, 4, 6, 5, 4, 6, 6, 6, 5, 7, 5, 4, 5, 7, 6, 5, 5, 5, 7, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 7, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 8, 5, 6, 7, 5, 5, 7, 6, 5, 6, 4, 6, 5, 6, 6, 6, 6, 6, 6, 4, 3, 6, 6, 6, 6, 5, 6, 5, 5, 8, 8, 7, 5, 7, 6, 6, 7, 5, 5, 7, 8, 7, 6, 6, 6, 5, 5, 6, 7, 6, 7, 6, 6, 6, 6, 5, 6, 5, 5, 6, 6, 5, 6, 6, 6, 6, 5, 7, 7, 6, 6, 6, 5, 6, 6, 6, 6, 4, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 4, 4, 6, 5, 7, 6, 5, 6, 5, 5, 6, 5, 5, 6, 6, 5, 4, 6, 6, 4, 5, 4, 5, 6, 7, 5, 6, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 7, 5, 9, 6, 7, 5, 7, 6, 6, 7, 7, 5, 6, 6, 6, 6, 8, 7, 5, 6, 6, 7, 6, 6, 5, 6, 6, 5, 6, 8, 7, 6, 6, 5, 6, 5, 5, 5, 6, 7, 7, 7, 7, 6, 7, 5, 4, 7, 6, 4, 6, 5, 5, 5, 6, 5, 5, 6, 6, 7, 6, 4, 8, 5, 6, 7, 6, 6, 7, 5, 5, 6, 5, 7, 6, 6, 5, 5, 6, 7, 7, 7, 7, 5, 7, 3, 6, 4, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 4, 5, 5, 6, 6, 5, 4, 5, 5, 5, 6, 6, 5, 8, 6, 6, 4, 6, 7, 7, 6, 8, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 4, 6, 6, 6, 6, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 6, 6, 5, 5, 5, 5, 6, 6, 7, 6, 5, 5, 5, 5, 5, 7, 6, 6, 6, 6, 6, 6, 5, 6, 8, 8, 5, 4, 6, 6, 7, 6, 7, 7, 5, 7, 5, 5, 6, 5, 5, 6, 5, 8, 6, 6, 6, 5, 6, 6, 6, 5, 5, 6, 5, 6, 6, 5, 6, 6, 7, 6, 7, 4, 6, 6, 6, 5, 7, 6, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7, 6, 5, 6, 7, 6, 6, 5, 7, 6, 6, 6, 5, 5, 5, 5, 6, 7, 6, 7, 5, 7, 6, 4, 5, 5, 6, 6, 6, 7, 5, 6, 6, 6, 6, 7, 7, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 7, 7, 5, 5, 6, 6, 6, 6, 7, 5, 6, 6, 6, 7, 5, 5, 5, 4, 6, 6, 5, 6, 5, 6, 3, 6, 5, 6, 5, 6, 7, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 7, 5, 5, 4, 7, 6, 5, 5, 5, 6, 6, 5, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 6, 7, 5, 5, 5, 6, 5, 6, 6, 6, 8, 8, 8, 8, 8, 6, 6, 5, 6, 7, 4, 8, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 5, 7, 6, 5, 5, 6, 5, 6, 7, 5, 7, 6, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 5, 5, 7, 3, 5, 5, 5, 5, 6, 5, 7, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 6, 7, 6, 6, 5, 5, 6, 5, 5, 6, 6, 4, 5, 5, 6, 5, 6, 6, 5, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 6, 5, 4, 5, 6, 4, 5, 7, 5, 5, 7, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 5, 7, 6, 6, 6, 5, 5, 6, 6, 5, 6, 6, 4, 5, 4, 6, 6, 4, 6, 7, 6, 6, 5, 5, 5, 7, 7, 7, 7, 7, 5, 5, 7, 7, 5, 7, 5, 6, 6, 6, 5, 5, 6, 7, 5, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 5, 6, 5, 6, 5, 5, 5, 5, 6, 7, 5, 6, 7, 6, 6, 6, 5, 6, 5, 6, 6, 7, 6, 6, 7, 6, 7, 4, 5, 5, 7, 6, 7, 6, 6, 5, 5, 6, 5, 4, 6, 6, 5, 5, 5, 5, 5, 7, 4, 6, 6, 5, 6, 7, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 6, 5, 5, 6, 6, 6, 7, 6, 6, 5, 7, 4, 6, 6, 6, 5, 6, 6, 5, 5, 5, 5, 5, 5, 5, 7, 7, 6, 6, 7, 7, 6, 7, 6, 8, 7, 7, 5, 5, 5, 6, 7, 5, 5, 5, 6, 5, 7, 5, 7, 6, 6, 7, 5, 4, 7, 6, 5, 6, 6, 5, 6, 5, 6, 5, 5, 6, 5, 6, 8, 5, 5, 5, 4, 5, 6, 6, 5, 8, 5, 6, 6, 4, 6, 6, 5, 5, 6, 6, 7, 6, 7, 6, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 7, 5, 4, 3, 6, 6, 6, 6, 5, 4, 4, 6, 8, 6, 8, 5, 4, 4, 4, 8, 8, 6, 7, 6, 5, 5, 5, 6, 6, 6, 4, 4, 6, 6, 5, 5, 6, 6, 5, 4, 6, 6, 4, 4, 4, 5, 6, 5, 5, 5, 7, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 5, 5, 6, 6, 4, 5, 6, 5, 6, 5, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 7, 6, 5, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 5, 5, 6, 6, 5, 5, 7, 6, 6, 7, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 4, 4, 5, 5, 5, 5, 6, 5, 5, 4, 4, 6, 6, 6, 7, 6, 5, 6, 6, 6, 5, 7, 7, 6, 6, 7, 5, 5, 7, 8, 5, 5, 8, 7, 6, 6, 5, 6, 4, 4, 5, 7, 6, 6, 6, 6, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 5, 5, 6, 5, 7, 7, 7, 5, 7, 7, 5, 6, 5, 6, 5, 6, 5, 7, 5, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 7, 6, 5, 7, 7, 7, 7, 7, 7, 6, 7, 4, 6, 7, 5, 5, 7, 5, 5, 6, 5, 6, 7, 5, 6, 7, 7, 6, 6, 6, 6, 6, 5, 5, 7, 5, 5, 7, 7, 7, 7, 6, 5, 5, 7, 7, 5, 5, 7, 7, 6, 5, 6, 7, 5, 5, 5, 6, 5, 5, 6, 6, 6, 5, 5, 5, 6, 7, 7, 5, 6, 6, 5, 5, 7, 5, 5, 5, 4, 7, 7, 6, 6, 6, 6, 8, 7, 5, 7, 7, 6, 5, 7, 7, 7, 6, 7, 7, 6, 6, 5, 6, 6, 6, 6, 5, 6, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 5, 5, 5, 6, 6, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 5, 6, 6, 6, 7, 5, 7, 6, 6, 5, 6, 6, 6, 7, 5, 5, 5, 7, 6, 6, 6, 7, 5, 7, 6, 5, 6, 6, 6, 7, 6, 6, 8, 6, 8, 6, 6, 8, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 5, 7, 6, 7, 7, 8, 8, 8, 6, 7, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 7, 5, 8, 7, 5, 7, 7, 5, 5, 6, 8, 8, 6, 5, 5, 6, 7, 7, 5, 6, 7, 7, 5, 5, 7, 4, 6, 5, 5, 5, 6, 6, 6, 6, 7, 7, 5, 5, 5, 6, 7, 6, 6, 6, 6, 7, 7, 6, 6, 6, 6, 5, 7, 7, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 8, 7, 6, 6, 6, 6, 6, 6, 6, 7, 7, 5, 6, 7, 6, 7, 8, 7, 6, 5, 5, 6, 6, 5, 7, 5, 7, 7, 6, 5, 5, 4, 6, 8, 6, 5, 7, 7, 5, 5, 5, 5, 5, 6, 7, 5, 6, 7, 5, 5, 6, 6, 6, 5, 5, 7, 5, 6, 6, 6, 7, 6, 5, 4, 6, 8, 6, 6, 5, 8, 7, 7, 6, 8, 8, 6, 6, 5, 4, 5, 5, 8, 8, 6, 5, 5, 8, 6, 8, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 6, 6, 5, 7, 7, 6, 5, 7, 5, 8, 6, 6, 5, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 6, 6, 6, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 6, 8, 6, 7, 7, 7, 7, 7, 7, 6, 6, 6, 7, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 4, 5, 6, 6, 7, 6, 5, 6, 8, 8, 6, 5, 6, 6, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 5, 4, 5, 7, 5, 6, 6, 5, 5, 5, 6, 5, 5, 8, 5, 5, 6, 5, 4, 6, 8, 8, 7, 6, 5, 5, 7, 5, 5, 5, 5, 6, 5, 6, 7, 6, 6, 7, 3, 6, 7, 6, 6, 6, 7, 6, 6, 7, 5, 7, 7, 7, 6, 6, 7, 5, 6, 6, 6, 5, 4, 6, 7, 5, 6, 6, 6, 7, 7, 7, 5, 6, 5, 6, 5, 6, 5, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 5, 7, 7, 6, 6, 5, 7, 7, 6, 6, 6, 7, 6, 6, 6, 6, 8, 8, 8, 6, 6, 5, 6, 4, 6, 6, 5, 6, 7, 6, 4, 7, 8, 5, 7, 6, 6, 5, 5, 6, 7, 6, 7, 7, 7, 6, 7, 7, 5, 7, 7, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 4, 7, 5, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 6, 7, 5, 7, 6, 7, 6, 7, 7, 5, 6, 6, 7, 7, 6, 6, 8, 8, 5, 6, 6, 6, 6, 6, 6, 5, 7, 8, 6, 3, 6, 6, 6, 5, 5, 7, 7, 7, 5, 4, 8, 7, 5, 6, 5, 6, 7, 6, 6, 7, 7, 7, 6, 5, 5, 8, 5, 7, 6, 5, 5, 5, 6, 7, 5, 8, 6, 7, 7, 7, 7, 3, 6, 7, 7, 7, 7, 7, 6, 7, 6, 6, 7, 5, 5, 6, 7, 6, 6, 7, 5, 7, 5, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 7, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 5, 6, 6, 6, 8, 5, 7, 7, 7, 6, 6, 6, 8, 5, 6, 7, 6, 8, 6, 6, 5, 5, 6, 6, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 3, 7, 6, 6, 6, 7, 7, 6, 4, 6, 7, 5, 8, 8, 5, 6, 6, 6, 6, 6, 5, 6, 6, 5, 7, 6, 6, 6, 5, 5, 5, 5, 5, 7, 6, 5, 8, 6, 6, 7, 8, 7, 7, 5, 6, 5, 6, 5, 7, 7, 6, 6, 8, 6, 7, 5, 6, 6, 5, 8, 6, 8, 6, 6, 8, 6, 6, 8, 7, 6, 7, 8, 5, 8, 7, 8, 7, 6, 6, 6, 8, 7, 6, 7, 7, 6, 7, 7, 6, 6, 7, 7, 6, 5, 7, 7, 7, 6, 7, 5, 6, 6, 7, 6, 6, 6, 7, 7, 7, 5, 7, 5, 7, 5, 5, 6, 6, 6, 6, 4, 7, 5, 5, 6, 6, 5, 5, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 4, 6, 5, 6, 5, 6, 6, 6, 6, 7, 6, 6, 4, 6, 6, 6, 7, 5, 7, 4, 7, 5, 7, 6, 6, 7, 7, 7, 6, 6, 6, 7, 5, 7, 7, 7, 7, 7, 6, 7, 6, 6, 7, 6, 7, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 5, 7, 6, 7, 7, 6, 6, 7, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 7, 7, 7, 6, 6, 6, 6, 6, 7, 6, 7, 7, 5, 6, 4, 6, 6, 6, 6, 7, 7, 8, 7, 8, 8, 6, 4, 6, 8, 8, 7, 8, 5, 7, 6, 7, 8, 7, 5, 6, 7, 6, 5, 7, 6, 8, 7, 6, 7, 6, 5, 5, 6, 8, 7, 6, 7, 7, 5, 6, 7, 6, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 4, 6, 5, 6, 5, 5, 7, 5, 5, 7, 6, 6, 7, 7, 7, 5, 6, 6, 5, 6, 5, 6, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 5, 6, 5, 6, 7, 5, 5, 5, 8, 6, 5, 5, 5, 6, 6, 7, 5, 5, 8, 5, 5, 5, 6, 5, 4, 6, 6, 5, 5, 6, 5, 6, 7, 7, 5, 6, 6, 5, 6, 7, 5, 5, 5, 6, 5, 5, 6, 6, 5, 6, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 5, 6, 6, 3, 5, 5, 5, 5, 7, 5, 6, 6, 6, 5, 6, 6, 5, 7, 6, 6, 5, 6, 7, 7, 5, 5, 6, 5, 5, 6, 6, 5, 5, 6, 6, 6, 7, 6, 5, 6, 5, 6, 5, 6, 7, 6, 7, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 6, 4, 5, 5, 7, 5, 5, 5, 4, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 6, 6, 6, 7, 5, 5, 4, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 7, 6, 7, 7, 6, 5, 7, 6, 6, 5, 7, 5, 5, 5, 6, 5, 5, 5, 6, 6, 8, 4, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 6, 6, 7, 5, 5, 5, 5, 6, 7, 5, 6, 5, 5, 6, 6, 6, 5, 7, 7, 5, 4, 6, 4, 6, 6, 7, 6, 6, 4, 6, 7, 7, 6, 7, 6, 5, 7, 7, 6, 7, 6, 6, 6, 6, 6, 6, 5, 7, 7, 7, 5, 7, 7, 6, 6, 6, 5, 6, 6, 7, 6, 6, 5, 6, 6, 6, 7, 6, 6, 6, 5, 5, 6, 6, 5, 4, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 5, 6, 5, 6, 5, 5, 5, 4, 5, 5, 7, 7, 7, 7, 7, 6, 6, 6, 7, 6, 5, 7, 7, 6, 5, 6, 6, 6, 5, 5, 6, 5, 5, 8, 6, 5, 6, 6, 5, 6, 7, 5, 4, 6, 5, 6, 6, 6, 6, 6, 6, 5, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 5, 7, 7, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 8, 7, 5, 6, 6, 6, 7, 5, 5, 5, 5, 7, 6, 5, 5, 6, 6, 5, 6, 5, 6, 7, 6, 6, 6, 6, 6, 6, 7, 7, 6, 7, 5, 6, 6, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 8, 6, 7, 7, 5, 6, 5, 6, 7, 6, 6, 7, 5, 6, 6, 6, 7, 7, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 8, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 6, 7, 6, 6, 6, 6, 4, 4, 5, 5, 5, 4, 6, 5, 6, 6, 4, 4, 7, 5, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 7, 6, 6, 7, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 4, 5, 5, 5, 5, 6, 6, 6, 7, 6, 6, 6, 6, 7, 7, 6, 5, 6, 5, 6, 6, 6, 6, 7, 5, 4, 6, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 7, 6, 6, 6, 5, 6, 6, 7, 7, 5, 7, 7, 7, 5, 6, 7, 6, 6, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 7, 6, 5, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 5, 6, 5, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 5, 7, 6, 5, 7, 5, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 6, 6, 5, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 6, 6, 5, 5, 5, 7, 5, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 7, 5, 5, 6, 5, 4, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 5, 5, 6, 6, 7, 6, 6, 7, 7, 7, 5, 5, 5, 6, 6, 6, 7, 7, 6, 7, 7, 5, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 5, 6, 7, 4, 6, 5, 5, 5, 5, 7, 5, 7, 7, 5, 6, 7, 7, 6, 6, 5, 6, 6, 6, 7, 7, 7, 6, 6, 6, 6, 5, 6, 5, 6, 6, 6, 7, 6, 6, 7, 7, 7, 5, 5, 5, 7, 5, 7, 7, 7, 7, 7, 6, 6, 6, 5, 6, 7, 7, 6, 5, 7, 7, 5, 6, 5, 5, 7, 7, 6, 6, 7, 6, 5, 4, 6, 6, 6, 6, 5, 4, 6, 6, 6, 6, 7, 5, 6, 7, 7, 6, 7, 6, 5, 5, 6, 6, 7, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 6, 6, 5, 5, 3, 6, 6, 5, 6, 5, 6, 7, 6, 6, 6, 7, 7, 6, 6, 6, 6, 7, 7, 6, 8, 8, 7, 6, 6, 6, 6, 5, 7, 4, 6, 6, 6, 6, 4, 5, 5, 6, 6, 5, 7, 8, 8, 5, 6, 6, 6, 6, 6, 5, 7, 7, 6, 5, 6, 7, 7, 8, 7, 4, 6, 6, 6, 5, 6, 5, 6, 7, 5, 6, 7, 6, 6, 6, 6, 5, 6, 6, 7, 5, 6, 6, 6, 5, 7, 6, 6, 5, 6, 7, 6, 5, 6, 6, 4, 7, 6, 6, 5, 6, 5, 6, 7, 6, 5, 6, 5, 5, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 5, 6, 6, 6, 6, 6, 7, 6, 5, 6, 6, 6, 7, 5, 4, 6, 6, 6, 5, 6, 5, 6, 7, 7, 5, 6, 6, 6, 5, 6, 5, 6, 7, 6, 5, 5, 5, 6, 5, 5, 5, 7, 7, 5, 5, 5, 5, 5, 5, 5, 7, 5, 4, 6, 6, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 6, 7, 4, 5, 5, 4, 6, 5, 5, 4, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 7, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 4, 5, 5, 5, 6, 5, 4, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 4, 6, 5, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 6, 6, 6, 4, 5, 5, 5, 5, 5, 5, 5, 6, 5, 4, 6, 5, 5, 5, 5, 4, 6, 5, 4, 6, 6, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 7, 4, 7, 5, 5, 5, 6, 7, 7, 5, 5, 7, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 6, 4, 6, 6, 5, 6, 5, 7, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 7, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 7, 5, 4, 5, 5, 5, 7, 4, 8, 6, 6, 6, 6, 5, 5, 5, 6, 6, 6, 8, 7, 6, 7, 5, 7, 5, 5, 6, 6, 7, 5, 7, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 5, 5, 6, 5, 6, 7, 6, 7, 5, 5, 6, 6, 6, 7, 5, 6, 5, 6, 6, 6, 5, 7, 7, 6, 5, 6, 7, 6, 6, 6, 6, 6, 5, 7, 6, 6, 6, 6, 6, 5, 5, 6, 6, 5, 7, 7, 6, 5, 6, 5, 5, 7, 6, 7, 5, 5, 7, 5, 6, 6, 5, 6, 7, 6, 7, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 8, 6, 5, 5, 5, 7, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 7, 6, 4, 6, 5, 5, 7, 5, 5, 6, 5, 6, 5, 7, 7, 5, 7, 5, 7, 6, 6, 5, 6, 7, 5, 6, 5, 6, 5, 6, 6, 6, 5, 8, 6, 7, 7, 7, 6, 5, 5, 6, 6, 6, 6, 6, 7, 5, 8, 5, 5, 7, 3, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 6, 5, 6, 5, 5, 6, 5, 6, 5, 8, 5, 5, 6, 5, 5, 6, 7, 6, 6, 7, 7, 6, 6, 8, 6, 5, 8, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 7, 5, 6, 6, 7, 7, 5, 6, 3, 6, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 5, 6, 6, 6, 5, 6, 7, 5, 5, 6, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 5, 6, 6, 5, 5, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 4, 6, 6, 4, 5, 5, 6, 5, 5, 5, 7, 7, 6, 7, 5, 8, 7, 5, 6, 5, 5, 5, 5, 6, 6, 6, 6, 4, 6, 5, 6, 6, 6, 7, 6, 6, 6, 5, 5, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 4, 5, 5, 5, 5, 7, 6, 5, 5, 5, 5, 5, 7, 5, 4, 7, 6, 5, 5, 5, 6, 5, 5, 5, 7, 6, 4, 6, 5, 6, 6, 5, 5, 6, 6, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6, 4, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 6, 6, 5, 6, 6, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 5, 6, 6, 5, 5, 6, 5, 6, 5, 5, 6, 6, 5, 6, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 5, 5, 7, 6, 6, 5, 5, 7, 6, 6, 7, 7, 7, 5, 6, 5, 6, 5, 4, 6, 5, 6, 6, 5, 5, 5, 7, 5, 5, 5, 5, 7, 5, 8, 6, 4, 6, 3, 4, 5, 5, 7, 7, 7, 5, 7, 5, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 6, 7, 6, 7, 7, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 6, 6, 5, 4, 7, 7, 7, 4, 6, 6, 5, 5, 6, 6, 5, 6, 5, 6, 7, 6, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 3, 5, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 7, 6, 4, 5, 7, 5, 5, 6, 5, 5, 6, 6, 4, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 5, 6, 6, 7, 5, 6, 5, 5, 6, 6, 6, 7, 5, 6, 5, 6, 6, 7, 5, 7, 5, 5, 5, 7, 5, 6, 5, 6, 6, 5, 6, 7, 5, 5, 6, 5, 5, 6, 5, 5, 6, 7, 7, 6, 6, 7, 7, 7, 7, 5, 7, 7, 7, 7, 5, 7, 6, 5, 6, 6, 6, 7, 6, 6, 5, 6, 6, 5, 6, 7, 6, 6, 5, 6, 7, 7, 7, 5, 6, 6, 7, 7, 5, 7, 6, 5, 6, 6, 7, 6, 6, 6, 5, 6, 6, 5, 5, 5, 7, 6, 6, 7, 5, 7, 7, 6, 8, 6, 6, 6, 6, 7, 7, 7, 5, 7, 5, 6, 6, 5, 7, 6, 5, 5, 7, 6, 7, 6, 6, 6, 5, 7, 6, 7, 7, 8, 6, 6, 7, 6, 5, 6, 5, 7, 5, 6, 6, 6, 6, 6, 5, 6, 7, 5, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 5, 8, 6, 6, 6, 4, 7, 6, 6, 5, 6, 6, 5, 7, 7, 7, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 6, 6, 7, 6, 6, 7, 6, 5, 6, 6, 5, 7, 7, 6, 5, 7, 6, 7, 5, 5, 5, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 4, 7, 5, 6, 6, 5, 6, 5, 5, 6, 5, 6, 5, 4, 6, 5, 7, 5, 6, 6, 6, 6, 6, 6, 6, 7, 8, 5, 7, 7, 7, 5, 7, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 7, 5, 6, 5, 5, 4, 6, 4, 6, 6, 4, 4, 5, 5, 6, 5, 6, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 5, 4, 5, 4, 6, 6, 6, 6, 6, 8, 6, 6, 5, 5, 6, 6, 4, 6, 6, 7, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 6, 6, 4, 6, 5, 5, 6, 6, 3, 6, 6, 6, 5, 5, 5, 5, 4, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 6, 5, 7, 6, 6, 6, 6, 5, 6, 6, 5, 6, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 6, 4, 6, 5, 5, 6, 6, 4, 5, 6, 5, 5, 3, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 7, 6, 5, 5, 6, 8, 6, 7, 6, 6, 7, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 5, 5, 5, 6, 4, 6, 6, 6, 5, 5, 5, 5, 6, 6, 7, 6, 6, 5, 5, 5, 6, 7, 6, 5, 5, 6, 6, 5, 5, 5, 8, 7, 7, 7, 5, 6, 6, 6, 5, 5, 7, 6, 4, 6, 6, 5, 5, 7, 4, 7, 3, 5, 5, 6, 5, 5, 7, 5, 7, 3, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 6, 6, 5, 5, 5, 7, 6, 5, 6, 6, 6, 5, 5, 5, 6, 6, 3, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 6, 5, 7, 6, 6, 6, 5, 5, 6, 7, 6, 6, 7, 6, 5, 5, 5, 8, 5, 5, 6, 5, 6, 7, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 7, 6, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 5, 6], \"coloraxis\": \"coloraxis\", \"size\": [8.8, 9.5, 10.1, 9.9, 9.9, 10.1, 9.6, 8.8, 9.5, 11.0, 12.0, 9.7, 10.8, 12.4, 9.7, 11.4, 9.6, 12.8, 11.3, 9.5, 12.8, 11.0, 10.5, 9.3, 10.0, 10.4, 10.0, 10.5, 11.6, 12.3, 10.0, 10.2, 10.8, 9.0, 10.2, 12.8, 10.0, 11.2, 8.6, 8.6, 9.4, 9.4, 9.8, 9.5, 9.5, 10.0, 9.8, 9.8, 9.8, 9.8, 11.7, 11.0, 10.9, 10.9, 9.1, 11.0, 9.6, 8.9, 10.2, 9.9, 8.6, 8.9, 10.5, 10.2, 10.3, 9.1, 12.6, 9.8, 10.7, 9.5, 9.0, 9.5, 10.0, 9.1, 10.7, 9.5, 12.7, 12.0, 9.3, 9.0, 10.6, 9.2, 10.0, 9.5, 8.7, 8.7, 8.7, 9.7, 8.7, 8.7, 8.7, 9.0, 12.6, 12.6, 11.5, 9.2, 8.8, 11.4, 10.1, 8.8, 9.1, 9.4, 9.4, 9.0, 9.1, 9.2, 9.4, 9.1, 9.1, 10.3, 8.8, 8.9, 9.2, 9.1, 9.1, 9.7, 11.3, 11.8, 9.2, 9.2, 10.2, 8.8, 9.7, 9.1, 9.8, 11.0, 10.5, 9.7, 10.9, 10.9, 10.6, 9.7, 9.0, 9.2, 8.9, 9.6, 10.7, 8.7, 10.8, 11.8, 10.2, 8.7, 10.8, 9.7, 11.2, 10.9, 10.1, 9.0, 12.0, 9.4, 11.5, 9.9, 9.4, 10.4, 9.7, 8.9, 8.9, 12.4, 12.1, 12.1, 12.4, 9.1, 10.6, 8.9, 9.5, 9.8, 9.6, 12.6, 9.3, 10.0, 12.7, 11.0, 11.4, 11.5, 10.2, 11.4, 12.6, 9.4, 8.7, 9.2, 9.3, 9.2, 8.7, 9.6, 9.3, 9.3, 9.9, 11.0, 12.7, 8.9, 8.9, 8.7, 11.4, 9.6, 9.1, 9.1, 9.1, 8.9, 8.8, 8.9, 9.3, 8.8, 9.6, 12.0, 10.2, 8.8, 9.2, 9.9, 10.2, 9.5, 10.5, 11.2, 9.2, 9.7, 11.1, 9.4, 11.0, 9.4, 9.4, 11.0, 11.0, 9.1, 11.1, 9.1, 10.4, 8.7, 9.7, 9.1, 9.7, 8.7, 8.9, 9.6, 9.5, 9.0, 9.0, 9.0, 9.0, 9.6, 11.1, 9.6, 8.7, 10.4, 11.4, 9.7, 8.7, 11.3, 12.6, 10.9, 10.9, 10.0, 10.0, 9.8, 8.7, 11.7, 9.3, 9.6, 11.0, 11.0, 11.8, 11.4, 10.2, 8.9, 10.2, 9.6, 10.6, 8.9, 9.2, 9.7, 9.7, 9.7, 9.2, 9.7, 9.3, 9.0, 9.5, 9.8, 9.8, 10.6, 10.6, 12.4, 12.6, 12.3, 10.5, 9.3, 8.8, 8.8, 9.7, 9.0, 9.0, 9.0, 9.0, 10.5, 9.1, 9.8, 8.5, 9.4, 9.4, 11.2, 10.0, 10.3, 10.8, 10.5, 10.8, 11.1, 9.9, 9.9, 9.9, 9.9, 10.4, 10.4, 11.5, 12.5, 10.0, 10.0, 10.0, 9.1, 10.6, 10.5, 11.5, 10.1, 10.3, 10.5, 10.6, 10.4, 11.4, 10.5, 10.0, 10.0, 9.6, 10.4, 12.5, 10.6, 11.8, 9.8, 10.8, 11.8, 11.2, 9.3, 10.4, 10.2, 9.0, 10.0, 9.1, 10.0, 10.0, 9.6, 11.2, 8.8, 10.0, 10.0, 11.4, 11.9, 9.6, 11.9, 9.6, 9.0, 9.0, 9.5, 10.4, 10.6, 10.2, 8.9, 9.7, 9.0, 11.4, 12.3, 10.8, 9.4, 10.6, 11.6, 9.4, 10.6, 10.0, 9.2, 12.5, 12.5, 10.4, 10.0, 10.0, 10.4, 10.0, 9.0, 9.2, 9.2, 11.3, 12.5, 10.8, 10.1, 9.7, 9.3, 9.3, 10.6, 10.2, 12.2, 8.8, 10.0, 11.4, 11.4, 9.4, 11.7, 11.4, 8.8, 9.2, 8.7, 12.6, 10.0, 12.8, 9.4, 10.3, 11.4, 9.0, 9.6, 10.5, 10.5, 9.0, 9.6, 9.8, 9.0, 9.8, 10.5, 12.7, 10.4, 10.4, 10.4, 10.5, 10.4, 10.4, 9.4, 9.1, 9.3, 9.4, 9.8, 9.9, 9.2, 12.1, 12.2, 9.8, 12.4, 9.9, 9.2, 11.6, 10.4, 12.9, 9.3, 11.0, 11.5, 12.4, 9.8, 9.8, 10.5, 9.1, 10.1, 10.6, 10.5, 10.5, 9.8, 12.9, 9.5, 9.8, 8.5, 9.5, 9.3, 9.5, 9.4, 8.7, 8.9, 9.4, 9.4, 8.7, 9.6, 9.3, 10.0, 12.5, 9.6, 9.4, 9.5, 12.4, 10.5, 9.2, 10.4, 9.2, 10.6, 9.5, 9.2, 9.6, 9.7, 9.7, 10.7, 10.5, 8.9, 12.1, 12.7, 9.9, 11.4, 10.7, 12.5, 8.6, 12.5, 10.0, 8.6, 9.5, 9.6, 9.9, 9.9, 8.9, 8.9, 8.8, 10.0, 12.0, 10.0, 10.0, 12.1, 11.0, 11.2, 10.3, 10.4, 9.1, 10.4, 10.8, 11.7, 9.8, 9.8, 11.4, 11.2, 11.4, 9.2, 12.5, 12.6, 12.2, 11.2, 9.7, 9.3, 9.0, 9.0, 9.0, 9.1, 9.1, 9.0, 10.4, 9.5, 11.4, 8.7, 9.9, 9.9, 9.0, 10.0, 9.7, 11.8, 10.2, 8.7, 9.6, 11.3, 12.1, 9.6, 12.1, 11.3, 9.4, 10.4, 9.5, 12.3, 9.9, 10.1, 9.2, 10.4, 9.1, 10.0, 11.5, 9.8, 9.8, 9.4, 8.7, 11.6, 8.8, 12.7, 11.7, 10.2, 10.2, 12.7, 11.6, 12.3, 8.7, 9.4, 10.1, 9.7, 10.1, 9.7, 8.9, 10.8, 10.8, 9.5, 9.1, 10.9, 9.4, 10.8, 10.8, 10.5, 9.4, 10.8, 10.5, 11.5, 9.4, 10.8, 10.8, 10.8, 9.8, 9.8, 9.6, 9.6, 9.5, 10.7, 12.4, 11.1, 8.8, 8.7, 8.7, 8.8, 11.7, 10.9, 10.8, 9.6, 9.0, 9.0, 10.4, 11.4, 9.3, 11.0, 9.1, 9.4, 9.4, 10.5, 8.8, 8.8, 10.7, 9.5, 10.9, 10.8, 10.8, 9.2, 10.3, 10.3, 11.0, 9.0, 10.4, 9.5, 9.5, 9.0, 9.5, 9.0, 10.0, 9.1, 9.1, 9.1, 9.1, 9.5, 11.4, 12.2, 11.3, 10.2, 11.3, 10.0, 9.4, 12.2, 9.2, 9.4, 9.6, 9.5, 12.5, 9.6, 10.0, 9.3, 9.3, 11.6, 12.5, 10.6, 9.4, 9.1, 9.0, 11.8, 11.8, 11.8, 10.0, 9.7, 9.5, 9.4, 11.2, 9.0, 10.7, 9.0, 9.1, 10.8, 10.1, 9.9, 9.8, 9.8, 9.5, 9.5, 11.1, 9.5, 9.5, 9.4, 9.7, 13.9, 10.1, 10.5, 12.6, 10.9, 10.0, 11.2, 10.0, 9.2, 9.5, 12.3, 12.3, 10.0, 10.8, 10.5, 9.2, 9.1, 10.5, 10.2, 8.9, 10.4, 11.7, 12.4, 10.9, 10.2, 11.7, 9.4, 10.5, 9.4, 10.4, 9.5, 11.1, 9.1, 9.2, 9.6, 9.1, 9.2, 10.8, 9.6, 12.6, 11.0, 10.2, 9.4, 10.0, 12.2, 10.5, 11.5, 9.8, 11.4, 11.5, 10.2, 9.4, 10.5, 9.1, 12.2, 9.5, 9.3, 9.8, 9.8, 9.8, 9.8, 8.7, 10.2, 9.5, 11.0, 9.2, 10.9, 9.3, 9.3, 9.8, 9.3, 9.3, 9.4, 10.4, 12.1, 11.0, 9.0, 9.5, 8.8, 11.2, 9.3, 9.5, 8.8, 9.0, 9.3, 9.2, 9.2, 10.0, 9.3, 9.2, 10.9, 10.0, 10.9, 9.3, 9.0, 9.2, 9.6, 9.4, 11.1, 8.9, 9.3, 9.3, 9.8, 9.8, 8.9, 9.6, 9.6, 9.0, 9.5, 9.3, 9.2, 9.1, 9.5, 10.5, 9.0, 11.7, 9.1, 9.0, 9.1, 12.4, 9.2, 9.4, 9.6, 11.7, 9.8, 10.2, 12.5, 10.9, 11.0, 10.5, 11.5, 12.8, 12.2, 10.5, 12.8, 11.9, 11.9, 11.9, 12.0, 12.0, 8.8, 8.8, 10.8, 11.0, 11.0, 9.3, 10.8, 8.8, 11.5, 10.8, 9.4, 9.5, 8.6, 9.5, 10.3, 9.4, 9.4, 10.0, 9.4, 10.4, 9.1, 9.9, 12.1, 9.9, 12.5, 9.5, 8.5, 9.0, 10.1, 9.4, 8.6, 10.7, 9.6, 10.1, 10.0, 12.7, 10.2, 8.9, 11.9, 10.0, 9.9, 11.5, 11.5, 9.8, 12.2, 11.4, 11.0, 11.4, 11.0, 9.9, 11.0, 9.4, 12.2, 11.0, 10.3, 10.5, 10.5, 10.9, 10.5, 11.0, 9.7, 8.9, 9.6, 8.8, 11.1, 10.3, 12.2, 9.8, 8.8, 9.9, 9.9, 9.9, 9.2, 9.5, 9.2, 10.3, 11.0, 11.9, 10.2, 9.4, 8.9, 8.9, 10.0, 10.7, 9.8, 9.3, 9.5, 10.0, 9.0, 11.9, 8.9, 10.0, 9.6, 8.9, 8.9, 11.4, 9.0, 10.0, 9.6, 9.7, 9.5, 10.0, 12.2, 8.7, 10.2, 9.6, 10.0, 9.5, 11.5, 9.5, 9.8, 10.1, 10.0, 9.8, 9.5, 9.5, 10.2, 10.2, 9.0, 9.0, 12.3, 9.0, 11.6, 9.5, 11.5, 9.6, 9.0, 12.0, 11.4, 12.3, 12.6, 9.0, 12.0, 11.7, 9.2, 10.3, 8.6, 10.7, 9.8, 9.8, 10.7, 12.5, 11.9, 10.8, 10.5, 10.3, 10.3, 10.8, 12.0, 10.2, 10.2, 9.9, 10.1, 9.5, 10.5, 10.4, 9.5, 9.2, 10.1, 9.8, 9.4, 9.4, 10.4, 11.3, 10.8, 11.3, 9.3, 10.3, 10.5, 10.3, 11.2, 10.3, 9.5, 8.9, 10.2, 9.2, 10.3, 10.5, 9.5, 11.4, 11.4, 11.1, 10.5, 12.0, 9.7, 10.2, 9.5, 10.4, 9.3, 10.5, 10.0, 10.2, 10.2, 9.1, 10.2, 10.7, 9.7, 9.3, 11.0, 10.8, 10.7, 10.7, 8.8, 10.9, 10.5, 10.0, 10.4, 9.2, 12.6, 9.0, 9.2, 11.3, 10.3, 10.4, 10.0, 10.7, 9.0, 10.7, 8.7, 11.6, 9.4, 9.5, 9.5, 10.9, 9.7, 9.1, 11.1, 12.6, 11.0, 11.3, 9.7, 10.9, 10.9, 9.3, 12.7, 10.1, 10.0, 9.8, 10.1, 9.0, 9.4, 9.4, 9.2, 10.1, 8.6, 11.2, 11.2, 9.2, 10.6, 9.3, 8.9, 10.6, 10.6, 8.8, 11.0, 10.2, 10.1, 10.1, 14.0, 9.4, 11.8, 11.4, 10.7, 8.6, 11.5, 11.2, 12.6, 12.6, 9.3, 12.6, 12.1, 9.9, 10.7, 10.0, 10.4, 10.5, 9.7, 10.5, 9.0, 9.2, 10.1, 11.4, 10.8, 10.9, 9.2, 12.9, 12.0, 9.5, 11.8, 9.1, 9.7, 9.1, 10.0, 10.4, 9.5, 12.3, 11.7, 9.5, 11.5, 10.6, 10.2, 9.5, 10.5, 10.5, 8.9, 10.6, 9.5, 10.8, 9.5, 8.9, 8.9, 9.4, 10.6, 9.0, 10.5, 9.0, 9.0, 9.4, 9.0, 9.6, 9.0, 10.2, 9.4, 10.4, 10.4, 9.5, 10.6, 11.0, 9.6, 9.9, 9.6, 12.8, 11.4, 10.0, 9.1, 9.4, 10.2, 9.2, 9.4, 9.6, 10.1, 11.4, 10.6, 12.8, 8.9, 9.3, 11.1, 9.9, 9.6, 12.8, 10.7, 9.2, 9.1, 9.6, 9.2, 10.7, 9.1, 9.2, 10.7, 10.8, 10.8, 9.0, 10.7, 10.7, 9.4, 8.8, 9.0, 11.5, 12.5, 10.5, 9.7, 11.3, 10.7, 10.8, 10.6, 11.7, 9.2, 11.1, 11.7, 11.0, 12.5, 10.0, 10.6, 12.3, 12.7, 12.3, 10.5, 12.5, 12.4, 8.7, 12.4, 12.6, 11.0, 10.1, 10.5, 12.7, 10.9, 13.5, 9.7, 9.2, 10.6, 13.3, 13.5, 10.1, 9.4, 10.6, 11.3, 10.8, 10.4, 10.5, 9.3, 9.3, 12.2, 9.2, 10.3, 9.4, 10.2, 9.0, 9.3, 9.2, 9.4, 9.4, 9.5, 9.9, 11.1, 12.3, 8.6, 9.4, 9.4, 8.6, 10.9, 9.4, 10.9, 9.4, 9.2, 8.6, 9.4, 10.8, 10.5, 12.5, 12.1, 8.7, 12.7, 12.1, 12.5, 11.4, 12.9, 12.8, 11.2, 9.7, 9.7, 10.3, 11.6, 11.6, 9.7, 10.9, 12.6, 12.4, 11.5, 10.2, 11.4, 9.6, 10.3, 9.3, 10.7, 12.8, 9.5, 10.4, 10.3, 9.9, 10.7, 10.5, 9.6, 9.3, 10.0, 11.2, 10.8, 10.3, 8.8, 12.8, 13.2, 10.1, 11.0, 10.8, 12.8, 9.2, 10.5, 11.7, 9.5, 9.5, 8.8, 9.3, 12.6, 12.4, 10.1, 11.2, 10.0, 10.0, 10.8, 10.0, 10.4, 10.8, 9.8, 12.2, 12.7, 12.2, 11.9, 11.2, 10.4, 12.8, 12.7, 10.1, 10.0, 9.0, 11.4, 8.9, 9.3, 12.0, 10.8, 10.5, 10.6, 11.3, 9.5, 11.4, 10.1, 10.9, 8.9, 8.9, 9.3, 10.4, 12.0, 9.5, 9.5, 12.4, 11.2, 11.4, 11.4, 11.1, 10.4, 12.0, 12.3, 9.1, 10.5, 11.4, 9.5, 13.7, 13.4, 11.3, 10.0, 10.1, 12.2, 13.4, 9.3, 13.7, 12.3, 11.3, 8.9, 8.9, 11.5, 8.9, 9.3, 11.1, 10.9, 11.6, 10.2, 10.5, 11.4, 8.9, 10.6, 11.6, 11.5, 12.3, 10.8, 11.3, 9.3, 10.0, 11.0, 10.2, 10.8, 10.1, 11.6, 9.1, 10.0, 10.8, 11.4, 12.7, 11.3, 10.4, 9.6, 10.1, 9.6, 12.1, 12.2, 11.3, 9.6, 9.2, 10.4, 9.5, 8.9, 8.8, 10.5, 9.4, 12.2, 11.3, 12.2, 12.2, 11.2, 11.2, 11.5, 11.3, 9.3, 11.3, 11.8, 9.2, 9.2, 12.2, 12.2, 12.2, 10.6, 12.4, 10.8, 11.2, 11.0, 12.7, 10.2, 11.5, 12.3, 9.8, 9.3, 11.8, 11.3, 11.4, 10.8, 9.5, 10.2, 10.7, 10.8, 11.5, 10.7, 10.2, 10.1, 10.4, 9.5, 9.1, 10.6, 9.4, 9.8, 9.5, 9.3, 10.3, 11.1, 10.0, 12.3, 12.4, 12.3, 10.4, 12.1, 12.5, 13.0, 11.0, 10.1, 9.2, 12.6, 12.2, 9.8, 11.0, 10.0, 9.8, 10.5, 10.0, 11.2, 11.0, 11.2, 11.0, 10.5, 10.6, 10.6, 12.0, 10.1, 10.1, 9.2, 11.0, 10.0, 8.7, 8.7, 11.1, 11.0, 11.1, 8.7, 8.7, 11.2, 11.1, 10.8, 9.0, 10.3, 9.9, 10.0, 9.8, 10.8, 9.0, 9.1, 10.6, 10.6, 9.9, 10.6, 9.9, 9.9, 12.8, 10.3, 10.6, 8.7, 12.6, 11.0, 11.2, 10.7, 9.6, 10.6, 9.0, 10.5, 12.8, 10.1, 12.2, 12.8, 10.1, 10.1, 9.2, 9.9, 9.7, 9.9, 9.9, 9.7, 10.3, 10.3, 10.5, 10.5, 9.8, 10.6, 10.1, 9.0, 9.5, 11.5, 11.9, 10.1, 9.2, 8.7, 9.8, 9.2, 8.7, 11.2, 12.3, 10.4, 10.7, 10.5, 9.4, 9.2, 11.9, 9.2, 9.9, 11.4, 9.4, 10.7, 12.7, 13.5, 9.5, 12.9, 12.5, 9.5, 8.6, 10.0, 12.5, 10.1, 11.3, 10.6, 10.8, 10.7, 9.0, 9.2, 8.5, 11.3, 11.3, 9.4, 8.7, 9.4, 10.5, 9.7, 10.2, 9.4, 11.5, 9.6, 11.4, 11.5, 12.2, 11.0, 9.2, 10.2, 10.0, 9.7, 9.2, 10.5, 10.0, 10.1, 9.1, 10.2, 9.1, 10.5, 10.1, 12.1, 10.2, 9.4, 12.8, 9.0, 10.9, 8.8, 9.0, 10.2, 9.2, 11.3, 8.8, 9.3, 9.4, 10.3, 10.8, 8.8, 9.0, 11.5, 10.8, 11.8, 10.5, 9.9, 9.8, 11.4, 9.3, 9.3, 10.3, 8.9, 11.4, 11.1, 10.4, 10.1, 9.0, 11.9, 9.0, 9.0, 9.1, 9.0, 10.0, 9.1, 9.4, 11.4, 9.7, 9.0, 11.8, 10.2, 9.2, 11.0, 10.0, 12.2, 11.8, 11.6, 10.2, 10.3, 8.6, 9.6, 9.6, 11.3, 9.9, 9.6, 10.6, 9.8, 10.5, 10.8, 10.0, 10.1, 9.4, 11.5, 10.8, 9.9, 9.0, 9.4, 10.8, 10.9, 12.0, 11.5, 10.5, 9.3, 11.8, 10.0, 9.4, 11.4, 10.4, 9.5, 11.9, 11.1, 9.6, 12.0, 8.7, 9.6, 10.0, 11.4, 9.6, 12.9, 9.7, 9.3, 9.1, 8.6, 9.9, 9.3, 10.9, 10.2, 9.7, 11.4, 9.5, 10.2, 11.1, 9.7, 9.3, 8.8, 10.6, 9.3, 10.2, 10.2, 11.0, 9.6, 9.3, 8.8, 8.8, 8.9, 10.0, 12.2, 10.9, 9.5, 10.9, 10.9, 10.8, 12.0, 9.8, 9.5, 11.0, 11.0, 9.8, 10.5, 11.4, 10.1, 11.6, 11.4, 11.8, 12.1, 12.0, 12.1, 9.1, 9.3, 10.4, 9.1, 9.4, 9.6, 12.0, 11.3, 8.7, 9.9, 9.3, 9.5, 8.7, 9.9, 9.3, 9.4, 9.4, 8.8, 9.4, 8.8, 9.9, 9.4, 12.6, 11.1, 12.8, 12.0, 12.0, 9.2, 12.3, 13.0, 12.0, 10.9, 12.8, 10.0, 9.0, 10.4, 9.0, 10.0, 10.0, 11.3, 11.3, 12.0, 11.3, 12.0, 10.6, 9.3, 9.4, 11.0, 9.3, 9.4, 10.5, 11.0, 9.5, 11.2, 12.3, 9.0, 9.0, 9.0, 9.0, 11.4, 11.0, 12.3, 10.4, 10.3, 10.5, 9.8, 10.0, 9.7, 9.7, 9.8, 10.5, 10.0, 11.5, 9.5, 10.5, 10.2, 9.8, 11.6, 11.8, 10.1, 10.3, 10.4, 8.9, 8.9, 10.8, 9.2, 9.6, 10.4, 8.7, 9.2, 9.2, 9.2, 9.2, 9.2, 10.2, 9.2, 9.0, 9.7, 9.6, 10.0, 9.2, 9.1, 8.7, 8.7, 9.5, 9.5, 8.9, 8.9, 9.9, 12.6, 9.7, 10.4, 9.1, 10.4, 9.5, 8.9, 10.6, 12.0, 12.5, 9.6, 9.2, 9.9, 11.7, 9.6, 12.0, 12.5, 9.2, 9.9, 8.9, 9.0, 10.2, 9.6, 9.4, 10.4, 10.4, 10.0, 10.0, 10.5, 11.4, 10.2, 10.4, 11.0, 10.1, 9.2, 10.3, 10.2, 10.4, 11.1, 9.9, 9.0, 8.6, 9.0, 8.6, 9.5, 9.0, 10.0, 9.0, 9.0, 10.2, 9.6, 9.7, 10.2, 13.0, 10.8, 9.7, 9.0, 9.9, 9.2, 8.7, 10.1, 10.1, 9.5, 9.9, 8.7, 9.0, 8.6, 10.5, 9.5, 10.1, 11.7, 10.7, 11.7, 9.2, 8.8, 8.8, 9.5, 10.2, 9.1, 10.5, 9.0, 8.9, 8.9, 8.9, 8.9, 8.9, 9.1, 10.1, 10.0, 9.5, 12.3, 9.1, 8.9, 9.6, 11.6, 8.8, 8.9, 8.8, 8.9, 8.9, 9.0, 10.0, 10.0, 11.1, 11.6, 10.6, 8.8, 8.9, 10.1, 10.0, 12.2, 11.0, 10.0, 11.1, 10.4, 11.8, 10.8, 12.5, 11.8, 11.6, 10.4, 11.5, 10.1, 9.2, 10.1, 9.2, 8.9, 10.1, 8.9, 9.7, 9.2, 11.0, 10.7, 10.8, 9.8, 11.0, 10.4, 10.2, 10.7, 9.0, 10.6, 9.5, 9.0, 9.2, 11.0, 9.9, 10.6, 9.3, 9.6, 9.5, 9.7, 9.7, 8.7, 8.7, 12.4, 12.4, 10.6, 8.7, 12.0, 9.0, 8.8, 9.5, 10.8, 11.4, 10.3, 9.5, 9.9, 10.2, 10.2, 11.0, 12.1, 9.1, 9.5, 9.5, 9.8, 9.5, 10.3, 9.6, 10.2, 10.5, 10.4, 9.6, 10.7, 10.5, 10.6, 9.6, 9.6, 9.5, 9.4, 9.8, 9.6, 9.2, 9.5, 9.2, 9.4, 9.4, 9.3, 9.1, 9.5, 9.1, 10.6, 9.5, 12.4, 8.7, 8.8, 10.6, 9.1, 9.0, 10.3, 9.1, 9.5, 8.8, 8.8, 8.8, 9.9, 9.5, 8.8, 11.7, 10.8, 12.0, 10.3, 9.0, 12.2, 9.9, 9.0, 12.2, 10.1, 9.3, 9.5, 9.2, 11.7, 11.0, 9.6, 9.6, 11.9, 10.8, 10.1, 10.9, 10.1, 10.4, 9.2, 9.6, 9.6, 9.0, 11.5, 10.2, 9.9, 9.6, 10.6, 9.2, 11.8, 12.2, 9.6, 10.6, 10.3, 10.2, 10.7, 11.7, 12.0, 10.6, 12.2, 11.0, 12.4, 9.4, 12.0, 11.6, 9.4, 9.4, 9.1, 9.1, 9.1, 9.1, 9.1, 9.2, 9.2, 9.1, 9.1, 9.2, 9.0, 9.2, 10.8, 9.5, 11.0, 10.0, 9.5, 10.1, 9.5, 9.5, 9.5, 9.4, 9.4, 12.7, 9.7, 9.7, 9.4, 9.4, 9.5, 11.7, 11.7, 9.7, 9.5, 9.1, 10.3, 9.7, 9.9, 9.9, 10.2, 12.1, 11.3, 11.4, 12.2, 9.9, 10.3, 12.2, 10.4, 11.4, 9.9, 10.0, 11.5, 10.5, 12.5, 10.5, 9.9, 11.4, 9.8, 11.4, 9.2, 8.9, 8.9, 9.5, 11.5, 9.5, 11.5, 9.5, 9.7, 9.7, 9.5, 9.4, 9.0, 10.6, 9.5, 9.1, 9.4, 8.8, 10.4, 8.9, 10.6, 9.0, 10.6, 10.6, 9.0, 8.8, 10.5, 9.5, 9.0, 10.4, 10.0, 10.4, 9.0, 9.3, 9.0, 9.3, 9.0, 11.5, 9.0, 10.4, 9.0, 10.6, 10.4, 8.5, 9.3, 10.5, 9.9, 10.4, 10.1, 10.5, 9.2, 9.4, 10.6, 9.4, 8.7, 10.2, 10.3, 9.5, 9.5, 9.5, 9.5, 9.4, 9.4, 9.5, 12.6, 10.5, 10.8, 9.9, 12.6, 12.2, 10.0, 10.6, 9.5, 12.8, 12.2, 12.6, 9.4, 9.0, 9.1, 9.4, 12.2, 10.0, 9.2, 9.3, 9.8, 9.2, 12.0, 9.3, 12.6, 12.2, 11.0, 12.0, 8.8, 8.9, 12.7, 11.8, 10.2, 9.9, 11.1, 9.4, 9.7, 9.7, 9.7, 9.7, 9.8, 9.3, 10.5, 9.3, 12.6, 8.9, 10.3, 10.6, 9.0, 9.7, 9.5, 10.3, 9.7, 12.3, 10.5, 9.5, 10.0, 8.8, 10.9, 12.2, 9.5, 10.0, 9.6, 8.7, 10.7, 11.1, 12.5, 10.4, 11.5, 9.4, 9.3, 10.1, 9.7, 10.5, 9.7, 9.2, 9.8, 9.0, 9.1, 10.4, 10.7, 10.5, 9.2, 11.5, 10.4, 12.0, 12.2, 12.0, 9.8, 9.3, 9.6, 9.5, 10.2, 10.4, 11.0, 10.4, 8.7, 9.9, 9.9, 11.3, 12.0, 10.7, 10.1, 9.6, 9.6, 8.7, 10.3, 9.1, 11.8, 11.9, 10.3, 10.0, 10.2, 10.0, 12.7, 9.6, 9.5, 12.7, 11.0, 9.1, 10.2, 10.1, 9.2, 9.4, 10.2, 9.2, 10.0, 10.1, 9.0, 9.5, 9.1, 13.3, 9.5, 9.2, 10.1, 9.2, 10.1, 11.2, 9.8, 11.2, 9.8, 9.4, 9.0, 9.4, 8.9, 9.1, 9.8, 9.4, 10.0, 9.4, 9.9, 10.0, 11.5, 9.2, 10.0, 9.2, 10.0, 10.0, 9.8, 10.5, 10.6, 9.4, 9.4, 11.0, 10.8, 9.0, 9.6, 10.6, 10.6, 9.6, 9.2, 9.2, 9.5, 9.5, 10.3, 8.8, 8.7, 8.7, 10.2, 10.1, 9.5, 9.5, 11.6, 10.7, 10.1, 11.1, 9.8, 9.0, 11.1, 9.5, 9.4, 10.2, 9.8, 9.5, 9.5, 9.0, 10.1, 8.8, 11.9, 11.9, 9.3, 10.0, 9.5, 9.3, 9.7, 9.7, 10.2, 10.8, 8.8, 8.8, 11.4, 8.8, 9.8, 9.4, 9.4, 9.4, 9.4, 9.7, 12.3, 9.8, 9.0, 9.2, 9.4, 9.9, 9.8, 12.3, 11.9, 10.2, 9.5, 11.9, 9.2, 9.7, 11.5, 10.4, 11.6, 9.7, 10.4, 11.5, 10.2, 9.8, 9.0, 10.5, 9.4, 9.4, 10.8, 10.7, 10.6, 9.2, 9.5, 9.5, 10.0, 10.6, 10.6, 10.6, 9.2, 11.0, 11.2, 9.6, 9.4, 9.5, 9.3, 9.4, 9.5, 9.4, 11.2, 11.2, 11.2, 8.8, 11.2, 11.2, 9.4, 11.1, 9.6, 11.1, 9.4, 10.6, 8.9, 12.3, 11.4, 9.6, 10.3, 11.4, 12.1, 9.9, 9.7, 10.5, 8.9, 9.4, 9.6, 12.6, 9.2, 10.4, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.2, 9.0, 9.7, 10.1, 11.0, 10.8, 10.8, 13.5, 10.6, 9.8, 11.7, 9.8, 9.0, 11.3, 9.4, 11.7, 11.3, 11.3, 12.0, 10.6, 10.8, 10.8, 12.0, 9.4, 9.4, 11.3, 9.4, 12.0, 10.3, 10.3, 10.3, 11.3, 9.4, 8.7, 9.4, 11.3, 10.3, 12.0, 8.0, 10.4, 10.7, 10.2, 10.9, 10.5, 11.7, 8.6, 9.0, 8.7, 12.8, 9.0, 8.7, 11.8, 11.6, 11.8, 10.6, 9.7, 10.3, 10.2, 10.1, 10.9, 9.3, 10.2, 10.2, 9.5, 9.3, 12.9, 8.7, 9.4, 10.1, 10.0, 11.1, 10.3, 12.2, 9.3, 11.3, 10.8, 11.2, 12.5, 9.3, 12.9, 11.2, 12.6, 9.3, 12.9, 12.9, 9.5, 11.9, 10.3, 10.3, 11.2, 12.0, 9.6, 9.2, 12.9, 9.3, 12.1, 9.6, 11.2, 11.2, 12.9, 9.2, 9.3, 9.2, 9.3, 10.7, 9.8, 10.3, 10.7, 11.3, 8.8, 10.8, 9.8, 9.3, 11.5, 8.8, 8.8, 8.8, 9.4, 9.4, 9.6, 8.8, 9.3, 8.9, 8.9, 10.0, 9.1, 9.3, 9.4, 10.1, 8.9, 10.8, 10.0, 10.9, 12.0, 9.3, 12.3, 10.4, 10.9, 10.5, 9.8, 10.5, 9.9, 11.4, 9.2, 9.7, 10.0, 11.4, 10.3, 9.9, 10.5, 9.8, 9.3, 12.4, 9.3, 9.3, 9.5, 10.5, 10.5, 12.8, 10.8, 10.0, 11.8, 10.0, 11.8, 12.0, 12.6, 11.9, 10.6, 9.2, 10.0, 9.2, 9.3, 10.2, 10.2, 8.7, 10.7, 12.1, 9.5, 11.2, 12.0, 9.5, 12.1, 10.7, 8.8, 10.8, 13.1, 12.5, 11.7, 11.7, 11.6, 11.3, 12.5, 11.4, 12.2, 11.7, 10.4, 10.4, 10.4, 9.1, 12.2, 9.1, 9.4, 9.4, 10.4, 9.2, 9.4, 13.5, 9.4, 10.9, 13.5, 9.4, 11.4, 12.4, 9.2, 9.4, 10.5, 11.5, 10.9, 10.8, 8.9, 8.9, 9.4, 12.2, 12.1, 10.9, 10.1, 12.2, 13.0, 11.0, 10.8, 13.0, 9.3, 11.4, 9.2, 9.9, 10.5, 12.4, 9.5, 10.5, 9.1, 11.5, 11.5, 11.2, 10.8, 9.4, 11.0, 11.3, 11.2, 10.5, 9.1, 10.4, 11.2, 11.1, 11.2, 10.5, 10.0, 10.0, 10.9, 10.9, 11.2, 11.7, 10.0, 9.5, 9.0, 10.0, 11.9, 10.6, 11.0, 11.2, 12.0, 12.6, 11.2, 10.5, 10.2, 11.0, 12.2, 12.3, 10.6, 10.4, 12.0, 12.7, 10.6, 12.3, 12.7, 11.4, 12.0, 12.4, 12.1, 11.4, 10.7, 9.3, 12.7, 11.7, 10.7, 11.8, 9.9, 13.4, 12.8, 12.8, 10.5, 11.5, 10.5, 13.0, 12.4, 10.2, 9.0, 12.0, 11.7, 10.0, 10.3, 9.0, 11.1, 9.0, 10.5, 11.9, 9.4, 11.4, 10.8, 9.8, 9.3, 11.4, 11.3, 11.3, 9.5, 9.4, 11.9, 9.3, 11.4, 11.4, 12.7, 13.5, 11.2, 10.7, 10.8, 10.5, 13.0, 10.8, 9.1, 10.1, 11.9, 12.0, 12.0, 9.1, 11.6, 11.9, 10.2, 10.8, 9.8, 11.4, 9.8, 10.1, 9.8, 9.8, 10.7, 10.6, 9.3, 9.8, 10.7, 14.0, 11.0, 11.0, 9.4, 9.0, 9.0, 10.0, 9.0, 9.0, 12.4, 11.3, 12.0, 11.7, 10.0, 13.2, 11.0, 11.0, 9.2, 13.0, 10.6, 13.0, 9.0, 9.0, 11.5, 11.0, 11.5, 9.9, 10.4, 9.0, 9.9, 11.0, 12.1, 9.7, 9.7, 12.2, 12.4, 10.5, 10.4, 12.0, 12.7, 10.9, 10.9, 10.9, 11.4, 11.0, 12.6, 11.6, 10.5, 10.9, 10.9, 12.5, 12.1, 11.3, 13.3, 10.9, 10.9, 10.5, 11.6, 11.4, 11.0, 12.1, 11.0, 12.6, 13.0, 8.8, 9.5, 11.8, 12.2, 10.7, 11.0, 11.4, 10.7, 12.0, 11.9, 11.4, 11.8, 10.6, 9.7, 11.0, 10.7, 11.0, 10.5, 10.4, 10.5, 12.0, 12.0, 9.2, 10.9, 9.5, 9.4, 11.3, 10.4, 9.4, 11.3, 8.8, 10.8, 9.4, 9.4, 9.2, 10.3, 9.9, 12.4, 11.9, 11.7, 9.4, 9.6, 9.4, 10.4, 9.5, 11.9, 12.5, 13.4, 12.7, 9.1, 10.5, 10.4, 10.4, 12.5, 10.4, 9.0, 9.8, 9.0, 10.7, 12.4, 12.5, 12.5, 12.1, 11.3, 12.0, 10.4, 12.2, 8.6, 9.1, 12.1, 12.0, 10.5, 10.4, 11.9, 13.7, 11.3, 10.5, 13.7, 10.1, 12.3, 12.0, 11.3, 9.5, 11.4, 11.9, 10.0, 10.0, 11.3, 11.7, 11.0, 12.2, 10.7, 10.9, 10.2, 11.9, 11.1, 11.2, 11.4, 10.6, 10.3, 10.4, 11.9, 11.9, 10.4, 9.2, 11.3, 11.3, 11.0, 11.9, 12.9, 10.8, 9.1, 10.4, 12.9, 12.2, 9.2, 10.3, 11.0, 11.0, 11.7, 12.0, 12.7, 8.8, 11.3, 12.8, 11.2, 8.9, 11.2, 11.1, 10.8, 9.3, 8.9, 12.7, 12.0, 11.2, 8.8, 8.8, 8.8, 10.4, 8.8, 10.4, 14.0, 8.8, 13.1, 12.3, 12.6, 12.0, 9.5, 12.0, 12.7, 10.5, 12.9, 9.5, 12.0, 12.7, 11.9, 12.0, 12.5, 12.1, 12.5, 9.9, 10.7, 12.0, 12.2, 12.4, 12.4, 10.3, 12.0, 10.5, 9.5, 10.5, 12.3, 11.9, 9.8, 12.3, 11.4, 11.0, 10.8, 12.8, 11.0, 10.2, 12.5, 11.6, 11.9, 9.8, 11.0, 10.9, 11.0, 12.5, 11.0, 12.0, 12.4, 12.5, 12.8, 11.0, 9.1, 12.4, 12.9, 10.9, 10.8, 10.6, 9.0, 12.0, 11.8, 10.6, 12.3, 11.5, 11.1, 9.0, 9.9, 12.8, 12.9, 12.9, 12.0, 12.0, 11.2, 13.3, 9.9, 9.5, 9.4, 11.0, 9.4, 11.5, 12.5, 11.9, 10.4, 11.2, 12.5, 11.0, 9.8, 12.3, 11.0, 12.6, 11.6, 12.3, 13.4, 9.8, 11.5, 11.6, 11.1, 11.0, 11.3, 9.9, 12.6, 11.8, 11.4, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 13.0, 9.3, 12.6, 9.6, 8.0, 11.8, 10.2, 12.7, 9.4, 10.2, 12.0, 11.3, 11.8, 10.9, 9.8, 12.2, 11.1, 9.4, 11.4, 10.2, 12.8, 10.1, 9.4, 12.2, 10.9, 10.9, 10.9, 9.4, 9.4, 11.4, 12.9, 9.4, 12.0, 10.1, 9.4, 9.4, 9.2, 11.8, 12.3, 11.4, 12.9, 12.3, 13.5, 12.8, 12.8, 12.8, 11.0, 10.6, 12.4, 12.9, 11.1, 12.9, 11.8, 9.1, 12.7, 12.0, 11.2, 12.4, 10.4, 10.4, 12.7, 12.5, 12.0, 11.6, 12.6, 10.2, 10.4, 11.5, 11.0, 10.1, 10.5, 12.1, 9.9, 11.4, 9.5, 9.5, 9.5, 10.9, 9.5, 12.6, 9.5, 11.1, 9.5, 9.5, 10.6, 10.6, 10.8, 10.9, 9.9, 11.3, 12.6, 12.5, 12.4, 11.8, 12.2, 10.7, 11.3, 12.5, 12.4, 11.3, 9.9, 11.3, 12.6, 11.5, 12.3, 12.2, 13.2, 10.2, 11.5, 13.2, 12.2, 11.0, 13.2, 9.5, 10.2, 10.2, 11.4, 12.5, 9.2, 12.1, 10.7, 12.1, 11.2, 10.6, 11.8, 12.5, 9.2, 12.6, 12.8, 12.3, 12.3, 12.4, 12.3, 9.1, 9.1, 10.6, 10.3, 9.5, 11.1, 10.8, 11.2, 10.8, 11.4, 11.2, 10.2, 11.1, 9.5, 10.2, 11.0, 11.5, 9.8, 10.1, 8.8, 11.5, 12.7, 9.8, 12.9, 9.8, 12.7, 8.5, 12.7, 13.1, 9.1, 12.5, 9.1, 9.1, 11.2, 12.5, 9.1, 9.1, 9.1, 11.5, 12.9, 12.5, 12.3, 11.4, 9.4, 9.1, 9.4, 12.0, 11.1, 11.8, 11.4, 9.1, 12.1, 10.4, 9.2, 13.0, 12.1, 11.5, 11.5, 10.0, 11.1, 12.4, 12.2, 10.6, 11.1, 13.9, 9.2, 10.5, 11.3, 12.9, 12.9, 9.6, 12.9, 12.9, 8.8, 13.2, 9.2, 11.3, 10.5, 10.5, 12.6, 9.5, 9.8, 13.4, 11.8, 9.8, 13.1, 12.6, 10.4, 13.4, 13.0, 13.4, 10.2, 11.7, 9.5, 11.7, 11.4, 11.8, 11.2, 13.0, 13.0, 10.9, 11.6, 11.3, 12.0, 10.5, 13.1, 13.0, 10.9, 9.1, 13.4, 11.5, 11.2, 10.9, 13.5, 9.1, 9.9, 10.5, 11.7, 11.0, 13.0, 13.6, 12.3, 13.3, 13.7, 11.1, 13.4, 9.1, 11.3, 9.4, 9.1, 11.6, 11.6, 12.4, 9.8, 11.1, 13.1, 9.7, 9.2, 11.7, 10.6, 9.7, 9.2, 10.9, 10.1, 12.2, 12.7, 13.0, 11.2, 9.4, 11.0, 11.0, 9.2, 9.4, 9.2, 12.3, 11.0, 10.0, 9.0, 9.0, 9.0, 11.1, 9.9, 12.2, 11.1, 9.0, 11.8, 12.9, 9.0, 12.4, 9.0, 12.9, 11.2, 12.6, 11.5, 11.3, 11.2, 11.5, 10.5, 12.6, 11.9, 10.1, 11.0, 10.6, 11.3, 11.2, 11.5, 11.1, 12.8, 12.3, 10.4, 11.5, 11.7, 10.7, 9.5, 9.5, 9.5, 12.0, 10.8, 10.7, 10.7, 10.7, 12.1, 11.9, 10.8, 12.3, 9.4, 9.9, 10.4, 10.4, 12.6, 12.5, 9.4, 9.2, 11.2, 9.2, 9.2, 9.4, 11.2, 10.8, 9.2, 9.2, 12.5, 9.3, 11.4, 10.0, 10.6, 10.7, 10.0, 12.5, 10.6, 12.8, 9.3, 11.4, 9.5, 9.5, 9.5, 10.8, 10.8, 8.8, 10.8, 11.0, 12.4, 11.3, 11.2, 12.5, 10.0, 11.0, 10.5, 10.5, 11.0, 11.4, 11.3, 12.2, 12.6, 11.1, 12.3, 10.4, 8.8, 9.5, 8.8, 10.4, 13.0, 12.2, 10.5, 10.8, 13.2, 13.0, 10.0, 10.4, 12.4, 12.9, 13.2, 10.5, 13.0, 11.2, 12.7, 9.4, 12.9, 13.0, 13.6, 9.1, 10.4, 13.6, 12.2, 8.7, 10.5, 10.2, 12.5, 11.3, 10.2, 12.6, 10.2, 9.8, 10.8, 12.5, 12.5, 11.5, 11.4, 10.5, 12.6, 8.7, 11.0, 11.3, 10.2, 11.6, 9.8, 10.1, 9.2, 9.1, 9.1, 9.1, 9.1, 11.7, 12.6, 9.0, 10.1, 13.6, 9.1, 9.2, 8.8, 10.0, 9.1, 11.2, 9.2, 9.2, 9.5, 11.9, 9.8, 9.8, 10.8, 11.3, 12.1, 11.3, 10.8, 13.5, 10.3, 9.0, 11.6, 10.3, 12.5, 8.6, 13.4, 12.7, 9.2, 10.2, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.9, 9.0, 9.0, 11.0, 9.0, 10.0, 10.7, 10.7, 13.4, 11.0, 10.0, 10.7, 10.7, 11.0, 11.0, 11.1, 10.9, 11.5, 13.4, 9.4, 9.4, 9.4, 10.6, 9.4, 12.0, 10.2, 10.6, 13.5, 9.7, 12.2, 12.3, 12.2, 11.4, 12.7, 9.7, 10.8, 11.0, 9.5, 10.1, 13.2, 8.8, 9.5, 9.5, 9.5, 9.5, 9.5, 10.4, 9.9, 10.0, 10.1, 9.4, 9.3, 10.9, 11.4, 10.3, 11.0, 10.9, 10.8, 10.3, 11.0, 9.3, 10.2, 10.2, 10.8, 10.5, 11.1, 10.9, 11.4, 10.3, 12.9, 9.9, 11.3, 11.5, 11.5, 10.7, 10.4, 12.5, 9.5, 11.3, 13.0, 11.5, 11.5, 11.3, 13.2, 11.5, 9.6, 9.6, 9.7, 9.2, 8.4, 12.4, 12.4, 9.2, 8.4, 11.7, 11.0, 11.9, 13.2, 11.7, 9.1, 12.6, 9.1, 10.5, 10.6, 12.6, 13.7, 12.0, 12.5, 12.1, 11.3, 12.0, 10.3, 12.7, 9.2, 9.2, 9.5, 10.1, 10.1, 13.0, 13.1, 11.0, 9.2, 9.4, 9.5, 10.2, 10.1, 8.6, 9.0, 9.6, 9.9, 10.5, 11.4, 9.4, 11.1, 8.9, 8.9, 10.8, 12.2, 8.9, 12.5, 12.2, 12.5, 8.9, 10.8, 11.4, 10.8, 10.6, 9.2, 12.2, 12.3, 10.4, 10.4, 11.0, 10.6, 9.2, 13.5, 11.4, 11.5, 14.0, 12.5, 12.5, 12.8, 11.2, 11.2, 13.6, 9.2, 12.5, 11.1, 11.2, 14.0, 13.6, 9.4, 14.2, 13.2, 11.2, 10.2, 12.8, 10.1, 10.1, 10.3, 9.9, 11.5, 9.0, 9.0, 12.1, 13.3, 11.5, 11.0, 10.7, 9.4, 10.3, 9.3, 12.0, 11.0, 9.3, 10.1, 11.1, 9.9, 11.0, 11.0, 12.5, 12.7, 9.3, 9.3, 10.1, 8.8, 11.2, 10.8, 8.8, 11.2, 10.3, 12.0, 9.5, 9.5, 9.8, 9.0, 13.0, 11.8, 8.8, 11.2, 9.5, 9.4, 9.5, 10.4, 9.8, 10.4, 10.3, 9.4, 9.5, 11.9, 12.8, 13.0, 10.4, 10.4, 10.7, 10.7, 11.9, 10.4, 12.8, 9.9, 9.9, 9.4, 11.4, 9.9, 9.4, 9.2, 10.5, 11.0, 11.0, 12.1, 11.0, 12.8, 10.5, 10.5, 10.5, 9.5, 9.2, 11.1, 12.3, 11.1, 12.6, 9.5, 9.2, 10.8, 11.3, 12.8, 10.5, 9.8, 8.5, 9.3, 9.2, 11.4, 8.5, 9.3, 8.4, 9.2, 9.2, 10.4, 11.6, 12.4, 10.4, 9.3, 12.2, 11.0, 11.4, 9.5, 9.2, 11.1, 9.2, 11.0, 9.9, 9.9, 9.5, 12.4, 9.4, 9.3, 8.7, 8.7, 8.7, 8.7, 9.0, 10.7, 10.7, 11.3, 8.7, 11.7, 9.3, 8.7, 9.0, 11.7, 10.7, 11.4, 10.7, 11.3, 10.0, 10.0, 11.2, 9.7, 12.5, 12.9, 11.8, 10.6, 11.8, 10.7, 9.9, 12.0, 10.4, 8.5, 9.9, 9.4, 10.4, 11.0, 11.0, 10.4, 9.8, 9.4, 10.6, 10.1, 11.5, 11.4, 9.2, 9.7, 11.3, 9.6, 8.9, 10.0, 9.2, 9.0, 12.8, 9.0, 9.5, 10.0, 11.0, 9.2, 10.6, 10.0, 10.0, 11.7, 12.5, 11.1, 9.7, 12.3, 12.2, 11.3, 11.6, 11.3, 11.1, 11.2, 11.3, 12.0, 8.8, 8.8, 12.0, 12.0, 9.0, 9.3, 8.7, 12.8, 11.5, 10.0, 10.0, 10.3, 10.4, 13.4, 11.2, 9.1, 9.1, 10.8, 12.5, 11.3, 12.8, 9.1, 12.7, 11.0, 10.4, 10.4, 10.7, 10.9, 10.4, 10.4, 9.7, 11.0, 9.6, 13.9, 9.4, 12.5, 9.6, 9.5, 9.6, 9.5, 9.6, 8.7, 8.7, 8.7, 8.7, 8.7, 8.7, 10.4, 10.7, 12.0, 12.1, 13.1, 12.4, 12.6, 8.7, 12.0, 11.6, 9.3, 9.3, 11.1, 10.2, 10.6, 11.3, 9.4, 9.3, 11.1, 9.9, 11.8, 12.6, 9.4, 10.5, 12.3, 11.3, 9.6, 12.0, 11.2, 10.2, 12.4, 10.2, 13.4, 12.6, 9.8, 9.1, 12.4, 12.5, 11.7, 12.9, 10.1, 10.3, 11.7, 10.3, 10.8, 11.2, 11.8, 9.8, 10.0, 8.8, 10.1, 9.5, 9.5, 9.5, 9.2, 12.2, 9.5, 11.3, 12.1, 9.2, 11.2, 12.5, 10.6, 10.4, 10.1, 9.9, 11.0, 10.0, 12.7, 12.1, 10.4, 10.4, 9.2, 9.2, 10.5, 9.2, 11.9, 10.1, 11.1, 10.8, 11.8, 9.2, 9.2, 12.3, 10.1, 11.4, 10.4, 9.8, 9.9, 9.8, 11.2, 10.9, 9.2, 9.2, 12.0, 12.1, 12.4, 11.2, 12.7, 12.2, 12.2, 12.2, 11.2, 12.7, 12.7, 12.1, 9.4, 10.1, 9.4, 8.9, 8.9, 8.9, 8.9, 13.0, 10.3, 10.1, 10.5, 8.9, 10.1, 10.1, 11.0, 11.0, 11.0, 11.0, 10.0, 10.5, 9.7, 10.1, 9.4, 11.2, 9.4, 10.8, 9.4, 11.2, 11.0, 12.4, 9.4, 9.4, 9.5, 10.0, 12.5, 10.9, 10.5, 10.8, 11.0, 11.8, 12.6, 10.2, 12.0, 12.5, 11.5, 11.94, 12.89333333, 9.4, 12.2, 11.94, 12.89333333, 9.5, 10.6, 10.5, 11.46666667, 11.4, 9.5, 9.2, 9.5, 10.98, 9.4, 9.5, 9.2, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 10.4, 8.8, 10.03333333, 11.3, 10.4, 9.2, 11.1, 9.2, 11.3, 9.1, 9.4, 13.2, 12.7, 10.7, 11.43333333, 11.1, 12.7, 10.53333333, 11.6, 9.533333333, 9.8, 10.7, 12.0, 12.8, 9.5, 10.93333333, 9.1, 12.6, 9.5, 10.9, 10.93333333, 9.6, 9.3, 11.36666667, 12.5, 9.5, 11.0, 9.4, 11.33333333, 8.8, 9.4, 11.06666667, 12.2, 11.0, 11.33333333, 9.5, 9.5, 11.0, 11.2, 9.3, 10.8, 9.2, 9.4, 9.2, 10.5, 10.8, 9.4, 9.8, 9.8, 9.8, 9.4, 9.8, 12.1, 12.3, 9.733333333, 9.4, 9.4, 12.8, 11.05, 9.4, 12.8, 9.733333333, 13.1, 11.5, 13.1, 11.5, 9.1, 9.75, 10.5, 8.8, 8.8, 8.8, 8.8, 10.5, 10.5, 8.8, 9.9, 9.9, 9.9, 12.2, 10.8, 8.7, 13.2, 12.7, 9.4, 11.2, 11.33333333, 11.9, 11.35, 10.5, 9.8, 9.1, 12.4, 9.1, 9.8, 11.3, 11.3, 13.1, 12.5, 10.3, 10.7, 10.4, 9.5, 9.8, 12.5, 9.4, 9.0, 9.0, 9.0, 13.0, 9.9, 9.4, 10.6, 13.4, 12.5, 9.3, 9.3, 11.0, 10.3, 11.3, 10.9, 11.3, 12.1, 11.1, 9.8, 10.1, 12.4, 12.7, 9.6, 9.6, 9.1, 12.8, 9.6, 12.4, 9.55, 9.1, 12.5, 9.9, 11.2, 13.0, 13.0, 11.7, 13.1, 12.0, 10.55, 11.45, 10.2, 11.45, 9.3, 10.8, 12.2, 11.0, 10.4, 11.4, 14.05, 10.7, 10.2, 11.2, 12.33333333, 11.5, 9.5, 13.4, 12.5, 12.5, 11.2, 8.8, 11.2, 12.7, 9.8, 9.8, 11.7, 9.8, 9.6, 9.8, 9.7, 10.0, 11.7, 12.3, 9.8, 9.0, 9.1, 9.1, 9.1, 11.4, 10.5, 12.4, 9.1, 9.1, 10.1, 10.9, 11.05, 12.75, 12.7, 11.1, 11.1, 12.75, 13.0, 12.0, 11.5, 10.5, 11.1, 11.1, 11.1, 13.1, 12.75, 12.7, 9.6, 11.7, 9.7, 10.9, 10.7, 13.8, 12.15, 10.8, 10.7, 10.8, 10.8, 12.0, 10.8, 12.2, 9.4, 11.4, 12.5, 13.05, 12.4, 12.9, 12.0, 11.3, 10.0, 11.8, 9.4, 8.8, 11.1, 10.5, 9.3, 11.4, 11.8, 12.4, 11.6, 11.1, 12.4, 11.1, 11.0, 12.2, 11.0, 12.9, 10.9, 13.4, 10.7, 11.0, 11.4, 10.2, 11.0, 9.1, 11.0, 11.5, 12.0, 11.2, 11.2, 12.6, 11.0, 10.8, 10.9, 9.8, 9.8, 9.5, 11.26666667, 10.8, 13.4, 11.3, 8.9, 11.2, 11.5, 13.0, 12.6, 13.1, 11.2, 11.7, 10.9, 10.9, 11.6, 10.4, 10.9, 11.7, 10.8, 11.2, 10.0, 10.56666667, 11.73333333, 10.6, 10.5, 11.75, 11.4, 12.4, 10.1, 12.3, 13.1, 10.65, 11.4, 9.3, 10.2, 10.2, 13.1, 9.6, 12.8, 10.96666667, 10.96666667, 10.96666667, 11.0, 13.4, 11.2, 12.4, 11.2, 12.4, 10.13333333, 10.13333333, 12.4, 9.1, 10.15, 10.15, 11.5, 8.9, 10.46666667, 10.46666667, 11.8, 11.63333333, 10.6, 9.6, 11.8, 8.9, 10.5, 10.2, 13.1, 11.8, 12.2, 11.45, 10.5, 10.2, 9.0, 9.0, 9.0, 9.0, 9.1, 8.8, 9.0, 9.1, 12.9, 13.0, 12.9, 9.2, 9.8, 9.8, 10.1, 10.1, 10.9, 9.6, 10.4, 11.8, 10.8, 10.6, 12.7, 12.2, 10.8, 10.4, 11.1, 11.8, 10.0, 10.8, 10.3, 9.9, 10.0, 12.25, 10.2, 9.4, 9.7, 10.2, 10.4, 12.2, 9.4, 10.6, 10.7, 11.85, 11.7, 11.7, 10.15, 11.63333333, 10.8, 10.8, 12.3, 12.5, 11.65, 9.6, 10.9, 10.8, 11.2, 10.0, 10.5, 9.1, 10.5, 9.3, 9.3, 11.2, 10.6, 12.1, 12.0, 9.7, 12.4, 13.6, 13.6, 11.8, 10.0, 10.0, 9.1, 11.9, 11.75, 11.4, 13.0, 12.4, 9.4, 9.6, 9.6, 9.6, 9.6, 9.1, 12.0, 11.2, 10.1, 10.3, 12.3, 10.55, 10.9, 9.7, 9.8, 8.9, 8.9, 10.2, 11.7, 12.8, 12.8, 10.2, 13.55, 11.6, 8.9, 13.8, 9.4, 9.4, 10.7, 10.7, 12.3, 10.3, 10.4, 11.6, 10.7, 12.8, 11.9, 12.1, 9.2, 9.5, 11.0, 10.9, 10.4, 9.1, 11.4, 11.4, 9.7, 12.4, 13.7, 10.6, 11.2, 13.13333333, 12.4, 9.7, 11.0, 11.3, 12.0, 9.2, 10.7, 10.7, 11.4, 9.2, 12.1, 11.1, 9.7, 10.7, 10.9, 12.0, 10.6, 9.6, 13.1, 11.0, 11.6, 11.95, 11.1, 11.5, 11.3, 11.9, 9.5, 12.2, 12.2, 11.1, 9.6, 11.1, 9.6, 11.4, 11.4, 12.06666667, 9.0, 9.0, 11.4, 9.6, 11.0, 11.0, 11.2, 11.55, 13.3, 9.633333333, 13.6, 11.2, 13.0, 10.8, 9.8, 11.45, 12.05, 9.7, 11.9, 10.0, 9.7, 11.6, 8.8, 9.5, 9.533333333, 9.533333333, 9.4, 10.7, 11.5, 9.6, 9.55, 12.15, 13.0, 9.2, 9.4, 11.8, 10.6, 9.7, 11.2, 9.6, 9.4, 12.8, 11.8, 9.4, 9.8, 9.8, 9.8, 9.4, 9.4, 9.4, 10.0, 9.5, 10.5, 9.2, 10.5, 9.9, 9.1, 9.2, 9.2, 10.5, 9.3, 9.0, 9.2, 9.4, 9.7, 9.5, 9.4, 9.7, 9.3, 9.5, 9.5, 9.4, 9.8, 10.1, 10.6, 9.8, 9.4, 9.2, 9.6, 10.8, 9.7, 9.8, 10.5, 10.5, 9.3, 10.5, 10.3, 9.5, 13.1, 9.2, 9.5, 9.2, 9.2, 9.2, 9.4, 9.4, 9.4, 10.2, 9.5, 9.6, 9.4, 10.0, 9.4, 9.2, 9.3, 9.5, 9.8, 10.9, 10.9, 9.6, 10.7, 10.7, 10.5, 9.5, 9.5, 9.5, 9.2, 9.6, 10.5, 10.5, 10.7, 10.1, 9.1, 9.2, 9.4, 9.1, 9.4, 10.3, 10.1, 9.9, 9.6, 9.5, 9.0, 9.5, 9.9, 9.8, 9.6, 10.5, 12.9, 10.7, 9.2, 9.8, 9.0, 10.2, 10.4, 9.0, 9.2, 9.4, 9.2, 9.3, 9.3, 9.6, 9.3, 9.5, 9.8, 9.8, 9.7, 9.5, 10.5, 10.0, 9.4, 10.9, 9.2, 9.0, 10.9, 9.2, 9.5, 9.5, 9.4, 10.9, 10.9, 10.5, 9.4, 9.4, 13.0, 13.0, 9.8, 9.9, 9.6, 9.5, 9.2, 9.5, 9.5, 9.6, 9.5, 14.0, 9.4, 14.0, 9.4, 10.0, 9.3, 10.2, 10.5, 10.3, 9.4, 10.1, 10.1, 10.5, 10.5, 10.5, 10.5, 9.3, 9.3, 9.6, 9.2, 10.0, 9.4, 9.4, 9.5, 10.2, 9.0, 10.4, 9.5, 9.1, 9.2, 9.2, 11.5, 9.5, 9.5, 9.5, 10.5, 9.6, 9.5, 9.5, 9.3, 9.3, 9.3, 9.3, 9.7, 9.2, 9.7, 9.5, 9.5, 9.4, 9.8, 9.5, 9.7, 9.7, 9.4, 10.2, 10.1, 13.0, 11.4, 10.3, 9.3, 9.5, 9.2, 9.2, 10.8, 10.8, 9.3, 9.4, 10.5, 12.4, 10.0, 10.2, 10.1, 9.8, 10.5, 11.0, 9.1, 9.7, 9.5, 9.4, 9.4, 9.5, 10.0, 10.4, 10.5, 9.5, 9.8, 10.5, 11.0, 12.2, 9.9, 9.6, 11.0, 9.0, 9.0, 9.0, 9.2, 9.0, 9.0, 9.3, 10.9, 9.8, 9.2, 9.2, 9.9, 9.5, 9.3, 9.8, 9.9, 10.0, 9.9, 10.5, 9.5, 9.9, 9.3, 9.2, 9.2, 9.4, 10.5, 9.3, 9.4, 10.0, 9.3, 10.9, 10.2, 9.8, 12.8, 9.4, 10.1, 10.7, 10.1, 10.1, 9.4, 9.4, 10.7, 9.4, 10.1, 12.6, 10.5, 9.3, 9.9, 9.1, 10.5, 9.8, 9.8, 10.3, 10.3, 10.6, 9.2, 10.6, 10.5, 10.3, 10.1, 9.5, 9.5, 9.9, 9.6, 9.7, 9.6, 10.7, 10.1, 10.0, 9.5, 9.2, 9.3, 9.4, 9.5, 9.5, 9.5, 9.3, 9.4, 9.5, 9.4, 11.0, 11.0, 10.1, 10.4, 11.5, 10.4, 11.5, 9.7, 9.3, 9.5, 9.2, 9.2, 11.5, 11.5, 9.7, 9.5, 12.5, 12.5, 9.4, 11.0, 11.7, 12.2, 12.5, 10.3, 11.5, 9.8, 9.2, 11.3, 9.8, 9.8, 10.7, 9.9, 12.3, 12.0, 10.0, 9.4, 9.9, 9.4, 9.3, 13.0, 11.9, 12.8, 11.0, 11.7, 10.4, 9.8, 9.4, 9.9, 10.0, 10.2, 10.0, 11.8, 10.0, 9.0, 9.4, 12.0, 9.9, 8.7, 10.6, 9.2, 10.8, 11.8, 11.0, 12.0, 13.3, 10.8, 9.4, 10.0, 9.4, 9.4, 9.2, 9.7, 9.2, 9.6, 9.2, 10.0, 12.9, 10.0, 9.5, 9.1, 9.9, 13.0, 9.9, 11.0, 11.0, 9.4, 9.9, 10.8, 10.5, 10.5, 9.1, 10.1, 10.8, 10.8, 11.3, 9.6, 9.5, 9.5, 9.3, 11.7, 9.5, 9.3, 11.7, 10.5, 10.4, 9.9, 11.8, 12.3, 10.9, 11.0, 10.9, 12.3, 11.4, 10.6, 9.3, 10.4, 11.0, 9.2, 12.8, 9.5, 9.9, 9.5, 10.2, 11.2, 9.9, 9.3, 9.8, 11.3, 11.2, 11.6, 12.5, 10.1, 10.5, 11.2, 10.2, 10.8, 10.8, 9.1, 10.0, 11.2, 11.1, 13.4, 10.3, 9.6, 11.2, 9.0, 11.3, 9.3, 11.8, 9.0, 9.2, 9.7, 11.5, 14.0, 9.2, 9.8, 10.6, 11.4, 10.4, 10.6, 9.4, 10.2, 9.7, 11.0, 10.2, 10.1, 9.2, 11.7, 9.4, 9.4, 13.4, 10.0, 10.0, 10.0, 10.8, 10.2, 10.6, 13.3, 13.4, 11.6, 12.1, 11.0, 9.0, 11.1, 11.0, 11.6, 9.0, 12.0, 12.0, 10.9, 10.8, 12.5, 10.8, 9.5, 10.2, 11.4, 9.5, 10.2, 9.7, 11.8, 11.8, 9.3, 11.9, 8.4, 11.7, 11.0, 10.0, 9.1, 9.8, 9.4, 9.5, 9.9, 11.0, 11.4, 8.7, 9.4, 10.3, 10.3, 10.3, 12.8, 10.0, 10.3, 9.4, 10.7, 12.0, 11.2, 9.6, 11.0, 9.9, 11.0, 8.4, 9.1, 9.5, 10.7, 10.4, 9.4, 9.5, 10.0, 10.0, 11.5, 11.1, 11.1, 11.7, 11.1, 11.7, 12.7, 11.4, 9.2, 9.2, 10.1, 12.7, 11.4, 9.0, 9.0, 10.7, 11.7, 11.0, 11.7, 10.4, 9.6, 10.0, 10.2, 10.0, 9.5, 9.8, 9.8, 9.6, 9.6, 9.2, 9.9, 10.7, 9.6, 10.6, 9.3, 14.0, 10.5, 9.7, 11.5, 9.7, 9.0, 9.5, 9.3, 9.3, 10.0, 9.8, 9.3, 10.0, 9.0, 9.3, 9.0, 9.1, 9.2, 12.2, 10.5, 10.4, 12.7, 9.2, 9.4, 10.0, 9.8, 10.2, 9.7, 9.7, 9.8, 10.2, 9.3, 9.4, 9.4, 9.5, 12.1, 10.2, 10.2, 9.1, 9.1, 9.3, 9.3, 9.3, 9.5, 10.5, 11.3, 9.5, 9.7, 9.4, 9.4, 10.2, 10.3, 9.4, 9.5, 9.4, 9.5, 9.4, 10.1, 10.1, 11.0, 11.2, 11.3, 9.6, 11.2, 14.9, 12.0, 9.5, 9.4, 9.6, 10.5, 9.6, 11.0, 9.6, 9.0, 9.6, 10.2, 10.2, 9.7, 9.5, 9.2, 11.0, 9.2, 10.0, 9.5, 9.5, 9.5, 9.3, 10.2, 9.3, 9.9, 10.0, 9.6, 9.0, 10.2, 9.8, 11.3, 9.4, 11.3, 9.1, 9.7, 9.4, 9.4, 10.7, 9.8, 9.0, 9.4, 9.4, 12.8, 9.5, 9.5, 9.7, 10.8, 10.1, 9.5, 9.4, 9.6, 9.7, 9.9, 10.0, 10.5, 11.6, 10.0, 10.1, 9.5, 9.4, 9.4, 9.8, 9.2, 9.4, 10.0, 9.6, 9.5, 9.6, 9.2, 10.0, 9.5, 11.2, 10.4, 11.1, 9.5, 9.5, 12.7, 9.6, 11.5, 9.6, 9.5, 9.3, 9.5, 9.5, 9.3, 9.2, 9.3, 11.5, 9.5, 9.2, 10.0, 9.5, 9.5, 9.0, 9.4, 9.6, 9.5, 9.5, 9.5, 9.4, 9.5, 9.1, 10.7, 11.2, 9.8, 9.8, 9.2, 9.7, 9.6, 10.0, 9.6, 9.5, 9.5, 9.4, 9.5, 9.7, 9.6, 9.7, 9.4, 9.4, 9.5, 9.5, 10.0, 10.3, 10.3, 10.5, 9.8, 9.4, 9.8, 10.0, 9.8, 9.8, 9.5, 9.5, 10.1, 10.1, 9.3, 9.7, 9.6, 9.7, 10.8, 12.5, 10.2, 9.6, 10.8, 10.7, 10.7, 9.4, 10.0, 12.9, 9.6, 9.9, 12.8, 12.5, 12.8, 9.2, 10.3, 10.5, 10.9, 10.8, 11.4, 11.3, 10.8, 10.5, 11.9, 9.4, 9.6, 9.7, 14.0, 9.8, 9.8, 10.3, 10.7, 11.0, 10.7, 12.7, 11.1, 10.9, 11.1, 9.9, 9.9, 9.4, 9.3, 11.7, 11.7, 11.2, 10.0, 12.1, 10.3, 10.9, 9.4, 10.6, 9.8, 9.8, 9.9, 9.8, 9.8, 9.5, 9.5, 9.7, 10.9, 10.9, 11.7, 10.9, 11.3, 10.6, 11.2, 9.5, 11.5, 10.4, 9.7, 9.5, 9.7, 11.3, 11.2, 11.2, 10.9, 11.8, 10.6, 10.0, 11.1, 11.8, 11.8, 10.9, 11.8, 10.0, 9.5, 9.9, 11.4, 12.0, 9.5, 10.0, 10.5, 10.4, 12.1, 11.2, 9.3, 10.1, 9.7, 9.3, 9.7, 9.8, 10.7, 12.5, 10.7, 12.5, 11.0, 11.8, 10.8, 10.8, 10.8, 10.8, 9.5, 11.0, 11.5, 10.8, 11.5, 13.2, 10.9, 12.2, 12.2, 11.5, 11.9, 11.0, 10.1, 11.0, 11.8, 10.5, 11.0, 11.8, 10.1, 11.2, 11.0, 10.2, 9.2, 11.2, 12.0, 10.5, 9.8, 9.5, 9.8, 10.5, 11.8, 11.8, 10.4, 12.9, 11.4, 12.4, 12.5, 10.0, 9.7, 12.1, 11.1, 12.0, 12.4, 11.9, 11.9, 11.9, 12.4, 11.2, 12.1, 12.2, 10.4, 11.3, 11.1, 11.3, 10.0, 11.1, 9.3, 9.5, 11.2, 11.1, 11.0, 11.9, 9.2, 12.2, 10.2, 10.9, 10.9, 11.6, 10.7, 12.1, 9.4, 9.4, 9.1, 11.3, 10.4, 10.5, 10.0, 12.9, 10.5, 10.4, 11.3, 11.4, 9.4, 9.4, 10.9, 9.4, 9.4, 9.4, 9.4, 9.4, 10.1, 12.8, 12.8, 9.1, 12.9, 11.5, 10.6, 11.7, 12.8, 10.3, 12.8, 11.7, 11.7, 12.0, 10.9, 12.3, 10.4, 10.0, 10.0, 11.2, 11.4, 12.6, 12.7, 12.7, 10.4, 11.9, 11.9, 10.5, 12.3, 10.5, 10.4, 12.6, 11.6, 10.1, 10.5, 11.5, 11.0, 9.6, 10.4, 9.7, 10.6, 12.5, 9.2, 12.6, 11.1, 10.2, 9.8, 11.1, 10.9, 12.2, 11.4, 10.7, 10.4, 10.9, 10.8, 10.4, 9.2, 12.9, 12.7, 9.1, 9.1, 12.1, 9.1, 11.6, 12.1, 9.9, 12.5, 11.4, 11.8, 11.8, 10.2, 12.5, 10.9, 10.9, 10.8, 11.1, 9.2, 9.5, 10.7, 9.2, 10.2, 11.4, 11.0, 11.0, 12.3, 11.8, 12.3, 9.5, 12.0, 9.5, 9.6, 11.6, 11.2, 9.9, 9.9, 11.8, 11.4, 11.5, 12.0, 10.8, 10.5, 10.8, 9.4, 12.5, 9.4, 12.4, 12.0, 11.2, 12.0, 12.4, 12.8, 12.3, 11.7, 9.5, 10.8, 10.0, 12.3, 11.0, 9.5, 13.6, 11.3, 11.3, 11.3, 13.3, 12.9, 13.1, 12.3, 12.3, 11.2, 11.5, 11.3, 13.5, 11.5, 10.0, 10.5, 10.4, 9.5, 13.6, 11.2, 11.8, 11.9, 11.4, 11.4, 9.1, 9.5, 9.5, 11.0, 11.4, 10.0, 10.1, 10.4, 9.8, 11.8, 11.6, 12.0, 12.8, 12.5, 9.8, 11.1, 11.4, 9.8, 11.8, 12.9, 10.6, 10.8, 11.1, 10.2, 11.8, 10.0, 10.0, 9.4, 10.2, 12.4, 12.0, 11.5, 10.5, 10.8, 12.3, 9.5, 9.5, 11.5, 11.2, 12.7, 11.4, 11.0, 11.0, 11.4, 10.5, 9.3, 10.9, 11.9, 12.2, 11.9, 10.9, 9.6, 12.5, 10.8, 12.4, 10.8, 9.5, 9.5, 9.5, 9.8, 10.9, 9.5, 9.8, 11.2, 11.7, 9.4, 11.0, 11.0, 11.0, 10.0, 11.0, 11.2, 10.4, 9.3, 10.4, 10.5, 10.4, 11.3, 9.5, 12.0, 10.6, 10.9, 11.5, 11.5, 9.6, 12.0, 10.3, 9.4, 9.2, 9.6, 13.6, 9.5, 11.8, 10.8, 9.5, 9.3, 12.8, 11.5, 9.4, 12.8, 9.6, 11.8, 9.3, 9.8, 12.2, 9.5, 10.3, 10.5, 10.0, 10.5, 11.1, 10.9, 10.9, 9.8, 9.8, 9.5, 10.9, 11.0, 9.2, 11.0, 11.3, 11.3, 9.3, 11.2, 9.8, 9.6, 11.8, 10.3, 10.3, 11.4, 9.5, 14.0, 14.0, 11.7, 11.2, 9.3, 11.2, 9.5, 12.0, 9.7, 9.5, 11.5, 10.4, 10.4, 10.9, 10.2, 10.9, 10.5, 12.4, 13.0, 10.2, 10.2, 11.0, 10.9, 12.4, 9.7, 10.9, 9.5, 9.5, 12.1, 12.2, 10.9, 12.5, 11.7, 11.2, 11.2, 9.2, 9.8, 10.1, 11.1, 10.1, 9.2, 9.8, 12.8, 10.5, 10.1, 10.1, 9.8, 12.5, 11.9, 9.8, 9.1, 10.1, 12.5, 11.4, 11.0, 10.6, 10.6, 10.6, 10.6, 9.3, 9.8, 9.8, 9.2, 9.7, 9.6, 10.0, 12.6, 9.5, 9.5, 9.5, 10.5, 10.5, 10.5, 10.4, 10.5, 11.0, 10.2, 11.4, 9.5, 9.5, 10.8, 10.0, 11.8, 10.3, 10.3, 10.0, 10.1, 10.1, 11.1, 9.5, 10.03333333, 10.9, 10.1, 10.03333333, 9.8, 11.8, 9.5, 9.8, 10.5, 9.8, 10.4, 9.2, 11.6, 9.2, 9.3, 9.8, 9.9, 10.0, 12.2, 9.9, 10.8, 10.8, 9.6, 9.9, 9.9, 9.5, 9.2, 9.6, 9.6, 10.3, 9.7, 12.5, 11.0, 9.8, 10.2, 9.2, 9.55, 9.55, 9.9, 10.2, 11.1, 9.9, 9.9, 11.9, 10.0, 10.7, 11.3, 10.9, 10.7, 12.4, 10.7, 11.9, 10.6, 10.9, 10.1, 9.6, 9.4, 9.6, 12.1, 9.8, 9.9, 9.8, 9.4, 11.4, 11.0, 9.6, 9.6, 12.1, 11.2, 11.0, 11.3, 10.4, 9.9, 11.7, 10.1, 9.0, 9.0, 8.5, 11.1, 10.3, 11.06666667, 11.3, 9.566666667, 9.8, 11.7, 11.1, 9.6, 9.8, 9.7, 9.7, 11.3, 11.3, 11.0, 11.6, 9.0, 10.9, 10.9, 10.55, 9.0, 10.5, 11.9, 10.4, 10.0, 10.4, 10.8, 9.7, 9.7, 10.0, 11.0, 10.0, 9.7, 9.7, 12.6, 11.1, 11.0, 8.8, 13.56666667, 8.8, 13.6, 10.2, 10.6, 10.1, 10.6, 10.3, 10.7, 10.9, 9.7, 10.3, 10.6, 11.4, 10.8, 12.4, 11.4, 11.95, 9.7, 10.0, 10.6, 9.7, 11.5, 10.8, 11.5, 9.6, 9.4, 9.8, 11.0, 11.4, 9.95, 10.8, 11.4, 10.6, 11.1, 9.7, 9.8, 10.4, 10.5, 9.233333333, 9.25, 10.6, 10.3, 10.5, 10.2, 10.3, 9.05, 10.6, 10.4, 10.0, 9.7, 9.6, 10.8, 10.1, 10.2, 11.3, 10.2, 9.9, 9.0, 11.7, 9.7, 10.3, 10.2, 12.0, 9.9, 11.6, 10.9, 10.75, 10.4, 11.2, 10.1, 10.2, 12.1, 10.4, 11.4, 9.5, 9.4, 11.3, 9.4, 11.0, 10.55, 9.9, 11.0, 9.5, 9.9, 9.9, 9.9, 10.1, 10.1, 10.1, 10.9, 11.2, 10.1, 9.2, 11.5, 12.4, 11.1, 9.5, 12.5, 10.5, 11.8, 10.8, 11.9, 11.3, 11.3, 11.9, 11.3, 11.9, 9.8, 11.6, 11.5, 11.4, 10.9, 12.8, 9.2, 11.6, 11.6, 11.0, 9.5, 10.5, 11.2, 11.0, 10.2, 11.0], \"sizemode\": \"area\", \"sizeref\": 0.03725, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"\", \"showlegend\": false, \"type\": \"scattergl\", \"x\": [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 7, 5, 7, 6, 8, 6, 5, 8, 7, 8, 5, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 6, 7, 4, 5, 6, 5, 6, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 7, 5, 8, 5, 6, 5, 5, 6, 8, 5, 7, 7, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 6, 5, 7, 7, 7, 6, 6, 7, 4, 6, 5, 5, 5, 5, 5, 6, 5, 6, 6, 5, 6, 5, 5, 5, 5, 4, 6, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 7, 7, 6, 5, 7, 5, 5, 5, 5, 6, 5, 7, 6, 5, 5, 6, 6, 6, 6, 6, 4, 7, 6, 7, 6, 6, 5, 6, 6, 6, 7, 8, 8, 7, 5, 5, 6, 5, 5, 6, 7, 5, 5, 6, 6, 4, 7, 5, 6, 4, 5, 4, 6, 6, 5, 5, 6, 5, 5, 6, 5, 8, 4, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 4, 5, 5, 4, 5, 6, 5, 7, 5, 6, 7, 5, 5, 5, 5, 5, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 4, 6, 6, 6, 6, 6, 6, 6, 7, 6, 5, 5, 7, 6, 5, 6, 7, 7, 7, 5, 4, 3, 5, 3, 6, 8, 7, 7, 6, 4, 6, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 5, 5, 5, 6, 6, 5, 4, 7, 8, 8, 4, 5, 5, 5, 6, 7, 7, 7, 7, 6, 5, 7, 3, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 7, 6, 7, 8, 6, 6, 5, 6, 6, 5, 7, 6, 7, 5, 6, 6, 5, 5, 6, 6, 6, 5, 8, 5, 6, 5, 5, 6, 6, 6, 5, 7, 7, 6, 6, 5, 6, 6, 7, 6, 6, 5, 7, 7, 6, 7, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 7, 6, 6, 6, 5, 6, 6, 5, 6, 7, 7, 7, 7, 6, 7, 7, 6, 6, 6, 7, 7, 7, 5, 6, 7, 7, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 5, 5, 5, 6, 5, 7, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 7, 6, 6, 6, 7, 6, 6, 5, 5, 5, 5, 5, 7, 4, 8, 7, 5, 8, 7, 5, 7, 6, 8, 6, 6, 3, 5, 6, 6, 7, 5, 5, 7, 7, 7, 6, 7, 5, 6, 5, 5, 5, 5, 6, 5, 5, 6, 6, 5, 5, 6, 5, 6, 7, 6, 5, 7, 6, 6, 6, 5, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 4, 6, 5, 4, 6, 6, 6, 5, 6, 6, 5, 7, 6, 7, 6, 6, 6, 6, 7, 6, 5, 6, 6, 5, 5, 5, 6, 6, 5, 6, 4, 6, 6, 6, 6, 5, 6, 6, 6, 5, 5, 6, 5, 6, 4, 5, 6, 6, 6, 6, 6, 6, 7, 5, 7, 7, 7, 7, 7, 7, 5, 6, 5, 6, 7, 5, 6, 7, 5, 6, 6, 5, 6, 6, 5, 7, 5, 7, 7, 6, 6, 7, 7, 7, 5, 5, 6, 6, 7, 6, 6, 7, 7, 6, 5, 6, 5, 5, 5, 7, 5, 6, 8, 7, 6, 6, 5, 5, 6, 6, 5, 5, 5, 6, 8, 6, 5, 5, 5, 5, 7, 6, 6, 6, 5, 5, 6, 5, 5, 8, 4, 6, 6, 6, 5, 5, 6, 5, 6, 6, 7, 5, 5, 5, 7, 4, 6, 5, 5, 5, 4, 6, 5, 7, 7, 7, 7, 6, 7, 6, 6, 5, 5, 4, 5, 7, 4, 5, 6, 5, 6, 6, 6, 5, 6, 6, 8, 6, 5, 6, 6, 7, 7, 7, 5, 5, 6, 5, 5, 5, 7, 4, 6, 7, 4, 6, 5, 5, 6, 5, 6, 5, 5, 5, 5, 7, 4, 6, 6, 5, 5, 6, 6, 5, 5, 6, 6, 5, 6, 7, 6, 5, 7, 7, 5, 5, 6, 8, 7, 5, 7, 5, 5, 5, 6, 6, 7, 6, 5, 6, 6, 5, 7, 6, 3, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 5, 6, 7, 7, 6, 6, 5, 6, 6, 6, 5, 6, 7, 7, 7, 7, 7, 5, 9, 6, 6, 5, 7, 8, 4, 6, 7, 8, 5, 6, 6, 6, 7, 6, 6, 7, 5, 7, 5, 5, 6, 6, 6, 8, 6, 5, 5, 7, 6, 6, 5, 6, 6, 6, 5, 6, 7, 6, 6, 5, 5, 5, 5, 5, 9, 6, 5, 6, 5, 6, 6, 9, 7, 7, 6, 4, 8, 6, 6, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 5, 5, 7, 6, 7, 5, 7, 5, 7, 7, 5, 5, 7, 5, 8, 7, 6, 6, 5, 6, 7, 8, 7, 6, 5, 5, 6, 3, 5, 7, 9, 6, 6, 8, 7, 6, 6, 6, 6, 7, 6, 7, 6, 7, 6, 7, 5, 7, 7, 6, 6, 6, 6, 6, 7, 6, 5, 6, 8, 4, 4, 8, 4, 5, 5, 5, 5, 5, 4, 5, 7, 6, 6, 7, 7, 6, 6, 6, 8, 5, 5, 7, 5, 5, 7, 5, 6, 5, 5, 5, 5, 5, 6, 7, 5, 6, 7, 7, 7, 7, 5, 5, 4, 5, 5, 6, 6, 5, 6, 5, 5, 7, 7, 6, 6, 7, 6, 6, 6, 5, 6, 6, 7, 7, 7, 7, 6, 7, 6, 5, 6, 5, 7, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 7, 6, 4, 5, 4, 6, 6, 5, 6, 6, 7, 7, 5, 6, 7, 6, 6, 6, 5, 7, 6, 6, 7, 6, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 6, 6, 6, 6, 4, 7, 4, 6, 6, 6, 6, 3, 6, 5, 5, 7, 5, 4, 5, 4, 5, 7, 5, 5, 5, 5, 6, 5, 6, 5, 4, 5, 5, 6, 5, 6, 4, 7, 5, 5, 5, 6, 5, 6, 7, 7, 6, 7, 5, 7, 5, 6, 7, 6, 5, 5, 6, 7, 6, 6, 6, 7, 5, 8, 8, 6, 7, 6, 6, 6, 7, 5, 8, 6, 7, 6, 7, 6, 6, 5, 5, 5, 7, 8, 7, 7, 4, 7, 6, 6, 5, 4, 8, 5, 5, 5, 5, 6, 6, 7, 5, 5, 6, 7, 7, 5, 7, 6, 6, 5, 5, 5, 6, 8, 8, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 4, 6, 4, 4, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 5, 6, 5, 6, 6, 5, 6, 5, 6, 5, 7, 6, 5, 5, 5, 6, 5, 6, 7, 5, 5, 8, 6, 5, 6, 7, 6, 7, 6, 6, 7, 7, 6, 7, 6, 7, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 8, 5, 8, 8, 6, 7, 6, 5, 7, 6, 7, 5, 6, 3, 6, 7, 7, 6, 6, 5, 6, 5, 7, 5, 6, 7, 7, 7, 5, 4, 7, 6, 7, 5, 7, 5, 6, 7, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 8, 7, 5, 6, 7, 5, 5, 5, 6, 6, 7, 5, 6, 6, 6, 7, 5, 8, 7, 6, 7, 7, 7, 6, 6, 6, 6, 4, 4, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 7, 8, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 7, 6, 6, 6, 5, 5, 6, 7, 8, 6, 6, 8, 5, 5, 6, 6, 5, 6, 6, 8, 8, 7, 7, 8, 4, 7, 7, 6, 5, 5, 5, 6, 6, 8, 7, 6, 7, 7, 4, 5, 7, 6, 5, 6, 5, 6, 7, 6, 6, 7, 7, 6, 6, 7, 6, 7, 7, 6, 6, 6, 5, 7, 6, 7, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 6, 7, 6, 8, 8, 5, 4, 8, 6, 7, 6, 6, 6, 8, 6, 6, 5, 6, 3, 5, 7, 4, 6, 5, 4, 6, 6, 6, 5, 7, 5, 4, 5, 7, 6, 5, 5, 5, 7, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 7, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 8, 5, 6, 7, 5, 5, 7, 6, 5, 6, 4, 6, 5, 6, 6, 6, 6, 6, 6, 4, 3, 6, 6, 6, 6, 5, 6, 5, 5, 8, 8, 7, 5, 7, 6, 6, 7, 5, 5, 7, 8, 7, 6, 6, 6, 5, 5, 6, 7, 6, 7, 6, 6, 6, 6, 5, 6, 5, 5, 6, 6, 5, 6, 6, 6, 6, 5, 7, 7, 6, 6, 6, 5, 6, 6, 6, 6, 4, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 4, 4, 6, 5, 7, 6, 5, 6, 5, 5, 6, 5, 5, 6, 6, 5, 4, 6, 6, 4, 5, 4, 5, 6, 7, 5, 6, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 7, 5, 9, 6, 7, 5, 7, 6, 6, 7, 7, 5, 6, 6, 6, 6, 8, 7, 5, 6, 6, 7, 6, 6, 5, 6, 6, 5, 6, 8, 7, 6, 6, 5, 6, 5, 5, 5, 6, 7, 7, 7, 7, 6, 7, 5, 4, 7, 6, 4, 6, 5, 5, 5, 6, 5, 5, 6, 6, 7, 6, 4, 8, 5, 6, 7, 6, 6, 7, 5, 5, 6, 5, 7, 6, 6, 5, 5, 6, 7, 7, 7, 7, 5, 7, 3, 6, 4, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 4, 5, 5, 6, 6, 5, 4, 5, 5, 5, 6, 6, 5, 8, 6, 6, 4, 6, 7, 7, 6, 8, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 4, 6, 6, 6, 6, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 6, 6, 5, 5, 5, 5, 6, 6, 7, 6, 5, 5, 5, 5, 5, 7, 6, 6, 6, 6, 6, 6, 5, 6, 8, 8, 5, 4, 6, 6, 7, 6, 7, 7, 5, 7, 5, 5, 6, 5, 5, 6, 5, 8, 6, 6, 6, 5, 6, 6, 6, 5, 5, 6, 5, 6, 6, 5, 6, 6, 7, 6, 7, 4, 6, 6, 6, 5, 7, 6, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7, 6, 5, 6, 7, 6, 6, 5, 7, 6, 6, 6, 5, 5, 5, 5, 6, 7, 6, 7, 5, 7, 6, 4, 5, 5, 6, 6, 6, 7, 5, 6, 6, 6, 6, 7, 7, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 7, 7, 5, 5, 6, 6, 6, 6, 7, 5, 6, 6, 6, 7, 5, 5, 5, 4, 6, 6, 5, 6, 5, 6, 3, 6, 5, 6, 5, 6, 7, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 7, 5, 5, 4, 7, 6, 5, 5, 5, 6, 6, 5, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 6, 7, 5, 5, 5, 6, 5, 6, 6, 6, 8, 8, 8, 8, 8, 6, 6, 5, 6, 7, 4, 8, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 5, 7, 6, 5, 5, 6, 5, 6, 7, 5, 7, 6, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 5, 5, 7, 3, 5, 5, 5, 5, 6, 5, 7, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 6, 7, 6, 6, 5, 5, 6, 5, 5, 6, 6, 4, 5, 5, 6, 5, 6, 6, 5, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 6, 5, 4, 5, 6, 4, 5, 7, 5, 5, 7, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 5, 7, 6, 6, 6, 5, 5, 6, 6, 5, 6, 6, 4, 5, 4, 6, 6, 4, 6, 7, 6, 6, 5, 5, 5, 7, 7, 7, 7, 7, 5, 5, 7, 7, 5, 7, 5, 6, 6, 6, 5, 5, 6, 7, 5, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 5, 6, 5, 6, 5, 5, 5, 5, 6, 7, 5, 6, 7, 6, 6, 6, 5, 6, 5, 6, 6, 7, 6, 6, 7, 6, 7, 4, 5, 5, 7, 6, 7, 6, 6, 5, 5, 6, 5, 4, 6, 6, 5, 5, 5, 5, 5, 7, 4, 6, 6, 5, 6, 7, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 6, 5, 5, 6, 6, 6, 7, 6, 6, 5, 7, 4, 6, 6, 6, 5, 6, 6, 5, 5, 5, 5, 5, 5, 5, 7, 7, 6, 6, 7, 7, 6, 7, 6, 8, 7, 7, 5, 5, 5, 6, 7, 5, 5, 5, 6, 5, 7, 5, 7, 6, 6, 7, 5, 4, 7, 6, 5, 6, 6, 5, 6, 5, 6, 5, 5, 6, 5, 6, 8, 5, 5, 5, 4, 5, 6, 6, 5, 8, 5, 6, 6, 4, 6, 6, 5, 5, 6, 6, 7, 6, 7, 6, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 7, 5, 4, 3, 6, 6, 6, 6, 5, 4, 4, 6, 8, 6, 8, 5, 4, 4, 4, 8, 8, 6, 7, 6, 5, 5, 5, 6, 6, 6, 4, 4, 6, 6, 5, 5, 6, 6, 5, 4, 6, 6, 4, 4, 4, 5, 6, 5, 5, 5, 7, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 5, 5, 6, 6, 4, 5, 6, 5, 6, 5, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 7, 6, 5, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 5, 5, 6, 6, 5, 5, 7, 6, 6, 7, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 4, 4, 5, 5, 5, 5, 6, 5, 5, 4, 4, 6, 6, 6, 7, 6, 5, 6, 6, 6, 5, 7, 7, 6, 6, 7, 5, 5, 7, 8, 5, 5, 8, 7, 6, 6, 5, 6, 4, 4, 5, 7, 6, 6, 6, 6, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 5, 5, 6, 5, 7, 7, 7, 5, 7, 7, 5, 6, 5, 6, 5, 6, 5, 7, 5, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 7, 6, 5, 7, 7, 7, 7, 7, 7, 6, 7, 4, 6, 7, 5, 5, 7, 5, 5, 6, 5, 6, 7, 5, 6, 7, 7, 6, 6, 6, 6, 6, 5, 5, 7, 5, 5, 7, 7, 7, 7, 6, 5, 5, 7, 7, 5, 5, 7, 7, 6, 5, 6, 7, 5, 5, 5, 6, 5, 5, 6, 6, 6, 5, 5, 5, 6, 7, 7, 5, 6, 6, 5, 5, 7, 5, 5, 5, 4, 7, 7, 6, 6, 6, 6, 8, 7, 5, 7, 7, 6, 5, 7, 7, 7, 6, 7, 7, 6, 6, 5, 6, 6, 6, 6, 5, 6, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 5, 5, 5, 6, 6, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 5, 6, 6, 6, 7, 5, 7, 6, 6, 5, 6, 6, 6, 7, 5, 5, 5, 7, 6, 6, 6, 7, 5, 7, 6, 5, 6, 6, 6, 7, 6, 6, 8, 6, 8, 6, 6, 8, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 5, 7, 6, 7, 7, 8, 8, 8, 6, 7, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 7, 5, 8, 7, 5, 7, 7, 5, 5, 6, 8, 8, 6, 5, 5, 6, 7, 7, 5, 6, 7, 7, 5, 5, 7, 4, 6, 5, 5, 5, 6, 6, 6, 6, 7, 7, 5, 5, 5, 6, 7, 6, 6, 6, 6, 7, 7, 6, 6, 6, 6, 5, 7, 7, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 8, 7, 6, 6, 6, 6, 6, 6, 6, 7, 7, 5, 6, 7, 6, 7, 8, 7, 6, 5, 5, 6, 6, 5, 7, 5, 7, 7, 6, 5, 5, 4, 6, 8, 6, 5, 7, 7, 5, 5, 5, 5, 5, 6, 7, 5, 6, 7, 5, 5, 6, 6, 6, 5, 5, 7, 5, 6, 6, 6, 7, 6, 5, 4, 6, 8, 6, 6, 5, 8, 7, 7, 6, 8, 8, 6, 6, 5, 4, 5, 5, 8, 8, 6, 5, 5, 8, 6, 8, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 6, 6, 5, 7, 7, 6, 5, 7, 5, 8, 6, 6, 5, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 6, 6, 6, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 6, 8, 6, 7, 7, 7, 7, 7, 7, 6, 6, 6, 7, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 4, 5, 6, 6, 7, 6, 5, 6, 8, 8, 6, 5, 6, 6, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 5, 4, 5, 7, 5, 6, 6, 5, 5, 5, 6, 5, 5, 8, 5, 5, 6, 5, 4, 6, 8, 8, 7, 6, 5, 5, 7, 5, 5, 5, 5, 6, 5, 6, 7, 6, 6, 7, 3, 6, 7, 6, 6, 6, 7, 6, 6, 7, 5, 7, 7, 7, 6, 6, 7, 5, 6, 6, 6, 5, 4, 6, 7, 5, 6, 6, 6, 7, 7, 7, 5, 6, 5, 6, 5, 6, 5, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 5, 7, 7, 6, 6, 5, 7, 7, 6, 6, 6, 7, 6, 6, 6, 6, 8, 8, 8, 6, 6, 5, 6, 4, 6, 6, 5, 6, 7, 6, 4, 7, 8, 5, 7, 6, 6, 5, 5, 6, 7, 6, 7, 7, 7, 6, 7, 7, 5, 7, 7, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 4, 7, 5, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 6, 7, 5, 7, 6, 7, 6, 7, 7, 5, 6, 6, 7, 7, 6, 6, 8, 8, 5, 6, 6, 6, 6, 6, 6, 5, 7, 8, 6, 3, 6, 6, 6, 5, 5, 7, 7, 7, 5, 4, 8, 7, 5, 6, 5, 6, 7, 6, 6, 7, 7, 7, 6, 5, 5, 8, 5, 7, 6, 5, 5, 5, 6, 7, 5, 8, 6, 7, 7, 7, 7, 3, 6, 7, 7, 7, 7, 7, 6, 7, 6, 6, 7, 5, 5, 6, 7, 6, 6, 7, 5, 7, 5, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 7, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 5, 6, 6, 6, 8, 5, 7, 7, 7, 6, 6, 6, 8, 5, 6, 7, 6, 8, 6, 6, 5, 5, 6, 6, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 3, 7, 6, 6, 6, 7, 7, 6, 4, 6, 7, 5, 8, 8, 5, 6, 6, 6, 6, 6, 5, 6, 6, 5, 7, 6, 6, 6, 5, 5, 5, 5, 5, 7, 6, 5, 8, 6, 6, 7, 8, 7, 7, 5, 6, 5, 6, 5, 7, 7, 6, 6, 8, 6, 7, 5, 6, 6, 5, 8, 6, 8, 6, 6, 8, 6, 6, 8, 7, 6, 7, 8, 5, 8, 7, 8, 7, 6, 6, 6, 8, 7, 6, 7, 7, 6, 7, 7, 6, 6, 7, 7, 6, 5, 7, 7, 7, 6, 7, 5, 6, 6, 7, 6, 6, 6, 7, 7, 7, 5, 7, 5, 7, 5, 5, 6, 6, 6, 6, 4, 7, 5, 5, 6, 6, 5, 5, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 4, 6, 5, 6, 5, 6, 6, 6, 6, 7, 6, 6, 4, 6, 6, 6, 7, 5, 7, 4, 7, 5, 7, 6, 6, 7, 7, 7, 6, 6, 6, 7, 5, 7, 7, 7, 7, 7, 6, 7, 6, 6, 7, 6, 7, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 5, 7, 6, 7, 7, 6, 6, 7, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 7, 7, 7, 6, 6, 6, 6, 6, 7, 6, 7, 7, 5, 6, 4, 6, 6, 6, 6, 7, 7, 8, 7, 8, 8, 6, 4, 6, 8, 8, 7, 8, 5, 7, 6, 7, 8, 7, 5, 6, 7, 6, 5, 7, 6, 8, 7, 6, 7, 6, 5, 5, 6, 8, 7, 6, 7, 7, 5, 6, 7, 6, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 4, 6, 5, 6, 5, 5, 7, 5, 5, 7, 6, 6, 7, 7, 7, 5, 6, 6, 5, 6, 5, 6, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 5, 6, 5, 6, 7, 5, 5, 5, 8, 6, 5, 5, 5, 6, 6, 7, 5, 5, 8, 5, 5, 5, 6, 5, 4, 6, 6, 5, 5, 6, 5, 6, 7, 7, 5, 6, 6, 5, 6, 7, 5, 5, 5, 6, 5, 5, 6, 6, 5, 6, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 5, 6, 6, 3, 5, 5, 5, 5, 7, 5, 6, 6, 6, 5, 6, 6, 5, 7, 6, 6, 5, 6, 7, 7, 5, 5, 6, 5, 5, 6, 6, 5, 5, 6, 6, 6, 7, 6, 5, 6, 5, 6, 5, 6, 7, 6, 7, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 6, 4, 5, 5, 7, 5, 5, 5, 4, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 6, 6, 6, 7, 5, 5, 4, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 7, 6, 7, 7, 6, 5, 7, 6, 6, 5, 7, 5, 5, 5, 6, 5, 5, 5, 6, 6, 8, 4, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 6, 6, 7, 5, 5, 5, 5, 6, 7, 5, 6, 5, 5, 6, 6, 6, 5, 7, 7, 5, 4, 6, 4, 6, 6, 7, 6, 6, 4, 6, 7, 7, 6, 7, 6, 5, 7, 7, 6, 7, 6, 6, 6, 6, 6, 6, 5, 7, 7, 7, 5, 7, 7, 6, 6, 6, 5, 6, 6, 7, 6, 6, 5, 6, 6, 6, 7, 6, 6, 6, 5, 5, 6, 6, 5, 4, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 5, 6, 5, 6, 5, 5, 5, 4, 5, 5, 7, 7, 7, 7, 7, 6, 6, 6, 7, 6, 5, 7, 7, 6, 5, 6, 6, 6, 5, 5, 6, 5, 5, 8, 6, 5, 6, 6, 5, 6, 7, 5, 4, 6, 5, 6, 6, 6, 6, 6, 6, 5, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 5, 7, 7, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 8, 7, 5, 6, 6, 6, 7, 5, 5, 5, 5, 7, 6, 5, 5, 6, 6, 5, 6, 5, 6, 7, 6, 6, 6, 6, 6, 6, 7, 7, 6, 7, 5, 6, 6, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 8, 6, 7, 7, 5, 6, 5, 6, 7, 6, 6, 7, 5, 6, 6, 6, 7, 7, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 8, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 6, 7, 6, 6, 6, 6, 4, 4, 5, 5, 5, 4, 6, 5, 6, 6, 4, 4, 7, 5, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 7, 6, 6, 7, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 4, 5, 5, 5, 5, 6, 6, 6, 7, 6, 6, 6, 6, 7, 7, 6, 5, 6, 5, 6, 6, 6, 6, 7, 5, 4, 6, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 7, 6, 6, 6, 5, 6, 6, 7, 7, 5, 7, 7, 7, 5, 6, 7, 6, 6, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 7, 6, 5, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 5, 6, 5, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 5, 7, 6, 5, 7, 5, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 6, 6, 5, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 6, 6, 5, 5, 5, 7, 5, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 7, 5, 5, 6, 5, 4, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 5, 5, 6, 6, 7, 6, 6, 7, 7, 7, 5, 5, 5, 6, 6, 6, 7, 7, 6, 7, 7, 5, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 5, 6, 7, 4, 6, 5, 5, 5, 5, 7, 5, 7, 7, 5, 6, 7, 7, 6, 6, 5, 6, 6, 6, 7, 7, 7, 6, 6, 6, 6, 5, 6, 5, 6, 6, 6, 7, 6, 6, 7, 7, 7, 5, 5, 5, 7, 5, 7, 7, 7, 7, 7, 6, 6, 6, 5, 6, 7, 7, 6, 5, 7, 7, 5, 6, 5, 5, 7, 7, 6, 6, 7, 6, 5, 4, 6, 6, 6, 6, 5, 4, 6, 6, 6, 6, 7, 5, 6, 7, 7, 6, 7, 6, 5, 5, 6, 6, 7, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 6, 6, 5, 5, 3, 6, 6, 5, 6, 5, 6, 7, 6, 6, 6, 7, 7, 6, 6, 6, 6, 7, 7, 6, 8, 8, 7, 6, 6, 6, 6, 5, 7, 4, 6, 6, 6, 6, 4, 5, 5, 6, 6, 5, 7, 8, 8, 5, 6, 6, 6, 6, 6, 5, 7, 7, 6, 5, 6, 7, 7, 8, 7, 4, 6, 6, 6, 5, 6, 5, 6, 7, 5, 6, 7, 6, 6, 6, 6, 5, 6, 6, 7, 5, 6, 6, 6, 5, 7, 6, 6, 5, 6, 7, 6, 5, 6, 6, 4, 7, 6, 6, 5, 6, 5, 6, 7, 6, 5, 6, 5, 5, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 5, 6, 6, 6, 6, 6, 7, 6, 5, 6, 6, 6, 7, 5, 4, 6, 6, 6, 5, 6, 5, 6, 7, 7, 5, 6, 6, 6, 5, 6, 5, 6, 7, 6, 5, 5, 5, 6, 5, 5, 5, 7, 7, 5, 5, 5, 5, 5, 5, 5, 7, 5, 4, 6, 6, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 6, 7, 4, 5, 5, 4, 6, 5, 5, 4, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 7, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 4, 5, 5, 5, 6, 5, 4, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 4, 6, 5, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 6, 6, 6, 4, 5, 5, 5, 5, 5, 5, 5, 6, 5, 4, 6, 5, 5, 5, 5, 4, 6, 5, 4, 6, 6, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 7, 4, 7, 5, 5, 5, 6, 7, 7, 5, 5, 7, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 6, 4, 6, 6, 5, 6, 5, 7, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 7, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 7, 5, 4, 5, 5, 5, 7, 4, 8, 6, 6, 6, 6, 5, 5, 5, 6, 6, 6, 8, 7, 6, 7, 5, 7, 5, 5, 6, 6, 7, 5, 7, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 5, 5, 6, 5, 6, 7, 6, 7, 5, 5, 6, 6, 6, 7, 5, 6, 5, 6, 6, 6, 5, 7, 7, 6, 5, 6, 7, 6, 6, 6, 6, 6, 5, 7, 6, 6, 6, 6, 6, 5, 5, 6, 6, 5, 7, 7, 6, 5, 6, 5, 5, 7, 6, 7, 5, 5, 7, 5, 6, 6, 5, 6, 7, 6, 7, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 8, 6, 5, 5, 5, 7, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 7, 6, 4, 6, 5, 5, 7, 5, 5, 6, 5, 6, 5, 7, 7, 5, 7, 5, 7, 6, 6, 5, 6, 7, 5, 6, 5, 6, 5, 6, 6, 6, 5, 8, 6, 7, 7, 7, 6, 5, 5, 6, 6, 6, 6, 6, 7, 5, 8, 5, 5, 7, 3, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 6, 5, 6, 5, 5, 6, 5, 6, 5, 8, 5, 5, 6, 5, 5, 6, 7, 6, 6, 7, 7, 6, 6, 8, 6, 5, 8, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 7, 5, 6, 6, 7, 7, 5, 6, 3, 6, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 5, 6, 6, 6, 5, 6, 7, 5, 5, 6, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 5, 6, 6, 5, 5, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 4, 6, 6, 4, 5, 5, 6, 5, 5, 5, 7, 7, 6, 7, 5, 8, 7, 5, 6, 5, 5, 5, 5, 6, 6, 6, 6, 4, 6, 5, 6, 6, 6, 7, 6, 6, 6, 5, 5, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 4, 5, 5, 5, 5, 7, 6, 5, 5, 5, 5, 5, 7, 5, 4, 7, 6, 5, 5, 5, 6, 5, 5, 5, 7, 6, 4, 6, 5, 6, 6, 5, 5, 6, 6, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6, 4, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 6, 6, 5, 6, 6, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 5, 6, 6, 5, 5, 6, 5, 6, 5, 5, 6, 6, 5, 6, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 5, 5, 7, 6, 6, 5, 5, 7, 6, 6, 7, 7, 7, 5, 6, 5, 6, 5, 4, 6, 5, 6, 6, 5, 5, 5, 7, 5, 5, 5, 5, 7, 5, 8, 6, 4, 6, 3, 4, 5, 5, 7, 7, 7, 5, 7, 5, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 6, 7, 6, 7, 7, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 6, 6, 5, 4, 7, 7, 7, 4, 6, 6, 5, 5, 6, 6, 5, 6, 5, 6, 7, 6, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 3, 5, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 7, 6, 4, 5, 7, 5, 5, 6, 5, 5, 6, 6, 4, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 5, 6, 6, 7, 5, 6, 5, 5, 6, 6, 6, 7, 5, 6, 5, 6, 6, 7, 5, 7, 5, 5, 5, 7, 5, 6, 5, 6, 6, 5, 6, 7, 5, 5, 6, 5, 5, 6, 5, 5, 6, 7, 7, 6, 6, 7, 7, 7, 7, 5, 7, 7, 7, 7, 5, 7, 6, 5, 6, 6, 6, 7, 6, 6, 5, 6, 6, 5, 6, 7, 6, 6, 5, 6, 7, 7, 7, 5, 6, 6, 7, 7, 5, 7, 6, 5, 6, 6, 7, 6, 6, 6, 5, 6, 6, 5, 5, 5, 7, 6, 6, 7, 5, 7, 7, 6, 8, 6, 6, 6, 6, 7, 7, 7, 5, 7, 5, 6, 6, 5, 7, 6, 5, 5, 7, 6, 7, 6, 6, 6, 5, 7, 6, 7, 7, 8, 6, 6, 7, 6, 5, 6, 5, 7, 5, 6, 6, 6, 6, 6, 5, 6, 7, 5, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 5, 8, 6, 6, 6, 4, 7, 6, 6, 5, 6, 6, 5, 7, 7, 7, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 6, 6, 7, 6, 6, 7, 6, 5, 6, 6, 5, 7, 7, 6, 5, 7, 6, 7, 5, 5, 5, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 4, 7, 5, 6, 6, 5, 6, 5, 5, 6, 5, 6, 5, 4, 6, 5, 7, 5, 6, 6, 6, 6, 6, 6, 6, 7, 8, 5, 7, 7, 7, 5, 7, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 7, 5, 6, 5, 5, 4, 6, 4, 6, 6, 4, 4, 5, 5, 6, 5, 6, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 5, 4, 5, 4, 6, 6, 6, 6, 6, 8, 6, 6, 5, 5, 6, 6, 4, 6, 6, 7, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 6, 6, 4, 6, 5, 5, 6, 6, 3, 6, 6, 6, 5, 5, 5, 5, 4, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 6, 5, 7, 6, 6, 6, 6, 5, 6, 6, 5, 6, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 6, 4, 6, 5, 5, 6, 6, 4, 5, 6, 5, 5, 3, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 7, 6, 5, 5, 6, 8, 6, 7, 6, 6, 7, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 5, 5, 5, 6, 4, 6, 6, 6, 5, 5, 5, 5, 6, 6, 7, 6, 6, 5, 5, 5, 6, 7, 6, 5, 5, 6, 6, 5, 5, 5, 8, 7, 7, 7, 5, 6, 6, 6, 5, 5, 7, 6, 4, 6, 6, 5, 5, 7, 4, 7, 3, 5, 5, 6, 5, 5, 7, 5, 7, 3, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 6, 6, 5, 5, 5, 7, 6, 5, 6, 6, 6, 5, 5, 5, 6, 6, 3, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 6, 5, 7, 6, 6, 6, 5, 5, 6, 7, 6, 6, 7, 6, 5, 5, 5, 8, 5, 5, 6, 5, 6, 7, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 7, 6, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 5, 6], \"xaxis\": \"x\", \"y\": [8.8, 9.5, 10.1, 9.9, 9.9, 10.1, 9.6, 8.8, 9.5, 11.0, 12.0, 9.7, 10.8, 12.4, 9.7, 11.4, 9.6, 12.8, 11.3, 9.5, 12.8, 11.0, 10.5, 9.3, 10.0, 10.4, 10.0, 10.5, 11.6, 12.3, 10.0, 10.2, 10.8, 9.0, 10.2, 12.8, 10.0, 11.2, 8.6, 8.6, 9.4, 9.4, 9.8, 9.5, 9.5, 10.0, 9.8, 9.8, 9.8, 9.8, 11.7, 11.0, 10.9, 10.9, 9.1, 11.0, 9.6, 8.9, 10.2, 9.9, 8.6, 8.9, 10.5, 10.2, 10.3, 9.1, 12.6, 9.8, 10.7, 9.5, 9.0, 9.5, 10.0, 9.1, 10.7, 9.5, 12.7, 12.0, 9.3, 9.0, 10.6, 9.2, 10.0, 9.5, 8.7, 8.7, 8.7, 9.7, 8.7, 8.7, 8.7, 9.0, 12.6, 12.6, 11.5, 9.2, 8.8, 11.4, 10.1, 8.8, 9.1, 9.4, 9.4, 9.0, 9.1, 9.2, 9.4, 9.1, 9.1, 10.3, 8.8, 8.9, 9.2, 9.1, 9.1, 9.7, 11.3, 11.8, 9.2, 9.2, 10.2, 8.8, 9.7, 9.1, 9.8, 11.0, 10.5, 9.7, 10.9, 10.9, 10.6, 9.7, 9.0, 9.2, 8.9, 9.6, 10.7, 8.7, 10.8, 11.8, 10.2, 8.7, 10.8, 9.7, 11.2, 10.9, 10.1, 9.0, 12.0, 9.4, 11.5, 9.9, 9.4, 10.4, 9.7, 8.9, 8.9, 12.4, 12.1, 12.1, 12.4, 9.1, 10.6, 8.9, 9.5, 9.8, 9.6, 12.6, 9.3, 10.0, 12.7, 11.0, 11.4, 11.5, 10.2, 11.4, 12.6, 9.4, 8.7, 9.2, 9.3, 9.2, 8.7, 9.6, 9.3, 9.3, 9.9, 11.0, 12.7, 8.9, 8.9, 8.7, 11.4, 9.6, 9.1, 9.1, 9.1, 8.9, 8.8, 8.9, 9.3, 8.8, 9.6, 12.0, 10.2, 8.8, 9.2, 9.9, 10.2, 9.5, 10.5, 11.2, 9.2, 9.7, 11.1, 9.4, 11.0, 9.4, 9.4, 11.0, 11.0, 9.1, 11.1, 9.1, 10.4, 8.7, 9.7, 9.1, 9.7, 8.7, 8.9, 9.6, 9.5, 9.0, 9.0, 9.0, 9.0, 9.6, 11.1, 9.6, 8.7, 10.4, 11.4, 9.7, 8.7, 11.3, 12.6, 10.9, 10.9, 10.0, 10.0, 9.8, 8.7, 11.7, 9.3, 9.6, 11.0, 11.0, 11.8, 11.4, 10.2, 8.9, 10.2, 9.6, 10.6, 8.9, 9.2, 9.7, 9.7, 9.7, 9.2, 9.7, 9.3, 9.0, 9.5, 9.8, 9.8, 10.6, 10.6, 12.4, 12.6, 12.3, 10.5, 9.3, 8.8, 8.8, 9.7, 9.0, 9.0, 9.0, 9.0, 10.5, 9.1, 9.8, 8.5, 9.4, 9.4, 11.2, 10.0, 10.3, 10.8, 10.5, 10.8, 11.1, 9.9, 9.9, 9.9, 9.9, 10.4, 10.4, 11.5, 12.5, 10.0, 10.0, 10.0, 9.1, 10.6, 10.5, 11.5, 10.1, 10.3, 10.5, 10.6, 10.4, 11.4, 10.5, 10.0, 10.0, 9.6, 10.4, 12.5, 10.6, 11.8, 9.8, 10.8, 11.8, 11.2, 9.3, 10.4, 10.2, 9.0, 10.0, 9.1, 10.0, 10.0, 9.6, 11.2, 8.8, 10.0, 10.0, 11.4, 11.9, 9.6, 11.9, 9.6, 9.0, 9.0, 9.5, 10.4, 10.6, 10.2, 8.9, 9.7, 9.0, 11.4, 12.3, 10.8, 9.4, 10.6, 11.6, 9.4, 10.6, 10.0, 9.2, 12.5, 12.5, 10.4, 10.0, 10.0, 10.4, 10.0, 9.0, 9.2, 9.2, 11.3, 12.5, 10.8, 10.1, 9.7, 9.3, 9.3, 10.6, 10.2, 12.2, 8.8, 10.0, 11.4, 11.4, 9.4, 11.7, 11.4, 8.8, 9.2, 8.7, 12.6, 10.0, 12.8, 9.4, 10.3, 11.4, 9.0, 9.6, 10.5, 10.5, 9.0, 9.6, 9.8, 9.0, 9.8, 10.5, 12.7, 10.4, 10.4, 10.4, 10.5, 10.4, 10.4, 9.4, 9.1, 9.3, 9.4, 9.8, 9.9, 9.2, 12.1, 12.2, 9.8, 12.4, 9.9, 9.2, 11.6, 10.4, 12.9, 9.3, 11.0, 11.5, 12.4, 9.8, 9.8, 10.5, 9.1, 10.1, 10.6, 10.5, 10.5, 9.8, 12.9, 9.5, 9.8, 8.5, 9.5, 9.3, 9.5, 9.4, 8.7, 8.9, 9.4, 9.4, 8.7, 9.6, 9.3, 10.0, 12.5, 9.6, 9.4, 9.5, 12.4, 10.5, 9.2, 10.4, 9.2, 10.6, 9.5, 9.2, 9.6, 9.7, 9.7, 10.7, 10.5, 8.9, 12.1, 12.7, 9.9, 11.4, 10.7, 12.5, 8.6, 12.5, 10.0, 8.6, 9.5, 9.6, 9.9, 9.9, 8.9, 8.9, 8.8, 10.0, 12.0, 10.0, 10.0, 12.1, 11.0, 11.2, 10.3, 10.4, 9.1, 10.4, 10.8, 11.7, 9.8, 9.8, 11.4, 11.2, 11.4, 9.2, 12.5, 12.6, 12.2, 11.2, 9.7, 9.3, 9.0, 9.0, 9.0, 9.1, 9.1, 9.0, 10.4, 9.5, 11.4, 8.7, 9.9, 9.9, 9.0, 10.0, 9.7, 11.8, 10.2, 8.7, 9.6, 11.3, 12.1, 9.6, 12.1, 11.3, 9.4, 10.4, 9.5, 12.3, 9.9, 10.1, 9.2, 10.4, 9.1, 10.0, 11.5, 9.8, 9.8, 9.4, 8.7, 11.6, 8.8, 12.7, 11.7, 10.2, 10.2, 12.7, 11.6, 12.3, 8.7, 9.4, 10.1, 9.7, 10.1, 9.7, 8.9, 10.8, 10.8, 9.5, 9.1, 10.9, 9.4, 10.8, 10.8, 10.5, 9.4, 10.8, 10.5, 11.5, 9.4, 10.8, 10.8, 10.8, 9.8, 9.8, 9.6, 9.6, 9.5, 10.7, 12.4, 11.1, 8.8, 8.7, 8.7, 8.8, 11.7, 10.9, 10.8, 9.6, 9.0, 9.0, 10.4, 11.4, 9.3, 11.0, 9.1, 9.4, 9.4, 10.5, 8.8, 8.8, 10.7, 9.5, 10.9, 10.8, 10.8, 9.2, 10.3, 10.3, 11.0, 9.0, 10.4, 9.5, 9.5, 9.0, 9.5, 9.0, 10.0, 9.1, 9.1, 9.1, 9.1, 9.5, 11.4, 12.2, 11.3, 10.2, 11.3, 10.0, 9.4, 12.2, 9.2, 9.4, 9.6, 9.5, 12.5, 9.6, 10.0, 9.3, 9.3, 11.6, 12.5, 10.6, 9.4, 9.1, 9.0, 11.8, 11.8, 11.8, 10.0, 9.7, 9.5, 9.4, 11.2, 9.0, 10.7, 9.0, 9.1, 10.8, 10.1, 9.9, 9.8, 9.8, 9.5, 9.5, 11.1, 9.5, 9.5, 9.4, 9.7, 13.9, 10.1, 10.5, 12.6, 10.9, 10.0, 11.2, 10.0, 9.2, 9.5, 12.3, 12.3, 10.0, 10.8, 10.5, 9.2, 9.1, 10.5, 10.2, 8.9, 10.4, 11.7, 12.4, 10.9, 10.2, 11.7, 9.4, 10.5, 9.4, 10.4, 9.5, 11.1, 9.1, 9.2, 9.6, 9.1, 9.2, 10.8, 9.6, 12.6, 11.0, 10.2, 9.4, 10.0, 12.2, 10.5, 11.5, 9.8, 11.4, 11.5, 10.2, 9.4, 10.5, 9.1, 12.2, 9.5, 9.3, 9.8, 9.8, 9.8, 9.8, 8.7, 10.2, 9.5, 11.0, 9.2, 10.9, 9.3, 9.3, 9.8, 9.3, 9.3, 9.4, 10.4, 12.1, 11.0, 9.0, 9.5, 8.8, 11.2, 9.3, 9.5, 8.8, 9.0, 9.3, 9.2, 9.2, 10.0, 9.3, 9.2, 10.9, 10.0, 10.9, 9.3, 9.0, 9.2, 9.6, 9.4, 11.1, 8.9, 9.3, 9.3, 9.8, 9.8, 8.9, 9.6, 9.6, 9.0, 9.5, 9.3, 9.2, 9.1, 9.5, 10.5, 9.0, 11.7, 9.1, 9.0, 9.1, 12.4, 9.2, 9.4, 9.6, 11.7, 9.8, 10.2, 12.5, 10.9, 11.0, 10.5, 11.5, 12.8, 12.2, 10.5, 12.8, 11.9, 11.9, 11.9, 12.0, 12.0, 8.8, 8.8, 10.8, 11.0, 11.0, 9.3, 10.8, 8.8, 11.5, 10.8, 9.4, 9.5, 8.6, 9.5, 10.3, 9.4, 9.4, 10.0, 9.4, 10.4, 9.1, 9.9, 12.1, 9.9, 12.5, 9.5, 8.5, 9.0, 10.1, 9.4, 8.6, 10.7, 9.6, 10.1, 10.0, 12.7, 10.2, 8.9, 11.9, 10.0, 9.9, 11.5, 11.5, 9.8, 12.2, 11.4, 11.0, 11.4, 11.0, 9.9, 11.0, 9.4, 12.2, 11.0, 10.3, 10.5, 10.5, 10.9, 10.5, 11.0, 9.7, 8.9, 9.6, 8.8, 11.1, 10.3, 12.2, 9.8, 8.8, 9.9, 9.9, 9.9, 9.2, 9.5, 9.2, 10.3, 11.0, 11.9, 10.2, 9.4, 8.9, 8.9, 10.0, 10.7, 9.8, 9.3, 9.5, 10.0, 9.0, 11.9, 8.9, 10.0, 9.6, 8.9, 8.9, 11.4, 9.0, 10.0, 9.6, 9.7, 9.5, 10.0, 12.2, 8.7, 10.2, 9.6, 10.0, 9.5, 11.5, 9.5, 9.8, 10.1, 10.0, 9.8, 9.5, 9.5, 10.2, 10.2, 9.0, 9.0, 12.3, 9.0, 11.6, 9.5, 11.5, 9.6, 9.0, 12.0, 11.4, 12.3, 12.6, 9.0, 12.0, 11.7, 9.2, 10.3, 8.6, 10.7, 9.8, 9.8, 10.7, 12.5, 11.9, 10.8, 10.5, 10.3, 10.3, 10.8, 12.0, 10.2, 10.2, 9.9, 10.1, 9.5, 10.5, 10.4, 9.5, 9.2, 10.1, 9.8, 9.4, 9.4, 10.4, 11.3, 10.8, 11.3, 9.3, 10.3, 10.5, 10.3, 11.2, 10.3, 9.5, 8.9, 10.2, 9.2, 10.3, 10.5, 9.5, 11.4, 11.4, 11.1, 10.5, 12.0, 9.7, 10.2, 9.5, 10.4, 9.3, 10.5, 10.0, 10.2, 10.2, 9.1, 10.2, 10.7, 9.7, 9.3, 11.0, 10.8, 10.7, 10.7, 8.8, 10.9, 10.5, 10.0, 10.4, 9.2, 12.6, 9.0, 9.2, 11.3, 10.3, 10.4, 10.0, 10.7, 9.0, 10.7, 8.7, 11.6, 9.4, 9.5, 9.5, 10.9, 9.7, 9.1, 11.1, 12.6, 11.0, 11.3, 9.7, 10.9, 10.9, 9.3, 12.7, 10.1, 10.0, 9.8, 10.1, 9.0, 9.4, 9.4, 9.2, 10.1, 8.6, 11.2, 11.2, 9.2, 10.6, 9.3, 8.9, 10.6, 10.6, 8.8, 11.0, 10.2, 10.1, 10.1, 14.0, 9.4, 11.8, 11.4, 10.7, 8.6, 11.5, 11.2, 12.6, 12.6, 9.3, 12.6, 12.1, 9.9, 10.7, 10.0, 10.4, 10.5, 9.7, 10.5, 9.0, 9.2, 10.1, 11.4, 10.8, 10.9, 9.2, 12.9, 12.0, 9.5, 11.8, 9.1, 9.7, 9.1, 10.0, 10.4, 9.5, 12.3, 11.7, 9.5, 11.5, 10.6, 10.2, 9.5, 10.5, 10.5, 8.9, 10.6, 9.5, 10.8, 9.5, 8.9, 8.9, 9.4, 10.6, 9.0, 10.5, 9.0, 9.0, 9.4, 9.0, 9.6, 9.0, 10.2, 9.4, 10.4, 10.4, 9.5, 10.6, 11.0, 9.6, 9.9, 9.6, 12.8, 11.4, 10.0, 9.1, 9.4, 10.2, 9.2, 9.4, 9.6, 10.1, 11.4, 10.6, 12.8, 8.9, 9.3, 11.1, 9.9, 9.6, 12.8, 10.7, 9.2, 9.1, 9.6, 9.2, 10.7, 9.1, 9.2, 10.7, 10.8, 10.8, 9.0, 10.7, 10.7, 9.4, 8.8, 9.0, 11.5, 12.5, 10.5, 9.7, 11.3, 10.7, 10.8, 10.6, 11.7, 9.2, 11.1, 11.7, 11.0, 12.5, 10.0, 10.6, 12.3, 12.7, 12.3, 10.5, 12.5, 12.4, 8.7, 12.4, 12.6, 11.0, 10.1, 10.5, 12.7, 10.9, 13.5, 9.7, 9.2, 10.6, 13.3, 13.5, 10.1, 9.4, 10.6, 11.3, 10.8, 10.4, 10.5, 9.3, 9.3, 12.2, 9.2, 10.3, 9.4, 10.2, 9.0, 9.3, 9.2, 9.4, 9.4, 9.5, 9.9, 11.1, 12.3, 8.6, 9.4, 9.4, 8.6, 10.9, 9.4, 10.9, 9.4, 9.2, 8.6, 9.4, 10.8, 10.5, 12.5, 12.1, 8.7, 12.7, 12.1, 12.5, 11.4, 12.9, 12.8, 11.2, 9.7, 9.7, 10.3, 11.6, 11.6, 9.7, 10.9, 12.6, 12.4, 11.5, 10.2, 11.4, 9.6, 10.3, 9.3, 10.7, 12.8, 9.5, 10.4, 10.3, 9.9, 10.7, 10.5, 9.6, 9.3, 10.0, 11.2, 10.8, 10.3, 8.8, 12.8, 13.2, 10.1, 11.0, 10.8, 12.8, 9.2, 10.5, 11.7, 9.5, 9.5, 8.8, 9.3, 12.6, 12.4, 10.1, 11.2, 10.0, 10.0, 10.8, 10.0, 10.4, 10.8, 9.8, 12.2, 12.7, 12.2, 11.9, 11.2, 10.4, 12.8, 12.7, 10.1, 10.0, 9.0, 11.4, 8.9, 9.3, 12.0, 10.8, 10.5, 10.6, 11.3, 9.5, 11.4, 10.1, 10.9, 8.9, 8.9, 9.3, 10.4, 12.0, 9.5, 9.5, 12.4, 11.2, 11.4, 11.4, 11.1, 10.4, 12.0, 12.3, 9.1, 10.5, 11.4, 9.5, 13.7, 13.4, 11.3, 10.0, 10.1, 12.2, 13.4, 9.3, 13.7, 12.3, 11.3, 8.9, 8.9, 11.5, 8.9, 9.3, 11.1, 10.9, 11.6, 10.2, 10.5, 11.4, 8.9, 10.6, 11.6, 11.5, 12.3, 10.8, 11.3, 9.3, 10.0, 11.0, 10.2, 10.8, 10.1, 11.6, 9.1, 10.0, 10.8, 11.4, 12.7, 11.3, 10.4, 9.6, 10.1, 9.6, 12.1, 12.2, 11.3, 9.6, 9.2, 10.4, 9.5, 8.9, 8.8, 10.5, 9.4, 12.2, 11.3, 12.2, 12.2, 11.2, 11.2, 11.5, 11.3, 9.3, 11.3, 11.8, 9.2, 9.2, 12.2, 12.2, 12.2, 10.6, 12.4, 10.8, 11.2, 11.0, 12.7, 10.2, 11.5, 12.3, 9.8, 9.3, 11.8, 11.3, 11.4, 10.8, 9.5, 10.2, 10.7, 10.8, 11.5, 10.7, 10.2, 10.1, 10.4, 9.5, 9.1, 10.6, 9.4, 9.8, 9.5, 9.3, 10.3, 11.1, 10.0, 12.3, 12.4, 12.3, 10.4, 12.1, 12.5, 13.0, 11.0, 10.1, 9.2, 12.6, 12.2, 9.8, 11.0, 10.0, 9.8, 10.5, 10.0, 11.2, 11.0, 11.2, 11.0, 10.5, 10.6, 10.6, 12.0, 10.1, 10.1, 9.2, 11.0, 10.0, 8.7, 8.7, 11.1, 11.0, 11.1, 8.7, 8.7, 11.2, 11.1, 10.8, 9.0, 10.3, 9.9, 10.0, 9.8, 10.8, 9.0, 9.1, 10.6, 10.6, 9.9, 10.6, 9.9, 9.9, 12.8, 10.3, 10.6, 8.7, 12.6, 11.0, 11.2, 10.7, 9.6, 10.6, 9.0, 10.5, 12.8, 10.1, 12.2, 12.8, 10.1, 10.1, 9.2, 9.9, 9.7, 9.9, 9.9, 9.7, 10.3, 10.3, 10.5, 10.5, 9.8, 10.6, 10.1, 9.0, 9.5, 11.5, 11.9, 10.1, 9.2, 8.7, 9.8, 9.2, 8.7, 11.2, 12.3, 10.4, 10.7, 10.5, 9.4, 9.2, 11.9, 9.2, 9.9, 11.4, 9.4, 10.7, 12.7, 13.5, 9.5, 12.9, 12.5, 9.5, 8.6, 10.0, 12.5, 10.1, 11.3, 10.6, 10.8, 10.7, 9.0, 9.2, 8.5, 11.3, 11.3, 9.4, 8.7, 9.4, 10.5, 9.7, 10.2, 9.4, 11.5, 9.6, 11.4, 11.5, 12.2, 11.0, 9.2, 10.2, 10.0, 9.7, 9.2, 10.5, 10.0, 10.1, 9.1, 10.2, 9.1, 10.5, 10.1, 12.1, 10.2, 9.4, 12.8, 9.0, 10.9, 8.8, 9.0, 10.2, 9.2, 11.3, 8.8, 9.3, 9.4, 10.3, 10.8, 8.8, 9.0, 11.5, 10.8, 11.8, 10.5, 9.9, 9.8, 11.4, 9.3, 9.3, 10.3, 8.9, 11.4, 11.1, 10.4, 10.1, 9.0, 11.9, 9.0, 9.0, 9.1, 9.0, 10.0, 9.1, 9.4, 11.4, 9.7, 9.0, 11.8, 10.2, 9.2, 11.0, 10.0, 12.2, 11.8, 11.6, 10.2, 10.3, 8.6, 9.6, 9.6, 11.3, 9.9, 9.6, 10.6, 9.8, 10.5, 10.8, 10.0, 10.1, 9.4, 11.5, 10.8, 9.9, 9.0, 9.4, 10.8, 10.9, 12.0, 11.5, 10.5, 9.3, 11.8, 10.0, 9.4, 11.4, 10.4, 9.5, 11.9, 11.1, 9.6, 12.0, 8.7, 9.6, 10.0, 11.4, 9.6, 12.9, 9.7, 9.3, 9.1, 8.6, 9.9, 9.3, 10.9, 10.2, 9.7, 11.4, 9.5, 10.2, 11.1, 9.7, 9.3, 8.8, 10.6, 9.3, 10.2, 10.2, 11.0, 9.6, 9.3, 8.8, 8.8, 8.9, 10.0, 12.2, 10.9, 9.5, 10.9, 10.9, 10.8, 12.0, 9.8, 9.5, 11.0, 11.0, 9.8, 10.5, 11.4, 10.1, 11.6, 11.4, 11.8, 12.1, 12.0, 12.1, 9.1, 9.3, 10.4, 9.1, 9.4, 9.6, 12.0, 11.3, 8.7, 9.9, 9.3, 9.5, 8.7, 9.9, 9.3, 9.4, 9.4, 8.8, 9.4, 8.8, 9.9, 9.4, 12.6, 11.1, 12.8, 12.0, 12.0, 9.2, 12.3, 13.0, 12.0, 10.9, 12.8, 10.0, 9.0, 10.4, 9.0, 10.0, 10.0, 11.3, 11.3, 12.0, 11.3, 12.0, 10.6, 9.3, 9.4, 11.0, 9.3, 9.4, 10.5, 11.0, 9.5, 11.2, 12.3, 9.0, 9.0, 9.0, 9.0, 11.4, 11.0, 12.3, 10.4, 10.3, 10.5, 9.8, 10.0, 9.7, 9.7, 9.8, 10.5, 10.0, 11.5, 9.5, 10.5, 10.2, 9.8, 11.6, 11.8, 10.1, 10.3, 10.4, 8.9, 8.9, 10.8, 9.2, 9.6, 10.4, 8.7, 9.2, 9.2, 9.2, 9.2, 9.2, 10.2, 9.2, 9.0, 9.7, 9.6, 10.0, 9.2, 9.1, 8.7, 8.7, 9.5, 9.5, 8.9, 8.9, 9.9, 12.6, 9.7, 10.4, 9.1, 10.4, 9.5, 8.9, 10.6, 12.0, 12.5, 9.6, 9.2, 9.9, 11.7, 9.6, 12.0, 12.5, 9.2, 9.9, 8.9, 9.0, 10.2, 9.6, 9.4, 10.4, 10.4, 10.0, 10.0, 10.5, 11.4, 10.2, 10.4, 11.0, 10.1, 9.2, 10.3, 10.2, 10.4, 11.1, 9.9, 9.0, 8.6, 9.0, 8.6, 9.5, 9.0, 10.0, 9.0, 9.0, 10.2, 9.6, 9.7, 10.2, 13.0, 10.8, 9.7, 9.0, 9.9, 9.2, 8.7, 10.1, 10.1, 9.5, 9.9, 8.7, 9.0, 8.6, 10.5, 9.5, 10.1, 11.7, 10.7, 11.7, 9.2, 8.8, 8.8, 9.5, 10.2, 9.1, 10.5, 9.0, 8.9, 8.9, 8.9, 8.9, 8.9, 9.1, 10.1, 10.0, 9.5, 12.3, 9.1, 8.9, 9.6, 11.6, 8.8, 8.9, 8.8, 8.9, 8.9, 9.0, 10.0, 10.0, 11.1, 11.6, 10.6, 8.8, 8.9, 10.1, 10.0, 12.2, 11.0, 10.0, 11.1, 10.4, 11.8, 10.8, 12.5, 11.8, 11.6, 10.4, 11.5, 10.1, 9.2, 10.1, 9.2, 8.9, 10.1, 8.9, 9.7, 9.2, 11.0, 10.7, 10.8, 9.8, 11.0, 10.4, 10.2, 10.7, 9.0, 10.6, 9.5, 9.0, 9.2, 11.0, 9.9, 10.6, 9.3, 9.6, 9.5, 9.7, 9.7, 8.7, 8.7, 12.4, 12.4, 10.6, 8.7, 12.0, 9.0, 8.8, 9.5, 10.8, 11.4, 10.3, 9.5, 9.9, 10.2, 10.2, 11.0, 12.1, 9.1, 9.5, 9.5, 9.8, 9.5, 10.3, 9.6, 10.2, 10.5, 10.4, 9.6, 10.7, 10.5, 10.6, 9.6, 9.6, 9.5, 9.4, 9.8, 9.6, 9.2, 9.5, 9.2, 9.4, 9.4, 9.3, 9.1, 9.5, 9.1, 10.6, 9.5, 12.4, 8.7, 8.8, 10.6, 9.1, 9.0, 10.3, 9.1, 9.5, 8.8, 8.8, 8.8, 9.9, 9.5, 8.8, 11.7, 10.8, 12.0, 10.3, 9.0, 12.2, 9.9, 9.0, 12.2, 10.1, 9.3, 9.5, 9.2, 11.7, 11.0, 9.6, 9.6, 11.9, 10.8, 10.1, 10.9, 10.1, 10.4, 9.2, 9.6, 9.6, 9.0, 11.5, 10.2, 9.9, 9.6, 10.6, 9.2, 11.8, 12.2, 9.6, 10.6, 10.3, 10.2, 10.7, 11.7, 12.0, 10.6, 12.2, 11.0, 12.4, 9.4, 12.0, 11.6, 9.4, 9.4, 9.1, 9.1, 9.1, 9.1, 9.1, 9.2, 9.2, 9.1, 9.1, 9.2, 9.0, 9.2, 10.8, 9.5, 11.0, 10.0, 9.5, 10.1, 9.5, 9.5, 9.5, 9.4, 9.4, 12.7, 9.7, 9.7, 9.4, 9.4, 9.5, 11.7, 11.7, 9.7, 9.5, 9.1, 10.3, 9.7, 9.9, 9.9, 10.2, 12.1, 11.3, 11.4, 12.2, 9.9, 10.3, 12.2, 10.4, 11.4, 9.9, 10.0, 11.5, 10.5, 12.5, 10.5, 9.9, 11.4, 9.8, 11.4, 9.2, 8.9, 8.9, 9.5, 11.5, 9.5, 11.5, 9.5, 9.7, 9.7, 9.5, 9.4, 9.0, 10.6, 9.5, 9.1, 9.4, 8.8, 10.4, 8.9, 10.6, 9.0, 10.6, 10.6, 9.0, 8.8, 10.5, 9.5, 9.0, 10.4, 10.0, 10.4, 9.0, 9.3, 9.0, 9.3, 9.0, 11.5, 9.0, 10.4, 9.0, 10.6, 10.4, 8.5, 9.3, 10.5, 9.9, 10.4, 10.1, 10.5, 9.2, 9.4, 10.6, 9.4, 8.7, 10.2, 10.3, 9.5, 9.5, 9.5, 9.5, 9.4, 9.4, 9.5, 12.6, 10.5, 10.8, 9.9, 12.6, 12.2, 10.0, 10.6, 9.5, 12.8, 12.2, 12.6, 9.4, 9.0, 9.1, 9.4, 12.2, 10.0, 9.2, 9.3, 9.8, 9.2, 12.0, 9.3, 12.6, 12.2, 11.0, 12.0, 8.8, 8.9, 12.7, 11.8, 10.2, 9.9, 11.1, 9.4, 9.7, 9.7, 9.7, 9.7, 9.8, 9.3, 10.5, 9.3, 12.6, 8.9, 10.3, 10.6, 9.0, 9.7, 9.5, 10.3, 9.7, 12.3, 10.5, 9.5, 10.0, 8.8, 10.9, 12.2, 9.5, 10.0, 9.6, 8.7, 10.7, 11.1, 12.5, 10.4, 11.5, 9.4, 9.3, 10.1, 9.7, 10.5, 9.7, 9.2, 9.8, 9.0, 9.1, 10.4, 10.7, 10.5, 9.2, 11.5, 10.4, 12.0, 12.2, 12.0, 9.8, 9.3, 9.6, 9.5, 10.2, 10.4, 11.0, 10.4, 8.7, 9.9, 9.9, 11.3, 12.0, 10.7, 10.1, 9.6, 9.6, 8.7, 10.3, 9.1, 11.8, 11.9, 10.3, 10.0, 10.2, 10.0, 12.7, 9.6, 9.5, 12.7, 11.0, 9.1, 10.2, 10.1, 9.2, 9.4, 10.2, 9.2, 10.0, 10.1, 9.0, 9.5, 9.1, 13.3, 9.5, 9.2, 10.1, 9.2, 10.1, 11.2, 9.8, 11.2, 9.8, 9.4, 9.0, 9.4, 8.9, 9.1, 9.8, 9.4, 10.0, 9.4, 9.9, 10.0, 11.5, 9.2, 10.0, 9.2, 10.0, 10.0, 9.8, 10.5, 10.6, 9.4, 9.4, 11.0, 10.8, 9.0, 9.6, 10.6, 10.6, 9.6, 9.2, 9.2, 9.5, 9.5, 10.3, 8.8, 8.7, 8.7, 10.2, 10.1, 9.5, 9.5, 11.6, 10.7, 10.1, 11.1, 9.8, 9.0, 11.1, 9.5, 9.4, 10.2, 9.8, 9.5, 9.5, 9.0, 10.1, 8.8, 11.9, 11.9, 9.3, 10.0, 9.5, 9.3, 9.7, 9.7, 10.2, 10.8, 8.8, 8.8, 11.4, 8.8, 9.8, 9.4, 9.4, 9.4, 9.4, 9.7, 12.3, 9.8, 9.0, 9.2, 9.4, 9.9, 9.8, 12.3, 11.9, 10.2, 9.5, 11.9, 9.2, 9.7, 11.5, 10.4, 11.6, 9.7, 10.4, 11.5, 10.2, 9.8, 9.0, 10.5, 9.4, 9.4, 10.8, 10.7, 10.6, 9.2, 9.5, 9.5, 10.0, 10.6, 10.6, 10.6, 9.2, 11.0, 11.2, 9.6, 9.4, 9.5, 9.3, 9.4, 9.5, 9.4, 11.2, 11.2, 11.2, 8.8, 11.2, 11.2, 9.4, 11.1, 9.6, 11.1, 9.4, 10.6, 8.9, 12.3, 11.4, 9.6, 10.3, 11.4, 12.1, 9.9, 9.7, 10.5, 8.9, 9.4, 9.6, 12.6, 9.2, 10.4, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.2, 9.0, 9.7, 10.1, 11.0, 10.8, 10.8, 13.5, 10.6, 9.8, 11.7, 9.8, 9.0, 11.3, 9.4, 11.7, 11.3, 11.3, 12.0, 10.6, 10.8, 10.8, 12.0, 9.4, 9.4, 11.3, 9.4, 12.0, 10.3, 10.3, 10.3, 11.3, 9.4, 8.7, 9.4, 11.3, 10.3, 12.0, 8.0, 10.4, 10.7, 10.2, 10.9, 10.5, 11.7, 8.6, 9.0, 8.7, 12.8, 9.0, 8.7, 11.8, 11.6, 11.8, 10.6, 9.7, 10.3, 10.2, 10.1, 10.9, 9.3, 10.2, 10.2, 9.5, 9.3, 12.9, 8.7, 9.4, 10.1, 10.0, 11.1, 10.3, 12.2, 9.3, 11.3, 10.8, 11.2, 12.5, 9.3, 12.9, 11.2, 12.6, 9.3, 12.9, 12.9, 9.5, 11.9, 10.3, 10.3, 11.2, 12.0, 9.6, 9.2, 12.9, 9.3, 12.1, 9.6, 11.2, 11.2, 12.9, 9.2, 9.3, 9.2, 9.3, 10.7, 9.8, 10.3, 10.7, 11.3, 8.8, 10.8, 9.8, 9.3, 11.5, 8.8, 8.8, 8.8, 9.4, 9.4, 9.6, 8.8, 9.3, 8.9, 8.9, 10.0, 9.1, 9.3, 9.4, 10.1, 8.9, 10.8, 10.0, 10.9, 12.0, 9.3, 12.3, 10.4, 10.9, 10.5, 9.8, 10.5, 9.9, 11.4, 9.2, 9.7, 10.0, 11.4, 10.3, 9.9, 10.5, 9.8, 9.3, 12.4, 9.3, 9.3, 9.5, 10.5, 10.5, 12.8, 10.8, 10.0, 11.8, 10.0, 11.8, 12.0, 12.6, 11.9, 10.6, 9.2, 10.0, 9.2, 9.3, 10.2, 10.2, 8.7, 10.7, 12.1, 9.5, 11.2, 12.0, 9.5, 12.1, 10.7, 8.8, 10.8, 13.1, 12.5, 11.7, 11.7, 11.6, 11.3, 12.5, 11.4, 12.2, 11.7, 10.4, 10.4, 10.4, 9.1, 12.2, 9.1, 9.4, 9.4, 10.4, 9.2, 9.4, 13.5, 9.4, 10.9, 13.5, 9.4, 11.4, 12.4, 9.2, 9.4, 10.5, 11.5, 10.9, 10.8, 8.9, 8.9, 9.4, 12.2, 12.1, 10.9, 10.1, 12.2, 13.0, 11.0, 10.8, 13.0, 9.3, 11.4, 9.2, 9.9, 10.5, 12.4, 9.5, 10.5, 9.1, 11.5, 11.5, 11.2, 10.8, 9.4, 11.0, 11.3, 11.2, 10.5, 9.1, 10.4, 11.2, 11.1, 11.2, 10.5, 10.0, 10.0, 10.9, 10.9, 11.2, 11.7, 10.0, 9.5, 9.0, 10.0, 11.9, 10.6, 11.0, 11.2, 12.0, 12.6, 11.2, 10.5, 10.2, 11.0, 12.2, 12.3, 10.6, 10.4, 12.0, 12.7, 10.6, 12.3, 12.7, 11.4, 12.0, 12.4, 12.1, 11.4, 10.7, 9.3, 12.7, 11.7, 10.7, 11.8, 9.9, 13.4, 12.8, 12.8, 10.5, 11.5, 10.5, 13.0, 12.4, 10.2, 9.0, 12.0, 11.7, 10.0, 10.3, 9.0, 11.1, 9.0, 10.5, 11.9, 9.4, 11.4, 10.8, 9.8, 9.3, 11.4, 11.3, 11.3, 9.5, 9.4, 11.9, 9.3, 11.4, 11.4, 12.7, 13.5, 11.2, 10.7, 10.8, 10.5, 13.0, 10.8, 9.1, 10.1, 11.9, 12.0, 12.0, 9.1, 11.6, 11.9, 10.2, 10.8, 9.8, 11.4, 9.8, 10.1, 9.8, 9.8, 10.7, 10.6, 9.3, 9.8, 10.7, 14.0, 11.0, 11.0, 9.4, 9.0, 9.0, 10.0, 9.0, 9.0, 12.4, 11.3, 12.0, 11.7, 10.0, 13.2, 11.0, 11.0, 9.2, 13.0, 10.6, 13.0, 9.0, 9.0, 11.5, 11.0, 11.5, 9.9, 10.4, 9.0, 9.9, 11.0, 12.1, 9.7, 9.7, 12.2, 12.4, 10.5, 10.4, 12.0, 12.7, 10.9, 10.9, 10.9, 11.4, 11.0, 12.6, 11.6, 10.5, 10.9, 10.9, 12.5, 12.1, 11.3, 13.3, 10.9, 10.9, 10.5, 11.6, 11.4, 11.0, 12.1, 11.0, 12.6, 13.0, 8.8, 9.5, 11.8, 12.2, 10.7, 11.0, 11.4, 10.7, 12.0, 11.9, 11.4, 11.8, 10.6, 9.7, 11.0, 10.7, 11.0, 10.5, 10.4, 10.5, 12.0, 12.0, 9.2, 10.9, 9.5, 9.4, 11.3, 10.4, 9.4, 11.3, 8.8, 10.8, 9.4, 9.4, 9.2, 10.3, 9.9, 12.4, 11.9, 11.7, 9.4, 9.6, 9.4, 10.4, 9.5, 11.9, 12.5, 13.4, 12.7, 9.1, 10.5, 10.4, 10.4, 12.5, 10.4, 9.0, 9.8, 9.0, 10.7, 12.4, 12.5, 12.5, 12.1, 11.3, 12.0, 10.4, 12.2, 8.6, 9.1, 12.1, 12.0, 10.5, 10.4, 11.9, 13.7, 11.3, 10.5, 13.7, 10.1, 12.3, 12.0, 11.3, 9.5, 11.4, 11.9, 10.0, 10.0, 11.3, 11.7, 11.0, 12.2, 10.7, 10.9, 10.2, 11.9, 11.1, 11.2, 11.4, 10.6, 10.3, 10.4, 11.9, 11.9, 10.4, 9.2, 11.3, 11.3, 11.0, 11.9, 12.9, 10.8, 9.1, 10.4, 12.9, 12.2, 9.2, 10.3, 11.0, 11.0, 11.7, 12.0, 12.7, 8.8, 11.3, 12.8, 11.2, 8.9, 11.2, 11.1, 10.8, 9.3, 8.9, 12.7, 12.0, 11.2, 8.8, 8.8, 8.8, 10.4, 8.8, 10.4, 14.0, 8.8, 13.1, 12.3, 12.6, 12.0, 9.5, 12.0, 12.7, 10.5, 12.9, 9.5, 12.0, 12.7, 11.9, 12.0, 12.5, 12.1, 12.5, 9.9, 10.7, 12.0, 12.2, 12.4, 12.4, 10.3, 12.0, 10.5, 9.5, 10.5, 12.3, 11.9, 9.8, 12.3, 11.4, 11.0, 10.8, 12.8, 11.0, 10.2, 12.5, 11.6, 11.9, 9.8, 11.0, 10.9, 11.0, 12.5, 11.0, 12.0, 12.4, 12.5, 12.8, 11.0, 9.1, 12.4, 12.9, 10.9, 10.8, 10.6, 9.0, 12.0, 11.8, 10.6, 12.3, 11.5, 11.1, 9.0, 9.9, 12.8, 12.9, 12.9, 12.0, 12.0, 11.2, 13.3, 9.9, 9.5, 9.4, 11.0, 9.4, 11.5, 12.5, 11.9, 10.4, 11.2, 12.5, 11.0, 9.8, 12.3, 11.0, 12.6, 11.6, 12.3, 13.4, 9.8, 11.5, 11.6, 11.1, 11.0, 11.3, 9.9, 12.6, 11.8, 11.4, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 13.0, 9.3, 12.6, 9.6, 8.0, 11.8, 10.2, 12.7, 9.4, 10.2, 12.0, 11.3, 11.8, 10.9, 9.8, 12.2, 11.1, 9.4, 11.4, 10.2, 12.8, 10.1, 9.4, 12.2, 10.9, 10.9, 10.9, 9.4, 9.4, 11.4, 12.9, 9.4, 12.0, 10.1, 9.4, 9.4, 9.2, 11.8, 12.3, 11.4, 12.9, 12.3, 13.5, 12.8, 12.8, 12.8, 11.0, 10.6, 12.4, 12.9, 11.1, 12.9, 11.8, 9.1, 12.7, 12.0, 11.2, 12.4, 10.4, 10.4, 12.7, 12.5, 12.0, 11.6, 12.6, 10.2, 10.4, 11.5, 11.0, 10.1, 10.5, 12.1, 9.9, 11.4, 9.5, 9.5, 9.5, 10.9, 9.5, 12.6, 9.5, 11.1, 9.5, 9.5, 10.6, 10.6, 10.8, 10.9, 9.9, 11.3, 12.6, 12.5, 12.4, 11.8, 12.2, 10.7, 11.3, 12.5, 12.4, 11.3, 9.9, 11.3, 12.6, 11.5, 12.3, 12.2, 13.2, 10.2, 11.5, 13.2, 12.2, 11.0, 13.2, 9.5, 10.2, 10.2, 11.4, 12.5, 9.2, 12.1, 10.7, 12.1, 11.2, 10.6, 11.8, 12.5, 9.2, 12.6, 12.8, 12.3, 12.3, 12.4, 12.3, 9.1, 9.1, 10.6, 10.3, 9.5, 11.1, 10.8, 11.2, 10.8, 11.4, 11.2, 10.2, 11.1, 9.5, 10.2, 11.0, 11.5, 9.8, 10.1, 8.8, 11.5, 12.7, 9.8, 12.9, 9.8, 12.7, 8.5, 12.7, 13.1, 9.1, 12.5, 9.1, 9.1, 11.2, 12.5, 9.1, 9.1, 9.1, 11.5, 12.9, 12.5, 12.3, 11.4, 9.4, 9.1, 9.4, 12.0, 11.1, 11.8, 11.4, 9.1, 12.1, 10.4, 9.2, 13.0, 12.1, 11.5, 11.5, 10.0, 11.1, 12.4, 12.2, 10.6, 11.1, 13.9, 9.2, 10.5, 11.3, 12.9, 12.9, 9.6, 12.9, 12.9, 8.8, 13.2, 9.2, 11.3, 10.5, 10.5, 12.6, 9.5, 9.8, 13.4, 11.8, 9.8, 13.1, 12.6, 10.4, 13.4, 13.0, 13.4, 10.2, 11.7, 9.5, 11.7, 11.4, 11.8, 11.2, 13.0, 13.0, 10.9, 11.6, 11.3, 12.0, 10.5, 13.1, 13.0, 10.9, 9.1, 13.4, 11.5, 11.2, 10.9, 13.5, 9.1, 9.9, 10.5, 11.7, 11.0, 13.0, 13.6, 12.3, 13.3, 13.7, 11.1, 13.4, 9.1, 11.3, 9.4, 9.1, 11.6, 11.6, 12.4, 9.8, 11.1, 13.1, 9.7, 9.2, 11.7, 10.6, 9.7, 9.2, 10.9, 10.1, 12.2, 12.7, 13.0, 11.2, 9.4, 11.0, 11.0, 9.2, 9.4, 9.2, 12.3, 11.0, 10.0, 9.0, 9.0, 9.0, 11.1, 9.9, 12.2, 11.1, 9.0, 11.8, 12.9, 9.0, 12.4, 9.0, 12.9, 11.2, 12.6, 11.5, 11.3, 11.2, 11.5, 10.5, 12.6, 11.9, 10.1, 11.0, 10.6, 11.3, 11.2, 11.5, 11.1, 12.8, 12.3, 10.4, 11.5, 11.7, 10.7, 9.5, 9.5, 9.5, 12.0, 10.8, 10.7, 10.7, 10.7, 12.1, 11.9, 10.8, 12.3, 9.4, 9.9, 10.4, 10.4, 12.6, 12.5, 9.4, 9.2, 11.2, 9.2, 9.2, 9.4, 11.2, 10.8, 9.2, 9.2, 12.5, 9.3, 11.4, 10.0, 10.6, 10.7, 10.0, 12.5, 10.6, 12.8, 9.3, 11.4, 9.5, 9.5, 9.5, 10.8, 10.8, 8.8, 10.8, 11.0, 12.4, 11.3, 11.2, 12.5, 10.0, 11.0, 10.5, 10.5, 11.0, 11.4, 11.3, 12.2, 12.6, 11.1, 12.3, 10.4, 8.8, 9.5, 8.8, 10.4, 13.0, 12.2, 10.5, 10.8, 13.2, 13.0, 10.0, 10.4, 12.4, 12.9, 13.2, 10.5, 13.0, 11.2, 12.7, 9.4, 12.9, 13.0, 13.6, 9.1, 10.4, 13.6, 12.2, 8.7, 10.5, 10.2, 12.5, 11.3, 10.2, 12.6, 10.2, 9.8, 10.8, 12.5, 12.5, 11.5, 11.4, 10.5, 12.6, 8.7, 11.0, 11.3, 10.2, 11.6, 9.8, 10.1, 9.2, 9.1, 9.1, 9.1, 9.1, 11.7, 12.6, 9.0, 10.1, 13.6, 9.1, 9.2, 8.8, 10.0, 9.1, 11.2, 9.2, 9.2, 9.5, 11.9, 9.8, 9.8, 10.8, 11.3, 12.1, 11.3, 10.8, 13.5, 10.3, 9.0, 11.6, 10.3, 12.5, 8.6, 13.4, 12.7, 9.2, 10.2, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.9, 9.0, 9.0, 11.0, 9.0, 10.0, 10.7, 10.7, 13.4, 11.0, 10.0, 10.7, 10.7, 11.0, 11.0, 11.1, 10.9, 11.5, 13.4, 9.4, 9.4, 9.4, 10.6, 9.4, 12.0, 10.2, 10.6, 13.5, 9.7, 12.2, 12.3, 12.2, 11.4, 12.7, 9.7, 10.8, 11.0, 9.5, 10.1, 13.2, 8.8, 9.5, 9.5, 9.5, 9.5, 9.5, 10.4, 9.9, 10.0, 10.1, 9.4, 9.3, 10.9, 11.4, 10.3, 11.0, 10.9, 10.8, 10.3, 11.0, 9.3, 10.2, 10.2, 10.8, 10.5, 11.1, 10.9, 11.4, 10.3, 12.9, 9.9, 11.3, 11.5, 11.5, 10.7, 10.4, 12.5, 9.5, 11.3, 13.0, 11.5, 11.5, 11.3, 13.2, 11.5, 9.6, 9.6, 9.7, 9.2, 8.4, 12.4, 12.4, 9.2, 8.4, 11.7, 11.0, 11.9, 13.2, 11.7, 9.1, 12.6, 9.1, 10.5, 10.6, 12.6, 13.7, 12.0, 12.5, 12.1, 11.3, 12.0, 10.3, 12.7, 9.2, 9.2, 9.5, 10.1, 10.1, 13.0, 13.1, 11.0, 9.2, 9.4, 9.5, 10.2, 10.1, 8.6, 9.0, 9.6, 9.9, 10.5, 11.4, 9.4, 11.1, 8.9, 8.9, 10.8, 12.2, 8.9, 12.5, 12.2, 12.5, 8.9, 10.8, 11.4, 10.8, 10.6, 9.2, 12.2, 12.3, 10.4, 10.4, 11.0, 10.6, 9.2, 13.5, 11.4, 11.5, 14.0, 12.5, 12.5, 12.8, 11.2, 11.2, 13.6, 9.2, 12.5, 11.1, 11.2, 14.0, 13.6, 9.4, 14.2, 13.2, 11.2, 10.2, 12.8, 10.1, 10.1, 10.3, 9.9, 11.5, 9.0, 9.0, 12.1, 13.3, 11.5, 11.0, 10.7, 9.4, 10.3, 9.3, 12.0, 11.0, 9.3, 10.1, 11.1, 9.9, 11.0, 11.0, 12.5, 12.7, 9.3, 9.3, 10.1, 8.8, 11.2, 10.8, 8.8, 11.2, 10.3, 12.0, 9.5, 9.5, 9.8, 9.0, 13.0, 11.8, 8.8, 11.2, 9.5, 9.4, 9.5, 10.4, 9.8, 10.4, 10.3, 9.4, 9.5, 11.9, 12.8, 13.0, 10.4, 10.4, 10.7, 10.7, 11.9, 10.4, 12.8, 9.9, 9.9, 9.4, 11.4, 9.9, 9.4, 9.2, 10.5, 11.0, 11.0, 12.1, 11.0, 12.8, 10.5, 10.5, 10.5, 9.5, 9.2, 11.1, 12.3, 11.1, 12.6, 9.5, 9.2, 10.8, 11.3, 12.8, 10.5, 9.8, 8.5, 9.3, 9.2, 11.4, 8.5, 9.3, 8.4, 9.2, 9.2, 10.4, 11.6, 12.4, 10.4, 9.3, 12.2, 11.0, 11.4, 9.5, 9.2, 11.1, 9.2, 11.0, 9.9, 9.9, 9.5, 12.4, 9.4, 9.3, 8.7, 8.7, 8.7, 8.7, 9.0, 10.7, 10.7, 11.3, 8.7, 11.7, 9.3, 8.7, 9.0, 11.7, 10.7, 11.4, 10.7, 11.3, 10.0, 10.0, 11.2, 9.7, 12.5, 12.9, 11.8, 10.6, 11.8, 10.7, 9.9, 12.0, 10.4, 8.5, 9.9, 9.4, 10.4, 11.0, 11.0, 10.4, 9.8, 9.4, 10.6, 10.1, 11.5, 11.4, 9.2, 9.7, 11.3, 9.6, 8.9, 10.0, 9.2, 9.0, 12.8, 9.0, 9.5, 10.0, 11.0, 9.2, 10.6, 10.0, 10.0, 11.7, 12.5, 11.1, 9.7, 12.3, 12.2, 11.3, 11.6, 11.3, 11.1, 11.2, 11.3, 12.0, 8.8, 8.8, 12.0, 12.0, 9.0, 9.3, 8.7, 12.8, 11.5, 10.0, 10.0, 10.3, 10.4, 13.4, 11.2, 9.1, 9.1, 10.8, 12.5, 11.3, 12.8, 9.1, 12.7, 11.0, 10.4, 10.4, 10.7, 10.9, 10.4, 10.4, 9.7, 11.0, 9.6, 13.9, 9.4, 12.5, 9.6, 9.5, 9.6, 9.5, 9.6, 8.7, 8.7, 8.7, 8.7, 8.7, 8.7, 10.4, 10.7, 12.0, 12.1, 13.1, 12.4, 12.6, 8.7, 12.0, 11.6, 9.3, 9.3, 11.1, 10.2, 10.6, 11.3, 9.4, 9.3, 11.1, 9.9, 11.8, 12.6, 9.4, 10.5, 12.3, 11.3, 9.6, 12.0, 11.2, 10.2, 12.4, 10.2, 13.4, 12.6, 9.8, 9.1, 12.4, 12.5, 11.7, 12.9, 10.1, 10.3, 11.7, 10.3, 10.8, 11.2, 11.8, 9.8, 10.0, 8.8, 10.1, 9.5, 9.5, 9.5, 9.2, 12.2, 9.5, 11.3, 12.1, 9.2, 11.2, 12.5, 10.6, 10.4, 10.1, 9.9, 11.0, 10.0, 12.7, 12.1, 10.4, 10.4, 9.2, 9.2, 10.5, 9.2, 11.9, 10.1, 11.1, 10.8, 11.8, 9.2, 9.2, 12.3, 10.1, 11.4, 10.4, 9.8, 9.9, 9.8, 11.2, 10.9, 9.2, 9.2, 12.0, 12.1, 12.4, 11.2, 12.7, 12.2, 12.2, 12.2, 11.2, 12.7, 12.7, 12.1, 9.4, 10.1, 9.4, 8.9, 8.9, 8.9, 8.9, 13.0, 10.3, 10.1, 10.5, 8.9, 10.1, 10.1, 11.0, 11.0, 11.0, 11.0, 10.0, 10.5, 9.7, 10.1, 9.4, 11.2, 9.4, 10.8, 9.4, 11.2, 11.0, 12.4, 9.4, 9.4, 9.5, 10.0, 12.5, 10.9, 10.5, 10.8, 11.0, 11.8, 12.6, 10.2, 12.0, 12.5, 11.5, 11.94, 12.89333333, 9.4, 12.2, 11.94, 12.89333333, 9.5, 10.6, 10.5, 11.46666667, 11.4, 9.5, 9.2, 9.5, 10.98, 9.4, 9.5, 9.2, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 10.4, 8.8, 10.03333333, 11.3, 10.4, 9.2, 11.1, 9.2, 11.3, 9.1, 9.4, 13.2, 12.7, 10.7, 11.43333333, 11.1, 12.7, 10.53333333, 11.6, 9.533333333, 9.8, 10.7, 12.0, 12.8, 9.5, 10.93333333, 9.1, 12.6, 9.5, 10.9, 10.93333333, 9.6, 9.3, 11.36666667, 12.5, 9.5, 11.0, 9.4, 11.33333333, 8.8, 9.4, 11.06666667, 12.2, 11.0, 11.33333333, 9.5, 9.5, 11.0, 11.2, 9.3, 10.8, 9.2, 9.4, 9.2, 10.5, 10.8, 9.4, 9.8, 9.8, 9.8, 9.4, 9.8, 12.1, 12.3, 9.733333333, 9.4, 9.4, 12.8, 11.05, 9.4, 12.8, 9.733333333, 13.1, 11.5, 13.1, 11.5, 9.1, 9.75, 10.5, 8.8, 8.8, 8.8, 8.8, 10.5, 10.5, 8.8, 9.9, 9.9, 9.9, 12.2, 10.8, 8.7, 13.2, 12.7, 9.4, 11.2, 11.33333333, 11.9, 11.35, 10.5, 9.8, 9.1, 12.4, 9.1, 9.8, 11.3, 11.3, 13.1, 12.5, 10.3, 10.7, 10.4, 9.5, 9.8, 12.5, 9.4, 9.0, 9.0, 9.0, 13.0, 9.9, 9.4, 10.6, 13.4, 12.5, 9.3, 9.3, 11.0, 10.3, 11.3, 10.9, 11.3, 12.1, 11.1, 9.8, 10.1, 12.4, 12.7, 9.6, 9.6, 9.1, 12.8, 9.6, 12.4, 9.55, 9.1, 12.5, 9.9, 11.2, 13.0, 13.0, 11.7, 13.1, 12.0, 10.55, 11.45, 10.2, 11.45, 9.3, 10.8, 12.2, 11.0, 10.4, 11.4, 14.05, 10.7, 10.2, 11.2, 12.33333333, 11.5, 9.5, 13.4, 12.5, 12.5, 11.2, 8.8, 11.2, 12.7, 9.8, 9.8, 11.7, 9.8, 9.6, 9.8, 9.7, 10.0, 11.7, 12.3, 9.8, 9.0, 9.1, 9.1, 9.1, 11.4, 10.5, 12.4, 9.1, 9.1, 10.1, 10.9, 11.05, 12.75, 12.7, 11.1, 11.1, 12.75, 13.0, 12.0, 11.5, 10.5, 11.1, 11.1, 11.1, 13.1, 12.75, 12.7, 9.6, 11.7, 9.7, 10.9, 10.7, 13.8, 12.15, 10.8, 10.7, 10.8, 10.8, 12.0, 10.8, 12.2, 9.4, 11.4, 12.5, 13.05, 12.4, 12.9, 12.0, 11.3, 10.0, 11.8, 9.4, 8.8, 11.1, 10.5, 9.3, 11.4, 11.8, 12.4, 11.6, 11.1, 12.4, 11.1, 11.0, 12.2, 11.0, 12.9, 10.9, 13.4, 10.7, 11.0, 11.4, 10.2, 11.0, 9.1, 11.0, 11.5, 12.0, 11.2, 11.2, 12.6, 11.0, 10.8, 10.9, 9.8, 9.8, 9.5, 11.26666667, 10.8, 13.4, 11.3, 8.9, 11.2, 11.5, 13.0, 12.6, 13.1, 11.2, 11.7, 10.9, 10.9, 11.6, 10.4, 10.9, 11.7, 10.8, 11.2, 10.0, 10.56666667, 11.73333333, 10.6, 10.5, 11.75, 11.4, 12.4, 10.1, 12.3, 13.1, 10.65, 11.4, 9.3, 10.2, 10.2, 13.1, 9.6, 12.8, 10.96666667, 10.96666667, 10.96666667, 11.0, 13.4, 11.2, 12.4, 11.2, 12.4, 10.13333333, 10.13333333, 12.4, 9.1, 10.15, 10.15, 11.5, 8.9, 10.46666667, 10.46666667, 11.8, 11.63333333, 10.6, 9.6, 11.8, 8.9, 10.5, 10.2, 13.1, 11.8, 12.2, 11.45, 10.5, 10.2, 9.0, 9.0, 9.0, 9.0, 9.1, 8.8, 9.0, 9.1, 12.9, 13.0, 12.9, 9.2, 9.8, 9.8, 10.1, 10.1, 10.9, 9.6, 10.4, 11.8, 10.8, 10.6, 12.7, 12.2, 10.8, 10.4, 11.1, 11.8, 10.0, 10.8, 10.3, 9.9, 10.0, 12.25, 10.2, 9.4, 9.7, 10.2, 10.4, 12.2, 9.4, 10.6, 10.7, 11.85, 11.7, 11.7, 10.15, 11.63333333, 10.8, 10.8, 12.3, 12.5, 11.65, 9.6, 10.9, 10.8, 11.2, 10.0, 10.5, 9.1, 10.5, 9.3, 9.3, 11.2, 10.6, 12.1, 12.0, 9.7, 12.4, 13.6, 13.6, 11.8, 10.0, 10.0, 9.1, 11.9, 11.75, 11.4, 13.0, 12.4, 9.4, 9.6, 9.6, 9.6, 9.6, 9.1, 12.0, 11.2, 10.1, 10.3, 12.3, 10.55, 10.9, 9.7, 9.8, 8.9, 8.9, 10.2, 11.7, 12.8, 12.8, 10.2, 13.55, 11.6, 8.9, 13.8, 9.4, 9.4, 10.7, 10.7, 12.3, 10.3, 10.4, 11.6, 10.7, 12.8, 11.9, 12.1, 9.2, 9.5, 11.0, 10.9, 10.4, 9.1, 11.4, 11.4, 9.7, 12.4, 13.7, 10.6, 11.2, 13.13333333, 12.4, 9.7, 11.0, 11.3, 12.0, 9.2, 10.7, 10.7, 11.4, 9.2, 12.1, 11.1, 9.7, 10.7, 10.9, 12.0, 10.6, 9.6, 13.1, 11.0, 11.6, 11.95, 11.1, 11.5, 11.3, 11.9, 9.5, 12.2, 12.2, 11.1, 9.6, 11.1, 9.6, 11.4, 11.4, 12.06666667, 9.0, 9.0, 11.4, 9.6, 11.0, 11.0, 11.2, 11.55, 13.3, 9.633333333, 13.6, 11.2, 13.0, 10.8, 9.8, 11.45, 12.05, 9.7, 11.9, 10.0, 9.7, 11.6, 8.8, 9.5, 9.533333333, 9.533333333, 9.4, 10.7, 11.5, 9.6, 9.55, 12.15, 13.0, 9.2, 9.4, 11.8, 10.6, 9.7, 11.2, 9.6, 9.4, 12.8, 11.8, 9.4, 9.8, 9.8, 9.8, 9.4, 9.4, 9.4, 10.0, 9.5, 10.5, 9.2, 10.5, 9.9, 9.1, 9.2, 9.2, 10.5, 9.3, 9.0, 9.2, 9.4, 9.7, 9.5, 9.4, 9.7, 9.3, 9.5, 9.5, 9.4, 9.8, 10.1, 10.6, 9.8, 9.4, 9.2, 9.6, 10.8, 9.7, 9.8, 10.5, 10.5, 9.3, 10.5, 10.3, 9.5, 13.1, 9.2, 9.5, 9.2, 9.2, 9.2, 9.4, 9.4, 9.4, 10.2, 9.5, 9.6, 9.4, 10.0, 9.4, 9.2, 9.3, 9.5, 9.8, 10.9, 10.9, 9.6, 10.7, 10.7, 10.5, 9.5, 9.5, 9.5, 9.2, 9.6, 10.5, 10.5, 10.7, 10.1, 9.1, 9.2, 9.4, 9.1, 9.4, 10.3, 10.1, 9.9, 9.6, 9.5, 9.0, 9.5, 9.9, 9.8, 9.6, 10.5, 12.9, 10.7, 9.2, 9.8, 9.0, 10.2, 10.4, 9.0, 9.2, 9.4, 9.2, 9.3, 9.3, 9.6, 9.3, 9.5, 9.8, 9.8, 9.7, 9.5, 10.5, 10.0, 9.4, 10.9, 9.2, 9.0, 10.9, 9.2, 9.5, 9.5, 9.4, 10.9, 10.9, 10.5, 9.4, 9.4, 13.0, 13.0, 9.8, 9.9, 9.6, 9.5, 9.2, 9.5, 9.5, 9.6, 9.5, 14.0, 9.4, 14.0, 9.4, 10.0, 9.3, 10.2, 10.5, 10.3, 9.4, 10.1, 10.1, 10.5, 10.5, 10.5, 10.5, 9.3, 9.3, 9.6, 9.2, 10.0, 9.4, 9.4, 9.5, 10.2, 9.0, 10.4, 9.5, 9.1, 9.2, 9.2, 11.5, 9.5, 9.5, 9.5, 10.5, 9.6, 9.5, 9.5, 9.3, 9.3, 9.3, 9.3, 9.7, 9.2, 9.7, 9.5, 9.5, 9.4, 9.8, 9.5, 9.7, 9.7, 9.4, 10.2, 10.1, 13.0, 11.4, 10.3, 9.3, 9.5, 9.2, 9.2, 10.8, 10.8, 9.3, 9.4, 10.5, 12.4, 10.0, 10.2, 10.1, 9.8, 10.5, 11.0, 9.1, 9.7, 9.5, 9.4, 9.4, 9.5, 10.0, 10.4, 10.5, 9.5, 9.8, 10.5, 11.0, 12.2, 9.9, 9.6, 11.0, 9.0, 9.0, 9.0, 9.2, 9.0, 9.0, 9.3, 10.9, 9.8, 9.2, 9.2, 9.9, 9.5, 9.3, 9.8, 9.9, 10.0, 9.9, 10.5, 9.5, 9.9, 9.3, 9.2, 9.2, 9.4, 10.5, 9.3, 9.4, 10.0, 9.3, 10.9, 10.2, 9.8, 12.8, 9.4, 10.1, 10.7, 10.1, 10.1, 9.4, 9.4, 10.7, 9.4, 10.1, 12.6, 10.5, 9.3, 9.9, 9.1, 10.5, 9.8, 9.8, 10.3, 10.3, 10.6, 9.2, 10.6, 10.5, 10.3, 10.1, 9.5, 9.5, 9.9, 9.6, 9.7, 9.6, 10.7, 10.1, 10.0, 9.5, 9.2, 9.3, 9.4, 9.5, 9.5, 9.5, 9.3, 9.4, 9.5, 9.4, 11.0, 11.0, 10.1, 10.4, 11.5, 10.4, 11.5, 9.7, 9.3, 9.5, 9.2, 9.2, 11.5, 11.5, 9.7, 9.5, 12.5, 12.5, 9.4, 11.0, 11.7, 12.2, 12.5, 10.3, 11.5, 9.8, 9.2, 11.3, 9.8, 9.8, 10.7, 9.9, 12.3, 12.0, 10.0, 9.4, 9.9, 9.4, 9.3, 13.0, 11.9, 12.8, 11.0, 11.7, 10.4, 9.8, 9.4, 9.9, 10.0, 10.2, 10.0, 11.8, 10.0, 9.0, 9.4, 12.0, 9.9, 8.7, 10.6, 9.2, 10.8, 11.8, 11.0, 12.0, 13.3, 10.8, 9.4, 10.0, 9.4, 9.4, 9.2, 9.7, 9.2, 9.6, 9.2, 10.0, 12.9, 10.0, 9.5, 9.1, 9.9, 13.0, 9.9, 11.0, 11.0, 9.4, 9.9, 10.8, 10.5, 10.5, 9.1, 10.1, 10.8, 10.8, 11.3, 9.6, 9.5, 9.5, 9.3, 11.7, 9.5, 9.3, 11.7, 10.5, 10.4, 9.9, 11.8, 12.3, 10.9, 11.0, 10.9, 12.3, 11.4, 10.6, 9.3, 10.4, 11.0, 9.2, 12.8, 9.5, 9.9, 9.5, 10.2, 11.2, 9.9, 9.3, 9.8, 11.3, 11.2, 11.6, 12.5, 10.1, 10.5, 11.2, 10.2, 10.8, 10.8, 9.1, 10.0, 11.2, 11.1, 13.4, 10.3, 9.6, 11.2, 9.0, 11.3, 9.3, 11.8, 9.0, 9.2, 9.7, 11.5, 14.0, 9.2, 9.8, 10.6, 11.4, 10.4, 10.6, 9.4, 10.2, 9.7, 11.0, 10.2, 10.1, 9.2, 11.7, 9.4, 9.4, 13.4, 10.0, 10.0, 10.0, 10.8, 10.2, 10.6, 13.3, 13.4, 11.6, 12.1, 11.0, 9.0, 11.1, 11.0, 11.6, 9.0, 12.0, 12.0, 10.9, 10.8, 12.5, 10.8, 9.5, 10.2, 11.4, 9.5, 10.2, 9.7, 11.8, 11.8, 9.3, 11.9, 8.4, 11.7, 11.0, 10.0, 9.1, 9.8, 9.4, 9.5, 9.9, 11.0, 11.4, 8.7, 9.4, 10.3, 10.3, 10.3, 12.8, 10.0, 10.3, 9.4, 10.7, 12.0, 11.2, 9.6, 11.0, 9.9, 11.0, 8.4, 9.1, 9.5, 10.7, 10.4, 9.4, 9.5, 10.0, 10.0, 11.5, 11.1, 11.1, 11.7, 11.1, 11.7, 12.7, 11.4, 9.2, 9.2, 10.1, 12.7, 11.4, 9.0, 9.0, 10.7, 11.7, 11.0, 11.7, 10.4, 9.6, 10.0, 10.2, 10.0, 9.5, 9.8, 9.8, 9.6, 9.6, 9.2, 9.9, 10.7, 9.6, 10.6, 9.3, 14.0, 10.5, 9.7, 11.5, 9.7, 9.0, 9.5, 9.3, 9.3, 10.0, 9.8, 9.3, 10.0, 9.0, 9.3, 9.0, 9.1, 9.2, 12.2, 10.5, 10.4, 12.7, 9.2, 9.4, 10.0, 9.8, 10.2, 9.7, 9.7, 9.8, 10.2, 9.3, 9.4, 9.4, 9.5, 12.1, 10.2, 10.2, 9.1, 9.1, 9.3, 9.3, 9.3, 9.5, 10.5, 11.3, 9.5, 9.7, 9.4, 9.4, 10.2, 10.3, 9.4, 9.5, 9.4, 9.5, 9.4, 10.1, 10.1, 11.0, 11.2, 11.3, 9.6, 11.2, 14.9, 12.0, 9.5, 9.4, 9.6, 10.5, 9.6, 11.0, 9.6, 9.0, 9.6, 10.2, 10.2, 9.7, 9.5, 9.2, 11.0, 9.2, 10.0, 9.5, 9.5, 9.5, 9.3, 10.2, 9.3, 9.9, 10.0, 9.6, 9.0, 10.2, 9.8, 11.3, 9.4, 11.3, 9.1, 9.7, 9.4, 9.4, 10.7, 9.8, 9.0, 9.4, 9.4, 12.8, 9.5, 9.5, 9.7, 10.8, 10.1, 9.5, 9.4, 9.6, 9.7, 9.9, 10.0, 10.5, 11.6, 10.0, 10.1, 9.5, 9.4, 9.4, 9.8, 9.2, 9.4, 10.0, 9.6, 9.5, 9.6, 9.2, 10.0, 9.5, 11.2, 10.4, 11.1, 9.5, 9.5, 12.7, 9.6, 11.5, 9.6, 9.5, 9.3, 9.5, 9.5, 9.3, 9.2, 9.3, 11.5, 9.5, 9.2, 10.0, 9.5, 9.5, 9.0, 9.4, 9.6, 9.5, 9.5, 9.5, 9.4, 9.5, 9.1, 10.7, 11.2, 9.8, 9.8, 9.2, 9.7, 9.6, 10.0, 9.6, 9.5, 9.5, 9.4, 9.5, 9.7, 9.6, 9.7, 9.4, 9.4, 9.5, 9.5, 10.0, 10.3, 10.3, 10.5, 9.8, 9.4, 9.8, 10.0, 9.8, 9.8, 9.5, 9.5, 10.1, 10.1, 9.3, 9.7, 9.6, 9.7, 10.8, 12.5, 10.2, 9.6, 10.8, 10.7, 10.7, 9.4, 10.0, 12.9, 9.6, 9.9, 12.8, 12.5, 12.8, 9.2, 10.3, 10.5, 10.9, 10.8, 11.4, 11.3, 10.8, 10.5, 11.9, 9.4, 9.6, 9.7, 14.0, 9.8, 9.8, 10.3, 10.7, 11.0, 10.7, 12.7, 11.1, 10.9, 11.1, 9.9, 9.9, 9.4, 9.3, 11.7, 11.7, 11.2, 10.0, 12.1, 10.3, 10.9, 9.4, 10.6, 9.8, 9.8, 9.9, 9.8, 9.8, 9.5, 9.5, 9.7, 10.9, 10.9, 11.7, 10.9, 11.3, 10.6, 11.2, 9.5, 11.5, 10.4, 9.7, 9.5, 9.7, 11.3, 11.2, 11.2, 10.9, 11.8, 10.6, 10.0, 11.1, 11.8, 11.8, 10.9, 11.8, 10.0, 9.5, 9.9, 11.4, 12.0, 9.5, 10.0, 10.5, 10.4, 12.1, 11.2, 9.3, 10.1, 9.7, 9.3, 9.7, 9.8, 10.7, 12.5, 10.7, 12.5, 11.0, 11.8, 10.8, 10.8, 10.8, 10.8, 9.5, 11.0, 11.5, 10.8, 11.5, 13.2, 10.9, 12.2, 12.2, 11.5, 11.9, 11.0, 10.1, 11.0, 11.8, 10.5, 11.0, 11.8, 10.1, 11.2, 11.0, 10.2, 9.2, 11.2, 12.0, 10.5, 9.8, 9.5, 9.8, 10.5, 11.8, 11.8, 10.4, 12.9, 11.4, 12.4, 12.5, 10.0, 9.7, 12.1, 11.1, 12.0, 12.4, 11.9, 11.9, 11.9, 12.4, 11.2, 12.1, 12.2, 10.4, 11.3, 11.1, 11.3, 10.0, 11.1, 9.3, 9.5, 11.2, 11.1, 11.0, 11.9, 9.2, 12.2, 10.2, 10.9, 10.9, 11.6, 10.7, 12.1, 9.4, 9.4, 9.1, 11.3, 10.4, 10.5, 10.0, 12.9, 10.5, 10.4, 11.3, 11.4, 9.4, 9.4, 10.9, 9.4, 9.4, 9.4, 9.4, 9.4, 10.1, 12.8, 12.8, 9.1, 12.9, 11.5, 10.6, 11.7, 12.8, 10.3, 12.8, 11.7, 11.7, 12.0, 10.9, 12.3, 10.4, 10.0, 10.0, 11.2, 11.4, 12.6, 12.7, 12.7, 10.4, 11.9, 11.9, 10.5, 12.3, 10.5, 10.4, 12.6, 11.6, 10.1, 10.5, 11.5, 11.0, 9.6, 10.4, 9.7, 10.6, 12.5, 9.2, 12.6, 11.1, 10.2, 9.8, 11.1, 10.9, 12.2, 11.4, 10.7, 10.4, 10.9, 10.8, 10.4, 9.2, 12.9, 12.7, 9.1, 9.1, 12.1, 9.1, 11.6, 12.1, 9.9, 12.5, 11.4, 11.8, 11.8, 10.2, 12.5, 10.9, 10.9, 10.8, 11.1, 9.2, 9.5, 10.7, 9.2, 10.2, 11.4, 11.0, 11.0, 12.3, 11.8, 12.3, 9.5, 12.0, 9.5, 9.6, 11.6, 11.2, 9.9, 9.9, 11.8, 11.4, 11.5, 12.0, 10.8, 10.5, 10.8, 9.4, 12.5, 9.4, 12.4, 12.0, 11.2, 12.0, 12.4, 12.8, 12.3, 11.7, 9.5, 10.8, 10.0, 12.3, 11.0, 9.5, 13.6, 11.3, 11.3, 11.3, 13.3, 12.9, 13.1, 12.3, 12.3, 11.2, 11.5, 11.3, 13.5, 11.5, 10.0, 10.5, 10.4, 9.5, 13.6, 11.2, 11.8, 11.9, 11.4, 11.4, 9.1, 9.5, 9.5, 11.0, 11.4, 10.0, 10.1, 10.4, 9.8, 11.8, 11.6, 12.0, 12.8, 12.5, 9.8, 11.1, 11.4, 9.8, 11.8, 12.9, 10.6, 10.8, 11.1, 10.2, 11.8, 10.0, 10.0, 9.4, 10.2, 12.4, 12.0, 11.5, 10.5, 10.8, 12.3, 9.5, 9.5, 11.5, 11.2, 12.7, 11.4, 11.0, 11.0, 11.4, 10.5, 9.3, 10.9, 11.9, 12.2, 11.9, 10.9, 9.6, 12.5, 10.8, 12.4, 10.8, 9.5, 9.5, 9.5, 9.8, 10.9, 9.5, 9.8, 11.2, 11.7, 9.4, 11.0, 11.0, 11.0, 10.0, 11.0, 11.2, 10.4, 9.3, 10.4, 10.5, 10.4, 11.3, 9.5, 12.0, 10.6, 10.9, 11.5, 11.5, 9.6, 12.0, 10.3, 9.4, 9.2, 9.6, 13.6, 9.5, 11.8, 10.8, 9.5, 9.3, 12.8, 11.5, 9.4, 12.8, 9.6, 11.8, 9.3, 9.8, 12.2, 9.5, 10.3, 10.5, 10.0, 10.5, 11.1, 10.9, 10.9, 9.8, 9.8, 9.5, 10.9, 11.0, 9.2, 11.0, 11.3, 11.3, 9.3, 11.2, 9.8, 9.6, 11.8, 10.3, 10.3, 11.4, 9.5, 14.0, 14.0, 11.7, 11.2, 9.3, 11.2, 9.5, 12.0, 9.7, 9.5, 11.5, 10.4, 10.4, 10.9, 10.2, 10.9, 10.5, 12.4, 13.0, 10.2, 10.2, 11.0, 10.9, 12.4, 9.7, 10.9, 9.5, 9.5, 12.1, 12.2, 10.9, 12.5, 11.7, 11.2, 11.2, 9.2, 9.8, 10.1, 11.1, 10.1, 9.2, 9.8, 12.8, 10.5, 10.1, 10.1, 9.8, 12.5, 11.9, 9.8, 9.1, 10.1, 12.5, 11.4, 11.0, 10.6, 10.6, 10.6, 10.6, 9.3, 9.8, 9.8, 9.2, 9.7, 9.6, 10.0, 12.6, 9.5, 9.5, 9.5, 10.5, 10.5, 10.5, 10.4, 10.5, 11.0, 10.2, 11.4, 9.5, 9.5, 10.8, 10.0, 11.8, 10.3, 10.3, 10.0, 10.1, 10.1, 11.1, 9.5, 10.03333333, 10.9, 10.1, 10.03333333, 9.8, 11.8, 9.5, 9.8, 10.5, 9.8, 10.4, 9.2, 11.6, 9.2, 9.3, 9.8, 9.9, 10.0, 12.2, 9.9, 10.8, 10.8, 9.6, 9.9, 9.9, 9.5, 9.2, 9.6, 9.6, 10.3, 9.7, 12.5, 11.0, 9.8, 10.2, 9.2, 9.55, 9.55, 9.9, 10.2, 11.1, 9.9, 9.9, 11.9, 10.0, 10.7, 11.3, 10.9, 10.7, 12.4, 10.7, 11.9, 10.6, 10.9, 10.1, 9.6, 9.4, 9.6, 12.1, 9.8, 9.9, 9.8, 9.4, 11.4, 11.0, 9.6, 9.6, 12.1, 11.2, 11.0, 11.3, 10.4, 9.9, 11.7, 10.1, 9.0, 9.0, 8.5, 11.1, 10.3, 11.06666667, 11.3, 9.566666667, 9.8, 11.7, 11.1, 9.6, 9.8, 9.7, 9.7, 11.3, 11.3, 11.0, 11.6, 9.0, 10.9, 10.9, 10.55, 9.0, 10.5, 11.9, 10.4, 10.0, 10.4, 10.8, 9.7, 9.7, 10.0, 11.0, 10.0, 9.7, 9.7, 12.6, 11.1, 11.0, 8.8, 13.56666667, 8.8, 13.6, 10.2, 10.6, 10.1, 10.6, 10.3, 10.7, 10.9, 9.7, 10.3, 10.6, 11.4, 10.8, 12.4, 11.4, 11.95, 9.7, 10.0, 10.6, 9.7, 11.5, 10.8, 11.5, 9.6, 9.4, 9.8, 11.0, 11.4, 9.95, 10.8, 11.4, 10.6, 11.1, 9.7, 9.8, 10.4, 10.5, 9.233333333, 9.25, 10.6, 10.3, 10.5, 10.2, 10.3, 9.05, 10.6, 10.4, 10.0, 9.7, 9.6, 10.8, 10.1, 10.2, 11.3, 10.2, 9.9, 9.0, 11.7, 9.7, 10.3, 10.2, 12.0, 9.9, 11.6, 10.9, 10.75, 10.4, 11.2, 10.1, 10.2, 12.1, 10.4, 11.4, 9.5, 9.4, 11.3, 9.4, 11.0, 10.55, 9.9, 11.0, 9.5, 9.9, 9.9, 9.9, 10.1, 10.1, 10.1, 10.9, 11.2, 10.1, 9.2, 11.5, 12.4, 11.1, 9.5, 12.5, 10.5, 11.8, 10.8, 11.9, 11.3, 11.3, 11.9, 11.3, 11.9, 9.8, 11.6, 11.5, 11.4, 10.9, 12.8, 9.2, 11.6, 11.6, 11.0, 9.5, 10.5, 11.2, 11.0, 10.2, 11.0], \"yaxis\": \"y\"}], {\"coloraxis\": {\"colorbar\": {\"title\": {\"text\": \"quality\"}}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"height\": 800, \"legend\": {\"itemsizing\": \"constant\", \"tracegroupgap\": 0}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"text\": \"quality vs alcohol (0.44 corr)\"}, \"width\": 800, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"quality\"}}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"alcohol\"}}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('9fe7e498-9dd8-4f23-b6dc-b2f404ecb8f4'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; ### 4.5.2 Plotly with IpyWidgets def my_plot ( x = df . columns , y = df . columns , color = df . columns , size = df . columns ): corr = df . corr () pearson = corr [ x ][ y ] fig = px . scatter ( df , x = x , y = y , color = color , size = size , title = ' {} vs {} ( {:.2f} corr)' . format ( x , y , pearson ), width = 800 , height = 800 ) fig . show () interact ( my_plot ) interactive(children=(Dropdown(description='x', options=('type', 'fixed acidity', 'volatile acidity', 'citric \u2026","title":"Matplotlib"},{"location":"S6_Matplotlib/#technology-fundamentals-course-1-session-4-visualization-and-oop","text":"Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assitants Varsha Bang, Harsha Vardhan Contact vbang@uw.edu, harshav@uw.edu In this session we'll be discussing visualization strategies. And, more specifically, how we can manipulate our pandas dataframes to give us the visualizations we desire. Before we get there, however, we're going to start by introducing a python module called Matplotlib.","title":"Technology Fundamentals Course 1, Session 4: Visualization and OOP"},{"location":"S6_Matplotlib/#41-visualization-with-matplotlib","text":"Lets start by importing our matplotlib module. Pyplot is a module of Matplotlib that provides functions to add plot elements like text, lines, and images. typically we import this module like so import matplotlib.pyplot as plt where plt is shorthand for the matplotlib.pyplot library import matplotlib.pyplot as plt","title":"4.1 Visualization with Matplotlib"},{"location":"S6_Matplotlib/#411-the-basics","text":"Matplotlib is strongly object oriented and its principal objects are the figure and the axes . But before we get into that I want us to explore the most basic use case. In this basic use case, we don't declare the figure and axes objects explicitly, but rather work directly in the pyplot namespace. I'm going to create a list of x and y values and plot them with pyplot x = [1,2,3,4,5,6,7] y = [1,1,2,3,5,8,13] plt.plot(x,y) x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] y = [ 1 , 1 , 2 , 3 , 5 , 8 , 13 ] plt . plot ( x , y ) [<matplotlib.lines.Line2D at 0x7fcd31e36250>] We can label the axes of our figure using the xlabel and ylabel attributes, and label our title using the title attribute. plt.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13]) plt.title('The Fibonacci Sequence') plt.xlabel('Order in Sequence') plt.ylabel('Value') plt . plot ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ],[ 1 , 1 , 2 , 3 , 5 , 8 , 13 ]) plt . title ( 'The Fibonacci Sequence' ) plt . xlabel ( 'Order in Sequence' ) plt . ylabel ( 'Value' ) Text(0, 0.5, 'Value') What do we think about the out-of-the-box formatting of pyplot ? What are some things we can do to make it better? Could we make it bigger? Perhaps different dimensions? Does anyone recognize that default line color? Before we make any changes, let's become acquianted with the more appropriate way to work in matplotlib.pyplot . In this formality, we explicitly create our figure and axes objects. # This is one way to do it... # plt.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13]) # but we can also do it this way, concretely declaring the figure, axes # objects directly # We declare the figure fig = plt.figure() # and then add axes ax = fig.add_subplot(111) You can think of the figure as a canvas, where you specify dimensions and possibly unifying attributes of its contents, like, background color, border, etc. You use the canvas, the figure , to containerize your other objects, primarily your axes , and to save its contents with savefig . You can think of an axes as the actual graphs or plots themselves. And when we declare these objects, we have access to all the methods of matplotlib.pyplot (e.g. .plot , .scatter , .hist etc.) You can place many of these axes into the figure container in a variety of ways. The last component of a pyplot figure are the axis , the graphical axis we typically think of. # This is one way to do it... # plt.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13]) # but we can also do it this way, concretely declaring the figure, axes # objects directly # We declare the figure fig = plt . figure () # and then add axes ax = fig . add_subplot ( 111 ) plt.subplots returns a figure and axes object(s) together: ### We can also do it in 1 line fig, ax = plt.subplots(1, 1, figsize=(8,8)) and we'll go ahead and adjust the figure size with the parameter figsize and set it equal to a tuple containing the x and y dimensions of the figure in inches. ### We can also do it in 1 line fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) To recap, by convention we typically separate our plots into three components: a Figure, its Axes, and their Axis: Figure : It is a whole figure which may contain one or more than one axes (plots). You can think of a figure as a canvas which contains plots. Axes : It is what we generally think of as a plot. A figure can contain many axes . It contains two or three (in the case of 3D) axis objects. Each axes has a title, an x-label and a y-label. Axis : They are the traditional axis we think of in a graph and take care of generating the graph limits. Example: fig, ax = plt.subplots(1, 1, figsize=(8,8)) is creating the figure ( fig ) and axes ( ax ) explicitly, and depending on whether we create 2D or 3D plots, the axes will contain 2-3 axis .","title":"4.1.1 The Basics"},{"location":"S6_Matplotlib/#exercise-1-adjust-figure-size","text":"create a figure and axes using plt.subplots() . adjust the figure size to be 6 inches (width) by 3 inches (height). Plot the values of the fibonacci sequence we defined earlier (Bonus) Repeat, this time inverting the y-values using list splicing (Bonus) Explore other plt.plot() attributes using the built in Colab tooltip Plotting building blocks for Exercise 1: * plt.subplots() * ax.plot() * slicing [::] x = [1,2,3,4,5,6,7] y = [1,1,2,3,5,8,13] # Cell for Exercise 1 x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] y = [ 1 , 1 , 2 , 3 , 5 , 8 , 13 ]","title":"Exercise 1: Adjust Figure Size"},{"location":"S6_Matplotlib/#412-manipulating-plot-attributes","text":"We can manipulate many parameters of a figure 's axes : marker , linestyle , and color , to name a few. Each of these parameters takes string values. fig, ax = plt.subplots(1,1, figsize=(5,5)) ax.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13], marker='^', linestyle='--', color='tab:blue') ax.plot([1,2,3,4,5,6,7],[0,3,8,6,5,4,1], marker='.', linestyle='-.', color='#59A41F') ax.set_title('My Random Values') ax.set_xlabel('Order in Sequence') ax.set_ylabel('Value') List of marker styles {'': 'nothing', ' ': 'nothing', '*': 'star', '+': 'plus', ',': 'pixel', '.': 'point', 0: 'tickleft', '1': 'tri_down', 1: 'tickright', 10: 'caretupbase', 11: 'caretdownbase', '2': 'tri_up', 2: 'tickup', '3': 'tri_left', 3: 'tickdown', '4': 'tri_right', 4: 'caretleft', 5: 'caretright', 6: 'caretup', 7: 'caretdown', '8': 'octagon', 8: 'caretleftbase', 9: 'caretrightbase', '<': 'triangle_left', '>': 'triangle_right', 'D': 'diamond', 'H': 'hexagon2', 'None': 'nothing', None: 'nothing', 'P': 'plus_filled', 'X': 'x_filled', '^': 'triangle_up', '_': 'hline', 'd': 'thin_diamond', 'h': 'hexagon1', 'o': 'circle', 'p': 'pentagon', 's': 'square', 'v': 'triangle_down', 'x': 'x', '|': 'vline'} ``` List of line styles {'': '_draw_nothing', ' ': '_draw_nothing', '-': '_draw_solid', '--': '_draw_dashed', '-.': '_draw_dash_dot', ':': '_draw_dotted', 'None': '_draw_nothing'} ``` List of base colors {'b': (0, 0, 1), 'c': (0, 0.75, 0.75), 'g': (0, 0.5, 0), 'k': (0, 0, 0), 'm': (0.75, 0, 0.75), 'r': (1, 0, 0), 'w': (1, 1, 1), 'y': (0.75, 0.75, 0)} list access import matplotlib as mp mp.markers.MarkerStyle.markers mp.lines.lineStyles mp.colors.BASE_COLORS Taking these long lists of available parameters, I'm going to play around with a few and see how they appear in our plot. import matplotlib as mp mp . markers . MarkerStyle . markers # mp.lines.lineStyles # mp.colors.BASE_COLORS {'': 'nothing', ' ': 'nothing', '*': 'star', '+': 'plus', ',': 'pixel', '.': 'point', 0: 'tickleft', '1': 'tri_down', 1: 'tickright', 10: 'caretupbase', 11: 'caretdownbase', '2': 'tri_up', 2: 'tickup', '3': 'tri_left', 3: 'tickdown', '4': 'tri_right', 4: 'caretleft', 5: 'caretright', 6: 'caretup', 7: 'caretdown', '8': 'octagon', 8: 'caretleftbase', 9: 'caretrightbase', '<': 'triangle_left', '>': 'triangle_right', 'D': 'diamond', 'H': 'hexagon2', 'None': 'nothing', None: 'nothing', 'P': 'plus_filled', 'X': 'x_filled', '^': 'triangle_up', '_': 'hline', 'd': 'thin_diamond', 'h': 'hexagon1', 'o': 'circle', 'p': 'pentagon', 's': 'square', 'v': 'triangle_down', 'x': 'x', '|': 'vline'} plt . plot ([ 1 , 2 , 3 ], [ 4 , 5 , 6 ]) plt . title ( 'title' ) Text(0.5, 1.0, 'title') ax . title Text(0.5, 1.0, '') fig , ax = plt . subplots ( 1 , 1 , figsize = ( 5 , 5 )) ax . plot ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ],[ 1 , 1 , 2 , 3 , 5 , 8 , 13 ], marker = 's' , linestyle = ':' , color = 'tab:blue' ) ax . plot ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ],[ 0 , 3 , 8 , 6 , 5 , 4 , 1 ], marker = '.' , linestyle = '-.' , color = '#3E1515' ) ax . set_title ( 'My Random Values' ) ax . set_xlabel ( 'Order in Sequence' ) ax . set_ylabel ( 'Value' ) Text(0, 0.5, 'Value') If we want to make a scatter plot without any lines at all, we set the linestyle to an empty string fig, ax = plt.subplots(1,1, figsize=(5,5)) plt.plot([1,2,3,4,5,6,7],[1,1,2,3,5,8,13], marker='*', linestyle='', color='tab:green') ax.set_title('The Fibonacci Sequence') ax.set_xlabel('Order in Sequence') ax.set_ylabel('Value') fig , ax = plt . subplots ( 1 , 1 , figsize = ( 5 , 5 )) plt . plot ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 ],[ 1 , 1 , 2 , 3 , 5 , 8 , 13 ], marker = 'h' , linestyle = '' , ms = 10 , color = 'tab:green' ) ax . set_title ( 'The Fibonacci Sequence' ) ax . set_xlabel ( 'Order in Sequence' ) ax . set_ylabel ( 'Value' ) Text(0, 0.5, 'Value')","title":"4.1.2 Manipulating Plot Attributes"},{"location":"S6_Matplotlib/#exercise-2-choose-lines-colors-and-markers","text":"Recreate the \"My Random Values\" plot with a variety of markers, linestyles, and colors. (Bonus) Can you set the markers and lines to colors belonging to the Tableau 20? Try it with and without the hex values! Plotting building blocks for Exercise 2: * marker='' * linestyle='' * color='' # Cell for Exercise 2 ### DO NOT CHANGE BELOW ### x = [1,2,3,4,5,6,7] y1 = [1,1,2,3,5,8,13] y2 = [0,3,8,6,5,4,1] y3 = [10,15,12,9,3,2,1] y4 = [2,4,2,1,2,4,5] fig, ax = plt.subplots(1,1, figsize=(5,5)) ax.set_title('My Random Values') ax.set_xlabel('Order in Sequence') ax.set_ylabel('Value') ### END OF DO NOT CHANGE ### ### change these lines w/ marker, linestyle, color attributes ax.plot(x,y1) ax.plot(x,y2) ax.plot(x,y3) ax.plot(x,y4) # Cell for Exercise 2 ### DO NOT CHANGE BELOW ### x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ] y1 = [ 1 , 1 , 2 , 3 , 5 , 8 , 13 ] y2 = [ 0 , 3 , 8 , 6 , 5 , 4 , 1 ] y3 = [ 10 , 15 , 12 , 9 , 3 , 2 , 1 ] y4 = [ 2 , 4 , 2 , 1 , 2 , 4 , 5 ] fig , ax = plt . subplots ( 1 , 1 , figsize = ( 5 , 5 )) ax . set_title ( 'My Random Values' ) ax . set_xlabel ( 'Order in Sequence' ) ax . set_ylabel ( 'Value' ) ### END OF DO NOT CHANGE ### ### change these lines w/ marker, linestyle, color attributes ax . plot ( x , y1 ) ax . plot ( x , y2 ) ax . plot ( x , y3 ) ax . plot ( x , y4 ) [<matplotlib.lines.Line2D at 0x7fcd316d14d0>]","title":"Exercise 2: Choose Lines, Colors, and Markers"},{"location":"S6_Matplotlib/#413-subplots","text":"Remember that fig, ax = plt.subplots() satement we used earlier? We're now going to use that same approach but this time, the second variable that is returned (what we call ax in the cell bellow) is no longer an axes object! Instead, it is an array of axes objects. I'm also going to introduce another module, random , to generate some random values import random fig, ax = plt.subplots(2, 2, figsize=(10,10)) ax[0,1].plot(range(10), [random.random() for i in range(10)], c='tab:orange') ax[1,0].plot(range(10), [random.random() for i in range(10)], c='tab:green') ax[1,1].plot(range(10), [random.random() for i in range(10)], c='tab:red') ax[0,0].plot(range(10), [random.random() for i in range(10)], c='tab:blue') quick note: In the above cell we use something called list comprehension to quickly populate a list of objects (in this case those objects are floats). We won't dive too deeply into that now, but you can think of list comprehension as a more concise way of writing a for() loop. In future cases where list comprehension appears in this notebook I will include code snipets of the corresponding for loop. import random # this list comprehension print([random.random() for i in range(10)]) # produces the same output as this for loop ls = [] for i in range(10): ls.append(random.random()) print(ls) import random random . seed ( 42 ) # this list comprehension print ([ random . random () for i in range ( 10 )]) random . seed ( 42 ) # produces the same output as this for loop ls = [] for i in range ( 10 ): ls . append ( random . random ()) print ( ls ) [0.6394267984578837, 0.025010755222666936, 0.27502931836911926, 0.22321073814882275, 0.7364712141640124, 0.6766994874229113, 0.8921795677048454, 0.08693883262941615, 0.4219218196852704, 0.029797219438070344] [0.6394267984578837, 0.025010755222666936, 0.27502931836911926, 0.22321073814882275, 0.7364712141640124, 0.6766994874229113, 0.8921795677048454, 0.08693883262941615, 0.4219218196852704, 0.029797219438070344] The second thing we'll need to talk about is the grid of the ax object fig , ax = plt . subplots ( 2 , 2 ) ax . shape (2, 2) ax array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7fcd316f9210>, <matplotlib.axes._subplots.AxesSubplot object at 0x7fcd316490d0>], [<matplotlib.axes._subplots.AxesSubplot object at 0x7fcd315fb710>, <matplotlib.axes._subplots.AxesSubplot object at 0x7fcd315b0d50>]], dtype=object) This is exactly like accessing a matrix: matrix[row,column] = element we have the pandas equivalent: df.iloc[0,1] = element import random fig , ax = plt . subplots ( 2 , 2 , figsize = ( 10 , 10 )) ax [ 0 , 0 ] . plot ( range ( 10 ), [ random . random () for i in range ( 10 )], c = 'tab:blue' ) ax [ 0 , 1 ] . plot ( range ( 10 ), [ random . random () for i in range ( 10 )], c = 'tab:orange' ) ax [ 1 , 0 ] . plot ( range ( 10 ), [ random . random () for i in range ( 10 )], c = 'tab:green' ) ax [ 1 , 1 ] . plot ( range ( 10 ), [ random . random () for i in range ( 10 )], c = 'tab:red' ) [<matplotlib.lines.Line2D at 0x7fcd313e3a50>]","title":"4.1.3 Subplots"},{"location":"S6_Matplotlib/#exercise-3-subplots","text":"Create a 2x1 figure where the first axes is a plot of the fibonacci sequence up to the 10th sequence value and the second axes is a plot of 10 random integers with values between 10 and 20 (exclusive). Use different markers, colors, and lines for each plot. Since the focus of this tutorial is on visualization, I'll go ahead and provide my own code for generating random integers between 10 and 20 (exclusive). If you have extra time, prove to yourself that this code works! (remember docstrings are your friend!) import random [round(random.random() * 8) + 11 for i in range(10)] # Cell for Exercise 3 ### DO NOT CHANGE ### import random # create the fig, ax objects fig, ax = plt.subplots(1, 2, figsize=(10, 5)) # generate x, y1, and y2 x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] y1 = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55] y2 = [round(random.random() * 8) + 11 for i in range(10)] ### END OF DO NOT CHANGE ### # Note: no skeleton code here is given for the figure, I want you to write this # code out yourself. Here is pseudo-code to get you started: # plot the left axes, set the title and axes labels # title: Fibonacci Sequence; xlabel: x values; ylabel: y values ### YOUR CODE HERE ### # plot the right axes, set the title and axes labels # title: My Random Values; xlabel: x values; ylabel: y values ### YOUR CODE HERE ### # Cell for Exercise 3 ### DO NOT CHANGE ### import random # create the fig, ax objects fig , ax = plt . subplots ( 1 , 2 , figsize = ( 10 , 5 )) # generate x, y1, and y2 x = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] y1 = [ 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 ] y2 = [ round ( random . random () * 8 ) + 11 for i in range ( 10 )] ### END OF DO NOT CHANGE ### # Note: no skeleton code here is given for the figure, I want you to write this # code out yourself. Here is pseudo-code to get you started: # plot the left axes, set the title and axes labels # title: Fibonacci Sequence; xlabel: x values; ylabel: y values ### YOUR CODE HERE ### # plot the right axes, set the title and axes labels # title: My Random Values; xlabel: x values; ylabel: y values ### YOUR CODE HERE ###","title":"Exercise 3: Subplots"},{"location":"S6_Matplotlib/#42-visualization-with-pandas","text":"Now lets discover the power of pandas plots! While the objectives of the exercizes may be to make certain visualizations, throughout our experience we'll be using pandas tricks to create the data splices we need, so in the following is a mix of new plotting stuff, with pandas data selection/splicing stuff. We're also going to import a new module called seaborn . It is another plotting library based off matplotlib . We're going to use it to pull some stylistic features. import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from sklearn.datasets import load_boston import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from ipywidgets import interact The following few cells should look familiar from last tutorial session, we're going to use some essential pandas methods to get a general sense of what our dataset looks like There are many ways to construct a dataframe, as an exercise, you might think of otherways to perform that task here. df = pd.read_csv(\"https://raw.githubusercontent.com/wesleybeckner/ds_for_engineers/main/data/wine_quality/winequalityN.csv\") df.describe() # In your subsequent time with pandas you'll discover that there are a host of # ways to populate a dataframe. In the following, I can create a dataframe # simply by using read_csv because the data is formated in a way that # pandas can easily intuit. df = pd . read_csv ( \"https://raw.githubusercontent.com/wesleybeckner/\" \\ \"technology_explorers/main/assets/imdb_movies.csv\" ) /usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (3) have mixed types.Specify dtype option on import or set low_memory=False. interactivity=interactivity, compiler=compiler, result=result) # we check the shape of our data to see if its as we expect df . shape (85855, 22) # we check the column names df . columns Index(['imdb_title_id', 'title', 'original_title', 'year', 'date_published', 'genre', 'duration', 'country', 'language', 'director', 'writer', 'production_company', 'actors', 'description', 'avg_vote', 'votes', 'budget', 'usa_gross_income', 'worlwide_gross_income', 'metascore', 'reviews_from_users', 'reviews_from_critics'], dtype='object') Lets start by looking at basic description of our data. This gives us a sense of what visualizations we can employ to begin understanding our dataset. df . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } duration avg_vote votes metascore reviews_from_users reviews_from_critics count 85855.000000 85855.000000 8.585500e+04 13305.000000 78258.000000 74058.000000 mean 100.351418 5.898656 9.493490e+03 55.896881 46.040826 27.479989 std 22.553848 1.234987 5.357436e+04 17.784874 178.511411 58.339158 min 41.000000 1.000000 9.900000e+01 1.000000 1.000000 1.000000 25% 88.000000 5.200000 2.050000e+02 43.000000 4.000000 3.000000 50% 96.000000 6.100000 4.840000e+02 57.000000 9.000000 8.000000 75% 108.000000 6.800000 1.766500e+03 69.000000 27.000000 23.000000 max 808.000000 9.900000 2.278845e+06 100.000000 10472.000000 999.000000 df . loc [:, df . dtypes == object ] . describe () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } imdb_title_id title original_title year date_published genre country language director writer production_company actors description budget usa_gross_income worlwide_gross_income count 85855 85855 85855 85855 85855 85855 85791 85022 85768 84283 81400 85786 83740 23710 15326 31016 unique 85855 82094 80852 168 22012 1257 4907 4377 34733 66859 32050 85729 83611 4642 14857 30414 top tt0131549 Anna Anna 2017 2010 Drama USA English Jes\u00fas Franco Jing Wong Metro-Goldwyn-Mayer (MGM) Nobuyo \u00d4yama, Noriko Ohara, Michiko Nomura, Ka... The story of $ 1000000 $ 1000000 $ 8144 freq 1 10 10 3223 113 12543 28511 35939 87 84 1284 9 15 758 19 15 The first thing we notice is that all the data is numerical that we can pull standard statistical information from (mean, std, max, etc.) What kind of visualizations do you think of with data like this? I tend to think of scatter, box, and histogram plots for numerical data and bar or sunburst charts for categorical data.","title":"4.2 Visualization with Pandas"},{"location":"S6_Matplotlib/#421-scatter-plots","text":"The way to generate a plot in the fewest keystrokes is to simply call the plot() method within the dataframe object df.plot() # the simplest plot we can make is the following so let's start here. # We can generate a figure simply by using the plot() method of our dataframe # object. df . plot () <matplotlib.axes._subplots.AxesSubplot at 0x7fcd186a5390> This gives us a raw view of the data, but here I'd like to introduce some standard plotting steps: recall the fig , ax format we used previously. fig, ax = plt.subplots(1, 1, figsize = (10, 5)) df.plot(ax=ax) fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) df . plot ( ax = ax ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd1dad9950> To make this into a scatter plot, we set the linestyle (or ls) to an empty string, and select a marker type. fig, ax = plt.subplots(1, 1, figsize = (10, 5)) df.plot(ax=ax, linestyle='', marker='.') fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) df . plot ( ax = ax , ls = '' , marker = '.' , ms = 2 ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd1856f350>","title":"4.2.1 Scatter Plots"},{"location":"S6_Matplotlib/#exercise-4-scatter-plots-with-pandas","text":"Make a plot of duration vs metascore # Cell for Exercise 4 <matplotlib.axes._subplots.AxesSubplot at 0x7fcd18498ad0>","title":"Exercise 4: Scatter Plots with Pandas"},{"location":"S6_Matplotlib/#422-bar-plots","text":"One of the more common methods of depicting aggregate data is bar plots. We almost always see these kinds of plots used to display and compare between averages, but sometimes between singular data values as well. fig, ax = plt.subplots(1, 1, figsize=(10,7.5)) df.groupby('country').filter(lambda x: x.shape[0] > 100).\\ groupby('country')['duration'].mean().sort_values()\\ [-20:].plot(kind='barh', ax=ax) fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 7.5 )) df . groupby ( 'country' ) . filter ( lambda x : x . shape [ 0 ] > 100 ) . \\ groupby ( 'country' )[ 'duration' ] . mean () . sort_values () \\ [ - 20 :] . plot ( kind = 'barh' , ax = ax ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd08681210>","title":"4.2.2 Bar Plots"},{"location":"S6_Matplotlib/#423-box-plots","text":"Maybe we thought it was usefull to see the feature data in the scatter plots ( we can visually scan for correlations between feature sets, check outliers, etc.) but perhaps more instructive, is a boxplot. A box plot or boxplot is a statistical method for graphically depicting aggregate data through their quartiles. It will be useful to inspect the boxplot API to see the default behavior for representing the quartiles and outliers. fig, ax = plt.subplots(1, 1, figsize = (10, 5)) df.plot(kind='box', ax=ax) fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 7.5 )) df . groupby ( 'country' ) . filter (( lambda x : ( x . shape [ 0 ] > 100 ) & # filter by number of datapoints ( x [ 'duration' ] . mean () < 100 )) # filter by average movie time ) . boxplot ( by = 'country' , column = 'duration' , rot = 90 , ax = ax ) /usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray return array(a, dtype, copy=False, order=order) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd04c5d9d0>","title":"4.2.3 Box Plots"},{"location":"S6_Matplotlib/#424-histograms","text":"What are some other kinds of plots we can make? A good one to be aware of is the histogram. plt.title('Demo Hist') plt.xlabel('Duration') plt.ylabel('Frequency') plt.hist(df['duration']) plt . title ( 'Demo Hist' ) plt . xlabel ( 'Duration' ) plt . ylabel ( 'Frequency' ) plt . hist ( df [ 'duration' ]) (array([7.2368e+04, 1.3197e+04, 2.2800e+02, 4.0000e+01, 1.1000e+01, 4.0000e+00, 4.0000e+00, 1.0000e+00, 1.0000e+00, 1.0000e+00]), array([ 41. , 117.7, 194.4, 271.1, 347.8, 424.5, 501.2, 577.9, 654.6, 731.3, 808. ]), <a list of 10 Patch objects>) df [ 'duration' ] . plot ( kind = 'hist' ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd0471d210>","title":"4.2.4 Histograms"},{"location":"S6_Matplotlib/#425-kernel-density-estimates","text":"Another useful plot type for data analysis is the kernel density estimate. You can think of this plot as exactly like a histogram, except instead of creating bins in which to accrue datapoints, you deposit a gaussian distribution around every datapoint in your dataset. By this mechanism, you avoid creating bias in your data summary as you otherwise would be when predifining bin sizes and locations in a histogram. fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) df [ 'duration' ] . plot ( kind = 'kde' , ax = ax ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd046ac7d0>","title":"4.2.5 Kernel Density Estimates"},{"location":"S6_Matplotlib/#4251-enrichment-skew-and-tailedness","text":"While we're on the topic of KDEs/histograms and other statistical plots, this is a convenient time to talk about skew and tailedness or, otherwise known as kurtosis df.skew() indicates the skewdness of the data df.kurtosis() indicates the tailedness of the data # from scipy.stats import skewnorm from ipywidgets import FloatSlider slider = FloatSlider ( value = 0.5 , min = 0.5 , max = 5 , step = 0.5 , description = 'Shape:' , disabled = False , continuous_update = False , orientation = 'horizontal' , readout = True , readout_format = '.1f' ) import numpy as np def inspect_kurt_skew ( a = slider ): # theres another hyperparameter, lambda for the center # of weibull. the shape parameter is sometimes called # a, or k fig , ax = plt . subplots ( 1 , 1 , figsize = ( 5 , 5 )) s = np . random . weibull ( a , 1000 ) statdf = pd . DataFrame ( s ) statdf [ 0 ] . plot ( kind = 'kde' , ax = ax ) print ( \"skew: {:.2f} \" . format ( statdf [ 0 ] . skew ())) print ( \"kurtosis: {:.2f} \" . format ( statdf [ 0 ] . kurt ())) interact ( inspect_kurt_skew ) interactive(children=(FloatSlider(value=0.5, continuous_update=False, description='Shape:', max=5.0, min=0.5, \u2026 <function __main__.inspect_kurt_skew>","title":"4.2.5.1 Enrichment: Skew and Tailedness"},{"location":"S6_Matplotlib/#426-correlation-plots","text":"Often, we'll want to quantify the strength of a relationship between input variables. We can do this by calculating correlations. We won't go into great detail here about how Pearson's correlation is calculated, but the StatQuest videos on this subject are here for reference (and are really good... if you can stomach Starmer's humor) StatQuest: Correlation StatQuest: Covariance The main takeaway is that pearson's correlation ranges from -1 to 1 and indicates how positively or negatively correlated the variables in question are. For our purposes, this can give insight into what variables will be important in our machine learning model. We can get the pearson's correlation between all the input features using the dataframe.corr() method. Fig: pearson's correlation value and corresponding scatter plot of feature-x and feature-y df . corr () .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } duration avg_vote votes metascore reviews_from_users reviews_from_critics duration 1.000000 0.242432 0.125618 0.210531 0.130836 0.135465 avg_vote 0.242432 1.000000 0.166972 0.691338 0.138185 0.200526 votes 0.125618 0.166972 1.000000 0.194730 0.766237 0.671635 metascore 0.210531 0.691338 0.194730 1.000000 0.126131 0.236107 reviews_from_users 0.130836 0.138185 0.766237 0.126131 1.000000 0.671634 reviews_from_critics 0.135465 0.200526 0.671635 0.236107 0.671634 1.000000 So we have this raw table of pearsons correlations between each of our input features, how do we and how should we turn this into a plot? Typically we'd use a heat map on an feature vs feature grid to view this kind of data. In the following I'm going to use some numpy methods you may not have seen before. Links to the documentation for these methods are at the end of the notebook. import numpy as np fig, ax = plt.subplots(1, 1, figsize = (10,10)) # create a mask to white-out the upper triangle mask = np.triu(np.ones_like(df.corr(), dtype=bool)) # we'll want a divergent colormap for this so our eye # is not attracted to the values close to 0 cmap = sns.diverging_palette(230, 20, as_cmap=True) sns.heatmap(df.corr(), mask=mask, cmap=cmap, ax=ax) sns . heatmap ( df . corr ()) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd023a6a10> import numpy as np fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 10 )) # create a mask to white-out the upper triangle mask = np . triu ( np . ones_like ( df . corr (), dtype = bool )) # we'll want a divergent colormap for this so our eye # is not attracted to the values close to 0 cmap = sns . diverging_palette ( 230 , 20 , as_cmap = True ) sns . heatmap ( df . corr (), mask = mask , cmap = cmap , ax = ax ) <matplotlib.axes._subplots.AxesSubplot at 0x7fcd0239fc90> What do we notice? looks like reviews and votes are all pretty correlated. Surprising?","title":"4.2.6 Correlation Plots"},{"location":"S6_Matplotlib/#43-visualization-with-ipywidgets","text":"","title":"4.3 Visualization with IpyWidgets"},{"location":"S6_Matplotlib/#431-interact","text":"Here we're going to introduce a very basic use case of IPython's widgets using interact . The interact method ( ipywidgets.interact ) automatically creates user interface (UI) controls for exploring code and data interactively. It is the easiest way to get started using IPython\u2019s widgets. from ipywidgets import interact def my_plot(col=filtdf.select_dtypes('number').columns): fig, ax = plt.subplots(1,1,figsize=(10,5)) filtdf.boxplot(column=col, by='country', ax=ax) interact(my_plot) def my_plot ( col = filtdf . select_dtypes ( 'number' ) . columns ): fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) filtdf . boxplot ( column = col , by = 'country' , ax = ax ) After defining our function that returns our plot, and defining input parameters for the fields we would like to interact with, we call our function with interact interact(my_plot) Let's say we want to look at information from the IMDb data based on country. Because there are so many countries in the database, let's filter it down to only the top 5 countries. How could we do this using value_counts ? Let's try this below top_5_countries = df [ 'country' ] . value_counts ()[: 5 ] . keys () # get list of top 5 countries filtdf = df . loc [ df [ 'country' ] . isin ( top_5_countries )] # only select rows whose country is in the list filtdf . boxplot ( column = 'duration' , by = 'country' ) /usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray return array(a, dtype, copy=False, order=order) <matplotlib.axes._subplots.AxesSubplot at 0x7fccddd7dc90> interact ( my_plot ) interactive(children=(Dropdown(description='col', options=('duration', 'avg_vote', 'votes', 'metascore', 'revi\u2026 <function __main__.my_plot> Let's break this down. Normally, I would just set my y-variable to a value, so that when I call my function, my figure is generated with the corresponding data field: def my_plot ( col = 'duration' ): fig , ax = plt . subplots ( 1 , 1 , figsize = ( 10 , 5 )) filtdf . boxplot ( column = col , by = 'country' , ax = ax ) my_plot () /usr/local/lib/python3.7/dist-packages/numpy/core/_asarray.py:83: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray return array(a, dtype, copy=False, order=order) Instead, we want to give interact() a list of values for the user to select from, this is the difference between a regular function, and one we might feed into interact. y = ['duration', 'avg_vote', 'votes', 'metascore', 'reviews_from_users', 'reviews_from_critics'] list ( filtdf . select_dtypes ( 'number' ) . columns ) ['duration', 'avg_vote', 'votes', 'metascore', 'reviews_from_users', 'reviews_from_critics']","title":"4.3.1 Interact"},{"location":"S6_Matplotlib/#exercise-5-ipywidgets-and-figures-in-functions","text":"In the previous section we created a single dropdown menu to select our y variable for our plot. Here, we would like to do the same thing, but this time filter your dataframe for only the top 10 directors that most frequently occur in the IMDb datafile. When you build the interactive plot, grouby director this time instead of country. # Code block for Exercise 5 interact ( my_plot ) interactive(children=(Dropdown(description='col', options=('duration', 'avg_vote', 'votes', 'metascore', 'revi\u2026 <function __main__.my_plot>","title":"Exercise 5: IpyWidgets and Figures in Functions"},{"location":"S6_Matplotlib/#part-2-object-oriented-programming","text":"","title":"Part 2: Object Oriented Programming"},{"location":"S6_Matplotlib/#51-classes-instances-methods-and-attribtues","text":"A class is created with the reserved word class A class can have attributes # define a class class MyClass : some_attribute = 5 We use the class blueprint MyClass to create an instance We can now access attributes belonging to that class: # create instance instance = MyClass () # access attributes of the instance of MyClass instance . some_attribute 5 attributes can be changed: instance . some_attribute = 50 instance . some_attribute 50 In practice we always use the __init__() function, which is executed when the class is being initiated. class Pokeball : def __init__ ( self , contains = None , type_name = \"poke ball\" ): self . contains = contains self . type_name = type_name self . catch_rate = 0.50 # note this attribute is not accessible upon init # empty pokeball pokeball1 = Pokeball () # used pokeball of a different type pokeball1 = Pokeball ( \"Pikachu\" , \"master ball\" ) > what is the special keyword [`self`](http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html) doing? The `self` parameter is a reference to the current instance of the class and is used to access variables belonging to the class. classes can also contain methods import random class Pokeball : def __init__ ( self , contains = None , type_name = \"poke ball\" ): self . contains = contains self . type_name = type_name self . catch_rate = 0.50 # note this attribute is not accessible upon init # the method catch, will update self.contains, if a catch is successful # it will also use self.catch_rate to set the performance of the catch def catch ( self , pokemon ): if self . contains == None : if random . random () < self . catch_rate : self . contains = pokemon print ( f \" { pokemon } captured!\" ) else : print ( f \" { pokemon } escaped!\" ) pass else : print ( \"pokeball is not empty!\" ) pokeball = Pokeball () pokeball . catch ( \"picachu\" ) picachu captured! pokeball . contains 'picachu' ### Q1 Create a release method for the class Pokeball: ## 5.2 Inheritance Inheritance allows you to adopt into a child class, the methods/attributes of a parent class class MasterBall ( Pokeball ): pass masterball = MasterBall () masterball . type_name 'poke ball' HMMM we don't like that type name. let's make sure we change some of the inherited attributes! We'll do this again with the `__init__` function class MasterBall ( Pokeball ): def __init__ ( self , contains = None , type_name = \"Masterball\" , catch_rate = 0.8 ): self . contains = contains self . type_name = type_name self . catch_rate = catch_rate masterball = MasterBall () masterball . type_name 'Masterball' masterball . catch ( \"charmander\" ) charmander captured! We can also write this, this way: class MasterBall ( Pokeball ): def __init__ ( self , contains = None , type_name = \"Masterball\" ): Pokeball . __init__ ( self , contains , type_name ) self . catch_rate = 0.8 masterball = MasterBall () masterball . type_name 'Masterball' masterball = MasterBall () masterball . catch ( \"charmander\" ) charmander captured! The keyword `super` will let us write even more succintly: class MasterBall ( Pokeball ): def __init__ ( self , contains = None , type_name = \"Masterball\" ): super () . __init__ ( contains , type_name ) self . catch_rate = 0.8 masterball = MasterBall () masterball . catch ( \"charmander\" ) charmander captured! ### Q2 Write another class object called `GreatBall` that inherits the properties of `Pokeball`, has a `catch_rate` of 0.6, and `type_name` of Greatball # Code Cell for L2 Q2 ## 5.3 Interacting Objects ### Q3 Write another class object called `Pokemon`. It has the [attributes](https://bulbapedia.bulbagarden.net/wiki/Type): * name * weight * speed * type Now create a class object called `FastBall`, it inherits the properties of `Pokeball` but has a new condition on `catch` method: if pokemon.speed > 100 then there is 100% chance of catch success. > what changes do you have to make to the way we've been interacting with pokeball to make this new requirement work? # Code Cell for L2 Q3 ### Q4 In the above task, did you have to write any code to test that your new classes worked?! We will talk about that more at a later time, but for now, wrap any testing that you did into a new function called `test_classes` in the code cell below # Code Cell for L2 Q4 # References * [`numpy.triu`](https://numpy.org/doc/stable/reference/generated/numpy.triu.html) * [`numpy.ones_like`](https://numpy.org/doc/stable/reference/generated/numpy.ones_like.html) * [`ipywidgets`](https://ipywidgets.readthedocs.io/en/latest/) * [StatQuest: Correlation](https://youtu.be/xZ_z8KWkhXE?t=822) * [StatQuest: Covariance](https://www.youtube.com/watch?v=qtaqvPAeEJY&ab_channel=StatQuestwithJoshStarmer) # Enrichment Topics ## 4.4 Other Plot Types ### 4.4.1 Bar Plots (Advanced) Similar to how we created bar plots with pandas, we can use matplotlib to make barplots pokemon = ['Charmander', 'Pikachu', 'Squirtle', 'Bulbasaur'] hp = [10, 12, 8, 16] plt.bar(pokemon, hp, color='tab:blue') plt.title('Pokemon HP') plt.xlabel('Pokemon') plt.ylabel('HP') pokemon = [ 'Charmander' , 'Pikachu' , 'Squirtle' , 'Bulbasaur' ] hp = [ 10 , 12 , 8 , 16 ] plt . bar ( pokemon , hp , color = 'tab:blue' ) plt . title ( 'Pokemon HP' ) plt . xlabel ( 'Pokemon' ) plt . ylabel ( 'HP' ) Text(0, 0.5, 'HP') ![png](S6_Matplotlib_files/S6_Matplotlib_130_1.png) Doing the same but with horizontally oriented bars pokemon = ['Charmander', 'Pikachu', 'Squirtle', 'Bulbasaur'] hp = [10, 12, 8, 16] plt.barh(pokemon, hp, color='tab:blue') plt.title('Pokemon HP') plt.ylabel('Pokemon') plt.xlabel('HP') pokemon = [ 'Charmander' , 'Pikachu' , 'Squirtle' , 'Bulbasaur' ] hp = [ 10 , 12 , 8 , 16 ] plt . barh ( pokemon , hp , color = 'tab:blue' ) plt . title ( 'Pokemon HP' ) plt . ylabel ( 'Pokemon' ) plt . xlabel ( 'HP' ) Text(0.5, 0, 'HP') ![png](S6_Matplotlib_files/S6_Matplotlib_132_1.png) We can also add error bars pokemon = ['Charmander', 'Pikachu', 'Squirtle', 'Bulbasaur'] hp = [10, 12, 8, 16] variance = [i * random.random()*.25 for i in hp] plt.barh(pokemon, hp, xerr=variance, color='tab:blue') plt.title('Pokemon HP') plt.ylabel('Pokemon') plt.xlabel('HP') for loop version of list comprehension hp = [10, 12, 8, 16] variance = [] for i in hp: variance.append(i * random.random()*.25) print(variance) pokemon = [ 'Charmander' , 'Pikachu' , 'Squirtle' , 'Bulbasaur' ] hp = [ 10 , 12 , 8 , 16 ] variance = [ i * random . random () * .25 for i in hp ] plt . barh ( pokemon , hp , xerr = variance , color = 'tab:blue' ) plt . title ( 'Pokemon HP' ) plt . ylabel ( 'Pokemon' ) plt . xlabel ( 'HP' ) Text(0.5, 0, 'HP') ![png](S6_Matplotlib_files/S6_Matplotlib_134_1.png) ### 4.4.2 3D Plots You can also create 3D plots in matplotlib using `ax.scatter3D` ax = plt.axes(projection='3d') ax.scatter3D(range(10),[i*random.random()*.25 for i in range(10)]) for loop version of list comprehension: ls = [] for i in range(10): ls.append(i*random.random()*.25) print(ls) ax = plt . axes ( projection = '3d' ) ax . scatter3D ( range ( 10 ),[ i * random . random () * .25 for i in range ( 10 )]) ![png](S6_Matplotlib_files/S6_Matplotlib_136_1.png) ## 4.5 Visualization with Plotly Another great plotting library, that is gaining in popularity (especially in enterprise settings) is plotly. As an added exercise, if you have additional time, explore some of the [plotly examples](https://plotly.com/python/) then recreate the breakout room assignment using plotly instead of matplotlib. ### 4.5.1 Scatter Plot with Size and Color import plotly.express as px x = 'quality' y = 'alcohol' color = 'quality' size = 'alcohol' corr = df . corr () pearson = corr [ x ][ y ] fig = px . scatter ( df , x = x , y = y , color = color , size = size , title = ' {} vs {} ( {:.2f} corr)' . format ( x , y , pearson ), width = 800 , height = 800 ) fig . show () if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});} window.PlotlyConfig = {MathJaxConfig: 'local'}; window.PLOTLYENV=window.PLOTLYENV || {}; if (document.getElementById(\"9fe7e498-9dd8-4f23-b6dc-b2f404ecb8f4\")) { Plotly.newPlot( '9fe7e498-9dd8-4f23-b6dc-b2f404ecb8f4', [{\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"quality=%{marker.color}<br>alcohol=%{marker.size}\", \"legendgroup\": \"\", \"marker\": {\"color\": [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 7, 5, 7, 6, 8, 6, 5, 8, 7, 8, 5, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 6, 7, 4, 5, 6, 5, 6, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 7, 5, 8, 5, 6, 5, 5, 6, 8, 5, 7, 7, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 6, 5, 7, 7, 7, 6, 6, 7, 4, 6, 5, 5, 5, 5, 5, 6, 5, 6, 6, 5, 6, 5, 5, 5, 5, 4, 6, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 7, 7, 6, 5, 7, 5, 5, 5, 5, 6, 5, 7, 6, 5, 5, 6, 6, 6, 6, 6, 4, 7, 6, 7, 6, 6, 5, 6, 6, 6, 7, 8, 8, 7, 5, 5, 6, 5, 5, 6, 7, 5, 5, 6, 6, 4, 7, 5, 6, 4, 5, 4, 6, 6, 5, 5, 6, 5, 5, 6, 5, 8, 4, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 4, 5, 5, 4, 5, 6, 5, 7, 5, 6, 7, 5, 5, 5, 5, 5, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 4, 6, 6, 6, 6, 6, 6, 6, 7, 6, 5, 5, 7, 6, 5, 6, 7, 7, 7, 5, 4, 3, 5, 3, 6, 8, 7, 7, 6, 4, 6, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 5, 5, 5, 6, 6, 5, 4, 7, 8, 8, 4, 5, 5, 5, 6, 7, 7, 7, 7, 6, 5, 7, 3, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 7, 6, 7, 8, 6, 6, 5, 6, 6, 5, 7, 6, 7, 5, 6, 6, 5, 5, 6, 6, 6, 5, 8, 5, 6, 5, 5, 6, 6, 6, 5, 7, 7, 6, 6, 5, 6, 6, 7, 6, 6, 5, 7, 7, 6, 7, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 7, 6, 6, 6, 5, 6, 6, 5, 6, 7, 7, 7, 7, 6, 7, 7, 6, 6, 6, 7, 7, 7, 5, 6, 7, 7, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 5, 5, 5, 6, 5, 7, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 7, 6, 6, 6, 7, 6, 6, 5, 5, 5, 5, 5, 7, 4, 8, 7, 5, 8, 7, 5, 7, 6, 8, 6, 6, 3, 5, 6, 6, 7, 5, 5, 7, 7, 7, 6, 7, 5, 6, 5, 5, 5, 5, 6, 5, 5, 6, 6, 5, 5, 6, 5, 6, 7, 6, 5, 7, 6, 6, 6, 5, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 4, 6, 5, 4, 6, 6, 6, 5, 6, 6, 5, 7, 6, 7, 6, 6, 6, 6, 7, 6, 5, 6, 6, 5, 5, 5, 6, 6, 5, 6, 4, 6, 6, 6, 6, 5, 6, 6, 6, 5, 5, 6, 5, 6, 4, 5, 6, 6, 6, 6, 6, 6, 7, 5, 7, 7, 7, 7, 7, 7, 5, 6, 5, 6, 7, 5, 6, 7, 5, 6, 6, 5, 6, 6, 5, 7, 5, 7, 7, 6, 6, 7, 7, 7, 5, 5, 6, 6, 7, 6, 6, 7, 7, 6, 5, 6, 5, 5, 5, 7, 5, 6, 8, 7, 6, 6, 5, 5, 6, 6, 5, 5, 5, 6, 8, 6, 5, 5, 5, 5, 7, 6, 6, 6, 5, 5, 6, 5, 5, 8, 4, 6, 6, 6, 5, 5, 6, 5, 6, 6, 7, 5, 5, 5, 7, 4, 6, 5, 5, 5, 4, 6, 5, 7, 7, 7, 7, 6, 7, 6, 6, 5, 5, 4, 5, 7, 4, 5, 6, 5, 6, 6, 6, 5, 6, 6, 8, 6, 5, 6, 6, 7, 7, 7, 5, 5, 6, 5, 5, 5, 7, 4, 6, 7, 4, 6, 5, 5, 6, 5, 6, 5, 5, 5, 5, 7, 4, 6, 6, 5, 5, 6, 6, 5, 5, 6, 6, 5, 6, 7, 6, 5, 7, 7, 5, 5, 6, 8, 7, 5, 7, 5, 5, 5, 6, 6, 7, 6, 5, 6, 6, 5, 7, 6, 3, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 5, 6, 7, 7, 6, 6, 5, 6, 6, 6, 5, 6, 7, 7, 7, 7, 7, 5, 9, 6, 6, 5, 7, 8, 4, 6, 7, 8, 5, 6, 6, 6, 7, 6, 6, 7, 5, 7, 5, 5, 6, 6, 6, 8, 6, 5, 5, 7, 6, 6, 5, 6, 6, 6, 5, 6, 7, 6, 6, 5, 5, 5, 5, 5, 9, 6, 5, 6, 5, 6, 6, 9, 7, 7, 6, 4, 8, 6, 6, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 5, 5, 7, 6, 7, 5, 7, 5, 7, 7, 5, 5, 7, 5, 8, 7, 6, 6, 5, 6, 7, 8, 7, 6, 5, 5, 6, 3, 5, 7, 9, 6, 6, 8, 7, 6, 6, 6, 6, 7, 6, 7, 6, 7, 6, 7, 5, 7, 7, 6, 6, 6, 6, 6, 7, 6, 5, 6, 8, 4, 4, 8, 4, 5, 5, 5, 5, 5, 4, 5, 7, 6, 6, 7, 7, 6, 6, 6, 8, 5, 5, 7, 5, 5, 7, 5, 6, 5, 5, 5, 5, 5, 6, 7, 5, 6, 7, 7, 7, 7, 5, 5, 4, 5, 5, 6, 6, 5, 6, 5, 5, 7, 7, 6, 6, 7, 6, 6, 6, 5, 6, 6, 7, 7, 7, 7, 6, 7, 6, 5, 6, 5, 7, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 7, 6, 4, 5, 4, 6, 6, 5, 6, 6, 7, 7, 5, 6, 7, 6, 6, 6, 5, 7, 6, 6, 7, 6, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 6, 6, 6, 6, 4, 7, 4, 6, 6, 6, 6, 3, 6, 5, 5, 7, 5, 4, 5, 4, 5, 7, 5, 5, 5, 5, 6, 5, 6, 5, 4, 5, 5, 6, 5, 6, 4, 7, 5, 5, 5, 6, 5, 6, 7, 7, 6, 7, 5, 7, 5, 6, 7, 6, 5, 5, 6, 7, 6, 6, 6, 7, 5, 8, 8, 6, 7, 6, 6, 6, 7, 5, 8, 6, 7, 6, 7, 6, 6, 5, 5, 5, 7, 8, 7, 7, 4, 7, 6, 6, 5, 4, 8, 5, 5, 5, 5, 6, 6, 7, 5, 5, 6, 7, 7, 5, 7, 6, 6, 5, 5, 5, 6, 8, 8, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 4, 6, 4, 4, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 5, 6, 5, 6, 6, 5, 6, 5, 6, 5, 7, 6, 5, 5, 5, 6, 5, 6, 7, 5, 5, 8, 6, 5, 6, 7, 6, 7, 6, 6, 7, 7, 6, 7, 6, 7, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 8, 5, 8, 8, 6, 7, 6, 5, 7, 6, 7, 5, 6, 3, 6, 7, 7, 6, 6, 5, 6, 5, 7, 5, 6, 7, 7, 7, 5, 4, 7, 6, 7, 5, 7, 5, 6, 7, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 8, 7, 5, 6, 7, 5, 5, 5, 6, 6, 7, 5, 6, 6, 6, 7, 5, 8, 7, 6, 7, 7, 7, 6, 6, 6, 6, 4, 4, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 7, 8, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 7, 6, 6, 6, 5, 5, 6, 7, 8, 6, 6, 8, 5, 5, 6, 6, 5, 6, 6, 8, 8, 7, 7, 8, 4, 7, 7, 6, 5, 5, 5, 6, 6, 8, 7, 6, 7, 7, 4, 5, 7, 6, 5, 6, 5, 6, 7, 6, 6, 7, 7, 6, 6, 7, 6, 7, 7, 6, 6, 6, 5, 7, 6, 7, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 6, 7, 6, 8, 8, 5, 4, 8, 6, 7, 6, 6, 6, 8, 6, 6, 5, 6, 3, 5, 7, 4, 6, 5, 4, 6, 6, 6, 5, 7, 5, 4, 5, 7, 6, 5, 5, 5, 7, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 7, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 8, 5, 6, 7, 5, 5, 7, 6, 5, 6, 4, 6, 5, 6, 6, 6, 6, 6, 6, 4, 3, 6, 6, 6, 6, 5, 6, 5, 5, 8, 8, 7, 5, 7, 6, 6, 7, 5, 5, 7, 8, 7, 6, 6, 6, 5, 5, 6, 7, 6, 7, 6, 6, 6, 6, 5, 6, 5, 5, 6, 6, 5, 6, 6, 6, 6, 5, 7, 7, 6, 6, 6, 5, 6, 6, 6, 6, 4, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 4, 4, 6, 5, 7, 6, 5, 6, 5, 5, 6, 5, 5, 6, 6, 5, 4, 6, 6, 4, 5, 4, 5, 6, 7, 5, 6, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 7, 5, 9, 6, 7, 5, 7, 6, 6, 7, 7, 5, 6, 6, 6, 6, 8, 7, 5, 6, 6, 7, 6, 6, 5, 6, 6, 5, 6, 8, 7, 6, 6, 5, 6, 5, 5, 5, 6, 7, 7, 7, 7, 6, 7, 5, 4, 7, 6, 4, 6, 5, 5, 5, 6, 5, 5, 6, 6, 7, 6, 4, 8, 5, 6, 7, 6, 6, 7, 5, 5, 6, 5, 7, 6, 6, 5, 5, 6, 7, 7, 7, 7, 5, 7, 3, 6, 4, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 4, 5, 5, 6, 6, 5, 4, 5, 5, 5, 6, 6, 5, 8, 6, 6, 4, 6, 7, 7, 6, 8, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 4, 6, 6, 6, 6, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 6, 6, 5, 5, 5, 5, 6, 6, 7, 6, 5, 5, 5, 5, 5, 7, 6, 6, 6, 6, 6, 6, 5, 6, 8, 8, 5, 4, 6, 6, 7, 6, 7, 7, 5, 7, 5, 5, 6, 5, 5, 6, 5, 8, 6, 6, 6, 5, 6, 6, 6, 5, 5, 6, 5, 6, 6, 5, 6, 6, 7, 6, 7, 4, 6, 6, 6, 5, 7, 6, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7, 6, 5, 6, 7, 6, 6, 5, 7, 6, 6, 6, 5, 5, 5, 5, 6, 7, 6, 7, 5, 7, 6, 4, 5, 5, 6, 6, 6, 7, 5, 6, 6, 6, 6, 7, 7, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 7, 7, 5, 5, 6, 6, 6, 6, 7, 5, 6, 6, 6, 7, 5, 5, 5, 4, 6, 6, 5, 6, 5, 6, 3, 6, 5, 6, 5, 6, 7, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 7, 5, 5, 4, 7, 6, 5, 5, 5, 6, 6, 5, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 6, 7, 5, 5, 5, 6, 5, 6, 6, 6, 8, 8, 8, 8, 8, 6, 6, 5, 6, 7, 4, 8, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 5, 7, 6, 5, 5, 6, 5, 6, 7, 5, 7, 6, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 5, 5, 7, 3, 5, 5, 5, 5, 6, 5, 7, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 6, 7, 6, 6, 5, 5, 6, 5, 5, 6, 6, 4, 5, 5, 6, 5, 6, 6, 5, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 6, 5, 4, 5, 6, 4, 5, 7, 5, 5, 7, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 5, 7, 6, 6, 6, 5, 5, 6, 6, 5, 6, 6, 4, 5, 4, 6, 6, 4, 6, 7, 6, 6, 5, 5, 5, 7, 7, 7, 7, 7, 5, 5, 7, 7, 5, 7, 5, 6, 6, 6, 5, 5, 6, 7, 5, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 5, 6, 5, 6, 5, 5, 5, 5, 6, 7, 5, 6, 7, 6, 6, 6, 5, 6, 5, 6, 6, 7, 6, 6, 7, 6, 7, 4, 5, 5, 7, 6, 7, 6, 6, 5, 5, 6, 5, 4, 6, 6, 5, 5, 5, 5, 5, 7, 4, 6, 6, 5, 6, 7, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 6, 5, 5, 6, 6, 6, 7, 6, 6, 5, 7, 4, 6, 6, 6, 5, 6, 6, 5, 5, 5, 5, 5, 5, 5, 7, 7, 6, 6, 7, 7, 6, 7, 6, 8, 7, 7, 5, 5, 5, 6, 7, 5, 5, 5, 6, 5, 7, 5, 7, 6, 6, 7, 5, 4, 7, 6, 5, 6, 6, 5, 6, 5, 6, 5, 5, 6, 5, 6, 8, 5, 5, 5, 4, 5, 6, 6, 5, 8, 5, 6, 6, 4, 6, 6, 5, 5, 6, 6, 7, 6, 7, 6, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 7, 5, 4, 3, 6, 6, 6, 6, 5, 4, 4, 6, 8, 6, 8, 5, 4, 4, 4, 8, 8, 6, 7, 6, 5, 5, 5, 6, 6, 6, 4, 4, 6, 6, 5, 5, 6, 6, 5, 4, 6, 6, 4, 4, 4, 5, 6, 5, 5, 5, 7, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 5, 5, 6, 6, 4, 5, 6, 5, 6, 5, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 7, 6, 5, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 5, 5, 6, 6, 5, 5, 7, 6, 6, 7, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 4, 4, 5, 5, 5, 5, 6, 5, 5, 4, 4, 6, 6, 6, 7, 6, 5, 6, 6, 6, 5, 7, 7, 6, 6, 7, 5, 5, 7, 8, 5, 5, 8, 7, 6, 6, 5, 6, 4, 4, 5, 7, 6, 6, 6, 6, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 5, 5, 6, 5, 7, 7, 7, 5, 7, 7, 5, 6, 5, 6, 5, 6, 5, 7, 5, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 7, 6, 5, 7, 7, 7, 7, 7, 7, 6, 7, 4, 6, 7, 5, 5, 7, 5, 5, 6, 5, 6, 7, 5, 6, 7, 7, 6, 6, 6, 6, 6, 5, 5, 7, 5, 5, 7, 7, 7, 7, 6, 5, 5, 7, 7, 5, 5, 7, 7, 6, 5, 6, 7, 5, 5, 5, 6, 5, 5, 6, 6, 6, 5, 5, 5, 6, 7, 7, 5, 6, 6, 5, 5, 7, 5, 5, 5, 4, 7, 7, 6, 6, 6, 6, 8, 7, 5, 7, 7, 6, 5, 7, 7, 7, 6, 7, 7, 6, 6, 5, 6, 6, 6, 6, 5, 6, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 5, 5, 5, 6, 6, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 5, 6, 6, 6, 7, 5, 7, 6, 6, 5, 6, 6, 6, 7, 5, 5, 5, 7, 6, 6, 6, 7, 5, 7, 6, 5, 6, 6, 6, 7, 6, 6, 8, 6, 8, 6, 6, 8, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 5, 7, 6, 7, 7, 8, 8, 8, 6, 7, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 7, 5, 8, 7, 5, 7, 7, 5, 5, 6, 8, 8, 6, 5, 5, 6, 7, 7, 5, 6, 7, 7, 5, 5, 7, 4, 6, 5, 5, 5, 6, 6, 6, 6, 7, 7, 5, 5, 5, 6, 7, 6, 6, 6, 6, 7, 7, 6, 6, 6, 6, 5, 7, 7, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 8, 7, 6, 6, 6, 6, 6, 6, 6, 7, 7, 5, 6, 7, 6, 7, 8, 7, 6, 5, 5, 6, 6, 5, 7, 5, 7, 7, 6, 5, 5, 4, 6, 8, 6, 5, 7, 7, 5, 5, 5, 5, 5, 6, 7, 5, 6, 7, 5, 5, 6, 6, 6, 5, 5, 7, 5, 6, 6, 6, 7, 6, 5, 4, 6, 8, 6, 6, 5, 8, 7, 7, 6, 8, 8, 6, 6, 5, 4, 5, 5, 8, 8, 6, 5, 5, 8, 6, 8, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 6, 6, 5, 7, 7, 6, 5, 7, 5, 8, 6, 6, 5, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 6, 6, 6, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 6, 8, 6, 7, 7, 7, 7, 7, 7, 6, 6, 6, 7, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 4, 5, 6, 6, 7, 6, 5, 6, 8, 8, 6, 5, 6, 6, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 5, 4, 5, 7, 5, 6, 6, 5, 5, 5, 6, 5, 5, 8, 5, 5, 6, 5, 4, 6, 8, 8, 7, 6, 5, 5, 7, 5, 5, 5, 5, 6, 5, 6, 7, 6, 6, 7, 3, 6, 7, 6, 6, 6, 7, 6, 6, 7, 5, 7, 7, 7, 6, 6, 7, 5, 6, 6, 6, 5, 4, 6, 7, 5, 6, 6, 6, 7, 7, 7, 5, 6, 5, 6, 5, 6, 5, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 5, 7, 7, 6, 6, 5, 7, 7, 6, 6, 6, 7, 6, 6, 6, 6, 8, 8, 8, 6, 6, 5, 6, 4, 6, 6, 5, 6, 7, 6, 4, 7, 8, 5, 7, 6, 6, 5, 5, 6, 7, 6, 7, 7, 7, 6, 7, 7, 5, 7, 7, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 4, 7, 5, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 6, 7, 5, 7, 6, 7, 6, 7, 7, 5, 6, 6, 7, 7, 6, 6, 8, 8, 5, 6, 6, 6, 6, 6, 6, 5, 7, 8, 6, 3, 6, 6, 6, 5, 5, 7, 7, 7, 5, 4, 8, 7, 5, 6, 5, 6, 7, 6, 6, 7, 7, 7, 6, 5, 5, 8, 5, 7, 6, 5, 5, 5, 6, 7, 5, 8, 6, 7, 7, 7, 7, 3, 6, 7, 7, 7, 7, 7, 6, 7, 6, 6, 7, 5, 5, 6, 7, 6, 6, 7, 5, 7, 5, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 7, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 5, 6, 6, 6, 8, 5, 7, 7, 7, 6, 6, 6, 8, 5, 6, 7, 6, 8, 6, 6, 5, 5, 6, 6, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 3, 7, 6, 6, 6, 7, 7, 6, 4, 6, 7, 5, 8, 8, 5, 6, 6, 6, 6, 6, 5, 6, 6, 5, 7, 6, 6, 6, 5, 5, 5, 5, 5, 7, 6, 5, 8, 6, 6, 7, 8, 7, 7, 5, 6, 5, 6, 5, 7, 7, 6, 6, 8, 6, 7, 5, 6, 6, 5, 8, 6, 8, 6, 6, 8, 6, 6, 8, 7, 6, 7, 8, 5, 8, 7, 8, 7, 6, 6, 6, 8, 7, 6, 7, 7, 6, 7, 7, 6, 6, 7, 7, 6, 5, 7, 7, 7, 6, 7, 5, 6, 6, 7, 6, 6, 6, 7, 7, 7, 5, 7, 5, 7, 5, 5, 6, 6, 6, 6, 4, 7, 5, 5, 6, 6, 5, 5, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 4, 6, 5, 6, 5, 6, 6, 6, 6, 7, 6, 6, 4, 6, 6, 6, 7, 5, 7, 4, 7, 5, 7, 6, 6, 7, 7, 7, 6, 6, 6, 7, 5, 7, 7, 7, 7, 7, 6, 7, 6, 6, 7, 6, 7, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 5, 7, 6, 7, 7, 6, 6, 7, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 7, 7, 7, 6, 6, 6, 6, 6, 7, 6, 7, 7, 5, 6, 4, 6, 6, 6, 6, 7, 7, 8, 7, 8, 8, 6, 4, 6, 8, 8, 7, 8, 5, 7, 6, 7, 8, 7, 5, 6, 7, 6, 5, 7, 6, 8, 7, 6, 7, 6, 5, 5, 6, 8, 7, 6, 7, 7, 5, 6, 7, 6, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 4, 6, 5, 6, 5, 5, 7, 5, 5, 7, 6, 6, 7, 7, 7, 5, 6, 6, 5, 6, 5, 6, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 5, 6, 5, 6, 7, 5, 5, 5, 8, 6, 5, 5, 5, 6, 6, 7, 5, 5, 8, 5, 5, 5, 6, 5, 4, 6, 6, 5, 5, 6, 5, 6, 7, 7, 5, 6, 6, 5, 6, 7, 5, 5, 5, 6, 5, 5, 6, 6, 5, 6, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 5, 6, 6, 3, 5, 5, 5, 5, 7, 5, 6, 6, 6, 5, 6, 6, 5, 7, 6, 6, 5, 6, 7, 7, 5, 5, 6, 5, 5, 6, 6, 5, 5, 6, 6, 6, 7, 6, 5, 6, 5, 6, 5, 6, 7, 6, 7, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 6, 4, 5, 5, 7, 5, 5, 5, 4, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 6, 6, 6, 7, 5, 5, 4, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 7, 6, 7, 7, 6, 5, 7, 6, 6, 5, 7, 5, 5, 5, 6, 5, 5, 5, 6, 6, 8, 4, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 6, 6, 7, 5, 5, 5, 5, 6, 7, 5, 6, 5, 5, 6, 6, 6, 5, 7, 7, 5, 4, 6, 4, 6, 6, 7, 6, 6, 4, 6, 7, 7, 6, 7, 6, 5, 7, 7, 6, 7, 6, 6, 6, 6, 6, 6, 5, 7, 7, 7, 5, 7, 7, 6, 6, 6, 5, 6, 6, 7, 6, 6, 5, 6, 6, 6, 7, 6, 6, 6, 5, 5, 6, 6, 5, 4, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 5, 6, 5, 6, 5, 5, 5, 4, 5, 5, 7, 7, 7, 7, 7, 6, 6, 6, 7, 6, 5, 7, 7, 6, 5, 6, 6, 6, 5, 5, 6, 5, 5, 8, 6, 5, 6, 6, 5, 6, 7, 5, 4, 6, 5, 6, 6, 6, 6, 6, 6, 5, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 5, 7, 7, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 8, 7, 5, 6, 6, 6, 7, 5, 5, 5, 5, 7, 6, 5, 5, 6, 6, 5, 6, 5, 6, 7, 6, 6, 6, 6, 6, 6, 7, 7, 6, 7, 5, 6, 6, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 8, 6, 7, 7, 5, 6, 5, 6, 7, 6, 6, 7, 5, 6, 6, 6, 7, 7, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 8, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 6, 7, 6, 6, 6, 6, 4, 4, 5, 5, 5, 4, 6, 5, 6, 6, 4, 4, 7, 5, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 7, 6, 6, 7, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 4, 5, 5, 5, 5, 6, 6, 6, 7, 6, 6, 6, 6, 7, 7, 6, 5, 6, 5, 6, 6, 6, 6, 7, 5, 4, 6, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 7, 6, 6, 6, 5, 6, 6, 7, 7, 5, 7, 7, 7, 5, 6, 7, 6, 6, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 7, 6, 5, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 5, 6, 5, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 5, 7, 6, 5, 7, 5, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 6, 6, 5, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 6, 6, 5, 5, 5, 7, 5, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 7, 5, 5, 6, 5, 4, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 5, 5, 6, 6, 7, 6, 6, 7, 7, 7, 5, 5, 5, 6, 6, 6, 7, 7, 6, 7, 7, 5, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 5, 6, 7, 4, 6, 5, 5, 5, 5, 7, 5, 7, 7, 5, 6, 7, 7, 6, 6, 5, 6, 6, 6, 7, 7, 7, 6, 6, 6, 6, 5, 6, 5, 6, 6, 6, 7, 6, 6, 7, 7, 7, 5, 5, 5, 7, 5, 7, 7, 7, 7, 7, 6, 6, 6, 5, 6, 7, 7, 6, 5, 7, 7, 5, 6, 5, 5, 7, 7, 6, 6, 7, 6, 5, 4, 6, 6, 6, 6, 5, 4, 6, 6, 6, 6, 7, 5, 6, 7, 7, 6, 7, 6, 5, 5, 6, 6, 7, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 6, 6, 5, 5, 3, 6, 6, 5, 6, 5, 6, 7, 6, 6, 6, 7, 7, 6, 6, 6, 6, 7, 7, 6, 8, 8, 7, 6, 6, 6, 6, 5, 7, 4, 6, 6, 6, 6, 4, 5, 5, 6, 6, 5, 7, 8, 8, 5, 6, 6, 6, 6, 6, 5, 7, 7, 6, 5, 6, 7, 7, 8, 7, 4, 6, 6, 6, 5, 6, 5, 6, 7, 5, 6, 7, 6, 6, 6, 6, 5, 6, 6, 7, 5, 6, 6, 6, 5, 7, 6, 6, 5, 6, 7, 6, 5, 6, 6, 4, 7, 6, 6, 5, 6, 5, 6, 7, 6, 5, 6, 5, 5, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 5, 6, 6, 6, 6, 6, 7, 6, 5, 6, 6, 6, 7, 5, 4, 6, 6, 6, 5, 6, 5, 6, 7, 7, 5, 6, 6, 6, 5, 6, 5, 6, 7, 6, 5, 5, 5, 6, 5, 5, 5, 7, 7, 5, 5, 5, 5, 5, 5, 5, 7, 5, 4, 6, 6, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 6, 7, 4, 5, 5, 4, 6, 5, 5, 4, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 7, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 4, 5, 5, 5, 6, 5, 4, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 4, 6, 5, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 6, 6, 6, 4, 5, 5, 5, 5, 5, 5, 5, 6, 5, 4, 6, 5, 5, 5, 5, 4, 6, 5, 4, 6, 6, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 7, 4, 7, 5, 5, 5, 6, 7, 7, 5, 5, 7, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 6, 4, 6, 6, 5, 6, 5, 7, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 7, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 7, 5, 4, 5, 5, 5, 7, 4, 8, 6, 6, 6, 6, 5, 5, 5, 6, 6, 6, 8, 7, 6, 7, 5, 7, 5, 5, 6, 6, 7, 5, 7, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 5, 5, 6, 5, 6, 7, 6, 7, 5, 5, 6, 6, 6, 7, 5, 6, 5, 6, 6, 6, 5, 7, 7, 6, 5, 6, 7, 6, 6, 6, 6, 6, 5, 7, 6, 6, 6, 6, 6, 5, 5, 6, 6, 5, 7, 7, 6, 5, 6, 5, 5, 7, 6, 7, 5, 5, 7, 5, 6, 6, 5, 6, 7, 6, 7, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 8, 6, 5, 5, 5, 7, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 7, 6, 4, 6, 5, 5, 7, 5, 5, 6, 5, 6, 5, 7, 7, 5, 7, 5, 7, 6, 6, 5, 6, 7, 5, 6, 5, 6, 5, 6, 6, 6, 5, 8, 6, 7, 7, 7, 6, 5, 5, 6, 6, 6, 6, 6, 7, 5, 8, 5, 5, 7, 3, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 6, 5, 6, 5, 5, 6, 5, 6, 5, 8, 5, 5, 6, 5, 5, 6, 7, 6, 6, 7, 7, 6, 6, 8, 6, 5, 8, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 7, 5, 6, 6, 7, 7, 5, 6, 3, 6, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 5, 6, 6, 6, 5, 6, 7, 5, 5, 6, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 5, 6, 6, 5, 5, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 4, 6, 6, 4, 5, 5, 6, 5, 5, 5, 7, 7, 6, 7, 5, 8, 7, 5, 6, 5, 5, 5, 5, 6, 6, 6, 6, 4, 6, 5, 6, 6, 6, 7, 6, 6, 6, 5, 5, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 4, 5, 5, 5, 5, 7, 6, 5, 5, 5, 5, 5, 7, 5, 4, 7, 6, 5, 5, 5, 6, 5, 5, 5, 7, 6, 4, 6, 5, 6, 6, 5, 5, 6, 6, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6, 4, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 6, 6, 5, 6, 6, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 5, 6, 6, 5, 5, 6, 5, 6, 5, 5, 6, 6, 5, 6, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 5, 5, 7, 6, 6, 5, 5, 7, 6, 6, 7, 7, 7, 5, 6, 5, 6, 5, 4, 6, 5, 6, 6, 5, 5, 5, 7, 5, 5, 5, 5, 7, 5, 8, 6, 4, 6, 3, 4, 5, 5, 7, 7, 7, 5, 7, 5, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 6, 7, 6, 7, 7, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 6, 6, 5, 4, 7, 7, 7, 4, 6, 6, 5, 5, 6, 6, 5, 6, 5, 6, 7, 6, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 3, 5, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 7, 6, 4, 5, 7, 5, 5, 6, 5, 5, 6, 6, 4, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 5, 6, 6, 7, 5, 6, 5, 5, 6, 6, 6, 7, 5, 6, 5, 6, 6, 7, 5, 7, 5, 5, 5, 7, 5, 6, 5, 6, 6, 5, 6, 7, 5, 5, 6, 5, 5, 6, 5, 5, 6, 7, 7, 6, 6, 7, 7, 7, 7, 5, 7, 7, 7, 7, 5, 7, 6, 5, 6, 6, 6, 7, 6, 6, 5, 6, 6, 5, 6, 7, 6, 6, 5, 6, 7, 7, 7, 5, 6, 6, 7, 7, 5, 7, 6, 5, 6, 6, 7, 6, 6, 6, 5, 6, 6, 5, 5, 5, 7, 6, 6, 7, 5, 7, 7, 6, 8, 6, 6, 6, 6, 7, 7, 7, 5, 7, 5, 6, 6, 5, 7, 6, 5, 5, 7, 6, 7, 6, 6, 6, 5, 7, 6, 7, 7, 8, 6, 6, 7, 6, 5, 6, 5, 7, 5, 6, 6, 6, 6, 6, 5, 6, 7, 5, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 5, 8, 6, 6, 6, 4, 7, 6, 6, 5, 6, 6, 5, 7, 7, 7, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 6, 6, 7, 6, 6, 7, 6, 5, 6, 6, 5, 7, 7, 6, 5, 7, 6, 7, 5, 5, 5, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 4, 7, 5, 6, 6, 5, 6, 5, 5, 6, 5, 6, 5, 4, 6, 5, 7, 5, 6, 6, 6, 6, 6, 6, 6, 7, 8, 5, 7, 7, 7, 5, 7, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 7, 5, 6, 5, 5, 4, 6, 4, 6, 6, 4, 4, 5, 5, 6, 5, 6, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 5, 4, 5, 4, 6, 6, 6, 6, 6, 8, 6, 6, 5, 5, 6, 6, 4, 6, 6, 7, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 6, 6, 4, 6, 5, 5, 6, 6, 3, 6, 6, 6, 5, 5, 5, 5, 4, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 6, 5, 7, 6, 6, 6, 6, 5, 6, 6, 5, 6, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 6, 4, 6, 5, 5, 6, 6, 4, 5, 6, 5, 5, 3, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 7, 6, 5, 5, 6, 8, 6, 7, 6, 6, 7, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 5, 5, 5, 6, 4, 6, 6, 6, 5, 5, 5, 5, 6, 6, 7, 6, 6, 5, 5, 5, 6, 7, 6, 5, 5, 6, 6, 5, 5, 5, 8, 7, 7, 7, 5, 6, 6, 6, 5, 5, 7, 6, 4, 6, 6, 5, 5, 7, 4, 7, 3, 5, 5, 6, 5, 5, 7, 5, 7, 3, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 6, 6, 5, 5, 5, 7, 6, 5, 6, 6, 6, 5, 5, 5, 6, 6, 3, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 6, 5, 7, 6, 6, 6, 5, 5, 6, 7, 6, 6, 7, 6, 5, 5, 5, 8, 5, 5, 6, 5, 6, 7, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 7, 6, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 5, 6], \"coloraxis\": \"coloraxis\", \"size\": [8.8, 9.5, 10.1, 9.9, 9.9, 10.1, 9.6, 8.8, 9.5, 11.0, 12.0, 9.7, 10.8, 12.4, 9.7, 11.4, 9.6, 12.8, 11.3, 9.5, 12.8, 11.0, 10.5, 9.3, 10.0, 10.4, 10.0, 10.5, 11.6, 12.3, 10.0, 10.2, 10.8, 9.0, 10.2, 12.8, 10.0, 11.2, 8.6, 8.6, 9.4, 9.4, 9.8, 9.5, 9.5, 10.0, 9.8, 9.8, 9.8, 9.8, 11.7, 11.0, 10.9, 10.9, 9.1, 11.0, 9.6, 8.9, 10.2, 9.9, 8.6, 8.9, 10.5, 10.2, 10.3, 9.1, 12.6, 9.8, 10.7, 9.5, 9.0, 9.5, 10.0, 9.1, 10.7, 9.5, 12.7, 12.0, 9.3, 9.0, 10.6, 9.2, 10.0, 9.5, 8.7, 8.7, 8.7, 9.7, 8.7, 8.7, 8.7, 9.0, 12.6, 12.6, 11.5, 9.2, 8.8, 11.4, 10.1, 8.8, 9.1, 9.4, 9.4, 9.0, 9.1, 9.2, 9.4, 9.1, 9.1, 10.3, 8.8, 8.9, 9.2, 9.1, 9.1, 9.7, 11.3, 11.8, 9.2, 9.2, 10.2, 8.8, 9.7, 9.1, 9.8, 11.0, 10.5, 9.7, 10.9, 10.9, 10.6, 9.7, 9.0, 9.2, 8.9, 9.6, 10.7, 8.7, 10.8, 11.8, 10.2, 8.7, 10.8, 9.7, 11.2, 10.9, 10.1, 9.0, 12.0, 9.4, 11.5, 9.9, 9.4, 10.4, 9.7, 8.9, 8.9, 12.4, 12.1, 12.1, 12.4, 9.1, 10.6, 8.9, 9.5, 9.8, 9.6, 12.6, 9.3, 10.0, 12.7, 11.0, 11.4, 11.5, 10.2, 11.4, 12.6, 9.4, 8.7, 9.2, 9.3, 9.2, 8.7, 9.6, 9.3, 9.3, 9.9, 11.0, 12.7, 8.9, 8.9, 8.7, 11.4, 9.6, 9.1, 9.1, 9.1, 8.9, 8.8, 8.9, 9.3, 8.8, 9.6, 12.0, 10.2, 8.8, 9.2, 9.9, 10.2, 9.5, 10.5, 11.2, 9.2, 9.7, 11.1, 9.4, 11.0, 9.4, 9.4, 11.0, 11.0, 9.1, 11.1, 9.1, 10.4, 8.7, 9.7, 9.1, 9.7, 8.7, 8.9, 9.6, 9.5, 9.0, 9.0, 9.0, 9.0, 9.6, 11.1, 9.6, 8.7, 10.4, 11.4, 9.7, 8.7, 11.3, 12.6, 10.9, 10.9, 10.0, 10.0, 9.8, 8.7, 11.7, 9.3, 9.6, 11.0, 11.0, 11.8, 11.4, 10.2, 8.9, 10.2, 9.6, 10.6, 8.9, 9.2, 9.7, 9.7, 9.7, 9.2, 9.7, 9.3, 9.0, 9.5, 9.8, 9.8, 10.6, 10.6, 12.4, 12.6, 12.3, 10.5, 9.3, 8.8, 8.8, 9.7, 9.0, 9.0, 9.0, 9.0, 10.5, 9.1, 9.8, 8.5, 9.4, 9.4, 11.2, 10.0, 10.3, 10.8, 10.5, 10.8, 11.1, 9.9, 9.9, 9.9, 9.9, 10.4, 10.4, 11.5, 12.5, 10.0, 10.0, 10.0, 9.1, 10.6, 10.5, 11.5, 10.1, 10.3, 10.5, 10.6, 10.4, 11.4, 10.5, 10.0, 10.0, 9.6, 10.4, 12.5, 10.6, 11.8, 9.8, 10.8, 11.8, 11.2, 9.3, 10.4, 10.2, 9.0, 10.0, 9.1, 10.0, 10.0, 9.6, 11.2, 8.8, 10.0, 10.0, 11.4, 11.9, 9.6, 11.9, 9.6, 9.0, 9.0, 9.5, 10.4, 10.6, 10.2, 8.9, 9.7, 9.0, 11.4, 12.3, 10.8, 9.4, 10.6, 11.6, 9.4, 10.6, 10.0, 9.2, 12.5, 12.5, 10.4, 10.0, 10.0, 10.4, 10.0, 9.0, 9.2, 9.2, 11.3, 12.5, 10.8, 10.1, 9.7, 9.3, 9.3, 10.6, 10.2, 12.2, 8.8, 10.0, 11.4, 11.4, 9.4, 11.7, 11.4, 8.8, 9.2, 8.7, 12.6, 10.0, 12.8, 9.4, 10.3, 11.4, 9.0, 9.6, 10.5, 10.5, 9.0, 9.6, 9.8, 9.0, 9.8, 10.5, 12.7, 10.4, 10.4, 10.4, 10.5, 10.4, 10.4, 9.4, 9.1, 9.3, 9.4, 9.8, 9.9, 9.2, 12.1, 12.2, 9.8, 12.4, 9.9, 9.2, 11.6, 10.4, 12.9, 9.3, 11.0, 11.5, 12.4, 9.8, 9.8, 10.5, 9.1, 10.1, 10.6, 10.5, 10.5, 9.8, 12.9, 9.5, 9.8, 8.5, 9.5, 9.3, 9.5, 9.4, 8.7, 8.9, 9.4, 9.4, 8.7, 9.6, 9.3, 10.0, 12.5, 9.6, 9.4, 9.5, 12.4, 10.5, 9.2, 10.4, 9.2, 10.6, 9.5, 9.2, 9.6, 9.7, 9.7, 10.7, 10.5, 8.9, 12.1, 12.7, 9.9, 11.4, 10.7, 12.5, 8.6, 12.5, 10.0, 8.6, 9.5, 9.6, 9.9, 9.9, 8.9, 8.9, 8.8, 10.0, 12.0, 10.0, 10.0, 12.1, 11.0, 11.2, 10.3, 10.4, 9.1, 10.4, 10.8, 11.7, 9.8, 9.8, 11.4, 11.2, 11.4, 9.2, 12.5, 12.6, 12.2, 11.2, 9.7, 9.3, 9.0, 9.0, 9.0, 9.1, 9.1, 9.0, 10.4, 9.5, 11.4, 8.7, 9.9, 9.9, 9.0, 10.0, 9.7, 11.8, 10.2, 8.7, 9.6, 11.3, 12.1, 9.6, 12.1, 11.3, 9.4, 10.4, 9.5, 12.3, 9.9, 10.1, 9.2, 10.4, 9.1, 10.0, 11.5, 9.8, 9.8, 9.4, 8.7, 11.6, 8.8, 12.7, 11.7, 10.2, 10.2, 12.7, 11.6, 12.3, 8.7, 9.4, 10.1, 9.7, 10.1, 9.7, 8.9, 10.8, 10.8, 9.5, 9.1, 10.9, 9.4, 10.8, 10.8, 10.5, 9.4, 10.8, 10.5, 11.5, 9.4, 10.8, 10.8, 10.8, 9.8, 9.8, 9.6, 9.6, 9.5, 10.7, 12.4, 11.1, 8.8, 8.7, 8.7, 8.8, 11.7, 10.9, 10.8, 9.6, 9.0, 9.0, 10.4, 11.4, 9.3, 11.0, 9.1, 9.4, 9.4, 10.5, 8.8, 8.8, 10.7, 9.5, 10.9, 10.8, 10.8, 9.2, 10.3, 10.3, 11.0, 9.0, 10.4, 9.5, 9.5, 9.0, 9.5, 9.0, 10.0, 9.1, 9.1, 9.1, 9.1, 9.5, 11.4, 12.2, 11.3, 10.2, 11.3, 10.0, 9.4, 12.2, 9.2, 9.4, 9.6, 9.5, 12.5, 9.6, 10.0, 9.3, 9.3, 11.6, 12.5, 10.6, 9.4, 9.1, 9.0, 11.8, 11.8, 11.8, 10.0, 9.7, 9.5, 9.4, 11.2, 9.0, 10.7, 9.0, 9.1, 10.8, 10.1, 9.9, 9.8, 9.8, 9.5, 9.5, 11.1, 9.5, 9.5, 9.4, 9.7, 13.9, 10.1, 10.5, 12.6, 10.9, 10.0, 11.2, 10.0, 9.2, 9.5, 12.3, 12.3, 10.0, 10.8, 10.5, 9.2, 9.1, 10.5, 10.2, 8.9, 10.4, 11.7, 12.4, 10.9, 10.2, 11.7, 9.4, 10.5, 9.4, 10.4, 9.5, 11.1, 9.1, 9.2, 9.6, 9.1, 9.2, 10.8, 9.6, 12.6, 11.0, 10.2, 9.4, 10.0, 12.2, 10.5, 11.5, 9.8, 11.4, 11.5, 10.2, 9.4, 10.5, 9.1, 12.2, 9.5, 9.3, 9.8, 9.8, 9.8, 9.8, 8.7, 10.2, 9.5, 11.0, 9.2, 10.9, 9.3, 9.3, 9.8, 9.3, 9.3, 9.4, 10.4, 12.1, 11.0, 9.0, 9.5, 8.8, 11.2, 9.3, 9.5, 8.8, 9.0, 9.3, 9.2, 9.2, 10.0, 9.3, 9.2, 10.9, 10.0, 10.9, 9.3, 9.0, 9.2, 9.6, 9.4, 11.1, 8.9, 9.3, 9.3, 9.8, 9.8, 8.9, 9.6, 9.6, 9.0, 9.5, 9.3, 9.2, 9.1, 9.5, 10.5, 9.0, 11.7, 9.1, 9.0, 9.1, 12.4, 9.2, 9.4, 9.6, 11.7, 9.8, 10.2, 12.5, 10.9, 11.0, 10.5, 11.5, 12.8, 12.2, 10.5, 12.8, 11.9, 11.9, 11.9, 12.0, 12.0, 8.8, 8.8, 10.8, 11.0, 11.0, 9.3, 10.8, 8.8, 11.5, 10.8, 9.4, 9.5, 8.6, 9.5, 10.3, 9.4, 9.4, 10.0, 9.4, 10.4, 9.1, 9.9, 12.1, 9.9, 12.5, 9.5, 8.5, 9.0, 10.1, 9.4, 8.6, 10.7, 9.6, 10.1, 10.0, 12.7, 10.2, 8.9, 11.9, 10.0, 9.9, 11.5, 11.5, 9.8, 12.2, 11.4, 11.0, 11.4, 11.0, 9.9, 11.0, 9.4, 12.2, 11.0, 10.3, 10.5, 10.5, 10.9, 10.5, 11.0, 9.7, 8.9, 9.6, 8.8, 11.1, 10.3, 12.2, 9.8, 8.8, 9.9, 9.9, 9.9, 9.2, 9.5, 9.2, 10.3, 11.0, 11.9, 10.2, 9.4, 8.9, 8.9, 10.0, 10.7, 9.8, 9.3, 9.5, 10.0, 9.0, 11.9, 8.9, 10.0, 9.6, 8.9, 8.9, 11.4, 9.0, 10.0, 9.6, 9.7, 9.5, 10.0, 12.2, 8.7, 10.2, 9.6, 10.0, 9.5, 11.5, 9.5, 9.8, 10.1, 10.0, 9.8, 9.5, 9.5, 10.2, 10.2, 9.0, 9.0, 12.3, 9.0, 11.6, 9.5, 11.5, 9.6, 9.0, 12.0, 11.4, 12.3, 12.6, 9.0, 12.0, 11.7, 9.2, 10.3, 8.6, 10.7, 9.8, 9.8, 10.7, 12.5, 11.9, 10.8, 10.5, 10.3, 10.3, 10.8, 12.0, 10.2, 10.2, 9.9, 10.1, 9.5, 10.5, 10.4, 9.5, 9.2, 10.1, 9.8, 9.4, 9.4, 10.4, 11.3, 10.8, 11.3, 9.3, 10.3, 10.5, 10.3, 11.2, 10.3, 9.5, 8.9, 10.2, 9.2, 10.3, 10.5, 9.5, 11.4, 11.4, 11.1, 10.5, 12.0, 9.7, 10.2, 9.5, 10.4, 9.3, 10.5, 10.0, 10.2, 10.2, 9.1, 10.2, 10.7, 9.7, 9.3, 11.0, 10.8, 10.7, 10.7, 8.8, 10.9, 10.5, 10.0, 10.4, 9.2, 12.6, 9.0, 9.2, 11.3, 10.3, 10.4, 10.0, 10.7, 9.0, 10.7, 8.7, 11.6, 9.4, 9.5, 9.5, 10.9, 9.7, 9.1, 11.1, 12.6, 11.0, 11.3, 9.7, 10.9, 10.9, 9.3, 12.7, 10.1, 10.0, 9.8, 10.1, 9.0, 9.4, 9.4, 9.2, 10.1, 8.6, 11.2, 11.2, 9.2, 10.6, 9.3, 8.9, 10.6, 10.6, 8.8, 11.0, 10.2, 10.1, 10.1, 14.0, 9.4, 11.8, 11.4, 10.7, 8.6, 11.5, 11.2, 12.6, 12.6, 9.3, 12.6, 12.1, 9.9, 10.7, 10.0, 10.4, 10.5, 9.7, 10.5, 9.0, 9.2, 10.1, 11.4, 10.8, 10.9, 9.2, 12.9, 12.0, 9.5, 11.8, 9.1, 9.7, 9.1, 10.0, 10.4, 9.5, 12.3, 11.7, 9.5, 11.5, 10.6, 10.2, 9.5, 10.5, 10.5, 8.9, 10.6, 9.5, 10.8, 9.5, 8.9, 8.9, 9.4, 10.6, 9.0, 10.5, 9.0, 9.0, 9.4, 9.0, 9.6, 9.0, 10.2, 9.4, 10.4, 10.4, 9.5, 10.6, 11.0, 9.6, 9.9, 9.6, 12.8, 11.4, 10.0, 9.1, 9.4, 10.2, 9.2, 9.4, 9.6, 10.1, 11.4, 10.6, 12.8, 8.9, 9.3, 11.1, 9.9, 9.6, 12.8, 10.7, 9.2, 9.1, 9.6, 9.2, 10.7, 9.1, 9.2, 10.7, 10.8, 10.8, 9.0, 10.7, 10.7, 9.4, 8.8, 9.0, 11.5, 12.5, 10.5, 9.7, 11.3, 10.7, 10.8, 10.6, 11.7, 9.2, 11.1, 11.7, 11.0, 12.5, 10.0, 10.6, 12.3, 12.7, 12.3, 10.5, 12.5, 12.4, 8.7, 12.4, 12.6, 11.0, 10.1, 10.5, 12.7, 10.9, 13.5, 9.7, 9.2, 10.6, 13.3, 13.5, 10.1, 9.4, 10.6, 11.3, 10.8, 10.4, 10.5, 9.3, 9.3, 12.2, 9.2, 10.3, 9.4, 10.2, 9.0, 9.3, 9.2, 9.4, 9.4, 9.5, 9.9, 11.1, 12.3, 8.6, 9.4, 9.4, 8.6, 10.9, 9.4, 10.9, 9.4, 9.2, 8.6, 9.4, 10.8, 10.5, 12.5, 12.1, 8.7, 12.7, 12.1, 12.5, 11.4, 12.9, 12.8, 11.2, 9.7, 9.7, 10.3, 11.6, 11.6, 9.7, 10.9, 12.6, 12.4, 11.5, 10.2, 11.4, 9.6, 10.3, 9.3, 10.7, 12.8, 9.5, 10.4, 10.3, 9.9, 10.7, 10.5, 9.6, 9.3, 10.0, 11.2, 10.8, 10.3, 8.8, 12.8, 13.2, 10.1, 11.0, 10.8, 12.8, 9.2, 10.5, 11.7, 9.5, 9.5, 8.8, 9.3, 12.6, 12.4, 10.1, 11.2, 10.0, 10.0, 10.8, 10.0, 10.4, 10.8, 9.8, 12.2, 12.7, 12.2, 11.9, 11.2, 10.4, 12.8, 12.7, 10.1, 10.0, 9.0, 11.4, 8.9, 9.3, 12.0, 10.8, 10.5, 10.6, 11.3, 9.5, 11.4, 10.1, 10.9, 8.9, 8.9, 9.3, 10.4, 12.0, 9.5, 9.5, 12.4, 11.2, 11.4, 11.4, 11.1, 10.4, 12.0, 12.3, 9.1, 10.5, 11.4, 9.5, 13.7, 13.4, 11.3, 10.0, 10.1, 12.2, 13.4, 9.3, 13.7, 12.3, 11.3, 8.9, 8.9, 11.5, 8.9, 9.3, 11.1, 10.9, 11.6, 10.2, 10.5, 11.4, 8.9, 10.6, 11.6, 11.5, 12.3, 10.8, 11.3, 9.3, 10.0, 11.0, 10.2, 10.8, 10.1, 11.6, 9.1, 10.0, 10.8, 11.4, 12.7, 11.3, 10.4, 9.6, 10.1, 9.6, 12.1, 12.2, 11.3, 9.6, 9.2, 10.4, 9.5, 8.9, 8.8, 10.5, 9.4, 12.2, 11.3, 12.2, 12.2, 11.2, 11.2, 11.5, 11.3, 9.3, 11.3, 11.8, 9.2, 9.2, 12.2, 12.2, 12.2, 10.6, 12.4, 10.8, 11.2, 11.0, 12.7, 10.2, 11.5, 12.3, 9.8, 9.3, 11.8, 11.3, 11.4, 10.8, 9.5, 10.2, 10.7, 10.8, 11.5, 10.7, 10.2, 10.1, 10.4, 9.5, 9.1, 10.6, 9.4, 9.8, 9.5, 9.3, 10.3, 11.1, 10.0, 12.3, 12.4, 12.3, 10.4, 12.1, 12.5, 13.0, 11.0, 10.1, 9.2, 12.6, 12.2, 9.8, 11.0, 10.0, 9.8, 10.5, 10.0, 11.2, 11.0, 11.2, 11.0, 10.5, 10.6, 10.6, 12.0, 10.1, 10.1, 9.2, 11.0, 10.0, 8.7, 8.7, 11.1, 11.0, 11.1, 8.7, 8.7, 11.2, 11.1, 10.8, 9.0, 10.3, 9.9, 10.0, 9.8, 10.8, 9.0, 9.1, 10.6, 10.6, 9.9, 10.6, 9.9, 9.9, 12.8, 10.3, 10.6, 8.7, 12.6, 11.0, 11.2, 10.7, 9.6, 10.6, 9.0, 10.5, 12.8, 10.1, 12.2, 12.8, 10.1, 10.1, 9.2, 9.9, 9.7, 9.9, 9.9, 9.7, 10.3, 10.3, 10.5, 10.5, 9.8, 10.6, 10.1, 9.0, 9.5, 11.5, 11.9, 10.1, 9.2, 8.7, 9.8, 9.2, 8.7, 11.2, 12.3, 10.4, 10.7, 10.5, 9.4, 9.2, 11.9, 9.2, 9.9, 11.4, 9.4, 10.7, 12.7, 13.5, 9.5, 12.9, 12.5, 9.5, 8.6, 10.0, 12.5, 10.1, 11.3, 10.6, 10.8, 10.7, 9.0, 9.2, 8.5, 11.3, 11.3, 9.4, 8.7, 9.4, 10.5, 9.7, 10.2, 9.4, 11.5, 9.6, 11.4, 11.5, 12.2, 11.0, 9.2, 10.2, 10.0, 9.7, 9.2, 10.5, 10.0, 10.1, 9.1, 10.2, 9.1, 10.5, 10.1, 12.1, 10.2, 9.4, 12.8, 9.0, 10.9, 8.8, 9.0, 10.2, 9.2, 11.3, 8.8, 9.3, 9.4, 10.3, 10.8, 8.8, 9.0, 11.5, 10.8, 11.8, 10.5, 9.9, 9.8, 11.4, 9.3, 9.3, 10.3, 8.9, 11.4, 11.1, 10.4, 10.1, 9.0, 11.9, 9.0, 9.0, 9.1, 9.0, 10.0, 9.1, 9.4, 11.4, 9.7, 9.0, 11.8, 10.2, 9.2, 11.0, 10.0, 12.2, 11.8, 11.6, 10.2, 10.3, 8.6, 9.6, 9.6, 11.3, 9.9, 9.6, 10.6, 9.8, 10.5, 10.8, 10.0, 10.1, 9.4, 11.5, 10.8, 9.9, 9.0, 9.4, 10.8, 10.9, 12.0, 11.5, 10.5, 9.3, 11.8, 10.0, 9.4, 11.4, 10.4, 9.5, 11.9, 11.1, 9.6, 12.0, 8.7, 9.6, 10.0, 11.4, 9.6, 12.9, 9.7, 9.3, 9.1, 8.6, 9.9, 9.3, 10.9, 10.2, 9.7, 11.4, 9.5, 10.2, 11.1, 9.7, 9.3, 8.8, 10.6, 9.3, 10.2, 10.2, 11.0, 9.6, 9.3, 8.8, 8.8, 8.9, 10.0, 12.2, 10.9, 9.5, 10.9, 10.9, 10.8, 12.0, 9.8, 9.5, 11.0, 11.0, 9.8, 10.5, 11.4, 10.1, 11.6, 11.4, 11.8, 12.1, 12.0, 12.1, 9.1, 9.3, 10.4, 9.1, 9.4, 9.6, 12.0, 11.3, 8.7, 9.9, 9.3, 9.5, 8.7, 9.9, 9.3, 9.4, 9.4, 8.8, 9.4, 8.8, 9.9, 9.4, 12.6, 11.1, 12.8, 12.0, 12.0, 9.2, 12.3, 13.0, 12.0, 10.9, 12.8, 10.0, 9.0, 10.4, 9.0, 10.0, 10.0, 11.3, 11.3, 12.0, 11.3, 12.0, 10.6, 9.3, 9.4, 11.0, 9.3, 9.4, 10.5, 11.0, 9.5, 11.2, 12.3, 9.0, 9.0, 9.0, 9.0, 11.4, 11.0, 12.3, 10.4, 10.3, 10.5, 9.8, 10.0, 9.7, 9.7, 9.8, 10.5, 10.0, 11.5, 9.5, 10.5, 10.2, 9.8, 11.6, 11.8, 10.1, 10.3, 10.4, 8.9, 8.9, 10.8, 9.2, 9.6, 10.4, 8.7, 9.2, 9.2, 9.2, 9.2, 9.2, 10.2, 9.2, 9.0, 9.7, 9.6, 10.0, 9.2, 9.1, 8.7, 8.7, 9.5, 9.5, 8.9, 8.9, 9.9, 12.6, 9.7, 10.4, 9.1, 10.4, 9.5, 8.9, 10.6, 12.0, 12.5, 9.6, 9.2, 9.9, 11.7, 9.6, 12.0, 12.5, 9.2, 9.9, 8.9, 9.0, 10.2, 9.6, 9.4, 10.4, 10.4, 10.0, 10.0, 10.5, 11.4, 10.2, 10.4, 11.0, 10.1, 9.2, 10.3, 10.2, 10.4, 11.1, 9.9, 9.0, 8.6, 9.0, 8.6, 9.5, 9.0, 10.0, 9.0, 9.0, 10.2, 9.6, 9.7, 10.2, 13.0, 10.8, 9.7, 9.0, 9.9, 9.2, 8.7, 10.1, 10.1, 9.5, 9.9, 8.7, 9.0, 8.6, 10.5, 9.5, 10.1, 11.7, 10.7, 11.7, 9.2, 8.8, 8.8, 9.5, 10.2, 9.1, 10.5, 9.0, 8.9, 8.9, 8.9, 8.9, 8.9, 9.1, 10.1, 10.0, 9.5, 12.3, 9.1, 8.9, 9.6, 11.6, 8.8, 8.9, 8.8, 8.9, 8.9, 9.0, 10.0, 10.0, 11.1, 11.6, 10.6, 8.8, 8.9, 10.1, 10.0, 12.2, 11.0, 10.0, 11.1, 10.4, 11.8, 10.8, 12.5, 11.8, 11.6, 10.4, 11.5, 10.1, 9.2, 10.1, 9.2, 8.9, 10.1, 8.9, 9.7, 9.2, 11.0, 10.7, 10.8, 9.8, 11.0, 10.4, 10.2, 10.7, 9.0, 10.6, 9.5, 9.0, 9.2, 11.0, 9.9, 10.6, 9.3, 9.6, 9.5, 9.7, 9.7, 8.7, 8.7, 12.4, 12.4, 10.6, 8.7, 12.0, 9.0, 8.8, 9.5, 10.8, 11.4, 10.3, 9.5, 9.9, 10.2, 10.2, 11.0, 12.1, 9.1, 9.5, 9.5, 9.8, 9.5, 10.3, 9.6, 10.2, 10.5, 10.4, 9.6, 10.7, 10.5, 10.6, 9.6, 9.6, 9.5, 9.4, 9.8, 9.6, 9.2, 9.5, 9.2, 9.4, 9.4, 9.3, 9.1, 9.5, 9.1, 10.6, 9.5, 12.4, 8.7, 8.8, 10.6, 9.1, 9.0, 10.3, 9.1, 9.5, 8.8, 8.8, 8.8, 9.9, 9.5, 8.8, 11.7, 10.8, 12.0, 10.3, 9.0, 12.2, 9.9, 9.0, 12.2, 10.1, 9.3, 9.5, 9.2, 11.7, 11.0, 9.6, 9.6, 11.9, 10.8, 10.1, 10.9, 10.1, 10.4, 9.2, 9.6, 9.6, 9.0, 11.5, 10.2, 9.9, 9.6, 10.6, 9.2, 11.8, 12.2, 9.6, 10.6, 10.3, 10.2, 10.7, 11.7, 12.0, 10.6, 12.2, 11.0, 12.4, 9.4, 12.0, 11.6, 9.4, 9.4, 9.1, 9.1, 9.1, 9.1, 9.1, 9.2, 9.2, 9.1, 9.1, 9.2, 9.0, 9.2, 10.8, 9.5, 11.0, 10.0, 9.5, 10.1, 9.5, 9.5, 9.5, 9.4, 9.4, 12.7, 9.7, 9.7, 9.4, 9.4, 9.5, 11.7, 11.7, 9.7, 9.5, 9.1, 10.3, 9.7, 9.9, 9.9, 10.2, 12.1, 11.3, 11.4, 12.2, 9.9, 10.3, 12.2, 10.4, 11.4, 9.9, 10.0, 11.5, 10.5, 12.5, 10.5, 9.9, 11.4, 9.8, 11.4, 9.2, 8.9, 8.9, 9.5, 11.5, 9.5, 11.5, 9.5, 9.7, 9.7, 9.5, 9.4, 9.0, 10.6, 9.5, 9.1, 9.4, 8.8, 10.4, 8.9, 10.6, 9.0, 10.6, 10.6, 9.0, 8.8, 10.5, 9.5, 9.0, 10.4, 10.0, 10.4, 9.0, 9.3, 9.0, 9.3, 9.0, 11.5, 9.0, 10.4, 9.0, 10.6, 10.4, 8.5, 9.3, 10.5, 9.9, 10.4, 10.1, 10.5, 9.2, 9.4, 10.6, 9.4, 8.7, 10.2, 10.3, 9.5, 9.5, 9.5, 9.5, 9.4, 9.4, 9.5, 12.6, 10.5, 10.8, 9.9, 12.6, 12.2, 10.0, 10.6, 9.5, 12.8, 12.2, 12.6, 9.4, 9.0, 9.1, 9.4, 12.2, 10.0, 9.2, 9.3, 9.8, 9.2, 12.0, 9.3, 12.6, 12.2, 11.0, 12.0, 8.8, 8.9, 12.7, 11.8, 10.2, 9.9, 11.1, 9.4, 9.7, 9.7, 9.7, 9.7, 9.8, 9.3, 10.5, 9.3, 12.6, 8.9, 10.3, 10.6, 9.0, 9.7, 9.5, 10.3, 9.7, 12.3, 10.5, 9.5, 10.0, 8.8, 10.9, 12.2, 9.5, 10.0, 9.6, 8.7, 10.7, 11.1, 12.5, 10.4, 11.5, 9.4, 9.3, 10.1, 9.7, 10.5, 9.7, 9.2, 9.8, 9.0, 9.1, 10.4, 10.7, 10.5, 9.2, 11.5, 10.4, 12.0, 12.2, 12.0, 9.8, 9.3, 9.6, 9.5, 10.2, 10.4, 11.0, 10.4, 8.7, 9.9, 9.9, 11.3, 12.0, 10.7, 10.1, 9.6, 9.6, 8.7, 10.3, 9.1, 11.8, 11.9, 10.3, 10.0, 10.2, 10.0, 12.7, 9.6, 9.5, 12.7, 11.0, 9.1, 10.2, 10.1, 9.2, 9.4, 10.2, 9.2, 10.0, 10.1, 9.0, 9.5, 9.1, 13.3, 9.5, 9.2, 10.1, 9.2, 10.1, 11.2, 9.8, 11.2, 9.8, 9.4, 9.0, 9.4, 8.9, 9.1, 9.8, 9.4, 10.0, 9.4, 9.9, 10.0, 11.5, 9.2, 10.0, 9.2, 10.0, 10.0, 9.8, 10.5, 10.6, 9.4, 9.4, 11.0, 10.8, 9.0, 9.6, 10.6, 10.6, 9.6, 9.2, 9.2, 9.5, 9.5, 10.3, 8.8, 8.7, 8.7, 10.2, 10.1, 9.5, 9.5, 11.6, 10.7, 10.1, 11.1, 9.8, 9.0, 11.1, 9.5, 9.4, 10.2, 9.8, 9.5, 9.5, 9.0, 10.1, 8.8, 11.9, 11.9, 9.3, 10.0, 9.5, 9.3, 9.7, 9.7, 10.2, 10.8, 8.8, 8.8, 11.4, 8.8, 9.8, 9.4, 9.4, 9.4, 9.4, 9.7, 12.3, 9.8, 9.0, 9.2, 9.4, 9.9, 9.8, 12.3, 11.9, 10.2, 9.5, 11.9, 9.2, 9.7, 11.5, 10.4, 11.6, 9.7, 10.4, 11.5, 10.2, 9.8, 9.0, 10.5, 9.4, 9.4, 10.8, 10.7, 10.6, 9.2, 9.5, 9.5, 10.0, 10.6, 10.6, 10.6, 9.2, 11.0, 11.2, 9.6, 9.4, 9.5, 9.3, 9.4, 9.5, 9.4, 11.2, 11.2, 11.2, 8.8, 11.2, 11.2, 9.4, 11.1, 9.6, 11.1, 9.4, 10.6, 8.9, 12.3, 11.4, 9.6, 10.3, 11.4, 12.1, 9.9, 9.7, 10.5, 8.9, 9.4, 9.6, 12.6, 9.2, 10.4, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.2, 9.0, 9.7, 10.1, 11.0, 10.8, 10.8, 13.5, 10.6, 9.8, 11.7, 9.8, 9.0, 11.3, 9.4, 11.7, 11.3, 11.3, 12.0, 10.6, 10.8, 10.8, 12.0, 9.4, 9.4, 11.3, 9.4, 12.0, 10.3, 10.3, 10.3, 11.3, 9.4, 8.7, 9.4, 11.3, 10.3, 12.0, 8.0, 10.4, 10.7, 10.2, 10.9, 10.5, 11.7, 8.6, 9.0, 8.7, 12.8, 9.0, 8.7, 11.8, 11.6, 11.8, 10.6, 9.7, 10.3, 10.2, 10.1, 10.9, 9.3, 10.2, 10.2, 9.5, 9.3, 12.9, 8.7, 9.4, 10.1, 10.0, 11.1, 10.3, 12.2, 9.3, 11.3, 10.8, 11.2, 12.5, 9.3, 12.9, 11.2, 12.6, 9.3, 12.9, 12.9, 9.5, 11.9, 10.3, 10.3, 11.2, 12.0, 9.6, 9.2, 12.9, 9.3, 12.1, 9.6, 11.2, 11.2, 12.9, 9.2, 9.3, 9.2, 9.3, 10.7, 9.8, 10.3, 10.7, 11.3, 8.8, 10.8, 9.8, 9.3, 11.5, 8.8, 8.8, 8.8, 9.4, 9.4, 9.6, 8.8, 9.3, 8.9, 8.9, 10.0, 9.1, 9.3, 9.4, 10.1, 8.9, 10.8, 10.0, 10.9, 12.0, 9.3, 12.3, 10.4, 10.9, 10.5, 9.8, 10.5, 9.9, 11.4, 9.2, 9.7, 10.0, 11.4, 10.3, 9.9, 10.5, 9.8, 9.3, 12.4, 9.3, 9.3, 9.5, 10.5, 10.5, 12.8, 10.8, 10.0, 11.8, 10.0, 11.8, 12.0, 12.6, 11.9, 10.6, 9.2, 10.0, 9.2, 9.3, 10.2, 10.2, 8.7, 10.7, 12.1, 9.5, 11.2, 12.0, 9.5, 12.1, 10.7, 8.8, 10.8, 13.1, 12.5, 11.7, 11.7, 11.6, 11.3, 12.5, 11.4, 12.2, 11.7, 10.4, 10.4, 10.4, 9.1, 12.2, 9.1, 9.4, 9.4, 10.4, 9.2, 9.4, 13.5, 9.4, 10.9, 13.5, 9.4, 11.4, 12.4, 9.2, 9.4, 10.5, 11.5, 10.9, 10.8, 8.9, 8.9, 9.4, 12.2, 12.1, 10.9, 10.1, 12.2, 13.0, 11.0, 10.8, 13.0, 9.3, 11.4, 9.2, 9.9, 10.5, 12.4, 9.5, 10.5, 9.1, 11.5, 11.5, 11.2, 10.8, 9.4, 11.0, 11.3, 11.2, 10.5, 9.1, 10.4, 11.2, 11.1, 11.2, 10.5, 10.0, 10.0, 10.9, 10.9, 11.2, 11.7, 10.0, 9.5, 9.0, 10.0, 11.9, 10.6, 11.0, 11.2, 12.0, 12.6, 11.2, 10.5, 10.2, 11.0, 12.2, 12.3, 10.6, 10.4, 12.0, 12.7, 10.6, 12.3, 12.7, 11.4, 12.0, 12.4, 12.1, 11.4, 10.7, 9.3, 12.7, 11.7, 10.7, 11.8, 9.9, 13.4, 12.8, 12.8, 10.5, 11.5, 10.5, 13.0, 12.4, 10.2, 9.0, 12.0, 11.7, 10.0, 10.3, 9.0, 11.1, 9.0, 10.5, 11.9, 9.4, 11.4, 10.8, 9.8, 9.3, 11.4, 11.3, 11.3, 9.5, 9.4, 11.9, 9.3, 11.4, 11.4, 12.7, 13.5, 11.2, 10.7, 10.8, 10.5, 13.0, 10.8, 9.1, 10.1, 11.9, 12.0, 12.0, 9.1, 11.6, 11.9, 10.2, 10.8, 9.8, 11.4, 9.8, 10.1, 9.8, 9.8, 10.7, 10.6, 9.3, 9.8, 10.7, 14.0, 11.0, 11.0, 9.4, 9.0, 9.0, 10.0, 9.0, 9.0, 12.4, 11.3, 12.0, 11.7, 10.0, 13.2, 11.0, 11.0, 9.2, 13.0, 10.6, 13.0, 9.0, 9.0, 11.5, 11.0, 11.5, 9.9, 10.4, 9.0, 9.9, 11.0, 12.1, 9.7, 9.7, 12.2, 12.4, 10.5, 10.4, 12.0, 12.7, 10.9, 10.9, 10.9, 11.4, 11.0, 12.6, 11.6, 10.5, 10.9, 10.9, 12.5, 12.1, 11.3, 13.3, 10.9, 10.9, 10.5, 11.6, 11.4, 11.0, 12.1, 11.0, 12.6, 13.0, 8.8, 9.5, 11.8, 12.2, 10.7, 11.0, 11.4, 10.7, 12.0, 11.9, 11.4, 11.8, 10.6, 9.7, 11.0, 10.7, 11.0, 10.5, 10.4, 10.5, 12.0, 12.0, 9.2, 10.9, 9.5, 9.4, 11.3, 10.4, 9.4, 11.3, 8.8, 10.8, 9.4, 9.4, 9.2, 10.3, 9.9, 12.4, 11.9, 11.7, 9.4, 9.6, 9.4, 10.4, 9.5, 11.9, 12.5, 13.4, 12.7, 9.1, 10.5, 10.4, 10.4, 12.5, 10.4, 9.0, 9.8, 9.0, 10.7, 12.4, 12.5, 12.5, 12.1, 11.3, 12.0, 10.4, 12.2, 8.6, 9.1, 12.1, 12.0, 10.5, 10.4, 11.9, 13.7, 11.3, 10.5, 13.7, 10.1, 12.3, 12.0, 11.3, 9.5, 11.4, 11.9, 10.0, 10.0, 11.3, 11.7, 11.0, 12.2, 10.7, 10.9, 10.2, 11.9, 11.1, 11.2, 11.4, 10.6, 10.3, 10.4, 11.9, 11.9, 10.4, 9.2, 11.3, 11.3, 11.0, 11.9, 12.9, 10.8, 9.1, 10.4, 12.9, 12.2, 9.2, 10.3, 11.0, 11.0, 11.7, 12.0, 12.7, 8.8, 11.3, 12.8, 11.2, 8.9, 11.2, 11.1, 10.8, 9.3, 8.9, 12.7, 12.0, 11.2, 8.8, 8.8, 8.8, 10.4, 8.8, 10.4, 14.0, 8.8, 13.1, 12.3, 12.6, 12.0, 9.5, 12.0, 12.7, 10.5, 12.9, 9.5, 12.0, 12.7, 11.9, 12.0, 12.5, 12.1, 12.5, 9.9, 10.7, 12.0, 12.2, 12.4, 12.4, 10.3, 12.0, 10.5, 9.5, 10.5, 12.3, 11.9, 9.8, 12.3, 11.4, 11.0, 10.8, 12.8, 11.0, 10.2, 12.5, 11.6, 11.9, 9.8, 11.0, 10.9, 11.0, 12.5, 11.0, 12.0, 12.4, 12.5, 12.8, 11.0, 9.1, 12.4, 12.9, 10.9, 10.8, 10.6, 9.0, 12.0, 11.8, 10.6, 12.3, 11.5, 11.1, 9.0, 9.9, 12.8, 12.9, 12.9, 12.0, 12.0, 11.2, 13.3, 9.9, 9.5, 9.4, 11.0, 9.4, 11.5, 12.5, 11.9, 10.4, 11.2, 12.5, 11.0, 9.8, 12.3, 11.0, 12.6, 11.6, 12.3, 13.4, 9.8, 11.5, 11.6, 11.1, 11.0, 11.3, 9.9, 12.6, 11.8, 11.4, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 13.0, 9.3, 12.6, 9.6, 8.0, 11.8, 10.2, 12.7, 9.4, 10.2, 12.0, 11.3, 11.8, 10.9, 9.8, 12.2, 11.1, 9.4, 11.4, 10.2, 12.8, 10.1, 9.4, 12.2, 10.9, 10.9, 10.9, 9.4, 9.4, 11.4, 12.9, 9.4, 12.0, 10.1, 9.4, 9.4, 9.2, 11.8, 12.3, 11.4, 12.9, 12.3, 13.5, 12.8, 12.8, 12.8, 11.0, 10.6, 12.4, 12.9, 11.1, 12.9, 11.8, 9.1, 12.7, 12.0, 11.2, 12.4, 10.4, 10.4, 12.7, 12.5, 12.0, 11.6, 12.6, 10.2, 10.4, 11.5, 11.0, 10.1, 10.5, 12.1, 9.9, 11.4, 9.5, 9.5, 9.5, 10.9, 9.5, 12.6, 9.5, 11.1, 9.5, 9.5, 10.6, 10.6, 10.8, 10.9, 9.9, 11.3, 12.6, 12.5, 12.4, 11.8, 12.2, 10.7, 11.3, 12.5, 12.4, 11.3, 9.9, 11.3, 12.6, 11.5, 12.3, 12.2, 13.2, 10.2, 11.5, 13.2, 12.2, 11.0, 13.2, 9.5, 10.2, 10.2, 11.4, 12.5, 9.2, 12.1, 10.7, 12.1, 11.2, 10.6, 11.8, 12.5, 9.2, 12.6, 12.8, 12.3, 12.3, 12.4, 12.3, 9.1, 9.1, 10.6, 10.3, 9.5, 11.1, 10.8, 11.2, 10.8, 11.4, 11.2, 10.2, 11.1, 9.5, 10.2, 11.0, 11.5, 9.8, 10.1, 8.8, 11.5, 12.7, 9.8, 12.9, 9.8, 12.7, 8.5, 12.7, 13.1, 9.1, 12.5, 9.1, 9.1, 11.2, 12.5, 9.1, 9.1, 9.1, 11.5, 12.9, 12.5, 12.3, 11.4, 9.4, 9.1, 9.4, 12.0, 11.1, 11.8, 11.4, 9.1, 12.1, 10.4, 9.2, 13.0, 12.1, 11.5, 11.5, 10.0, 11.1, 12.4, 12.2, 10.6, 11.1, 13.9, 9.2, 10.5, 11.3, 12.9, 12.9, 9.6, 12.9, 12.9, 8.8, 13.2, 9.2, 11.3, 10.5, 10.5, 12.6, 9.5, 9.8, 13.4, 11.8, 9.8, 13.1, 12.6, 10.4, 13.4, 13.0, 13.4, 10.2, 11.7, 9.5, 11.7, 11.4, 11.8, 11.2, 13.0, 13.0, 10.9, 11.6, 11.3, 12.0, 10.5, 13.1, 13.0, 10.9, 9.1, 13.4, 11.5, 11.2, 10.9, 13.5, 9.1, 9.9, 10.5, 11.7, 11.0, 13.0, 13.6, 12.3, 13.3, 13.7, 11.1, 13.4, 9.1, 11.3, 9.4, 9.1, 11.6, 11.6, 12.4, 9.8, 11.1, 13.1, 9.7, 9.2, 11.7, 10.6, 9.7, 9.2, 10.9, 10.1, 12.2, 12.7, 13.0, 11.2, 9.4, 11.0, 11.0, 9.2, 9.4, 9.2, 12.3, 11.0, 10.0, 9.0, 9.0, 9.0, 11.1, 9.9, 12.2, 11.1, 9.0, 11.8, 12.9, 9.0, 12.4, 9.0, 12.9, 11.2, 12.6, 11.5, 11.3, 11.2, 11.5, 10.5, 12.6, 11.9, 10.1, 11.0, 10.6, 11.3, 11.2, 11.5, 11.1, 12.8, 12.3, 10.4, 11.5, 11.7, 10.7, 9.5, 9.5, 9.5, 12.0, 10.8, 10.7, 10.7, 10.7, 12.1, 11.9, 10.8, 12.3, 9.4, 9.9, 10.4, 10.4, 12.6, 12.5, 9.4, 9.2, 11.2, 9.2, 9.2, 9.4, 11.2, 10.8, 9.2, 9.2, 12.5, 9.3, 11.4, 10.0, 10.6, 10.7, 10.0, 12.5, 10.6, 12.8, 9.3, 11.4, 9.5, 9.5, 9.5, 10.8, 10.8, 8.8, 10.8, 11.0, 12.4, 11.3, 11.2, 12.5, 10.0, 11.0, 10.5, 10.5, 11.0, 11.4, 11.3, 12.2, 12.6, 11.1, 12.3, 10.4, 8.8, 9.5, 8.8, 10.4, 13.0, 12.2, 10.5, 10.8, 13.2, 13.0, 10.0, 10.4, 12.4, 12.9, 13.2, 10.5, 13.0, 11.2, 12.7, 9.4, 12.9, 13.0, 13.6, 9.1, 10.4, 13.6, 12.2, 8.7, 10.5, 10.2, 12.5, 11.3, 10.2, 12.6, 10.2, 9.8, 10.8, 12.5, 12.5, 11.5, 11.4, 10.5, 12.6, 8.7, 11.0, 11.3, 10.2, 11.6, 9.8, 10.1, 9.2, 9.1, 9.1, 9.1, 9.1, 11.7, 12.6, 9.0, 10.1, 13.6, 9.1, 9.2, 8.8, 10.0, 9.1, 11.2, 9.2, 9.2, 9.5, 11.9, 9.8, 9.8, 10.8, 11.3, 12.1, 11.3, 10.8, 13.5, 10.3, 9.0, 11.6, 10.3, 12.5, 8.6, 13.4, 12.7, 9.2, 10.2, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.9, 9.0, 9.0, 11.0, 9.0, 10.0, 10.7, 10.7, 13.4, 11.0, 10.0, 10.7, 10.7, 11.0, 11.0, 11.1, 10.9, 11.5, 13.4, 9.4, 9.4, 9.4, 10.6, 9.4, 12.0, 10.2, 10.6, 13.5, 9.7, 12.2, 12.3, 12.2, 11.4, 12.7, 9.7, 10.8, 11.0, 9.5, 10.1, 13.2, 8.8, 9.5, 9.5, 9.5, 9.5, 9.5, 10.4, 9.9, 10.0, 10.1, 9.4, 9.3, 10.9, 11.4, 10.3, 11.0, 10.9, 10.8, 10.3, 11.0, 9.3, 10.2, 10.2, 10.8, 10.5, 11.1, 10.9, 11.4, 10.3, 12.9, 9.9, 11.3, 11.5, 11.5, 10.7, 10.4, 12.5, 9.5, 11.3, 13.0, 11.5, 11.5, 11.3, 13.2, 11.5, 9.6, 9.6, 9.7, 9.2, 8.4, 12.4, 12.4, 9.2, 8.4, 11.7, 11.0, 11.9, 13.2, 11.7, 9.1, 12.6, 9.1, 10.5, 10.6, 12.6, 13.7, 12.0, 12.5, 12.1, 11.3, 12.0, 10.3, 12.7, 9.2, 9.2, 9.5, 10.1, 10.1, 13.0, 13.1, 11.0, 9.2, 9.4, 9.5, 10.2, 10.1, 8.6, 9.0, 9.6, 9.9, 10.5, 11.4, 9.4, 11.1, 8.9, 8.9, 10.8, 12.2, 8.9, 12.5, 12.2, 12.5, 8.9, 10.8, 11.4, 10.8, 10.6, 9.2, 12.2, 12.3, 10.4, 10.4, 11.0, 10.6, 9.2, 13.5, 11.4, 11.5, 14.0, 12.5, 12.5, 12.8, 11.2, 11.2, 13.6, 9.2, 12.5, 11.1, 11.2, 14.0, 13.6, 9.4, 14.2, 13.2, 11.2, 10.2, 12.8, 10.1, 10.1, 10.3, 9.9, 11.5, 9.0, 9.0, 12.1, 13.3, 11.5, 11.0, 10.7, 9.4, 10.3, 9.3, 12.0, 11.0, 9.3, 10.1, 11.1, 9.9, 11.0, 11.0, 12.5, 12.7, 9.3, 9.3, 10.1, 8.8, 11.2, 10.8, 8.8, 11.2, 10.3, 12.0, 9.5, 9.5, 9.8, 9.0, 13.0, 11.8, 8.8, 11.2, 9.5, 9.4, 9.5, 10.4, 9.8, 10.4, 10.3, 9.4, 9.5, 11.9, 12.8, 13.0, 10.4, 10.4, 10.7, 10.7, 11.9, 10.4, 12.8, 9.9, 9.9, 9.4, 11.4, 9.9, 9.4, 9.2, 10.5, 11.0, 11.0, 12.1, 11.0, 12.8, 10.5, 10.5, 10.5, 9.5, 9.2, 11.1, 12.3, 11.1, 12.6, 9.5, 9.2, 10.8, 11.3, 12.8, 10.5, 9.8, 8.5, 9.3, 9.2, 11.4, 8.5, 9.3, 8.4, 9.2, 9.2, 10.4, 11.6, 12.4, 10.4, 9.3, 12.2, 11.0, 11.4, 9.5, 9.2, 11.1, 9.2, 11.0, 9.9, 9.9, 9.5, 12.4, 9.4, 9.3, 8.7, 8.7, 8.7, 8.7, 9.0, 10.7, 10.7, 11.3, 8.7, 11.7, 9.3, 8.7, 9.0, 11.7, 10.7, 11.4, 10.7, 11.3, 10.0, 10.0, 11.2, 9.7, 12.5, 12.9, 11.8, 10.6, 11.8, 10.7, 9.9, 12.0, 10.4, 8.5, 9.9, 9.4, 10.4, 11.0, 11.0, 10.4, 9.8, 9.4, 10.6, 10.1, 11.5, 11.4, 9.2, 9.7, 11.3, 9.6, 8.9, 10.0, 9.2, 9.0, 12.8, 9.0, 9.5, 10.0, 11.0, 9.2, 10.6, 10.0, 10.0, 11.7, 12.5, 11.1, 9.7, 12.3, 12.2, 11.3, 11.6, 11.3, 11.1, 11.2, 11.3, 12.0, 8.8, 8.8, 12.0, 12.0, 9.0, 9.3, 8.7, 12.8, 11.5, 10.0, 10.0, 10.3, 10.4, 13.4, 11.2, 9.1, 9.1, 10.8, 12.5, 11.3, 12.8, 9.1, 12.7, 11.0, 10.4, 10.4, 10.7, 10.9, 10.4, 10.4, 9.7, 11.0, 9.6, 13.9, 9.4, 12.5, 9.6, 9.5, 9.6, 9.5, 9.6, 8.7, 8.7, 8.7, 8.7, 8.7, 8.7, 10.4, 10.7, 12.0, 12.1, 13.1, 12.4, 12.6, 8.7, 12.0, 11.6, 9.3, 9.3, 11.1, 10.2, 10.6, 11.3, 9.4, 9.3, 11.1, 9.9, 11.8, 12.6, 9.4, 10.5, 12.3, 11.3, 9.6, 12.0, 11.2, 10.2, 12.4, 10.2, 13.4, 12.6, 9.8, 9.1, 12.4, 12.5, 11.7, 12.9, 10.1, 10.3, 11.7, 10.3, 10.8, 11.2, 11.8, 9.8, 10.0, 8.8, 10.1, 9.5, 9.5, 9.5, 9.2, 12.2, 9.5, 11.3, 12.1, 9.2, 11.2, 12.5, 10.6, 10.4, 10.1, 9.9, 11.0, 10.0, 12.7, 12.1, 10.4, 10.4, 9.2, 9.2, 10.5, 9.2, 11.9, 10.1, 11.1, 10.8, 11.8, 9.2, 9.2, 12.3, 10.1, 11.4, 10.4, 9.8, 9.9, 9.8, 11.2, 10.9, 9.2, 9.2, 12.0, 12.1, 12.4, 11.2, 12.7, 12.2, 12.2, 12.2, 11.2, 12.7, 12.7, 12.1, 9.4, 10.1, 9.4, 8.9, 8.9, 8.9, 8.9, 13.0, 10.3, 10.1, 10.5, 8.9, 10.1, 10.1, 11.0, 11.0, 11.0, 11.0, 10.0, 10.5, 9.7, 10.1, 9.4, 11.2, 9.4, 10.8, 9.4, 11.2, 11.0, 12.4, 9.4, 9.4, 9.5, 10.0, 12.5, 10.9, 10.5, 10.8, 11.0, 11.8, 12.6, 10.2, 12.0, 12.5, 11.5, 11.94, 12.89333333, 9.4, 12.2, 11.94, 12.89333333, 9.5, 10.6, 10.5, 11.46666667, 11.4, 9.5, 9.2, 9.5, 10.98, 9.4, 9.5, 9.2, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 10.4, 8.8, 10.03333333, 11.3, 10.4, 9.2, 11.1, 9.2, 11.3, 9.1, 9.4, 13.2, 12.7, 10.7, 11.43333333, 11.1, 12.7, 10.53333333, 11.6, 9.533333333, 9.8, 10.7, 12.0, 12.8, 9.5, 10.93333333, 9.1, 12.6, 9.5, 10.9, 10.93333333, 9.6, 9.3, 11.36666667, 12.5, 9.5, 11.0, 9.4, 11.33333333, 8.8, 9.4, 11.06666667, 12.2, 11.0, 11.33333333, 9.5, 9.5, 11.0, 11.2, 9.3, 10.8, 9.2, 9.4, 9.2, 10.5, 10.8, 9.4, 9.8, 9.8, 9.8, 9.4, 9.8, 12.1, 12.3, 9.733333333, 9.4, 9.4, 12.8, 11.05, 9.4, 12.8, 9.733333333, 13.1, 11.5, 13.1, 11.5, 9.1, 9.75, 10.5, 8.8, 8.8, 8.8, 8.8, 10.5, 10.5, 8.8, 9.9, 9.9, 9.9, 12.2, 10.8, 8.7, 13.2, 12.7, 9.4, 11.2, 11.33333333, 11.9, 11.35, 10.5, 9.8, 9.1, 12.4, 9.1, 9.8, 11.3, 11.3, 13.1, 12.5, 10.3, 10.7, 10.4, 9.5, 9.8, 12.5, 9.4, 9.0, 9.0, 9.0, 13.0, 9.9, 9.4, 10.6, 13.4, 12.5, 9.3, 9.3, 11.0, 10.3, 11.3, 10.9, 11.3, 12.1, 11.1, 9.8, 10.1, 12.4, 12.7, 9.6, 9.6, 9.1, 12.8, 9.6, 12.4, 9.55, 9.1, 12.5, 9.9, 11.2, 13.0, 13.0, 11.7, 13.1, 12.0, 10.55, 11.45, 10.2, 11.45, 9.3, 10.8, 12.2, 11.0, 10.4, 11.4, 14.05, 10.7, 10.2, 11.2, 12.33333333, 11.5, 9.5, 13.4, 12.5, 12.5, 11.2, 8.8, 11.2, 12.7, 9.8, 9.8, 11.7, 9.8, 9.6, 9.8, 9.7, 10.0, 11.7, 12.3, 9.8, 9.0, 9.1, 9.1, 9.1, 11.4, 10.5, 12.4, 9.1, 9.1, 10.1, 10.9, 11.05, 12.75, 12.7, 11.1, 11.1, 12.75, 13.0, 12.0, 11.5, 10.5, 11.1, 11.1, 11.1, 13.1, 12.75, 12.7, 9.6, 11.7, 9.7, 10.9, 10.7, 13.8, 12.15, 10.8, 10.7, 10.8, 10.8, 12.0, 10.8, 12.2, 9.4, 11.4, 12.5, 13.05, 12.4, 12.9, 12.0, 11.3, 10.0, 11.8, 9.4, 8.8, 11.1, 10.5, 9.3, 11.4, 11.8, 12.4, 11.6, 11.1, 12.4, 11.1, 11.0, 12.2, 11.0, 12.9, 10.9, 13.4, 10.7, 11.0, 11.4, 10.2, 11.0, 9.1, 11.0, 11.5, 12.0, 11.2, 11.2, 12.6, 11.0, 10.8, 10.9, 9.8, 9.8, 9.5, 11.26666667, 10.8, 13.4, 11.3, 8.9, 11.2, 11.5, 13.0, 12.6, 13.1, 11.2, 11.7, 10.9, 10.9, 11.6, 10.4, 10.9, 11.7, 10.8, 11.2, 10.0, 10.56666667, 11.73333333, 10.6, 10.5, 11.75, 11.4, 12.4, 10.1, 12.3, 13.1, 10.65, 11.4, 9.3, 10.2, 10.2, 13.1, 9.6, 12.8, 10.96666667, 10.96666667, 10.96666667, 11.0, 13.4, 11.2, 12.4, 11.2, 12.4, 10.13333333, 10.13333333, 12.4, 9.1, 10.15, 10.15, 11.5, 8.9, 10.46666667, 10.46666667, 11.8, 11.63333333, 10.6, 9.6, 11.8, 8.9, 10.5, 10.2, 13.1, 11.8, 12.2, 11.45, 10.5, 10.2, 9.0, 9.0, 9.0, 9.0, 9.1, 8.8, 9.0, 9.1, 12.9, 13.0, 12.9, 9.2, 9.8, 9.8, 10.1, 10.1, 10.9, 9.6, 10.4, 11.8, 10.8, 10.6, 12.7, 12.2, 10.8, 10.4, 11.1, 11.8, 10.0, 10.8, 10.3, 9.9, 10.0, 12.25, 10.2, 9.4, 9.7, 10.2, 10.4, 12.2, 9.4, 10.6, 10.7, 11.85, 11.7, 11.7, 10.15, 11.63333333, 10.8, 10.8, 12.3, 12.5, 11.65, 9.6, 10.9, 10.8, 11.2, 10.0, 10.5, 9.1, 10.5, 9.3, 9.3, 11.2, 10.6, 12.1, 12.0, 9.7, 12.4, 13.6, 13.6, 11.8, 10.0, 10.0, 9.1, 11.9, 11.75, 11.4, 13.0, 12.4, 9.4, 9.6, 9.6, 9.6, 9.6, 9.1, 12.0, 11.2, 10.1, 10.3, 12.3, 10.55, 10.9, 9.7, 9.8, 8.9, 8.9, 10.2, 11.7, 12.8, 12.8, 10.2, 13.55, 11.6, 8.9, 13.8, 9.4, 9.4, 10.7, 10.7, 12.3, 10.3, 10.4, 11.6, 10.7, 12.8, 11.9, 12.1, 9.2, 9.5, 11.0, 10.9, 10.4, 9.1, 11.4, 11.4, 9.7, 12.4, 13.7, 10.6, 11.2, 13.13333333, 12.4, 9.7, 11.0, 11.3, 12.0, 9.2, 10.7, 10.7, 11.4, 9.2, 12.1, 11.1, 9.7, 10.7, 10.9, 12.0, 10.6, 9.6, 13.1, 11.0, 11.6, 11.95, 11.1, 11.5, 11.3, 11.9, 9.5, 12.2, 12.2, 11.1, 9.6, 11.1, 9.6, 11.4, 11.4, 12.06666667, 9.0, 9.0, 11.4, 9.6, 11.0, 11.0, 11.2, 11.55, 13.3, 9.633333333, 13.6, 11.2, 13.0, 10.8, 9.8, 11.45, 12.05, 9.7, 11.9, 10.0, 9.7, 11.6, 8.8, 9.5, 9.533333333, 9.533333333, 9.4, 10.7, 11.5, 9.6, 9.55, 12.15, 13.0, 9.2, 9.4, 11.8, 10.6, 9.7, 11.2, 9.6, 9.4, 12.8, 11.8, 9.4, 9.8, 9.8, 9.8, 9.4, 9.4, 9.4, 10.0, 9.5, 10.5, 9.2, 10.5, 9.9, 9.1, 9.2, 9.2, 10.5, 9.3, 9.0, 9.2, 9.4, 9.7, 9.5, 9.4, 9.7, 9.3, 9.5, 9.5, 9.4, 9.8, 10.1, 10.6, 9.8, 9.4, 9.2, 9.6, 10.8, 9.7, 9.8, 10.5, 10.5, 9.3, 10.5, 10.3, 9.5, 13.1, 9.2, 9.5, 9.2, 9.2, 9.2, 9.4, 9.4, 9.4, 10.2, 9.5, 9.6, 9.4, 10.0, 9.4, 9.2, 9.3, 9.5, 9.8, 10.9, 10.9, 9.6, 10.7, 10.7, 10.5, 9.5, 9.5, 9.5, 9.2, 9.6, 10.5, 10.5, 10.7, 10.1, 9.1, 9.2, 9.4, 9.1, 9.4, 10.3, 10.1, 9.9, 9.6, 9.5, 9.0, 9.5, 9.9, 9.8, 9.6, 10.5, 12.9, 10.7, 9.2, 9.8, 9.0, 10.2, 10.4, 9.0, 9.2, 9.4, 9.2, 9.3, 9.3, 9.6, 9.3, 9.5, 9.8, 9.8, 9.7, 9.5, 10.5, 10.0, 9.4, 10.9, 9.2, 9.0, 10.9, 9.2, 9.5, 9.5, 9.4, 10.9, 10.9, 10.5, 9.4, 9.4, 13.0, 13.0, 9.8, 9.9, 9.6, 9.5, 9.2, 9.5, 9.5, 9.6, 9.5, 14.0, 9.4, 14.0, 9.4, 10.0, 9.3, 10.2, 10.5, 10.3, 9.4, 10.1, 10.1, 10.5, 10.5, 10.5, 10.5, 9.3, 9.3, 9.6, 9.2, 10.0, 9.4, 9.4, 9.5, 10.2, 9.0, 10.4, 9.5, 9.1, 9.2, 9.2, 11.5, 9.5, 9.5, 9.5, 10.5, 9.6, 9.5, 9.5, 9.3, 9.3, 9.3, 9.3, 9.7, 9.2, 9.7, 9.5, 9.5, 9.4, 9.8, 9.5, 9.7, 9.7, 9.4, 10.2, 10.1, 13.0, 11.4, 10.3, 9.3, 9.5, 9.2, 9.2, 10.8, 10.8, 9.3, 9.4, 10.5, 12.4, 10.0, 10.2, 10.1, 9.8, 10.5, 11.0, 9.1, 9.7, 9.5, 9.4, 9.4, 9.5, 10.0, 10.4, 10.5, 9.5, 9.8, 10.5, 11.0, 12.2, 9.9, 9.6, 11.0, 9.0, 9.0, 9.0, 9.2, 9.0, 9.0, 9.3, 10.9, 9.8, 9.2, 9.2, 9.9, 9.5, 9.3, 9.8, 9.9, 10.0, 9.9, 10.5, 9.5, 9.9, 9.3, 9.2, 9.2, 9.4, 10.5, 9.3, 9.4, 10.0, 9.3, 10.9, 10.2, 9.8, 12.8, 9.4, 10.1, 10.7, 10.1, 10.1, 9.4, 9.4, 10.7, 9.4, 10.1, 12.6, 10.5, 9.3, 9.9, 9.1, 10.5, 9.8, 9.8, 10.3, 10.3, 10.6, 9.2, 10.6, 10.5, 10.3, 10.1, 9.5, 9.5, 9.9, 9.6, 9.7, 9.6, 10.7, 10.1, 10.0, 9.5, 9.2, 9.3, 9.4, 9.5, 9.5, 9.5, 9.3, 9.4, 9.5, 9.4, 11.0, 11.0, 10.1, 10.4, 11.5, 10.4, 11.5, 9.7, 9.3, 9.5, 9.2, 9.2, 11.5, 11.5, 9.7, 9.5, 12.5, 12.5, 9.4, 11.0, 11.7, 12.2, 12.5, 10.3, 11.5, 9.8, 9.2, 11.3, 9.8, 9.8, 10.7, 9.9, 12.3, 12.0, 10.0, 9.4, 9.9, 9.4, 9.3, 13.0, 11.9, 12.8, 11.0, 11.7, 10.4, 9.8, 9.4, 9.9, 10.0, 10.2, 10.0, 11.8, 10.0, 9.0, 9.4, 12.0, 9.9, 8.7, 10.6, 9.2, 10.8, 11.8, 11.0, 12.0, 13.3, 10.8, 9.4, 10.0, 9.4, 9.4, 9.2, 9.7, 9.2, 9.6, 9.2, 10.0, 12.9, 10.0, 9.5, 9.1, 9.9, 13.0, 9.9, 11.0, 11.0, 9.4, 9.9, 10.8, 10.5, 10.5, 9.1, 10.1, 10.8, 10.8, 11.3, 9.6, 9.5, 9.5, 9.3, 11.7, 9.5, 9.3, 11.7, 10.5, 10.4, 9.9, 11.8, 12.3, 10.9, 11.0, 10.9, 12.3, 11.4, 10.6, 9.3, 10.4, 11.0, 9.2, 12.8, 9.5, 9.9, 9.5, 10.2, 11.2, 9.9, 9.3, 9.8, 11.3, 11.2, 11.6, 12.5, 10.1, 10.5, 11.2, 10.2, 10.8, 10.8, 9.1, 10.0, 11.2, 11.1, 13.4, 10.3, 9.6, 11.2, 9.0, 11.3, 9.3, 11.8, 9.0, 9.2, 9.7, 11.5, 14.0, 9.2, 9.8, 10.6, 11.4, 10.4, 10.6, 9.4, 10.2, 9.7, 11.0, 10.2, 10.1, 9.2, 11.7, 9.4, 9.4, 13.4, 10.0, 10.0, 10.0, 10.8, 10.2, 10.6, 13.3, 13.4, 11.6, 12.1, 11.0, 9.0, 11.1, 11.0, 11.6, 9.0, 12.0, 12.0, 10.9, 10.8, 12.5, 10.8, 9.5, 10.2, 11.4, 9.5, 10.2, 9.7, 11.8, 11.8, 9.3, 11.9, 8.4, 11.7, 11.0, 10.0, 9.1, 9.8, 9.4, 9.5, 9.9, 11.0, 11.4, 8.7, 9.4, 10.3, 10.3, 10.3, 12.8, 10.0, 10.3, 9.4, 10.7, 12.0, 11.2, 9.6, 11.0, 9.9, 11.0, 8.4, 9.1, 9.5, 10.7, 10.4, 9.4, 9.5, 10.0, 10.0, 11.5, 11.1, 11.1, 11.7, 11.1, 11.7, 12.7, 11.4, 9.2, 9.2, 10.1, 12.7, 11.4, 9.0, 9.0, 10.7, 11.7, 11.0, 11.7, 10.4, 9.6, 10.0, 10.2, 10.0, 9.5, 9.8, 9.8, 9.6, 9.6, 9.2, 9.9, 10.7, 9.6, 10.6, 9.3, 14.0, 10.5, 9.7, 11.5, 9.7, 9.0, 9.5, 9.3, 9.3, 10.0, 9.8, 9.3, 10.0, 9.0, 9.3, 9.0, 9.1, 9.2, 12.2, 10.5, 10.4, 12.7, 9.2, 9.4, 10.0, 9.8, 10.2, 9.7, 9.7, 9.8, 10.2, 9.3, 9.4, 9.4, 9.5, 12.1, 10.2, 10.2, 9.1, 9.1, 9.3, 9.3, 9.3, 9.5, 10.5, 11.3, 9.5, 9.7, 9.4, 9.4, 10.2, 10.3, 9.4, 9.5, 9.4, 9.5, 9.4, 10.1, 10.1, 11.0, 11.2, 11.3, 9.6, 11.2, 14.9, 12.0, 9.5, 9.4, 9.6, 10.5, 9.6, 11.0, 9.6, 9.0, 9.6, 10.2, 10.2, 9.7, 9.5, 9.2, 11.0, 9.2, 10.0, 9.5, 9.5, 9.5, 9.3, 10.2, 9.3, 9.9, 10.0, 9.6, 9.0, 10.2, 9.8, 11.3, 9.4, 11.3, 9.1, 9.7, 9.4, 9.4, 10.7, 9.8, 9.0, 9.4, 9.4, 12.8, 9.5, 9.5, 9.7, 10.8, 10.1, 9.5, 9.4, 9.6, 9.7, 9.9, 10.0, 10.5, 11.6, 10.0, 10.1, 9.5, 9.4, 9.4, 9.8, 9.2, 9.4, 10.0, 9.6, 9.5, 9.6, 9.2, 10.0, 9.5, 11.2, 10.4, 11.1, 9.5, 9.5, 12.7, 9.6, 11.5, 9.6, 9.5, 9.3, 9.5, 9.5, 9.3, 9.2, 9.3, 11.5, 9.5, 9.2, 10.0, 9.5, 9.5, 9.0, 9.4, 9.6, 9.5, 9.5, 9.5, 9.4, 9.5, 9.1, 10.7, 11.2, 9.8, 9.8, 9.2, 9.7, 9.6, 10.0, 9.6, 9.5, 9.5, 9.4, 9.5, 9.7, 9.6, 9.7, 9.4, 9.4, 9.5, 9.5, 10.0, 10.3, 10.3, 10.5, 9.8, 9.4, 9.8, 10.0, 9.8, 9.8, 9.5, 9.5, 10.1, 10.1, 9.3, 9.7, 9.6, 9.7, 10.8, 12.5, 10.2, 9.6, 10.8, 10.7, 10.7, 9.4, 10.0, 12.9, 9.6, 9.9, 12.8, 12.5, 12.8, 9.2, 10.3, 10.5, 10.9, 10.8, 11.4, 11.3, 10.8, 10.5, 11.9, 9.4, 9.6, 9.7, 14.0, 9.8, 9.8, 10.3, 10.7, 11.0, 10.7, 12.7, 11.1, 10.9, 11.1, 9.9, 9.9, 9.4, 9.3, 11.7, 11.7, 11.2, 10.0, 12.1, 10.3, 10.9, 9.4, 10.6, 9.8, 9.8, 9.9, 9.8, 9.8, 9.5, 9.5, 9.7, 10.9, 10.9, 11.7, 10.9, 11.3, 10.6, 11.2, 9.5, 11.5, 10.4, 9.7, 9.5, 9.7, 11.3, 11.2, 11.2, 10.9, 11.8, 10.6, 10.0, 11.1, 11.8, 11.8, 10.9, 11.8, 10.0, 9.5, 9.9, 11.4, 12.0, 9.5, 10.0, 10.5, 10.4, 12.1, 11.2, 9.3, 10.1, 9.7, 9.3, 9.7, 9.8, 10.7, 12.5, 10.7, 12.5, 11.0, 11.8, 10.8, 10.8, 10.8, 10.8, 9.5, 11.0, 11.5, 10.8, 11.5, 13.2, 10.9, 12.2, 12.2, 11.5, 11.9, 11.0, 10.1, 11.0, 11.8, 10.5, 11.0, 11.8, 10.1, 11.2, 11.0, 10.2, 9.2, 11.2, 12.0, 10.5, 9.8, 9.5, 9.8, 10.5, 11.8, 11.8, 10.4, 12.9, 11.4, 12.4, 12.5, 10.0, 9.7, 12.1, 11.1, 12.0, 12.4, 11.9, 11.9, 11.9, 12.4, 11.2, 12.1, 12.2, 10.4, 11.3, 11.1, 11.3, 10.0, 11.1, 9.3, 9.5, 11.2, 11.1, 11.0, 11.9, 9.2, 12.2, 10.2, 10.9, 10.9, 11.6, 10.7, 12.1, 9.4, 9.4, 9.1, 11.3, 10.4, 10.5, 10.0, 12.9, 10.5, 10.4, 11.3, 11.4, 9.4, 9.4, 10.9, 9.4, 9.4, 9.4, 9.4, 9.4, 10.1, 12.8, 12.8, 9.1, 12.9, 11.5, 10.6, 11.7, 12.8, 10.3, 12.8, 11.7, 11.7, 12.0, 10.9, 12.3, 10.4, 10.0, 10.0, 11.2, 11.4, 12.6, 12.7, 12.7, 10.4, 11.9, 11.9, 10.5, 12.3, 10.5, 10.4, 12.6, 11.6, 10.1, 10.5, 11.5, 11.0, 9.6, 10.4, 9.7, 10.6, 12.5, 9.2, 12.6, 11.1, 10.2, 9.8, 11.1, 10.9, 12.2, 11.4, 10.7, 10.4, 10.9, 10.8, 10.4, 9.2, 12.9, 12.7, 9.1, 9.1, 12.1, 9.1, 11.6, 12.1, 9.9, 12.5, 11.4, 11.8, 11.8, 10.2, 12.5, 10.9, 10.9, 10.8, 11.1, 9.2, 9.5, 10.7, 9.2, 10.2, 11.4, 11.0, 11.0, 12.3, 11.8, 12.3, 9.5, 12.0, 9.5, 9.6, 11.6, 11.2, 9.9, 9.9, 11.8, 11.4, 11.5, 12.0, 10.8, 10.5, 10.8, 9.4, 12.5, 9.4, 12.4, 12.0, 11.2, 12.0, 12.4, 12.8, 12.3, 11.7, 9.5, 10.8, 10.0, 12.3, 11.0, 9.5, 13.6, 11.3, 11.3, 11.3, 13.3, 12.9, 13.1, 12.3, 12.3, 11.2, 11.5, 11.3, 13.5, 11.5, 10.0, 10.5, 10.4, 9.5, 13.6, 11.2, 11.8, 11.9, 11.4, 11.4, 9.1, 9.5, 9.5, 11.0, 11.4, 10.0, 10.1, 10.4, 9.8, 11.8, 11.6, 12.0, 12.8, 12.5, 9.8, 11.1, 11.4, 9.8, 11.8, 12.9, 10.6, 10.8, 11.1, 10.2, 11.8, 10.0, 10.0, 9.4, 10.2, 12.4, 12.0, 11.5, 10.5, 10.8, 12.3, 9.5, 9.5, 11.5, 11.2, 12.7, 11.4, 11.0, 11.0, 11.4, 10.5, 9.3, 10.9, 11.9, 12.2, 11.9, 10.9, 9.6, 12.5, 10.8, 12.4, 10.8, 9.5, 9.5, 9.5, 9.8, 10.9, 9.5, 9.8, 11.2, 11.7, 9.4, 11.0, 11.0, 11.0, 10.0, 11.0, 11.2, 10.4, 9.3, 10.4, 10.5, 10.4, 11.3, 9.5, 12.0, 10.6, 10.9, 11.5, 11.5, 9.6, 12.0, 10.3, 9.4, 9.2, 9.6, 13.6, 9.5, 11.8, 10.8, 9.5, 9.3, 12.8, 11.5, 9.4, 12.8, 9.6, 11.8, 9.3, 9.8, 12.2, 9.5, 10.3, 10.5, 10.0, 10.5, 11.1, 10.9, 10.9, 9.8, 9.8, 9.5, 10.9, 11.0, 9.2, 11.0, 11.3, 11.3, 9.3, 11.2, 9.8, 9.6, 11.8, 10.3, 10.3, 11.4, 9.5, 14.0, 14.0, 11.7, 11.2, 9.3, 11.2, 9.5, 12.0, 9.7, 9.5, 11.5, 10.4, 10.4, 10.9, 10.2, 10.9, 10.5, 12.4, 13.0, 10.2, 10.2, 11.0, 10.9, 12.4, 9.7, 10.9, 9.5, 9.5, 12.1, 12.2, 10.9, 12.5, 11.7, 11.2, 11.2, 9.2, 9.8, 10.1, 11.1, 10.1, 9.2, 9.8, 12.8, 10.5, 10.1, 10.1, 9.8, 12.5, 11.9, 9.8, 9.1, 10.1, 12.5, 11.4, 11.0, 10.6, 10.6, 10.6, 10.6, 9.3, 9.8, 9.8, 9.2, 9.7, 9.6, 10.0, 12.6, 9.5, 9.5, 9.5, 10.5, 10.5, 10.5, 10.4, 10.5, 11.0, 10.2, 11.4, 9.5, 9.5, 10.8, 10.0, 11.8, 10.3, 10.3, 10.0, 10.1, 10.1, 11.1, 9.5, 10.03333333, 10.9, 10.1, 10.03333333, 9.8, 11.8, 9.5, 9.8, 10.5, 9.8, 10.4, 9.2, 11.6, 9.2, 9.3, 9.8, 9.9, 10.0, 12.2, 9.9, 10.8, 10.8, 9.6, 9.9, 9.9, 9.5, 9.2, 9.6, 9.6, 10.3, 9.7, 12.5, 11.0, 9.8, 10.2, 9.2, 9.55, 9.55, 9.9, 10.2, 11.1, 9.9, 9.9, 11.9, 10.0, 10.7, 11.3, 10.9, 10.7, 12.4, 10.7, 11.9, 10.6, 10.9, 10.1, 9.6, 9.4, 9.6, 12.1, 9.8, 9.9, 9.8, 9.4, 11.4, 11.0, 9.6, 9.6, 12.1, 11.2, 11.0, 11.3, 10.4, 9.9, 11.7, 10.1, 9.0, 9.0, 8.5, 11.1, 10.3, 11.06666667, 11.3, 9.566666667, 9.8, 11.7, 11.1, 9.6, 9.8, 9.7, 9.7, 11.3, 11.3, 11.0, 11.6, 9.0, 10.9, 10.9, 10.55, 9.0, 10.5, 11.9, 10.4, 10.0, 10.4, 10.8, 9.7, 9.7, 10.0, 11.0, 10.0, 9.7, 9.7, 12.6, 11.1, 11.0, 8.8, 13.56666667, 8.8, 13.6, 10.2, 10.6, 10.1, 10.6, 10.3, 10.7, 10.9, 9.7, 10.3, 10.6, 11.4, 10.8, 12.4, 11.4, 11.95, 9.7, 10.0, 10.6, 9.7, 11.5, 10.8, 11.5, 9.6, 9.4, 9.8, 11.0, 11.4, 9.95, 10.8, 11.4, 10.6, 11.1, 9.7, 9.8, 10.4, 10.5, 9.233333333, 9.25, 10.6, 10.3, 10.5, 10.2, 10.3, 9.05, 10.6, 10.4, 10.0, 9.7, 9.6, 10.8, 10.1, 10.2, 11.3, 10.2, 9.9, 9.0, 11.7, 9.7, 10.3, 10.2, 12.0, 9.9, 11.6, 10.9, 10.75, 10.4, 11.2, 10.1, 10.2, 12.1, 10.4, 11.4, 9.5, 9.4, 11.3, 9.4, 11.0, 10.55, 9.9, 11.0, 9.5, 9.9, 9.9, 9.9, 10.1, 10.1, 10.1, 10.9, 11.2, 10.1, 9.2, 11.5, 12.4, 11.1, 9.5, 12.5, 10.5, 11.8, 10.8, 11.9, 11.3, 11.3, 11.9, 11.3, 11.9, 9.8, 11.6, 11.5, 11.4, 10.9, 12.8, 9.2, 11.6, 11.6, 11.0, 9.5, 10.5, 11.2, 11.0, 10.2, 11.0], \"sizemode\": \"area\", \"sizeref\": 0.03725, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"\", \"showlegend\": false, \"type\": \"scattergl\", \"x\": [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 7, 5, 7, 6, 8, 6, 5, 8, 7, 8, 5, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 6, 7, 4, 5, 6, 5, 6, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 7, 5, 8, 5, 6, 5, 5, 6, 8, 5, 7, 7, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 6, 5, 7, 7, 7, 6, 6, 7, 4, 6, 5, 5, 5, 5, 5, 6, 5, 6, 6, 5, 6, 5, 5, 5, 5, 4, 6, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 7, 7, 6, 5, 7, 5, 5, 5, 5, 6, 5, 7, 6, 5, 5, 6, 6, 6, 6, 6, 4, 7, 6, 7, 6, 6, 5, 6, 6, 6, 7, 8, 8, 7, 5, 5, 6, 5, 5, 6, 7, 5, 5, 6, 6, 4, 7, 5, 6, 4, 5, 4, 6, 6, 5, 5, 6, 5, 5, 6, 5, 8, 4, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 4, 5, 5, 4, 5, 6, 5, 7, 5, 6, 7, 5, 5, 5, 5, 5, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 4, 6, 6, 6, 6, 6, 6, 6, 7, 6, 5, 5, 7, 6, 5, 6, 7, 7, 7, 5, 4, 3, 5, 3, 6, 8, 7, 7, 6, 4, 6, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 5, 5, 5, 6, 6, 5, 4, 7, 8, 8, 4, 5, 5, 5, 6, 7, 7, 7, 7, 6, 5, 7, 3, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 7, 6, 7, 8, 6, 6, 5, 6, 6, 5, 7, 6, 7, 5, 6, 6, 5, 5, 6, 6, 6, 5, 8, 5, 6, 5, 5, 6, 6, 6, 5, 7, 7, 6, 6, 5, 6, 6, 7, 6, 6, 5, 7, 7, 6, 7, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 7, 6, 6, 6, 5, 6, 6, 5, 6, 7, 7, 7, 7, 6, 7, 7, 6, 6, 6, 7, 7, 7, 5, 6, 7, 7, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 5, 5, 5, 6, 5, 7, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 7, 6, 6, 6, 7, 6, 6, 5, 5, 5, 5, 5, 7, 4, 8, 7, 5, 8, 7, 5, 7, 6, 8, 6, 6, 3, 5, 6, 6, 7, 5, 5, 7, 7, 7, 6, 7, 5, 6, 5, 5, 5, 5, 6, 5, 5, 6, 6, 5, 5, 6, 5, 6, 7, 6, 5, 7, 6, 6, 6, 5, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 4, 6, 5, 4, 6, 6, 6, 5, 6, 6, 5, 7, 6, 7, 6, 6, 6, 6, 7, 6, 5, 6, 6, 5, 5, 5, 6, 6, 5, 6, 4, 6, 6, 6, 6, 5, 6, 6, 6, 5, 5, 6, 5, 6, 4, 5, 6, 6, 6, 6, 6, 6, 7, 5, 7, 7, 7, 7, 7, 7, 5, 6, 5, 6, 7, 5, 6, 7, 5, 6, 6, 5, 6, 6, 5, 7, 5, 7, 7, 6, 6, 7, 7, 7, 5, 5, 6, 6, 7, 6, 6, 7, 7, 6, 5, 6, 5, 5, 5, 7, 5, 6, 8, 7, 6, 6, 5, 5, 6, 6, 5, 5, 5, 6, 8, 6, 5, 5, 5, 5, 7, 6, 6, 6, 5, 5, 6, 5, 5, 8, 4, 6, 6, 6, 5, 5, 6, 5, 6, 6, 7, 5, 5, 5, 7, 4, 6, 5, 5, 5, 4, 6, 5, 7, 7, 7, 7, 6, 7, 6, 6, 5, 5, 4, 5, 7, 4, 5, 6, 5, 6, 6, 6, 5, 6, 6, 8, 6, 5, 6, 6, 7, 7, 7, 5, 5, 6, 5, 5, 5, 7, 4, 6, 7, 4, 6, 5, 5, 6, 5, 6, 5, 5, 5, 5, 7, 4, 6, 6, 5, 5, 6, 6, 5, 5, 6, 6, 5, 6, 7, 6, 5, 7, 7, 5, 5, 6, 8, 7, 5, 7, 5, 5, 5, 6, 6, 7, 6, 5, 6, 6, 5, 7, 6, 3, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 5, 6, 7, 7, 6, 6, 5, 6, 6, 6, 5, 6, 7, 7, 7, 7, 7, 5, 9, 6, 6, 5, 7, 8, 4, 6, 7, 8, 5, 6, 6, 6, 7, 6, 6, 7, 5, 7, 5, 5, 6, 6, 6, 8, 6, 5, 5, 7, 6, 6, 5, 6, 6, 6, 5, 6, 7, 6, 6, 5, 5, 5, 5, 5, 9, 6, 5, 6, 5, 6, 6, 9, 7, 7, 6, 4, 8, 6, 6, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8, 8, 5, 5, 7, 6, 7, 5, 7, 5, 7, 7, 5, 5, 7, 5, 8, 7, 6, 6, 5, 6, 7, 8, 7, 6, 5, 5, 6, 3, 5, 7, 9, 6, 6, 8, 7, 6, 6, 6, 6, 7, 6, 7, 6, 7, 6, 7, 5, 7, 7, 6, 6, 6, 6, 6, 7, 6, 5, 6, 8, 4, 4, 8, 4, 5, 5, 5, 5, 5, 4, 5, 7, 6, 6, 7, 7, 6, 6, 6, 8, 5, 5, 7, 5, 5, 7, 5, 6, 5, 5, 5, 5, 5, 6, 7, 5, 6, 7, 7, 7, 7, 5, 5, 4, 5, 5, 6, 6, 5, 6, 5, 5, 7, 7, 6, 6, 7, 6, 6, 6, 5, 6, 6, 7, 7, 7, 7, 6, 7, 6, 5, 6, 5, 7, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 7, 6, 4, 5, 4, 6, 6, 5, 6, 6, 7, 7, 5, 6, 7, 6, 6, 6, 5, 7, 6, 6, 7, 6, 5, 5, 5, 5, 6, 6, 6, 7, 7, 8, 6, 6, 6, 6, 4, 7, 4, 6, 6, 6, 6, 3, 6, 5, 5, 7, 5, 4, 5, 4, 5, 7, 5, 5, 5, 5, 6, 5, 6, 5, 4, 5, 5, 6, 5, 6, 4, 7, 5, 5, 5, 6, 5, 6, 7, 7, 6, 7, 5, 7, 5, 6, 7, 6, 5, 5, 6, 7, 6, 6, 6, 7, 5, 8, 8, 6, 7, 6, 6, 6, 7, 5, 8, 6, 7, 6, 7, 6, 6, 5, 5, 5, 7, 8, 7, 7, 4, 7, 6, 6, 5, 4, 8, 5, 5, 5, 5, 6, 6, 7, 5, 5, 6, 7, 7, 5, 7, 6, 6, 5, 5, 5, 6, 8, 8, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 4, 6, 4, 4, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 5, 6, 5, 6, 6, 5, 6, 5, 6, 5, 7, 6, 5, 5, 5, 6, 5, 6, 7, 5, 5, 8, 6, 5, 6, 7, 6, 7, 6, 6, 7, 7, 6, 7, 6, 7, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 8, 5, 8, 8, 6, 7, 6, 5, 7, 6, 7, 5, 6, 3, 6, 7, 7, 6, 6, 5, 6, 5, 7, 5, 6, 7, 7, 7, 5, 4, 7, 6, 7, 5, 7, 5, 6, 7, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 8, 7, 5, 6, 7, 5, 5, 5, 6, 6, 7, 5, 6, 6, 6, 7, 5, 8, 7, 6, 7, 7, 7, 6, 6, 6, 6, 4, 4, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 7, 8, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 7, 6, 6, 6, 5, 5, 6, 7, 8, 6, 6, 8, 5, 5, 6, 6, 5, 6, 6, 8, 8, 7, 7, 8, 4, 7, 7, 6, 5, 5, 5, 6, 6, 8, 7, 6, 7, 7, 4, 5, 7, 6, 5, 6, 5, 6, 7, 6, 6, 7, 7, 6, 6, 7, 6, 7, 7, 6, 6, 6, 5, 7, 6, 7, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 6, 7, 6, 8, 8, 5, 4, 8, 6, 7, 6, 6, 6, 8, 6, 6, 5, 6, 3, 5, 7, 4, 6, 5, 4, 6, 6, 6, 5, 7, 5, 4, 5, 7, 6, 5, 5, 5, 7, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 7, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 8, 5, 6, 7, 5, 5, 7, 6, 5, 6, 4, 6, 5, 6, 6, 6, 6, 6, 6, 4, 3, 6, 6, 6, 6, 5, 6, 5, 5, 8, 8, 7, 5, 7, 6, 6, 7, 5, 5, 7, 8, 7, 6, 6, 6, 5, 5, 6, 7, 6, 7, 6, 6, 6, 6, 5, 6, 5, 5, 6, 6, 5, 6, 6, 6, 6, 5, 7, 7, 6, 6, 6, 5, 6, 6, 6, 6, 4, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 6, 6, 4, 4, 6, 5, 7, 6, 5, 6, 5, 5, 6, 5, 5, 6, 6, 5, 4, 6, 6, 4, 5, 4, 5, 6, 7, 5, 6, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 7, 5, 9, 6, 7, 5, 7, 6, 6, 7, 7, 5, 6, 6, 6, 6, 8, 7, 5, 6, 6, 7, 6, 6, 5, 6, 6, 5, 6, 8, 7, 6, 6, 5, 6, 5, 5, 5, 6, 7, 7, 7, 7, 6, 7, 5, 4, 7, 6, 4, 6, 5, 5, 5, 6, 5, 5, 6, 6, 7, 6, 4, 8, 5, 6, 7, 6, 6, 7, 5, 5, 6, 5, 7, 6, 6, 5, 5, 6, 7, 7, 7, 7, 5, 7, 3, 6, 4, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 4, 5, 5, 6, 6, 5, 4, 5, 5, 5, 6, 6, 5, 8, 6, 6, 4, 6, 7, 7, 6, 8, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 4, 6, 6, 6, 6, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 6, 6, 5, 5, 5, 5, 6, 6, 7, 6, 5, 5, 5, 5, 5, 7, 6, 6, 6, 6, 6, 6, 5, 6, 8, 8, 5, 4, 6, 6, 7, 6, 7, 7, 5, 7, 5, 5, 6, 5, 5, 6, 5, 8, 6, 6, 6, 5, 6, 6, 6, 5, 5, 6, 5, 6, 6, 5, 6, 6, 7, 6, 7, 4, 6, 6, 6, 5, 7, 6, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7, 6, 5, 6, 7, 6, 6, 5, 7, 6, 6, 6, 5, 5, 5, 5, 6, 7, 6, 7, 5, 7, 6, 4, 5, 5, 6, 6, 6, 7, 5, 6, 6, 6, 6, 7, 7, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 7, 7, 5, 5, 6, 6, 6, 6, 7, 5, 6, 6, 6, 7, 5, 5, 5, 4, 6, 6, 5, 6, 5, 6, 3, 6, 5, 6, 5, 6, 7, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 7, 5, 5, 4, 7, 6, 5, 5, 5, 6, 6, 5, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 6, 7, 5, 5, 5, 6, 5, 6, 6, 6, 8, 8, 8, 8, 8, 6, 6, 5, 6, 7, 4, 8, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 5, 7, 6, 5, 5, 6, 5, 6, 7, 5, 7, 6, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 5, 5, 7, 3, 5, 5, 5, 5, 6, 5, 7, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 6, 7, 6, 6, 5, 5, 6, 5, 5, 6, 6, 4, 5, 5, 6, 5, 6, 6, 5, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 6, 5, 4, 5, 6, 4, 5, 7, 5, 5, 7, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 5, 7, 6, 6, 6, 5, 5, 6, 6, 5, 6, 6, 4, 5, 4, 6, 6, 4, 6, 7, 6, 6, 5, 5, 5, 7, 7, 7, 7, 7, 5, 5, 7, 7, 5, 7, 5, 6, 6, 6, 5, 5, 6, 7, 5, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 6, 5, 6, 5, 6, 5, 5, 5, 5, 6, 7, 5, 6, 7, 6, 6, 6, 5, 6, 5, 6, 6, 7, 6, 6, 7, 6, 7, 4, 5, 5, 7, 6, 7, 6, 6, 5, 5, 6, 5, 4, 6, 6, 5, 5, 5, 5, 5, 7, 4, 6, 6, 5, 6, 7, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 6, 5, 5, 6, 6, 6, 7, 6, 6, 5, 7, 4, 6, 6, 6, 5, 6, 6, 5, 5, 5, 5, 5, 5, 5, 7, 7, 6, 6, 7, 7, 6, 7, 6, 8, 7, 7, 5, 5, 5, 6, 7, 5, 5, 5, 6, 5, 7, 5, 7, 6, 6, 7, 5, 4, 7, 6, 5, 6, 6, 5, 6, 5, 6, 5, 5, 6, 5, 6, 8, 5, 5, 5, 4, 5, 6, 6, 5, 8, 5, 6, 6, 4, 6, 6, 5, 5, 6, 6, 7, 6, 7, 6, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 7, 5, 4, 3, 6, 6, 6, 6, 5, 4, 4, 6, 8, 6, 8, 5, 4, 4, 4, 8, 8, 6, 7, 6, 5, 5, 5, 6, 6, 6, 4, 4, 6, 6, 5, 5, 6, 6, 5, 4, 6, 6, 4, 4, 4, 5, 6, 5, 5, 5, 7, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 5, 5, 6, 6, 4, 5, 6, 5, 6, 5, 6, 5, 5, 5, 5, 5, 6, 6, 6, 5, 5, 7, 6, 5, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 5, 5, 6, 6, 5, 5, 7, 6, 6, 7, 5, 6, 7, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 4, 4, 5, 5, 5, 5, 6, 5, 5, 4, 4, 6, 6, 6, 7, 6, 5, 6, 6, 6, 5, 7, 7, 6, 6, 7, 5, 5, 7, 8, 5, 5, 8, 7, 6, 6, 5, 6, 4, 4, 5, 7, 6, 6, 6, 6, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 5, 5, 6, 5, 7, 7, 7, 5, 7, 7, 5, 6, 5, 6, 5, 6, 5, 7, 5, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 7, 6, 5, 7, 7, 7, 7, 7, 7, 6, 7, 4, 6, 7, 5, 5, 7, 5, 5, 6, 5, 6, 7, 5, 6, 7, 7, 6, 6, 6, 6, 6, 5, 5, 7, 5, 5, 7, 7, 7, 7, 6, 5, 5, 7, 7, 5, 5, 7, 7, 6, 5, 6, 7, 5, 5, 5, 6, 5, 5, 6, 6, 6, 5, 5, 5, 6, 7, 7, 5, 6, 6, 5, 5, 7, 5, 5, 5, 4, 7, 7, 6, 6, 6, 6, 8, 7, 5, 7, 7, 6, 5, 7, 7, 7, 6, 7, 7, 6, 6, 5, 6, 6, 6, 6, 5, 6, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 5, 5, 5, 6, 6, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 5, 6, 6, 6, 7, 5, 7, 6, 6, 5, 6, 6, 6, 7, 5, 5, 5, 7, 6, 6, 6, 7, 5, 7, 6, 5, 6, 6, 6, 7, 6, 6, 8, 6, 8, 6, 6, 8, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 5, 7, 6, 7, 7, 8, 8, 8, 6, 7, 5, 5, 6, 6, 6, 6, 5, 6, 5, 5, 5, 6, 5, 5, 7, 5, 8, 7, 5, 7, 7, 5, 5, 6, 8, 8, 6, 5, 5, 6, 7, 7, 5, 6, 7, 7, 5, 5, 7, 4, 6, 5, 5, 5, 6, 6, 6, 6, 7, 7, 5, 5, 5, 6, 7, 6, 6, 6, 6, 7, 7, 6, 6, 6, 6, 5, 7, 7, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 8, 7, 6, 6, 6, 6, 6, 6, 6, 7, 7, 5, 6, 7, 6, 7, 8, 7, 6, 5, 5, 6, 6, 5, 7, 5, 7, 7, 6, 5, 5, 4, 6, 8, 6, 5, 7, 7, 5, 5, 5, 5, 5, 6, 7, 5, 6, 7, 5, 5, 6, 6, 6, 5, 5, 7, 5, 6, 6, 6, 7, 6, 5, 4, 6, 8, 6, 6, 5, 8, 7, 7, 6, 8, 8, 6, 6, 5, 4, 5, 5, 8, 8, 6, 5, 5, 8, 6, 8, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 6, 6, 5, 7, 7, 6, 5, 7, 5, 8, 6, 6, 5, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 6, 6, 6, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 6, 8, 6, 7, 7, 7, 7, 7, 7, 6, 6, 6, 7, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 4, 5, 6, 6, 7, 6, 5, 6, 8, 8, 6, 5, 6, 6, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 5, 4, 5, 7, 5, 6, 6, 5, 5, 5, 6, 5, 5, 8, 5, 5, 6, 5, 4, 6, 8, 8, 7, 6, 5, 5, 7, 5, 5, 5, 5, 6, 5, 6, 7, 6, 6, 7, 3, 6, 7, 6, 6, 6, 7, 6, 6, 7, 5, 7, 7, 7, 6, 6, 7, 5, 6, 6, 6, 5, 4, 6, 7, 5, 6, 6, 6, 7, 7, 7, 5, 6, 5, 6, 5, 6, 5, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 5, 7, 7, 6, 6, 5, 7, 7, 6, 6, 6, 7, 6, 6, 6, 6, 8, 8, 8, 6, 6, 5, 6, 4, 6, 6, 5, 6, 7, 6, 4, 7, 8, 5, 7, 6, 6, 5, 5, 6, 7, 6, 7, 7, 7, 6, 7, 7, 5, 7, 7, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 4, 7, 5, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 6, 7, 5, 7, 6, 7, 6, 7, 7, 5, 6, 6, 7, 7, 6, 6, 8, 8, 5, 6, 6, 6, 6, 6, 6, 5, 7, 8, 6, 3, 6, 6, 6, 5, 5, 7, 7, 7, 5, 4, 8, 7, 5, 6, 5, 6, 7, 6, 6, 7, 7, 7, 6, 5, 5, 8, 5, 7, 6, 5, 5, 5, 6, 7, 5, 8, 6, 7, 7, 7, 7, 3, 6, 7, 7, 7, 7, 7, 6, 7, 6, 6, 7, 5, 5, 6, 7, 6, 6, 7, 5, 7, 5, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 7, 6, 6, 7, 6, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 5, 6, 6, 6, 8, 5, 7, 7, 7, 6, 6, 6, 8, 5, 6, 7, 6, 8, 6, 6, 5, 5, 6, 6, 5, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 3, 7, 6, 6, 6, 7, 7, 6, 4, 6, 7, 5, 8, 8, 5, 6, 6, 6, 6, 6, 5, 6, 6, 5, 7, 6, 6, 6, 5, 5, 5, 5, 5, 7, 6, 5, 8, 6, 6, 7, 8, 7, 7, 5, 6, 5, 6, 5, 7, 7, 6, 6, 8, 6, 7, 5, 6, 6, 5, 8, 6, 8, 6, 6, 8, 6, 6, 8, 7, 6, 7, 8, 5, 8, 7, 8, 7, 6, 6, 6, 8, 7, 6, 7, 7, 6, 7, 7, 6, 6, 7, 7, 6, 5, 7, 7, 7, 6, 7, 5, 6, 6, 7, 6, 6, 6, 7, 7, 7, 5, 7, 5, 7, 5, 5, 6, 6, 6, 6, 4, 7, 5, 5, 6, 6, 5, 5, 6, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 4, 6, 5, 6, 5, 6, 6, 6, 6, 7, 6, 6, 4, 6, 6, 6, 7, 5, 7, 4, 7, 5, 7, 6, 6, 7, 7, 7, 6, 6, 6, 7, 5, 7, 7, 7, 7, 7, 6, 7, 6, 6, 7, 6, 7, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 5, 7, 6, 7, 7, 6, 6, 7, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 7, 7, 7, 6, 6, 6, 6, 6, 7, 6, 7, 7, 5, 6, 4, 6, 6, 6, 6, 7, 7, 8, 7, 8, 8, 6, 4, 6, 8, 8, 7, 8, 5, 7, 6, 7, 8, 7, 5, 6, 7, 6, 5, 7, 6, 8, 7, 6, 7, 6, 5, 5, 6, 8, 7, 6, 7, 7, 5, 6, 7, 6, 6, 5, 5, 5, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 4, 6, 5, 6, 5, 5, 7, 5, 5, 7, 6, 6, 7, 7, 7, 5, 6, 6, 5, 6, 5, 6, 4, 5, 6, 7, 7, 7, 7, 7, 7, 7, 5, 6, 5, 6, 7, 5, 5, 5, 8, 6, 5, 5, 5, 6, 6, 7, 5, 5, 8, 5, 5, 5, 6, 5, 4, 6, 6, 5, 5, 6, 5, 6, 7, 7, 5, 6, 6, 5, 6, 7, 5, 5, 5, 6, 5, 5, 6, 6, 5, 6, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 5, 6, 6, 3, 5, 5, 5, 5, 7, 5, 6, 6, 6, 5, 6, 6, 5, 7, 6, 6, 5, 6, 7, 7, 5, 5, 6, 5, 5, 6, 6, 5, 5, 6, 6, 6, 7, 6, 5, 6, 5, 6, 5, 6, 7, 6, 7, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 6, 4, 5, 5, 7, 5, 5, 5, 4, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 6, 6, 6, 7, 5, 5, 4, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 7, 6, 7, 7, 6, 5, 7, 6, 6, 5, 7, 5, 5, 5, 6, 5, 5, 5, 6, 6, 8, 4, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 6, 6, 7, 5, 5, 5, 5, 6, 7, 5, 6, 5, 5, 6, 6, 6, 5, 7, 7, 5, 4, 6, 4, 6, 6, 7, 6, 6, 4, 6, 7, 7, 6, 7, 6, 5, 7, 7, 6, 7, 6, 6, 6, 6, 6, 6, 5, 7, 7, 7, 5, 7, 7, 6, 6, 6, 5, 6, 6, 7, 6, 6, 5, 6, 6, 6, 7, 6, 6, 6, 5, 5, 6, 6, 5, 4, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 5, 6, 5, 6, 5, 5, 5, 4, 5, 5, 7, 7, 7, 7, 7, 6, 6, 6, 7, 6, 5, 7, 7, 6, 5, 6, 6, 6, 5, 5, 6, 5, 5, 8, 6, 5, 6, 6, 5, 6, 7, 5, 4, 6, 5, 6, 6, 6, 6, 6, 6, 5, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 5, 6, 5, 6, 6, 5, 5, 7, 7, 7, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 8, 7, 5, 6, 6, 6, 7, 5, 5, 5, 5, 7, 6, 5, 5, 6, 6, 5, 6, 5, 6, 7, 6, 6, 6, 6, 6, 6, 7, 7, 6, 7, 5, 6, 6, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 5, 5, 7, 7, 8, 6, 7, 7, 5, 6, 5, 6, 7, 6, 6, 7, 5, 6, 6, 6, 7, 7, 5, 5, 6, 6, 5, 6, 5, 6, 6, 6, 8, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 6, 7, 6, 6, 6, 6, 4, 4, 5, 5, 5, 4, 6, 5, 6, 6, 4, 4, 7, 5, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 7, 6, 6, 7, 6, 5, 5, 6, 6, 6, 6, 6, 6, 6, 4, 5, 5, 5, 5, 6, 6, 6, 7, 6, 6, 6, 6, 7, 7, 6, 5, 6, 5, 6, 6, 6, 6, 7, 5, 4, 6, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 7, 6, 6, 6, 5, 6, 6, 7, 7, 5, 7, 7, 7, 5, 6, 7, 6, 6, 5, 5, 5, 5, 5, 5, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 6, 7, 6, 5, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 5, 6, 5, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 5, 7, 6, 5, 7, 5, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 5, 6, 6, 5, 6, 6, 6, 6, 5, 5, 5, 6, 5, 5, 6, 6, 6, 6, 5, 6, 6, 5, 5, 6, 6, 5, 5, 5, 7, 5, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 7, 5, 5, 6, 5, 4, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 5, 6, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 5, 5, 6, 6, 7, 6, 6, 7, 7, 7, 5, 5, 5, 6, 6, 6, 7, 7, 6, 7, 7, 5, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 6, 6, 6, 5, 6, 7, 4, 6, 5, 5, 5, 5, 7, 5, 7, 7, 5, 6, 7, 7, 6, 6, 5, 6, 6, 6, 7, 7, 7, 6, 6, 6, 6, 5, 6, 5, 6, 6, 6, 7, 6, 6, 7, 7, 7, 5, 5, 5, 7, 5, 7, 7, 7, 7, 7, 6, 6, 6, 5, 6, 7, 7, 6, 5, 7, 7, 5, 6, 5, 5, 7, 7, 6, 6, 7, 6, 5, 4, 6, 6, 6, 6, 5, 4, 6, 6, 6, 6, 7, 5, 6, 7, 7, 6, 7, 6, 5, 5, 6, 6, 7, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 7, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 6, 6, 5, 5, 3, 6, 6, 5, 6, 5, 6, 7, 6, 6, 6, 7, 7, 6, 6, 6, 6, 7, 7, 6, 8, 8, 7, 6, 6, 6, 6, 5, 7, 4, 6, 6, 6, 6, 4, 5, 5, 6, 6, 5, 7, 8, 8, 5, 6, 6, 6, 6, 6, 5, 7, 7, 6, 5, 6, 7, 7, 8, 7, 4, 6, 6, 6, 5, 6, 5, 6, 7, 5, 6, 7, 6, 6, 6, 6, 5, 6, 6, 7, 5, 6, 6, 6, 5, 7, 6, 6, 5, 6, 7, 6, 5, 6, 6, 4, 7, 6, 6, 5, 6, 5, 6, 7, 6, 5, 6, 5, 5, 5, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 5, 6, 6, 6, 6, 6, 7, 6, 5, 6, 6, 6, 7, 5, 4, 6, 6, 6, 5, 6, 5, 6, 7, 7, 5, 6, 6, 6, 5, 6, 5, 6, 7, 6, 5, 5, 5, 6, 5, 5, 5, 7, 7, 5, 5, 5, 5, 5, 5, 5, 7, 5, 4, 6, 6, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 5, 6, 6, 7, 4, 5, 5, 4, 6, 5, 5, 4, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 7, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 4, 5, 5, 5, 6, 5, 4, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 4, 6, 5, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 6, 6, 6, 4, 5, 5, 5, 5, 5, 5, 5, 6, 5, 4, 6, 5, 5, 5, 5, 4, 6, 5, 4, 6, 6, 6, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 7, 4, 7, 5, 5, 5, 6, 7, 7, 5, 5, 7, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 6, 4, 6, 6, 5, 6, 5, 7, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 7, 6, 5, 5, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 7, 5, 4, 5, 5, 5, 7, 4, 8, 6, 6, 6, 6, 5, 5, 5, 6, 6, 6, 8, 7, 6, 7, 5, 7, 5, 5, 6, 6, 7, 5, 7, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 6, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 5, 5, 6, 5, 6, 7, 6, 7, 5, 5, 6, 6, 6, 7, 5, 6, 5, 6, 6, 6, 5, 7, 7, 6, 5, 6, 7, 6, 6, 6, 6, 6, 5, 7, 6, 6, 6, 6, 6, 5, 5, 6, 6, 5, 7, 7, 6, 5, 6, 5, 5, 7, 6, 7, 5, 5, 7, 5, 6, 6, 5, 6, 7, 6, 7, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6, 6, 7, 8, 6, 5, 5, 5, 7, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 7, 6, 4, 6, 5, 5, 7, 5, 5, 6, 5, 6, 5, 7, 7, 5, 7, 5, 7, 6, 6, 5, 6, 7, 5, 6, 5, 6, 5, 6, 6, 6, 5, 8, 6, 7, 7, 7, 6, 5, 5, 6, 6, 6, 6, 6, 7, 5, 8, 5, 5, 7, 3, 6, 5, 5, 5, 6, 5, 6, 6, 6, 5, 5, 6, 6, 5, 6, 5, 5, 6, 5, 6, 5, 8, 5, 5, 6, 5, 5, 6, 7, 6, 6, 7, 7, 6, 6, 8, 6, 5, 8, 6, 6, 7, 7, 7, 7, 7, 7, 6, 6, 7, 5, 6, 6, 7, 7, 5, 6, 3, 6, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 5, 6, 6, 6, 5, 6, 7, 5, 5, 6, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 6, 5, 6, 6, 5, 5, 5, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 4, 6, 6, 4, 5, 5, 6, 5, 5, 5, 7, 7, 6, 7, 5, 8, 7, 5, 6, 5, 5, 5, 5, 6, 6, 6, 6, 4, 6, 5, 6, 6, 6, 7, 6, 6, 6, 5, 5, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 6, 4, 5, 5, 5, 5, 7, 6, 5, 5, 5, 5, 5, 7, 5, 4, 7, 6, 5, 5, 5, 6, 5, 5, 5, 7, 6, 4, 6, 5, 6, 6, 5, 5, 6, 6, 5, 6, 5, 5, 5, 5, 6, 5, 6, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6, 4, 4, 5, 5, 5, 6, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 6, 5, 5, 5, 5, 6, 6, 5, 6, 6, 5, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 6, 5, 6, 6, 5, 5, 6, 5, 6, 5, 5, 6, 6, 5, 6, 6, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 6, 5, 6, 5, 5, 7, 6, 6, 5, 5, 7, 6, 6, 7, 7, 7, 5, 6, 5, 6, 5, 4, 6, 5, 6, 6, 5, 5, 5, 7, 5, 5, 5, 5, 7, 5, 8, 6, 4, 6, 3, 4, 5, 5, 7, 7, 7, 5, 7, 5, 6, 5, 6, 5, 5, 6, 5, 5, 5, 5, 5, 6, 6, 7, 6, 7, 7, 6, 5, 6, 5, 5, 5, 5, 6, 6, 6, 6, 6, 5, 4, 7, 7, 7, 4, 6, 6, 5, 5, 6, 6, 5, 6, 5, 6, 7, 6, 5, 5, 5, 6, 5, 6, 6, 7, 6, 7, 3, 5, 7, 7, 7, 7, 5, 5, 6, 6, 6, 6, 6, 6, 7, 6, 6, 5, 6, 6, 6, 5, 6, 6, 6, 5, 7, 6, 4, 5, 7, 5, 5, 6, 5, 5, 6, 6, 4, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 5, 6, 6, 7, 5, 6, 5, 5, 6, 6, 6, 7, 5, 6, 5, 6, 6, 7, 5, 7, 5, 5, 5, 7, 5, 6, 5, 6, 6, 5, 6, 7, 5, 5, 6, 5, 5, 6, 5, 5, 6, 7, 7, 6, 6, 7, 7, 7, 7, 5, 7, 7, 7, 7, 5, 7, 6, 5, 6, 6, 6, 7, 6, 6, 5, 6, 6, 5, 6, 7, 6, 6, 5, 6, 7, 7, 7, 5, 6, 6, 7, 7, 5, 7, 6, 5, 6, 6, 7, 6, 6, 6, 5, 6, 6, 5, 5, 5, 7, 6, 6, 7, 5, 7, 7, 6, 8, 6, 6, 6, 6, 7, 7, 7, 5, 7, 5, 6, 6, 5, 7, 6, 5, 5, 7, 6, 7, 6, 6, 6, 5, 7, 6, 7, 7, 8, 6, 6, 7, 6, 5, 6, 5, 7, 5, 6, 6, 6, 6, 6, 5, 6, 7, 5, 6, 6, 7, 6, 6, 6, 6, 6, 6, 6, 5, 8, 6, 6, 6, 4, 7, 6, 6, 5, 6, 6, 5, 7, 7, 7, 6, 6, 6, 5, 6, 6, 6, 6, 6, 5, 6, 6, 7, 6, 6, 7, 6, 5, 6, 6, 5, 7, 7, 6, 5, 7, 6, 7, 5, 5, 5, 5, 7, 6, 6, 6, 6, 6, 6, 6, 6, 4, 7, 5, 6, 6, 5, 6, 5, 5, 6, 5, 6, 5, 4, 6, 5, 7, 5, 6, 6, 6, 6, 6, 6, 6, 7, 8, 5, 7, 7, 7, 5, 7, 7, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 7, 5, 6, 5, 5, 4, 6, 4, 6, 6, 4, 4, 5, 5, 6, 5, 6, 5, 5, 5, 6, 6, 6, 5, 5, 5, 5, 5, 5, 6, 6, 6, 5, 4, 5, 4, 6, 6, 6, 6, 6, 8, 6, 6, 5, 5, 6, 6, 4, 6, 6, 7, 6, 6, 6, 6, 5, 5, 6, 5, 5, 5, 5, 6, 6, 4, 6, 5, 5, 6, 6, 3, 6, 6, 6, 5, 5, 5, 5, 4, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 5, 6, 5, 7, 6, 6, 6, 6, 5, 6, 6, 5, 6, 5, 5, 6, 5, 5, 5, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 6, 4, 6, 5, 5, 6, 6, 4, 5, 6, 5, 5, 3, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 5, 7, 6, 5, 5, 6, 8, 6, 7, 6, 6, 7, 6, 6, 6, 6, 5, 5, 5, 5, 7, 5, 5, 5, 5, 6, 4, 6, 6, 6, 5, 5, 5, 5, 6, 6, 7, 6, 6, 5, 5, 5, 6, 7, 6, 5, 5, 6, 6, 5, 5, 5, 8, 7, 7, 7, 5, 6, 6, 6, 5, 5, 7, 6, 4, 6, 6, 5, 5, 7, 4, 7, 3, 5, 5, 6, 5, 5, 7, 5, 7, 3, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 6, 6, 5, 5, 5, 7, 6, 5, 6, 6, 6, 5, 5, 5, 6, 6, 3, 6, 6, 6, 5, 6, 5, 6, 6, 6, 6, 5, 6, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 6, 6, 6, 5, 6, 5, 7, 6, 6, 6, 5, 5, 6, 7, 6, 6, 7, 6, 5, 5, 5, 8, 5, 5, 6, 5, 6, 7, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 6, 6, 6, 6, 6, 5, 6, 5, 5, 5, 7, 6, 6, 6, 6, 5, 6, 6, 6, 6, 5, 6, 6, 5, 6], \"xaxis\": \"x\", \"y\": [8.8, 9.5, 10.1, 9.9, 9.9, 10.1, 9.6, 8.8, 9.5, 11.0, 12.0, 9.7, 10.8, 12.4, 9.7, 11.4, 9.6, 12.8, 11.3, 9.5, 12.8, 11.0, 10.5, 9.3, 10.0, 10.4, 10.0, 10.5, 11.6, 12.3, 10.0, 10.2, 10.8, 9.0, 10.2, 12.8, 10.0, 11.2, 8.6, 8.6, 9.4, 9.4, 9.8, 9.5, 9.5, 10.0, 9.8, 9.8, 9.8, 9.8, 11.7, 11.0, 10.9, 10.9, 9.1, 11.0, 9.6, 8.9, 10.2, 9.9, 8.6, 8.9, 10.5, 10.2, 10.3, 9.1, 12.6, 9.8, 10.7, 9.5, 9.0, 9.5, 10.0, 9.1, 10.7, 9.5, 12.7, 12.0, 9.3, 9.0, 10.6, 9.2, 10.0, 9.5, 8.7, 8.7, 8.7, 9.7, 8.7, 8.7, 8.7, 9.0, 12.6, 12.6, 11.5, 9.2, 8.8, 11.4, 10.1, 8.8, 9.1, 9.4, 9.4, 9.0, 9.1, 9.2, 9.4, 9.1, 9.1, 10.3, 8.8, 8.9, 9.2, 9.1, 9.1, 9.7, 11.3, 11.8, 9.2, 9.2, 10.2, 8.8, 9.7, 9.1, 9.8, 11.0, 10.5, 9.7, 10.9, 10.9, 10.6, 9.7, 9.0, 9.2, 8.9, 9.6, 10.7, 8.7, 10.8, 11.8, 10.2, 8.7, 10.8, 9.7, 11.2, 10.9, 10.1, 9.0, 12.0, 9.4, 11.5, 9.9, 9.4, 10.4, 9.7, 8.9, 8.9, 12.4, 12.1, 12.1, 12.4, 9.1, 10.6, 8.9, 9.5, 9.8, 9.6, 12.6, 9.3, 10.0, 12.7, 11.0, 11.4, 11.5, 10.2, 11.4, 12.6, 9.4, 8.7, 9.2, 9.3, 9.2, 8.7, 9.6, 9.3, 9.3, 9.9, 11.0, 12.7, 8.9, 8.9, 8.7, 11.4, 9.6, 9.1, 9.1, 9.1, 8.9, 8.8, 8.9, 9.3, 8.8, 9.6, 12.0, 10.2, 8.8, 9.2, 9.9, 10.2, 9.5, 10.5, 11.2, 9.2, 9.7, 11.1, 9.4, 11.0, 9.4, 9.4, 11.0, 11.0, 9.1, 11.1, 9.1, 10.4, 8.7, 9.7, 9.1, 9.7, 8.7, 8.9, 9.6, 9.5, 9.0, 9.0, 9.0, 9.0, 9.6, 11.1, 9.6, 8.7, 10.4, 11.4, 9.7, 8.7, 11.3, 12.6, 10.9, 10.9, 10.0, 10.0, 9.8, 8.7, 11.7, 9.3, 9.6, 11.0, 11.0, 11.8, 11.4, 10.2, 8.9, 10.2, 9.6, 10.6, 8.9, 9.2, 9.7, 9.7, 9.7, 9.2, 9.7, 9.3, 9.0, 9.5, 9.8, 9.8, 10.6, 10.6, 12.4, 12.6, 12.3, 10.5, 9.3, 8.8, 8.8, 9.7, 9.0, 9.0, 9.0, 9.0, 10.5, 9.1, 9.8, 8.5, 9.4, 9.4, 11.2, 10.0, 10.3, 10.8, 10.5, 10.8, 11.1, 9.9, 9.9, 9.9, 9.9, 10.4, 10.4, 11.5, 12.5, 10.0, 10.0, 10.0, 9.1, 10.6, 10.5, 11.5, 10.1, 10.3, 10.5, 10.6, 10.4, 11.4, 10.5, 10.0, 10.0, 9.6, 10.4, 12.5, 10.6, 11.8, 9.8, 10.8, 11.8, 11.2, 9.3, 10.4, 10.2, 9.0, 10.0, 9.1, 10.0, 10.0, 9.6, 11.2, 8.8, 10.0, 10.0, 11.4, 11.9, 9.6, 11.9, 9.6, 9.0, 9.0, 9.5, 10.4, 10.6, 10.2, 8.9, 9.7, 9.0, 11.4, 12.3, 10.8, 9.4, 10.6, 11.6, 9.4, 10.6, 10.0, 9.2, 12.5, 12.5, 10.4, 10.0, 10.0, 10.4, 10.0, 9.0, 9.2, 9.2, 11.3, 12.5, 10.8, 10.1, 9.7, 9.3, 9.3, 10.6, 10.2, 12.2, 8.8, 10.0, 11.4, 11.4, 9.4, 11.7, 11.4, 8.8, 9.2, 8.7, 12.6, 10.0, 12.8, 9.4, 10.3, 11.4, 9.0, 9.6, 10.5, 10.5, 9.0, 9.6, 9.8, 9.0, 9.8, 10.5, 12.7, 10.4, 10.4, 10.4, 10.5, 10.4, 10.4, 9.4, 9.1, 9.3, 9.4, 9.8, 9.9, 9.2, 12.1, 12.2, 9.8, 12.4, 9.9, 9.2, 11.6, 10.4, 12.9, 9.3, 11.0, 11.5, 12.4, 9.8, 9.8, 10.5, 9.1, 10.1, 10.6, 10.5, 10.5, 9.8, 12.9, 9.5, 9.8, 8.5, 9.5, 9.3, 9.5, 9.4, 8.7, 8.9, 9.4, 9.4, 8.7, 9.6, 9.3, 10.0, 12.5, 9.6, 9.4, 9.5, 12.4, 10.5, 9.2, 10.4, 9.2, 10.6, 9.5, 9.2, 9.6, 9.7, 9.7, 10.7, 10.5, 8.9, 12.1, 12.7, 9.9, 11.4, 10.7, 12.5, 8.6, 12.5, 10.0, 8.6, 9.5, 9.6, 9.9, 9.9, 8.9, 8.9, 8.8, 10.0, 12.0, 10.0, 10.0, 12.1, 11.0, 11.2, 10.3, 10.4, 9.1, 10.4, 10.8, 11.7, 9.8, 9.8, 11.4, 11.2, 11.4, 9.2, 12.5, 12.6, 12.2, 11.2, 9.7, 9.3, 9.0, 9.0, 9.0, 9.1, 9.1, 9.0, 10.4, 9.5, 11.4, 8.7, 9.9, 9.9, 9.0, 10.0, 9.7, 11.8, 10.2, 8.7, 9.6, 11.3, 12.1, 9.6, 12.1, 11.3, 9.4, 10.4, 9.5, 12.3, 9.9, 10.1, 9.2, 10.4, 9.1, 10.0, 11.5, 9.8, 9.8, 9.4, 8.7, 11.6, 8.8, 12.7, 11.7, 10.2, 10.2, 12.7, 11.6, 12.3, 8.7, 9.4, 10.1, 9.7, 10.1, 9.7, 8.9, 10.8, 10.8, 9.5, 9.1, 10.9, 9.4, 10.8, 10.8, 10.5, 9.4, 10.8, 10.5, 11.5, 9.4, 10.8, 10.8, 10.8, 9.8, 9.8, 9.6, 9.6, 9.5, 10.7, 12.4, 11.1, 8.8, 8.7, 8.7, 8.8, 11.7, 10.9, 10.8, 9.6, 9.0, 9.0, 10.4, 11.4, 9.3, 11.0, 9.1, 9.4, 9.4, 10.5, 8.8, 8.8, 10.7, 9.5, 10.9, 10.8, 10.8, 9.2, 10.3, 10.3, 11.0, 9.0, 10.4, 9.5, 9.5, 9.0, 9.5, 9.0, 10.0, 9.1, 9.1, 9.1, 9.1, 9.5, 11.4, 12.2, 11.3, 10.2, 11.3, 10.0, 9.4, 12.2, 9.2, 9.4, 9.6, 9.5, 12.5, 9.6, 10.0, 9.3, 9.3, 11.6, 12.5, 10.6, 9.4, 9.1, 9.0, 11.8, 11.8, 11.8, 10.0, 9.7, 9.5, 9.4, 11.2, 9.0, 10.7, 9.0, 9.1, 10.8, 10.1, 9.9, 9.8, 9.8, 9.5, 9.5, 11.1, 9.5, 9.5, 9.4, 9.7, 13.9, 10.1, 10.5, 12.6, 10.9, 10.0, 11.2, 10.0, 9.2, 9.5, 12.3, 12.3, 10.0, 10.8, 10.5, 9.2, 9.1, 10.5, 10.2, 8.9, 10.4, 11.7, 12.4, 10.9, 10.2, 11.7, 9.4, 10.5, 9.4, 10.4, 9.5, 11.1, 9.1, 9.2, 9.6, 9.1, 9.2, 10.8, 9.6, 12.6, 11.0, 10.2, 9.4, 10.0, 12.2, 10.5, 11.5, 9.8, 11.4, 11.5, 10.2, 9.4, 10.5, 9.1, 12.2, 9.5, 9.3, 9.8, 9.8, 9.8, 9.8, 8.7, 10.2, 9.5, 11.0, 9.2, 10.9, 9.3, 9.3, 9.8, 9.3, 9.3, 9.4, 10.4, 12.1, 11.0, 9.0, 9.5, 8.8, 11.2, 9.3, 9.5, 8.8, 9.0, 9.3, 9.2, 9.2, 10.0, 9.3, 9.2, 10.9, 10.0, 10.9, 9.3, 9.0, 9.2, 9.6, 9.4, 11.1, 8.9, 9.3, 9.3, 9.8, 9.8, 8.9, 9.6, 9.6, 9.0, 9.5, 9.3, 9.2, 9.1, 9.5, 10.5, 9.0, 11.7, 9.1, 9.0, 9.1, 12.4, 9.2, 9.4, 9.6, 11.7, 9.8, 10.2, 12.5, 10.9, 11.0, 10.5, 11.5, 12.8, 12.2, 10.5, 12.8, 11.9, 11.9, 11.9, 12.0, 12.0, 8.8, 8.8, 10.8, 11.0, 11.0, 9.3, 10.8, 8.8, 11.5, 10.8, 9.4, 9.5, 8.6, 9.5, 10.3, 9.4, 9.4, 10.0, 9.4, 10.4, 9.1, 9.9, 12.1, 9.9, 12.5, 9.5, 8.5, 9.0, 10.1, 9.4, 8.6, 10.7, 9.6, 10.1, 10.0, 12.7, 10.2, 8.9, 11.9, 10.0, 9.9, 11.5, 11.5, 9.8, 12.2, 11.4, 11.0, 11.4, 11.0, 9.9, 11.0, 9.4, 12.2, 11.0, 10.3, 10.5, 10.5, 10.9, 10.5, 11.0, 9.7, 8.9, 9.6, 8.8, 11.1, 10.3, 12.2, 9.8, 8.8, 9.9, 9.9, 9.9, 9.2, 9.5, 9.2, 10.3, 11.0, 11.9, 10.2, 9.4, 8.9, 8.9, 10.0, 10.7, 9.8, 9.3, 9.5, 10.0, 9.0, 11.9, 8.9, 10.0, 9.6, 8.9, 8.9, 11.4, 9.0, 10.0, 9.6, 9.7, 9.5, 10.0, 12.2, 8.7, 10.2, 9.6, 10.0, 9.5, 11.5, 9.5, 9.8, 10.1, 10.0, 9.8, 9.5, 9.5, 10.2, 10.2, 9.0, 9.0, 12.3, 9.0, 11.6, 9.5, 11.5, 9.6, 9.0, 12.0, 11.4, 12.3, 12.6, 9.0, 12.0, 11.7, 9.2, 10.3, 8.6, 10.7, 9.8, 9.8, 10.7, 12.5, 11.9, 10.8, 10.5, 10.3, 10.3, 10.8, 12.0, 10.2, 10.2, 9.9, 10.1, 9.5, 10.5, 10.4, 9.5, 9.2, 10.1, 9.8, 9.4, 9.4, 10.4, 11.3, 10.8, 11.3, 9.3, 10.3, 10.5, 10.3, 11.2, 10.3, 9.5, 8.9, 10.2, 9.2, 10.3, 10.5, 9.5, 11.4, 11.4, 11.1, 10.5, 12.0, 9.7, 10.2, 9.5, 10.4, 9.3, 10.5, 10.0, 10.2, 10.2, 9.1, 10.2, 10.7, 9.7, 9.3, 11.0, 10.8, 10.7, 10.7, 8.8, 10.9, 10.5, 10.0, 10.4, 9.2, 12.6, 9.0, 9.2, 11.3, 10.3, 10.4, 10.0, 10.7, 9.0, 10.7, 8.7, 11.6, 9.4, 9.5, 9.5, 10.9, 9.7, 9.1, 11.1, 12.6, 11.0, 11.3, 9.7, 10.9, 10.9, 9.3, 12.7, 10.1, 10.0, 9.8, 10.1, 9.0, 9.4, 9.4, 9.2, 10.1, 8.6, 11.2, 11.2, 9.2, 10.6, 9.3, 8.9, 10.6, 10.6, 8.8, 11.0, 10.2, 10.1, 10.1, 14.0, 9.4, 11.8, 11.4, 10.7, 8.6, 11.5, 11.2, 12.6, 12.6, 9.3, 12.6, 12.1, 9.9, 10.7, 10.0, 10.4, 10.5, 9.7, 10.5, 9.0, 9.2, 10.1, 11.4, 10.8, 10.9, 9.2, 12.9, 12.0, 9.5, 11.8, 9.1, 9.7, 9.1, 10.0, 10.4, 9.5, 12.3, 11.7, 9.5, 11.5, 10.6, 10.2, 9.5, 10.5, 10.5, 8.9, 10.6, 9.5, 10.8, 9.5, 8.9, 8.9, 9.4, 10.6, 9.0, 10.5, 9.0, 9.0, 9.4, 9.0, 9.6, 9.0, 10.2, 9.4, 10.4, 10.4, 9.5, 10.6, 11.0, 9.6, 9.9, 9.6, 12.8, 11.4, 10.0, 9.1, 9.4, 10.2, 9.2, 9.4, 9.6, 10.1, 11.4, 10.6, 12.8, 8.9, 9.3, 11.1, 9.9, 9.6, 12.8, 10.7, 9.2, 9.1, 9.6, 9.2, 10.7, 9.1, 9.2, 10.7, 10.8, 10.8, 9.0, 10.7, 10.7, 9.4, 8.8, 9.0, 11.5, 12.5, 10.5, 9.7, 11.3, 10.7, 10.8, 10.6, 11.7, 9.2, 11.1, 11.7, 11.0, 12.5, 10.0, 10.6, 12.3, 12.7, 12.3, 10.5, 12.5, 12.4, 8.7, 12.4, 12.6, 11.0, 10.1, 10.5, 12.7, 10.9, 13.5, 9.7, 9.2, 10.6, 13.3, 13.5, 10.1, 9.4, 10.6, 11.3, 10.8, 10.4, 10.5, 9.3, 9.3, 12.2, 9.2, 10.3, 9.4, 10.2, 9.0, 9.3, 9.2, 9.4, 9.4, 9.5, 9.9, 11.1, 12.3, 8.6, 9.4, 9.4, 8.6, 10.9, 9.4, 10.9, 9.4, 9.2, 8.6, 9.4, 10.8, 10.5, 12.5, 12.1, 8.7, 12.7, 12.1, 12.5, 11.4, 12.9, 12.8, 11.2, 9.7, 9.7, 10.3, 11.6, 11.6, 9.7, 10.9, 12.6, 12.4, 11.5, 10.2, 11.4, 9.6, 10.3, 9.3, 10.7, 12.8, 9.5, 10.4, 10.3, 9.9, 10.7, 10.5, 9.6, 9.3, 10.0, 11.2, 10.8, 10.3, 8.8, 12.8, 13.2, 10.1, 11.0, 10.8, 12.8, 9.2, 10.5, 11.7, 9.5, 9.5, 8.8, 9.3, 12.6, 12.4, 10.1, 11.2, 10.0, 10.0, 10.8, 10.0, 10.4, 10.8, 9.8, 12.2, 12.7, 12.2, 11.9, 11.2, 10.4, 12.8, 12.7, 10.1, 10.0, 9.0, 11.4, 8.9, 9.3, 12.0, 10.8, 10.5, 10.6, 11.3, 9.5, 11.4, 10.1, 10.9, 8.9, 8.9, 9.3, 10.4, 12.0, 9.5, 9.5, 12.4, 11.2, 11.4, 11.4, 11.1, 10.4, 12.0, 12.3, 9.1, 10.5, 11.4, 9.5, 13.7, 13.4, 11.3, 10.0, 10.1, 12.2, 13.4, 9.3, 13.7, 12.3, 11.3, 8.9, 8.9, 11.5, 8.9, 9.3, 11.1, 10.9, 11.6, 10.2, 10.5, 11.4, 8.9, 10.6, 11.6, 11.5, 12.3, 10.8, 11.3, 9.3, 10.0, 11.0, 10.2, 10.8, 10.1, 11.6, 9.1, 10.0, 10.8, 11.4, 12.7, 11.3, 10.4, 9.6, 10.1, 9.6, 12.1, 12.2, 11.3, 9.6, 9.2, 10.4, 9.5, 8.9, 8.8, 10.5, 9.4, 12.2, 11.3, 12.2, 12.2, 11.2, 11.2, 11.5, 11.3, 9.3, 11.3, 11.8, 9.2, 9.2, 12.2, 12.2, 12.2, 10.6, 12.4, 10.8, 11.2, 11.0, 12.7, 10.2, 11.5, 12.3, 9.8, 9.3, 11.8, 11.3, 11.4, 10.8, 9.5, 10.2, 10.7, 10.8, 11.5, 10.7, 10.2, 10.1, 10.4, 9.5, 9.1, 10.6, 9.4, 9.8, 9.5, 9.3, 10.3, 11.1, 10.0, 12.3, 12.4, 12.3, 10.4, 12.1, 12.5, 13.0, 11.0, 10.1, 9.2, 12.6, 12.2, 9.8, 11.0, 10.0, 9.8, 10.5, 10.0, 11.2, 11.0, 11.2, 11.0, 10.5, 10.6, 10.6, 12.0, 10.1, 10.1, 9.2, 11.0, 10.0, 8.7, 8.7, 11.1, 11.0, 11.1, 8.7, 8.7, 11.2, 11.1, 10.8, 9.0, 10.3, 9.9, 10.0, 9.8, 10.8, 9.0, 9.1, 10.6, 10.6, 9.9, 10.6, 9.9, 9.9, 12.8, 10.3, 10.6, 8.7, 12.6, 11.0, 11.2, 10.7, 9.6, 10.6, 9.0, 10.5, 12.8, 10.1, 12.2, 12.8, 10.1, 10.1, 9.2, 9.9, 9.7, 9.9, 9.9, 9.7, 10.3, 10.3, 10.5, 10.5, 9.8, 10.6, 10.1, 9.0, 9.5, 11.5, 11.9, 10.1, 9.2, 8.7, 9.8, 9.2, 8.7, 11.2, 12.3, 10.4, 10.7, 10.5, 9.4, 9.2, 11.9, 9.2, 9.9, 11.4, 9.4, 10.7, 12.7, 13.5, 9.5, 12.9, 12.5, 9.5, 8.6, 10.0, 12.5, 10.1, 11.3, 10.6, 10.8, 10.7, 9.0, 9.2, 8.5, 11.3, 11.3, 9.4, 8.7, 9.4, 10.5, 9.7, 10.2, 9.4, 11.5, 9.6, 11.4, 11.5, 12.2, 11.0, 9.2, 10.2, 10.0, 9.7, 9.2, 10.5, 10.0, 10.1, 9.1, 10.2, 9.1, 10.5, 10.1, 12.1, 10.2, 9.4, 12.8, 9.0, 10.9, 8.8, 9.0, 10.2, 9.2, 11.3, 8.8, 9.3, 9.4, 10.3, 10.8, 8.8, 9.0, 11.5, 10.8, 11.8, 10.5, 9.9, 9.8, 11.4, 9.3, 9.3, 10.3, 8.9, 11.4, 11.1, 10.4, 10.1, 9.0, 11.9, 9.0, 9.0, 9.1, 9.0, 10.0, 9.1, 9.4, 11.4, 9.7, 9.0, 11.8, 10.2, 9.2, 11.0, 10.0, 12.2, 11.8, 11.6, 10.2, 10.3, 8.6, 9.6, 9.6, 11.3, 9.9, 9.6, 10.6, 9.8, 10.5, 10.8, 10.0, 10.1, 9.4, 11.5, 10.8, 9.9, 9.0, 9.4, 10.8, 10.9, 12.0, 11.5, 10.5, 9.3, 11.8, 10.0, 9.4, 11.4, 10.4, 9.5, 11.9, 11.1, 9.6, 12.0, 8.7, 9.6, 10.0, 11.4, 9.6, 12.9, 9.7, 9.3, 9.1, 8.6, 9.9, 9.3, 10.9, 10.2, 9.7, 11.4, 9.5, 10.2, 11.1, 9.7, 9.3, 8.8, 10.6, 9.3, 10.2, 10.2, 11.0, 9.6, 9.3, 8.8, 8.8, 8.9, 10.0, 12.2, 10.9, 9.5, 10.9, 10.9, 10.8, 12.0, 9.8, 9.5, 11.0, 11.0, 9.8, 10.5, 11.4, 10.1, 11.6, 11.4, 11.8, 12.1, 12.0, 12.1, 9.1, 9.3, 10.4, 9.1, 9.4, 9.6, 12.0, 11.3, 8.7, 9.9, 9.3, 9.5, 8.7, 9.9, 9.3, 9.4, 9.4, 8.8, 9.4, 8.8, 9.9, 9.4, 12.6, 11.1, 12.8, 12.0, 12.0, 9.2, 12.3, 13.0, 12.0, 10.9, 12.8, 10.0, 9.0, 10.4, 9.0, 10.0, 10.0, 11.3, 11.3, 12.0, 11.3, 12.0, 10.6, 9.3, 9.4, 11.0, 9.3, 9.4, 10.5, 11.0, 9.5, 11.2, 12.3, 9.0, 9.0, 9.0, 9.0, 11.4, 11.0, 12.3, 10.4, 10.3, 10.5, 9.8, 10.0, 9.7, 9.7, 9.8, 10.5, 10.0, 11.5, 9.5, 10.5, 10.2, 9.8, 11.6, 11.8, 10.1, 10.3, 10.4, 8.9, 8.9, 10.8, 9.2, 9.6, 10.4, 8.7, 9.2, 9.2, 9.2, 9.2, 9.2, 10.2, 9.2, 9.0, 9.7, 9.6, 10.0, 9.2, 9.1, 8.7, 8.7, 9.5, 9.5, 8.9, 8.9, 9.9, 12.6, 9.7, 10.4, 9.1, 10.4, 9.5, 8.9, 10.6, 12.0, 12.5, 9.6, 9.2, 9.9, 11.7, 9.6, 12.0, 12.5, 9.2, 9.9, 8.9, 9.0, 10.2, 9.6, 9.4, 10.4, 10.4, 10.0, 10.0, 10.5, 11.4, 10.2, 10.4, 11.0, 10.1, 9.2, 10.3, 10.2, 10.4, 11.1, 9.9, 9.0, 8.6, 9.0, 8.6, 9.5, 9.0, 10.0, 9.0, 9.0, 10.2, 9.6, 9.7, 10.2, 13.0, 10.8, 9.7, 9.0, 9.9, 9.2, 8.7, 10.1, 10.1, 9.5, 9.9, 8.7, 9.0, 8.6, 10.5, 9.5, 10.1, 11.7, 10.7, 11.7, 9.2, 8.8, 8.8, 9.5, 10.2, 9.1, 10.5, 9.0, 8.9, 8.9, 8.9, 8.9, 8.9, 9.1, 10.1, 10.0, 9.5, 12.3, 9.1, 8.9, 9.6, 11.6, 8.8, 8.9, 8.8, 8.9, 8.9, 9.0, 10.0, 10.0, 11.1, 11.6, 10.6, 8.8, 8.9, 10.1, 10.0, 12.2, 11.0, 10.0, 11.1, 10.4, 11.8, 10.8, 12.5, 11.8, 11.6, 10.4, 11.5, 10.1, 9.2, 10.1, 9.2, 8.9, 10.1, 8.9, 9.7, 9.2, 11.0, 10.7, 10.8, 9.8, 11.0, 10.4, 10.2, 10.7, 9.0, 10.6, 9.5, 9.0, 9.2, 11.0, 9.9, 10.6, 9.3, 9.6, 9.5, 9.7, 9.7, 8.7, 8.7, 12.4, 12.4, 10.6, 8.7, 12.0, 9.0, 8.8, 9.5, 10.8, 11.4, 10.3, 9.5, 9.9, 10.2, 10.2, 11.0, 12.1, 9.1, 9.5, 9.5, 9.8, 9.5, 10.3, 9.6, 10.2, 10.5, 10.4, 9.6, 10.7, 10.5, 10.6, 9.6, 9.6, 9.5, 9.4, 9.8, 9.6, 9.2, 9.5, 9.2, 9.4, 9.4, 9.3, 9.1, 9.5, 9.1, 10.6, 9.5, 12.4, 8.7, 8.8, 10.6, 9.1, 9.0, 10.3, 9.1, 9.5, 8.8, 8.8, 8.8, 9.9, 9.5, 8.8, 11.7, 10.8, 12.0, 10.3, 9.0, 12.2, 9.9, 9.0, 12.2, 10.1, 9.3, 9.5, 9.2, 11.7, 11.0, 9.6, 9.6, 11.9, 10.8, 10.1, 10.9, 10.1, 10.4, 9.2, 9.6, 9.6, 9.0, 11.5, 10.2, 9.9, 9.6, 10.6, 9.2, 11.8, 12.2, 9.6, 10.6, 10.3, 10.2, 10.7, 11.7, 12.0, 10.6, 12.2, 11.0, 12.4, 9.4, 12.0, 11.6, 9.4, 9.4, 9.1, 9.1, 9.1, 9.1, 9.1, 9.2, 9.2, 9.1, 9.1, 9.2, 9.0, 9.2, 10.8, 9.5, 11.0, 10.0, 9.5, 10.1, 9.5, 9.5, 9.5, 9.4, 9.4, 12.7, 9.7, 9.7, 9.4, 9.4, 9.5, 11.7, 11.7, 9.7, 9.5, 9.1, 10.3, 9.7, 9.9, 9.9, 10.2, 12.1, 11.3, 11.4, 12.2, 9.9, 10.3, 12.2, 10.4, 11.4, 9.9, 10.0, 11.5, 10.5, 12.5, 10.5, 9.9, 11.4, 9.8, 11.4, 9.2, 8.9, 8.9, 9.5, 11.5, 9.5, 11.5, 9.5, 9.7, 9.7, 9.5, 9.4, 9.0, 10.6, 9.5, 9.1, 9.4, 8.8, 10.4, 8.9, 10.6, 9.0, 10.6, 10.6, 9.0, 8.8, 10.5, 9.5, 9.0, 10.4, 10.0, 10.4, 9.0, 9.3, 9.0, 9.3, 9.0, 11.5, 9.0, 10.4, 9.0, 10.6, 10.4, 8.5, 9.3, 10.5, 9.9, 10.4, 10.1, 10.5, 9.2, 9.4, 10.6, 9.4, 8.7, 10.2, 10.3, 9.5, 9.5, 9.5, 9.5, 9.4, 9.4, 9.5, 12.6, 10.5, 10.8, 9.9, 12.6, 12.2, 10.0, 10.6, 9.5, 12.8, 12.2, 12.6, 9.4, 9.0, 9.1, 9.4, 12.2, 10.0, 9.2, 9.3, 9.8, 9.2, 12.0, 9.3, 12.6, 12.2, 11.0, 12.0, 8.8, 8.9, 12.7, 11.8, 10.2, 9.9, 11.1, 9.4, 9.7, 9.7, 9.7, 9.7, 9.8, 9.3, 10.5, 9.3, 12.6, 8.9, 10.3, 10.6, 9.0, 9.7, 9.5, 10.3, 9.7, 12.3, 10.5, 9.5, 10.0, 8.8, 10.9, 12.2, 9.5, 10.0, 9.6, 8.7, 10.7, 11.1, 12.5, 10.4, 11.5, 9.4, 9.3, 10.1, 9.7, 10.5, 9.7, 9.2, 9.8, 9.0, 9.1, 10.4, 10.7, 10.5, 9.2, 11.5, 10.4, 12.0, 12.2, 12.0, 9.8, 9.3, 9.6, 9.5, 10.2, 10.4, 11.0, 10.4, 8.7, 9.9, 9.9, 11.3, 12.0, 10.7, 10.1, 9.6, 9.6, 8.7, 10.3, 9.1, 11.8, 11.9, 10.3, 10.0, 10.2, 10.0, 12.7, 9.6, 9.5, 12.7, 11.0, 9.1, 10.2, 10.1, 9.2, 9.4, 10.2, 9.2, 10.0, 10.1, 9.0, 9.5, 9.1, 13.3, 9.5, 9.2, 10.1, 9.2, 10.1, 11.2, 9.8, 11.2, 9.8, 9.4, 9.0, 9.4, 8.9, 9.1, 9.8, 9.4, 10.0, 9.4, 9.9, 10.0, 11.5, 9.2, 10.0, 9.2, 10.0, 10.0, 9.8, 10.5, 10.6, 9.4, 9.4, 11.0, 10.8, 9.0, 9.6, 10.6, 10.6, 9.6, 9.2, 9.2, 9.5, 9.5, 10.3, 8.8, 8.7, 8.7, 10.2, 10.1, 9.5, 9.5, 11.6, 10.7, 10.1, 11.1, 9.8, 9.0, 11.1, 9.5, 9.4, 10.2, 9.8, 9.5, 9.5, 9.0, 10.1, 8.8, 11.9, 11.9, 9.3, 10.0, 9.5, 9.3, 9.7, 9.7, 10.2, 10.8, 8.8, 8.8, 11.4, 8.8, 9.8, 9.4, 9.4, 9.4, 9.4, 9.7, 12.3, 9.8, 9.0, 9.2, 9.4, 9.9, 9.8, 12.3, 11.9, 10.2, 9.5, 11.9, 9.2, 9.7, 11.5, 10.4, 11.6, 9.7, 10.4, 11.5, 10.2, 9.8, 9.0, 10.5, 9.4, 9.4, 10.8, 10.7, 10.6, 9.2, 9.5, 9.5, 10.0, 10.6, 10.6, 10.6, 9.2, 11.0, 11.2, 9.6, 9.4, 9.5, 9.3, 9.4, 9.5, 9.4, 11.2, 11.2, 11.2, 8.8, 11.2, 11.2, 9.4, 11.1, 9.6, 11.1, 9.4, 10.6, 8.9, 12.3, 11.4, 9.6, 10.3, 11.4, 12.1, 9.9, 9.7, 10.5, 8.9, 9.4, 9.6, 12.6, 9.2, 10.4, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.2, 9.0, 9.7, 10.1, 11.0, 10.8, 10.8, 13.5, 10.6, 9.8, 11.7, 9.8, 9.0, 11.3, 9.4, 11.7, 11.3, 11.3, 12.0, 10.6, 10.8, 10.8, 12.0, 9.4, 9.4, 11.3, 9.4, 12.0, 10.3, 10.3, 10.3, 11.3, 9.4, 8.7, 9.4, 11.3, 10.3, 12.0, 8.0, 10.4, 10.7, 10.2, 10.9, 10.5, 11.7, 8.6, 9.0, 8.7, 12.8, 9.0, 8.7, 11.8, 11.6, 11.8, 10.6, 9.7, 10.3, 10.2, 10.1, 10.9, 9.3, 10.2, 10.2, 9.5, 9.3, 12.9, 8.7, 9.4, 10.1, 10.0, 11.1, 10.3, 12.2, 9.3, 11.3, 10.8, 11.2, 12.5, 9.3, 12.9, 11.2, 12.6, 9.3, 12.9, 12.9, 9.5, 11.9, 10.3, 10.3, 11.2, 12.0, 9.6, 9.2, 12.9, 9.3, 12.1, 9.6, 11.2, 11.2, 12.9, 9.2, 9.3, 9.2, 9.3, 10.7, 9.8, 10.3, 10.7, 11.3, 8.8, 10.8, 9.8, 9.3, 11.5, 8.8, 8.8, 8.8, 9.4, 9.4, 9.6, 8.8, 9.3, 8.9, 8.9, 10.0, 9.1, 9.3, 9.4, 10.1, 8.9, 10.8, 10.0, 10.9, 12.0, 9.3, 12.3, 10.4, 10.9, 10.5, 9.8, 10.5, 9.9, 11.4, 9.2, 9.7, 10.0, 11.4, 10.3, 9.9, 10.5, 9.8, 9.3, 12.4, 9.3, 9.3, 9.5, 10.5, 10.5, 12.8, 10.8, 10.0, 11.8, 10.0, 11.8, 12.0, 12.6, 11.9, 10.6, 9.2, 10.0, 9.2, 9.3, 10.2, 10.2, 8.7, 10.7, 12.1, 9.5, 11.2, 12.0, 9.5, 12.1, 10.7, 8.8, 10.8, 13.1, 12.5, 11.7, 11.7, 11.6, 11.3, 12.5, 11.4, 12.2, 11.7, 10.4, 10.4, 10.4, 9.1, 12.2, 9.1, 9.4, 9.4, 10.4, 9.2, 9.4, 13.5, 9.4, 10.9, 13.5, 9.4, 11.4, 12.4, 9.2, 9.4, 10.5, 11.5, 10.9, 10.8, 8.9, 8.9, 9.4, 12.2, 12.1, 10.9, 10.1, 12.2, 13.0, 11.0, 10.8, 13.0, 9.3, 11.4, 9.2, 9.9, 10.5, 12.4, 9.5, 10.5, 9.1, 11.5, 11.5, 11.2, 10.8, 9.4, 11.0, 11.3, 11.2, 10.5, 9.1, 10.4, 11.2, 11.1, 11.2, 10.5, 10.0, 10.0, 10.9, 10.9, 11.2, 11.7, 10.0, 9.5, 9.0, 10.0, 11.9, 10.6, 11.0, 11.2, 12.0, 12.6, 11.2, 10.5, 10.2, 11.0, 12.2, 12.3, 10.6, 10.4, 12.0, 12.7, 10.6, 12.3, 12.7, 11.4, 12.0, 12.4, 12.1, 11.4, 10.7, 9.3, 12.7, 11.7, 10.7, 11.8, 9.9, 13.4, 12.8, 12.8, 10.5, 11.5, 10.5, 13.0, 12.4, 10.2, 9.0, 12.0, 11.7, 10.0, 10.3, 9.0, 11.1, 9.0, 10.5, 11.9, 9.4, 11.4, 10.8, 9.8, 9.3, 11.4, 11.3, 11.3, 9.5, 9.4, 11.9, 9.3, 11.4, 11.4, 12.7, 13.5, 11.2, 10.7, 10.8, 10.5, 13.0, 10.8, 9.1, 10.1, 11.9, 12.0, 12.0, 9.1, 11.6, 11.9, 10.2, 10.8, 9.8, 11.4, 9.8, 10.1, 9.8, 9.8, 10.7, 10.6, 9.3, 9.8, 10.7, 14.0, 11.0, 11.0, 9.4, 9.0, 9.0, 10.0, 9.0, 9.0, 12.4, 11.3, 12.0, 11.7, 10.0, 13.2, 11.0, 11.0, 9.2, 13.0, 10.6, 13.0, 9.0, 9.0, 11.5, 11.0, 11.5, 9.9, 10.4, 9.0, 9.9, 11.0, 12.1, 9.7, 9.7, 12.2, 12.4, 10.5, 10.4, 12.0, 12.7, 10.9, 10.9, 10.9, 11.4, 11.0, 12.6, 11.6, 10.5, 10.9, 10.9, 12.5, 12.1, 11.3, 13.3, 10.9, 10.9, 10.5, 11.6, 11.4, 11.0, 12.1, 11.0, 12.6, 13.0, 8.8, 9.5, 11.8, 12.2, 10.7, 11.0, 11.4, 10.7, 12.0, 11.9, 11.4, 11.8, 10.6, 9.7, 11.0, 10.7, 11.0, 10.5, 10.4, 10.5, 12.0, 12.0, 9.2, 10.9, 9.5, 9.4, 11.3, 10.4, 9.4, 11.3, 8.8, 10.8, 9.4, 9.4, 9.2, 10.3, 9.9, 12.4, 11.9, 11.7, 9.4, 9.6, 9.4, 10.4, 9.5, 11.9, 12.5, 13.4, 12.7, 9.1, 10.5, 10.4, 10.4, 12.5, 10.4, 9.0, 9.8, 9.0, 10.7, 12.4, 12.5, 12.5, 12.1, 11.3, 12.0, 10.4, 12.2, 8.6, 9.1, 12.1, 12.0, 10.5, 10.4, 11.9, 13.7, 11.3, 10.5, 13.7, 10.1, 12.3, 12.0, 11.3, 9.5, 11.4, 11.9, 10.0, 10.0, 11.3, 11.7, 11.0, 12.2, 10.7, 10.9, 10.2, 11.9, 11.1, 11.2, 11.4, 10.6, 10.3, 10.4, 11.9, 11.9, 10.4, 9.2, 11.3, 11.3, 11.0, 11.9, 12.9, 10.8, 9.1, 10.4, 12.9, 12.2, 9.2, 10.3, 11.0, 11.0, 11.7, 12.0, 12.7, 8.8, 11.3, 12.8, 11.2, 8.9, 11.2, 11.1, 10.8, 9.3, 8.9, 12.7, 12.0, 11.2, 8.8, 8.8, 8.8, 10.4, 8.8, 10.4, 14.0, 8.8, 13.1, 12.3, 12.6, 12.0, 9.5, 12.0, 12.7, 10.5, 12.9, 9.5, 12.0, 12.7, 11.9, 12.0, 12.5, 12.1, 12.5, 9.9, 10.7, 12.0, 12.2, 12.4, 12.4, 10.3, 12.0, 10.5, 9.5, 10.5, 12.3, 11.9, 9.8, 12.3, 11.4, 11.0, 10.8, 12.8, 11.0, 10.2, 12.5, 11.6, 11.9, 9.8, 11.0, 10.9, 11.0, 12.5, 11.0, 12.0, 12.4, 12.5, 12.8, 11.0, 9.1, 12.4, 12.9, 10.9, 10.8, 10.6, 9.0, 12.0, 11.8, 10.6, 12.3, 11.5, 11.1, 9.0, 9.9, 12.8, 12.9, 12.9, 12.0, 12.0, 11.2, 13.3, 9.9, 9.5, 9.4, 11.0, 9.4, 11.5, 12.5, 11.9, 10.4, 11.2, 12.5, 11.0, 9.8, 12.3, 11.0, 12.6, 11.6, 12.3, 13.4, 9.8, 11.5, 11.6, 11.1, 11.0, 11.3, 9.9, 12.6, 11.8, 11.4, 9.2, 9.2, 9.2, 9.2, 9.2, 9.2, 13.0, 9.3, 12.6, 9.6, 8.0, 11.8, 10.2, 12.7, 9.4, 10.2, 12.0, 11.3, 11.8, 10.9, 9.8, 12.2, 11.1, 9.4, 11.4, 10.2, 12.8, 10.1, 9.4, 12.2, 10.9, 10.9, 10.9, 9.4, 9.4, 11.4, 12.9, 9.4, 12.0, 10.1, 9.4, 9.4, 9.2, 11.8, 12.3, 11.4, 12.9, 12.3, 13.5, 12.8, 12.8, 12.8, 11.0, 10.6, 12.4, 12.9, 11.1, 12.9, 11.8, 9.1, 12.7, 12.0, 11.2, 12.4, 10.4, 10.4, 12.7, 12.5, 12.0, 11.6, 12.6, 10.2, 10.4, 11.5, 11.0, 10.1, 10.5, 12.1, 9.9, 11.4, 9.5, 9.5, 9.5, 10.9, 9.5, 12.6, 9.5, 11.1, 9.5, 9.5, 10.6, 10.6, 10.8, 10.9, 9.9, 11.3, 12.6, 12.5, 12.4, 11.8, 12.2, 10.7, 11.3, 12.5, 12.4, 11.3, 9.9, 11.3, 12.6, 11.5, 12.3, 12.2, 13.2, 10.2, 11.5, 13.2, 12.2, 11.0, 13.2, 9.5, 10.2, 10.2, 11.4, 12.5, 9.2, 12.1, 10.7, 12.1, 11.2, 10.6, 11.8, 12.5, 9.2, 12.6, 12.8, 12.3, 12.3, 12.4, 12.3, 9.1, 9.1, 10.6, 10.3, 9.5, 11.1, 10.8, 11.2, 10.8, 11.4, 11.2, 10.2, 11.1, 9.5, 10.2, 11.0, 11.5, 9.8, 10.1, 8.8, 11.5, 12.7, 9.8, 12.9, 9.8, 12.7, 8.5, 12.7, 13.1, 9.1, 12.5, 9.1, 9.1, 11.2, 12.5, 9.1, 9.1, 9.1, 11.5, 12.9, 12.5, 12.3, 11.4, 9.4, 9.1, 9.4, 12.0, 11.1, 11.8, 11.4, 9.1, 12.1, 10.4, 9.2, 13.0, 12.1, 11.5, 11.5, 10.0, 11.1, 12.4, 12.2, 10.6, 11.1, 13.9, 9.2, 10.5, 11.3, 12.9, 12.9, 9.6, 12.9, 12.9, 8.8, 13.2, 9.2, 11.3, 10.5, 10.5, 12.6, 9.5, 9.8, 13.4, 11.8, 9.8, 13.1, 12.6, 10.4, 13.4, 13.0, 13.4, 10.2, 11.7, 9.5, 11.7, 11.4, 11.8, 11.2, 13.0, 13.0, 10.9, 11.6, 11.3, 12.0, 10.5, 13.1, 13.0, 10.9, 9.1, 13.4, 11.5, 11.2, 10.9, 13.5, 9.1, 9.9, 10.5, 11.7, 11.0, 13.0, 13.6, 12.3, 13.3, 13.7, 11.1, 13.4, 9.1, 11.3, 9.4, 9.1, 11.6, 11.6, 12.4, 9.8, 11.1, 13.1, 9.7, 9.2, 11.7, 10.6, 9.7, 9.2, 10.9, 10.1, 12.2, 12.7, 13.0, 11.2, 9.4, 11.0, 11.0, 9.2, 9.4, 9.2, 12.3, 11.0, 10.0, 9.0, 9.0, 9.0, 11.1, 9.9, 12.2, 11.1, 9.0, 11.8, 12.9, 9.0, 12.4, 9.0, 12.9, 11.2, 12.6, 11.5, 11.3, 11.2, 11.5, 10.5, 12.6, 11.9, 10.1, 11.0, 10.6, 11.3, 11.2, 11.5, 11.1, 12.8, 12.3, 10.4, 11.5, 11.7, 10.7, 9.5, 9.5, 9.5, 12.0, 10.8, 10.7, 10.7, 10.7, 12.1, 11.9, 10.8, 12.3, 9.4, 9.9, 10.4, 10.4, 12.6, 12.5, 9.4, 9.2, 11.2, 9.2, 9.2, 9.4, 11.2, 10.8, 9.2, 9.2, 12.5, 9.3, 11.4, 10.0, 10.6, 10.7, 10.0, 12.5, 10.6, 12.8, 9.3, 11.4, 9.5, 9.5, 9.5, 10.8, 10.8, 8.8, 10.8, 11.0, 12.4, 11.3, 11.2, 12.5, 10.0, 11.0, 10.5, 10.5, 11.0, 11.4, 11.3, 12.2, 12.6, 11.1, 12.3, 10.4, 8.8, 9.5, 8.8, 10.4, 13.0, 12.2, 10.5, 10.8, 13.2, 13.0, 10.0, 10.4, 12.4, 12.9, 13.2, 10.5, 13.0, 11.2, 12.7, 9.4, 12.9, 13.0, 13.6, 9.1, 10.4, 13.6, 12.2, 8.7, 10.5, 10.2, 12.5, 11.3, 10.2, 12.6, 10.2, 9.8, 10.8, 12.5, 12.5, 11.5, 11.4, 10.5, 12.6, 8.7, 11.0, 11.3, 10.2, 11.6, 9.8, 10.1, 9.2, 9.1, 9.1, 9.1, 9.1, 11.7, 12.6, 9.0, 10.1, 13.6, 9.1, 9.2, 8.8, 10.0, 9.1, 11.2, 9.2, 9.2, 9.5, 11.9, 9.8, 9.8, 10.8, 11.3, 12.1, 11.3, 10.8, 13.5, 10.3, 9.0, 11.6, 10.3, 12.5, 8.6, 13.4, 12.7, 9.2, 10.2, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.9, 9.0, 9.0, 11.0, 9.0, 10.0, 10.7, 10.7, 13.4, 11.0, 10.0, 10.7, 10.7, 11.0, 11.0, 11.1, 10.9, 11.5, 13.4, 9.4, 9.4, 9.4, 10.6, 9.4, 12.0, 10.2, 10.6, 13.5, 9.7, 12.2, 12.3, 12.2, 11.4, 12.7, 9.7, 10.8, 11.0, 9.5, 10.1, 13.2, 8.8, 9.5, 9.5, 9.5, 9.5, 9.5, 10.4, 9.9, 10.0, 10.1, 9.4, 9.3, 10.9, 11.4, 10.3, 11.0, 10.9, 10.8, 10.3, 11.0, 9.3, 10.2, 10.2, 10.8, 10.5, 11.1, 10.9, 11.4, 10.3, 12.9, 9.9, 11.3, 11.5, 11.5, 10.7, 10.4, 12.5, 9.5, 11.3, 13.0, 11.5, 11.5, 11.3, 13.2, 11.5, 9.6, 9.6, 9.7, 9.2, 8.4, 12.4, 12.4, 9.2, 8.4, 11.7, 11.0, 11.9, 13.2, 11.7, 9.1, 12.6, 9.1, 10.5, 10.6, 12.6, 13.7, 12.0, 12.5, 12.1, 11.3, 12.0, 10.3, 12.7, 9.2, 9.2, 9.5, 10.1, 10.1, 13.0, 13.1, 11.0, 9.2, 9.4, 9.5, 10.2, 10.1, 8.6, 9.0, 9.6, 9.9, 10.5, 11.4, 9.4, 11.1, 8.9, 8.9, 10.8, 12.2, 8.9, 12.5, 12.2, 12.5, 8.9, 10.8, 11.4, 10.8, 10.6, 9.2, 12.2, 12.3, 10.4, 10.4, 11.0, 10.6, 9.2, 13.5, 11.4, 11.5, 14.0, 12.5, 12.5, 12.8, 11.2, 11.2, 13.6, 9.2, 12.5, 11.1, 11.2, 14.0, 13.6, 9.4, 14.2, 13.2, 11.2, 10.2, 12.8, 10.1, 10.1, 10.3, 9.9, 11.5, 9.0, 9.0, 12.1, 13.3, 11.5, 11.0, 10.7, 9.4, 10.3, 9.3, 12.0, 11.0, 9.3, 10.1, 11.1, 9.9, 11.0, 11.0, 12.5, 12.7, 9.3, 9.3, 10.1, 8.8, 11.2, 10.8, 8.8, 11.2, 10.3, 12.0, 9.5, 9.5, 9.8, 9.0, 13.0, 11.8, 8.8, 11.2, 9.5, 9.4, 9.5, 10.4, 9.8, 10.4, 10.3, 9.4, 9.5, 11.9, 12.8, 13.0, 10.4, 10.4, 10.7, 10.7, 11.9, 10.4, 12.8, 9.9, 9.9, 9.4, 11.4, 9.9, 9.4, 9.2, 10.5, 11.0, 11.0, 12.1, 11.0, 12.8, 10.5, 10.5, 10.5, 9.5, 9.2, 11.1, 12.3, 11.1, 12.6, 9.5, 9.2, 10.8, 11.3, 12.8, 10.5, 9.8, 8.5, 9.3, 9.2, 11.4, 8.5, 9.3, 8.4, 9.2, 9.2, 10.4, 11.6, 12.4, 10.4, 9.3, 12.2, 11.0, 11.4, 9.5, 9.2, 11.1, 9.2, 11.0, 9.9, 9.9, 9.5, 12.4, 9.4, 9.3, 8.7, 8.7, 8.7, 8.7, 9.0, 10.7, 10.7, 11.3, 8.7, 11.7, 9.3, 8.7, 9.0, 11.7, 10.7, 11.4, 10.7, 11.3, 10.0, 10.0, 11.2, 9.7, 12.5, 12.9, 11.8, 10.6, 11.8, 10.7, 9.9, 12.0, 10.4, 8.5, 9.9, 9.4, 10.4, 11.0, 11.0, 10.4, 9.8, 9.4, 10.6, 10.1, 11.5, 11.4, 9.2, 9.7, 11.3, 9.6, 8.9, 10.0, 9.2, 9.0, 12.8, 9.0, 9.5, 10.0, 11.0, 9.2, 10.6, 10.0, 10.0, 11.7, 12.5, 11.1, 9.7, 12.3, 12.2, 11.3, 11.6, 11.3, 11.1, 11.2, 11.3, 12.0, 8.8, 8.8, 12.0, 12.0, 9.0, 9.3, 8.7, 12.8, 11.5, 10.0, 10.0, 10.3, 10.4, 13.4, 11.2, 9.1, 9.1, 10.8, 12.5, 11.3, 12.8, 9.1, 12.7, 11.0, 10.4, 10.4, 10.7, 10.9, 10.4, 10.4, 9.7, 11.0, 9.6, 13.9, 9.4, 12.5, 9.6, 9.5, 9.6, 9.5, 9.6, 8.7, 8.7, 8.7, 8.7, 8.7, 8.7, 10.4, 10.7, 12.0, 12.1, 13.1, 12.4, 12.6, 8.7, 12.0, 11.6, 9.3, 9.3, 11.1, 10.2, 10.6, 11.3, 9.4, 9.3, 11.1, 9.9, 11.8, 12.6, 9.4, 10.5, 12.3, 11.3, 9.6, 12.0, 11.2, 10.2, 12.4, 10.2, 13.4, 12.6, 9.8, 9.1, 12.4, 12.5, 11.7, 12.9, 10.1, 10.3, 11.7, 10.3, 10.8, 11.2, 11.8, 9.8, 10.0, 8.8, 10.1, 9.5, 9.5, 9.5, 9.2, 12.2, 9.5, 11.3, 12.1, 9.2, 11.2, 12.5, 10.6, 10.4, 10.1, 9.9, 11.0, 10.0, 12.7, 12.1, 10.4, 10.4, 9.2, 9.2, 10.5, 9.2, 11.9, 10.1, 11.1, 10.8, 11.8, 9.2, 9.2, 12.3, 10.1, 11.4, 10.4, 9.8, 9.9, 9.8, 11.2, 10.9, 9.2, 9.2, 12.0, 12.1, 12.4, 11.2, 12.7, 12.2, 12.2, 12.2, 11.2, 12.7, 12.7, 12.1, 9.4, 10.1, 9.4, 8.9, 8.9, 8.9, 8.9, 13.0, 10.3, 10.1, 10.5, 8.9, 10.1, 10.1, 11.0, 11.0, 11.0, 11.0, 10.0, 10.5, 9.7, 10.1, 9.4, 11.2, 9.4, 10.8, 9.4, 11.2, 11.0, 12.4, 9.4, 9.4, 9.5, 10.0, 12.5, 10.9, 10.5, 10.8, 11.0, 11.8, 12.6, 10.2, 12.0, 12.5, 11.5, 11.94, 12.89333333, 9.4, 12.2, 11.94, 12.89333333, 9.5, 10.6, 10.5, 11.46666667, 11.4, 9.5, 9.2, 9.5, 10.98, 9.4, 9.5, 9.2, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 8.8, 10.4, 8.8, 10.03333333, 11.3, 10.4, 9.2, 11.1, 9.2, 11.3, 9.1, 9.4, 13.2, 12.7, 10.7, 11.43333333, 11.1, 12.7, 10.53333333, 11.6, 9.533333333, 9.8, 10.7, 12.0, 12.8, 9.5, 10.93333333, 9.1, 12.6, 9.5, 10.9, 10.93333333, 9.6, 9.3, 11.36666667, 12.5, 9.5, 11.0, 9.4, 11.33333333, 8.8, 9.4, 11.06666667, 12.2, 11.0, 11.33333333, 9.5, 9.5, 11.0, 11.2, 9.3, 10.8, 9.2, 9.4, 9.2, 10.5, 10.8, 9.4, 9.8, 9.8, 9.8, 9.4, 9.8, 12.1, 12.3, 9.733333333, 9.4, 9.4, 12.8, 11.05, 9.4, 12.8, 9.733333333, 13.1, 11.5, 13.1, 11.5, 9.1, 9.75, 10.5, 8.8, 8.8, 8.8, 8.8, 10.5, 10.5, 8.8, 9.9, 9.9, 9.9, 12.2, 10.8, 8.7, 13.2, 12.7, 9.4, 11.2, 11.33333333, 11.9, 11.35, 10.5, 9.8, 9.1, 12.4, 9.1, 9.8, 11.3, 11.3, 13.1, 12.5, 10.3, 10.7, 10.4, 9.5, 9.8, 12.5, 9.4, 9.0, 9.0, 9.0, 13.0, 9.9, 9.4, 10.6, 13.4, 12.5, 9.3, 9.3, 11.0, 10.3, 11.3, 10.9, 11.3, 12.1, 11.1, 9.8, 10.1, 12.4, 12.7, 9.6, 9.6, 9.1, 12.8, 9.6, 12.4, 9.55, 9.1, 12.5, 9.9, 11.2, 13.0, 13.0, 11.7, 13.1, 12.0, 10.55, 11.45, 10.2, 11.45, 9.3, 10.8, 12.2, 11.0, 10.4, 11.4, 14.05, 10.7, 10.2, 11.2, 12.33333333, 11.5, 9.5, 13.4, 12.5, 12.5, 11.2, 8.8, 11.2, 12.7, 9.8, 9.8, 11.7, 9.8, 9.6, 9.8, 9.7, 10.0, 11.7, 12.3, 9.8, 9.0, 9.1, 9.1, 9.1, 11.4, 10.5, 12.4, 9.1, 9.1, 10.1, 10.9, 11.05, 12.75, 12.7, 11.1, 11.1, 12.75, 13.0, 12.0, 11.5, 10.5, 11.1, 11.1, 11.1, 13.1, 12.75, 12.7, 9.6, 11.7, 9.7, 10.9, 10.7, 13.8, 12.15, 10.8, 10.7, 10.8, 10.8, 12.0, 10.8, 12.2, 9.4, 11.4, 12.5, 13.05, 12.4, 12.9, 12.0, 11.3, 10.0, 11.8, 9.4, 8.8, 11.1, 10.5, 9.3, 11.4, 11.8, 12.4, 11.6, 11.1, 12.4, 11.1, 11.0, 12.2, 11.0, 12.9, 10.9, 13.4, 10.7, 11.0, 11.4, 10.2, 11.0, 9.1, 11.0, 11.5, 12.0, 11.2, 11.2, 12.6, 11.0, 10.8, 10.9, 9.8, 9.8, 9.5, 11.26666667, 10.8, 13.4, 11.3, 8.9, 11.2, 11.5, 13.0, 12.6, 13.1, 11.2, 11.7, 10.9, 10.9, 11.6, 10.4, 10.9, 11.7, 10.8, 11.2, 10.0, 10.56666667, 11.73333333, 10.6, 10.5, 11.75, 11.4, 12.4, 10.1, 12.3, 13.1, 10.65, 11.4, 9.3, 10.2, 10.2, 13.1, 9.6, 12.8, 10.96666667, 10.96666667, 10.96666667, 11.0, 13.4, 11.2, 12.4, 11.2, 12.4, 10.13333333, 10.13333333, 12.4, 9.1, 10.15, 10.15, 11.5, 8.9, 10.46666667, 10.46666667, 11.8, 11.63333333, 10.6, 9.6, 11.8, 8.9, 10.5, 10.2, 13.1, 11.8, 12.2, 11.45, 10.5, 10.2, 9.0, 9.0, 9.0, 9.0, 9.1, 8.8, 9.0, 9.1, 12.9, 13.0, 12.9, 9.2, 9.8, 9.8, 10.1, 10.1, 10.9, 9.6, 10.4, 11.8, 10.8, 10.6, 12.7, 12.2, 10.8, 10.4, 11.1, 11.8, 10.0, 10.8, 10.3, 9.9, 10.0, 12.25, 10.2, 9.4, 9.7, 10.2, 10.4, 12.2, 9.4, 10.6, 10.7, 11.85, 11.7, 11.7, 10.15, 11.63333333, 10.8, 10.8, 12.3, 12.5, 11.65, 9.6, 10.9, 10.8, 11.2, 10.0, 10.5, 9.1, 10.5, 9.3, 9.3, 11.2, 10.6, 12.1, 12.0, 9.7, 12.4, 13.6, 13.6, 11.8, 10.0, 10.0, 9.1, 11.9, 11.75, 11.4, 13.0, 12.4, 9.4, 9.6, 9.6, 9.6, 9.6, 9.1, 12.0, 11.2, 10.1, 10.3, 12.3, 10.55, 10.9, 9.7, 9.8, 8.9, 8.9, 10.2, 11.7, 12.8, 12.8, 10.2, 13.55, 11.6, 8.9, 13.8, 9.4, 9.4, 10.7, 10.7, 12.3, 10.3, 10.4, 11.6, 10.7, 12.8, 11.9, 12.1, 9.2, 9.5, 11.0, 10.9, 10.4, 9.1, 11.4, 11.4, 9.7, 12.4, 13.7, 10.6, 11.2, 13.13333333, 12.4, 9.7, 11.0, 11.3, 12.0, 9.2, 10.7, 10.7, 11.4, 9.2, 12.1, 11.1, 9.7, 10.7, 10.9, 12.0, 10.6, 9.6, 13.1, 11.0, 11.6, 11.95, 11.1, 11.5, 11.3, 11.9, 9.5, 12.2, 12.2, 11.1, 9.6, 11.1, 9.6, 11.4, 11.4, 12.06666667, 9.0, 9.0, 11.4, 9.6, 11.0, 11.0, 11.2, 11.55, 13.3, 9.633333333, 13.6, 11.2, 13.0, 10.8, 9.8, 11.45, 12.05, 9.7, 11.9, 10.0, 9.7, 11.6, 8.8, 9.5, 9.533333333, 9.533333333, 9.4, 10.7, 11.5, 9.6, 9.55, 12.15, 13.0, 9.2, 9.4, 11.8, 10.6, 9.7, 11.2, 9.6, 9.4, 12.8, 11.8, 9.4, 9.8, 9.8, 9.8, 9.4, 9.4, 9.4, 10.0, 9.5, 10.5, 9.2, 10.5, 9.9, 9.1, 9.2, 9.2, 10.5, 9.3, 9.0, 9.2, 9.4, 9.7, 9.5, 9.4, 9.7, 9.3, 9.5, 9.5, 9.4, 9.8, 10.1, 10.6, 9.8, 9.4, 9.2, 9.6, 10.8, 9.7, 9.8, 10.5, 10.5, 9.3, 10.5, 10.3, 9.5, 13.1, 9.2, 9.5, 9.2, 9.2, 9.2, 9.4, 9.4, 9.4, 10.2, 9.5, 9.6, 9.4, 10.0, 9.4, 9.2, 9.3, 9.5, 9.8, 10.9, 10.9, 9.6, 10.7, 10.7, 10.5, 9.5, 9.5, 9.5, 9.2, 9.6, 10.5, 10.5, 10.7, 10.1, 9.1, 9.2, 9.4, 9.1, 9.4, 10.3, 10.1, 9.9, 9.6, 9.5, 9.0, 9.5, 9.9, 9.8, 9.6, 10.5, 12.9, 10.7, 9.2, 9.8, 9.0, 10.2, 10.4, 9.0, 9.2, 9.4, 9.2, 9.3, 9.3, 9.6, 9.3, 9.5, 9.8, 9.8, 9.7, 9.5, 10.5, 10.0, 9.4, 10.9, 9.2, 9.0, 10.9, 9.2, 9.5, 9.5, 9.4, 10.9, 10.9, 10.5, 9.4, 9.4, 13.0, 13.0, 9.8, 9.9, 9.6, 9.5, 9.2, 9.5, 9.5, 9.6, 9.5, 14.0, 9.4, 14.0, 9.4, 10.0, 9.3, 10.2, 10.5, 10.3, 9.4, 10.1, 10.1, 10.5, 10.5, 10.5, 10.5, 9.3, 9.3, 9.6, 9.2, 10.0, 9.4, 9.4, 9.5, 10.2, 9.0, 10.4, 9.5, 9.1, 9.2, 9.2, 11.5, 9.5, 9.5, 9.5, 10.5, 9.6, 9.5, 9.5, 9.3, 9.3, 9.3, 9.3, 9.7, 9.2, 9.7, 9.5, 9.5, 9.4, 9.8, 9.5, 9.7, 9.7, 9.4, 10.2, 10.1, 13.0, 11.4, 10.3, 9.3, 9.5, 9.2, 9.2, 10.8, 10.8, 9.3, 9.4, 10.5, 12.4, 10.0, 10.2, 10.1, 9.8, 10.5, 11.0, 9.1, 9.7, 9.5, 9.4, 9.4, 9.5, 10.0, 10.4, 10.5, 9.5, 9.8, 10.5, 11.0, 12.2, 9.9, 9.6, 11.0, 9.0, 9.0, 9.0, 9.2, 9.0, 9.0, 9.3, 10.9, 9.8, 9.2, 9.2, 9.9, 9.5, 9.3, 9.8, 9.9, 10.0, 9.9, 10.5, 9.5, 9.9, 9.3, 9.2, 9.2, 9.4, 10.5, 9.3, 9.4, 10.0, 9.3, 10.9, 10.2, 9.8, 12.8, 9.4, 10.1, 10.7, 10.1, 10.1, 9.4, 9.4, 10.7, 9.4, 10.1, 12.6, 10.5, 9.3, 9.9, 9.1, 10.5, 9.8, 9.8, 10.3, 10.3, 10.6, 9.2, 10.6, 10.5, 10.3, 10.1, 9.5, 9.5, 9.9, 9.6, 9.7, 9.6, 10.7, 10.1, 10.0, 9.5, 9.2, 9.3, 9.4, 9.5, 9.5, 9.5, 9.3, 9.4, 9.5, 9.4, 11.0, 11.0, 10.1, 10.4, 11.5, 10.4, 11.5, 9.7, 9.3, 9.5, 9.2, 9.2, 11.5, 11.5, 9.7, 9.5, 12.5, 12.5, 9.4, 11.0, 11.7, 12.2, 12.5, 10.3, 11.5, 9.8, 9.2, 11.3, 9.8, 9.8, 10.7, 9.9, 12.3, 12.0, 10.0, 9.4, 9.9, 9.4, 9.3, 13.0, 11.9, 12.8, 11.0, 11.7, 10.4, 9.8, 9.4, 9.9, 10.0, 10.2, 10.0, 11.8, 10.0, 9.0, 9.4, 12.0, 9.9, 8.7, 10.6, 9.2, 10.8, 11.8, 11.0, 12.0, 13.3, 10.8, 9.4, 10.0, 9.4, 9.4, 9.2, 9.7, 9.2, 9.6, 9.2, 10.0, 12.9, 10.0, 9.5, 9.1, 9.9, 13.0, 9.9, 11.0, 11.0, 9.4, 9.9, 10.8, 10.5, 10.5, 9.1, 10.1, 10.8, 10.8, 11.3, 9.6, 9.5, 9.5, 9.3, 11.7, 9.5, 9.3, 11.7, 10.5, 10.4, 9.9, 11.8, 12.3, 10.9, 11.0, 10.9, 12.3, 11.4, 10.6, 9.3, 10.4, 11.0, 9.2, 12.8, 9.5, 9.9, 9.5, 10.2, 11.2, 9.9, 9.3, 9.8, 11.3, 11.2, 11.6, 12.5, 10.1, 10.5, 11.2, 10.2, 10.8, 10.8, 9.1, 10.0, 11.2, 11.1, 13.4, 10.3, 9.6, 11.2, 9.0, 11.3, 9.3, 11.8, 9.0, 9.2, 9.7, 11.5, 14.0, 9.2, 9.8, 10.6, 11.4, 10.4, 10.6, 9.4, 10.2, 9.7, 11.0, 10.2, 10.1, 9.2, 11.7, 9.4, 9.4, 13.4, 10.0, 10.0, 10.0, 10.8, 10.2, 10.6, 13.3, 13.4, 11.6, 12.1, 11.0, 9.0, 11.1, 11.0, 11.6, 9.0, 12.0, 12.0, 10.9, 10.8, 12.5, 10.8, 9.5, 10.2, 11.4, 9.5, 10.2, 9.7, 11.8, 11.8, 9.3, 11.9, 8.4, 11.7, 11.0, 10.0, 9.1, 9.8, 9.4, 9.5, 9.9, 11.0, 11.4, 8.7, 9.4, 10.3, 10.3, 10.3, 12.8, 10.0, 10.3, 9.4, 10.7, 12.0, 11.2, 9.6, 11.0, 9.9, 11.0, 8.4, 9.1, 9.5, 10.7, 10.4, 9.4, 9.5, 10.0, 10.0, 11.5, 11.1, 11.1, 11.7, 11.1, 11.7, 12.7, 11.4, 9.2, 9.2, 10.1, 12.7, 11.4, 9.0, 9.0, 10.7, 11.7, 11.0, 11.7, 10.4, 9.6, 10.0, 10.2, 10.0, 9.5, 9.8, 9.8, 9.6, 9.6, 9.2, 9.9, 10.7, 9.6, 10.6, 9.3, 14.0, 10.5, 9.7, 11.5, 9.7, 9.0, 9.5, 9.3, 9.3, 10.0, 9.8, 9.3, 10.0, 9.0, 9.3, 9.0, 9.1, 9.2, 12.2, 10.5, 10.4, 12.7, 9.2, 9.4, 10.0, 9.8, 10.2, 9.7, 9.7, 9.8, 10.2, 9.3, 9.4, 9.4, 9.5, 12.1, 10.2, 10.2, 9.1, 9.1, 9.3, 9.3, 9.3, 9.5, 10.5, 11.3, 9.5, 9.7, 9.4, 9.4, 10.2, 10.3, 9.4, 9.5, 9.4, 9.5, 9.4, 10.1, 10.1, 11.0, 11.2, 11.3, 9.6, 11.2, 14.9, 12.0, 9.5, 9.4, 9.6, 10.5, 9.6, 11.0, 9.6, 9.0, 9.6, 10.2, 10.2, 9.7, 9.5, 9.2, 11.0, 9.2, 10.0, 9.5, 9.5, 9.5, 9.3, 10.2, 9.3, 9.9, 10.0, 9.6, 9.0, 10.2, 9.8, 11.3, 9.4, 11.3, 9.1, 9.7, 9.4, 9.4, 10.7, 9.8, 9.0, 9.4, 9.4, 12.8, 9.5, 9.5, 9.7, 10.8, 10.1, 9.5, 9.4, 9.6, 9.7, 9.9, 10.0, 10.5, 11.6, 10.0, 10.1, 9.5, 9.4, 9.4, 9.8, 9.2, 9.4, 10.0, 9.6, 9.5, 9.6, 9.2, 10.0, 9.5, 11.2, 10.4, 11.1, 9.5, 9.5, 12.7, 9.6, 11.5, 9.6, 9.5, 9.3, 9.5, 9.5, 9.3, 9.2, 9.3, 11.5, 9.5, 9.2, 10.0, 9.5, 9.5, 9.0, 9.4, 9.6, 9.5, 9.5, 9.5, 9.4, 9.5, 9.1, 10.7, 11.2, 9.8, 9.8, 9.2, 9.7, 9.6, 10.0, 9.6, 9.5, 9.5, 9.4, 9.5, 9.7, 9.6, 9.7, 9.4, 9.4, 9.5, 9.5, 10.0, 10.3, 10.3, 10.5, 9.8, 9.4, 9.8, 10.0, 9.8, 9.8, 9.5, 9.5, 10.1, 10.1, 9.3, 9.7, 9.6, 9.7, 10.8, 12.5, 10.2, 9.6, 10.8, 10.7, 10.7, 9.4, 10.0, 12.9, 9.6, 9.9, 12.8, 12.5, 12.8, 9.2, 10.3, 10.5, 10.9, 10.8, 11.4, 11.3, 10.8, 10.5, 11.9, 9.4, 9.6, 9.7, 14.0, 9.8, 9.8, 10.3, 10.7, 11.0, 10.7, 12.7, 11.1, 10.9, 11.1, 9.9, 9.9, 9.4, 9.3, 11.7, 11.7, 11.2, 10.0, 12.1, 10.3, 10.9, 9.4, 10.6, 9.8, 9.8, 9.9, 9.8, 9.8, 9.5, 9.5, 9.7, 10.9, 10.9, 11.7, 10.9, 11.3, 10.6, 11.2, 9.5, 11.5, 10.4, 9.7, 9.5, 9.7, 11.3, 11.2, 11.2, 10.9, 11.8, 10.6, 10.0, 11.1, 11.8, 11.8, 10.9, 11.8, 10.0, 9.5, 9.9, 11.4, 12.0, 9.5, 10.0, 10.5, 10.4, 12.1, 11.2, 9.3, 10.1, 9.7, 9.3, 9.7, 9.8, 10.7, 12.5, 10.7, 12.5, 11.0, 11.8, 10.8, 10.8, 10.8, 10.8, 9.5, 11.0, 11.5, 10.8, 11.5, 13.2, 10.9, 12.2, 12.2, 11.5, 11.9, 11.0, 10.1, 11.0, 11.8, 10.5, 11.0, 11.8, 10.1, 11.2, 11.0, 10.2, 9.2, 11.2, 12.0, 10.5, 9.8, 9.5, 9.8, 10.5, 11.8, 11.8, 10.4, 12.9, 11.4, 12.4, 12.5, 10.0, 9.7, 12.1, 11.1, 12.0, 12.4, 11.9, 11.9, 11.9, 12.4, 11.2, 12.1, 12.2, 10.4, 11.3, 11.1, 11.3, 10.0, 11.1, 9.3, 9.5, 11.2, 11.1, 11.0, 11.9, 9.2, 12.2, 10.2, 10.9, 10.9, 11.6, 10.7, 12.1, 9.4, 9.4, 9.1, 11.3, 10.4, 10.5, 10.0, 12.9, 10.5, 10.4, 11.3, 11.4, 9.4, 9.4, 10.9, 9.4, 9.4, 9.4, 9.4, 9.4, 10.1, 12.8, 12.8, 9.1, 12.9, 11.5, 10.6, 11.7, 12.8, 10.3, 12.8, 11.7, 11.7, 12.0, 10.9, 12.3, 10.4, 10.0, 10.0, 11.2, 11.4, 12.6, 12.7, 12.7, 10.4, 11.9, 11.9, 10.5, 12.3, 10.5, 10.4, 12.6, 11.6, 10.1, 10.5, 11.5, 11.0, 9.6, 10.4, 9.7, 10.6, 12.5, 9.2, 12.6, 11.1, 10.2, 9.8, 11.1, 10.9, 12.2, 11.4, 10.7, 10.4, 10.9, 10.8, 10.4, 9.2, 12.9, 12.7, 9.1, 9.1, 12.1, 9.1, 11.6, 12.1, 9.9, 12.5, 11.4, 11.8, 11.8, 10.2, 12.5, 10.9, 10.9, 10.8, 11.1, 9.2, 9.5, 10.7, 9.2, 10.2, 11.4, 11.0, 11.0, 12.3, 11.8, 12.3, 9.5, 12.0, 9.5, 9.6, 11.6, 11.2, 9.9, 9.9, 11.8, 11.4, 11.5, 12.0, 10.8, 10.5, 10.8, 9.4, 12.5, 9.4, 12.4, 12.0, 11.2, 12.0, 12.4, 12.8, 12.3, 11.7, 9.5, 10.8, 10.0, 12.3, 11.0, 9.5, 13.6, 11.3, 11.3, 11.3, 13.3, 12.9, 13.1, 12.3, 12.3, 11.2, 11.5, 11.3, 13.5, 11.5, 10.0, 10.5, 10.4, 9.5, 13.6, 11.2, 11.8, 11.9, 11.4, 11.4, 9.1, 9.5, 9.5, 11.0, 11.4, 10.0, 10.1, 10.4, 9.8, 11.8, 11.6, 12.0, 12.8, 12.5, 9.8, 11.1, 11.4, 9.8, 11.8, 12.9, 10.6, 10.8, 11.1, 10.2, 11.8, 10.0, 10.0, 9.4, 10.2, 12.4, 12.0, 11.5, 10.5, 10.8, 12.3, 9.5, 9.5, 11.5, 11.2, 12.7, 11.4, 11.0, 11.0, 11.4, 10.5, 9.3, 10.9, 11.9, 12.2, 11.9, 10.9, 9.6, 12.5, 10.8, 12.4, 10.8, 9.5, 9.5, 9.5, 9.8, 10.9, 9.5, 9.8, 11.2, 11.7, 9.4, 11.0, 11.0, 11.0, 10.0, 11.0, 11.2, 10.4, 9.3, 10.4, 10.5, 10.4, 11.3, 9.5, 12.0, 10.6, 10.9, 11.5, 11.5, 9.6, 12.0, 10.3, 9.4, 9.2, 9.6, 13.6, 9.5, 11.8, 10.8, 9.5, 9.3, 12.8, 11.5, 9.4, 12.8, 9.6, 11.8, 9.3, 9.8, 12.2, 9.5, 10.3, 10.5, 10.0, 10.5, 11.1, 10.9, 10.9, 9.8, 9.8, 9.5, 10.9, 11.0, 9.2, 11.0, 11.3, 11.3, 9.3, 11.2, 9.8, 9.6, 11.8, 10.3, 10.3, 11.4, 9.5, 14.0, 14.0, 11.7, 11.2, 9.3, 11.2, 9.5, 12.0, 9.7, 9.5, 11.5, 10.4, 10.4, 10.9, 10.2, 10.9, 10.5, 12.4, 13.0, 10.2, 10.2, 11.0, 10.9, 12.4, 9.7, 10.9, 9.5, 9.5, 12.1, 12.2, 10.9, 12.5, 11.7, 11.2, 11.2, 9.2, 9.8, 10.1, 11.1, 10.1, 9.2, 9.8, 12.8, 10.5, 10.1, 10.1, 9.8, 12.5, 11.9, 9.8, 9.1, 10.1, 12.5, 11.4, 11.0, 10.6, 10.6, 10.6, 10.6, 9.3, 9.8, 9.8, 9.2, 9.7, 9.6, 10.0, 12.6, 9.5, 9.5, 9.5, 10.5, 10.5, 10.5, 10.4, 10.5, 11.0, 10.2, 11.4, 9.5, 9.5, 10.8, 10.0, 11.8, 10.3, 10.3, 10.0, 10.1, 10.1, 11.1, 9.5, 10.03333333, 10.9, 10.1, 10.03333333, 9.8, 11.8, 9.5, 9.8, 10.5, 9.8, 10.4, 9.2, 11.6, 9.2, 9.3, 9.8, 9.9, 10.0, 12.2, 9.9, 10.8, 10.8, 9.6, 9.9, 9.9, 9.5, 9.2, 9.6, 9.6, 10.3, 9.7, 12.5, 11.0, 9.8, 10.2, 9.2, 9.55, 9.55, 9.9, 10.2, 11.1, 9.9, 9.9, 11.9, 10.0, 10.7, 11.3, 10.9, 10.7, 12.4, 10.7, 11.9, 10.6, 10.9, 10.1, 9.6, 9.4, 9.6, 12.1, 9.8, 9.9, 9.8, 9.4, 11.4, 11.0, 9.6, 9.6, 12.1, 11.2, 11.0, 11.3, 10.4, 9.9, 11.7, 10.1, 9.0, 9.0, 8.5, 11.1, 10.3, 11.06666667, 11.3, 9.566666667, 9.8, 11.7, 11.1, 9.6, 9.8, 9.7, 9.7, 11.3, 11.3, 11.0, 11.6, 9.0, 10.9, 10.9, 10.55, 9.0, 10.5, 11.9, 10.4, 10.0, 10.4, 10.8, 9.7, 9.7, 10.0, 11.0, 10.0, 9.7, 9.7, 12.6, 11.1, 11.0, 8.8, 13.56666667, 8.8, 13.6, 10.2, 10.6, 10.1, 10.6, 10.3, 10.7, 10.9, 9.7, 10.3, 10.6, 11.4, 10.8, 12.4, 11.4, 11.95, 9.7, 10.0, 10.6, 9.7, 11.5, 10.8, 11.5, 9.6, 9.4, 9.8, 11.0, 11.4, 9.95, 10.8, 11.4, 10.6, 11.1, 9.7, 9.8, 10.4, 10.5, 9.233333333, 9.25, 10.6, 10.3, 10.5, 10.2, 10.3, 9.05, 10.6, 10.4, 10.0, 9.7, 9.6, 10.8, 10.1, 10.2, 11.3, 10.2, 9.9, 9.0, 11.7, 9.7, 10.3, 10.2, 12.0, 9.9, 11.6, 10.9, 10.75, 10.4, 11.2, 10.1, 10.2, 12.1, 10.4, 11.4, 9.5, 9.4, 11.3, 9.4, 11.0, 10.55, 9.9, 11.0, 9.5, 9.9, 9.9, 9.9, 10.1, 10.1, 10.1, 10.9, 11.2, 10.1, 9.2, 11.5, 12.4, 11.1, 9.5, 12.5, 10.5, 11.8, 10.8, 11.9, 11.3, 11.3, 11.9, 11.3, 11.9, 9.8, 11.6, 11.5, 11.4, 10.9, 12.8, 9.2, 11.6, 11.6, 11.0, 9.5, 10.5, 11.2, 11.0, 10.2, 11.0], \"yaxis\": \"y\"}], {\"coloraxis\": {\"colorbar\": {\"title\": {\"text\": \"quality\"}}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"height\": 800, \"legend\": {\"itemsizing\": \"constant\", \"tracegroupgap\": 0}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"text\": \"quality vs alcohol (0.44 corr)\"}, \"width\": 800, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"quality\"}}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"alcohol\"}}}, {\"responsive\": true} ).then(function(){ var gd = document.getElementById('9fe7e498-9dd8-4f23-b6dc-b2f404ecb8f4'); var x = new MutationObserver(function (mutations, observer) {{ var display = window.getComputedStyle(gd).display; if (!display || display === 'none') {{ console.log([gd, 'removed!']); Plotly.purge(gd); observer.disconnect(); }} }}); // Listen for the removal of the full notebook cells var notebookContainer = gd.closest('#notebook-container'); if (notebookContainer) {{ x.observe(notebookContainer, {childList: true}); }} // Listen for the clearing of the current output cell var outputEl = gd.closest('.output'); if (outputEl) {{ x.observe(outputEl, {childList: true}); }} }) }; ### 4.5.2 Plotly with IpyWidgets def my_plot ( x = df . columns , y = df . columns , color = df . columns , size = df . columns ): corr = df . corr () pearson = corr [ x ][ y ] fig = px . scatter ( df , x = x , y = y , color = color , size = size , title = ' {} vs {} ( {:.2f} corr)' . format ( x , y , pearson ), width = 800 , height = 800 ) fig . show () interact ( my_plot ) interactive(children=(Dropdown(description='x', options=('type', 'fixed acidity', 'volatile acidity', 'citric \u2026","title":"5.1 Classes, Instances, Methods, and Attribtues"},{"location":"S7_Numpy/","text":"Technology Fundamentals Course 2, Session 2: Numpy and Debugging \u00b6 Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assitants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu Today, we will jump into the Numpy package. numpy : Numerical Python \u00b6 Numpy is short for \"Numerical Python\", and contains tools for efficient manipulation of arrays of data. If you have used other computational tools like IDL or MatLab, Numpy should feel very familiar. Import Libraries \u00b6 # for numpy section import numpy as np np . random . seed ( 42 ) # for debugging section import random from contextlib import contextmanager import sys , os @contextmanager def suppress_stdout (): with open ( os . devnull , \"w\" ) as devnull : old_stdout = sys . stdout sys . stdout = devnull try : yield finally : sys . stdout = old_stdout 2.1 NumPy Arrays \u00b6 2.1.1 Creating NumPy Arrays \u00b6 When we worked with lists, we saw that we could fill them with all sorts of datatypes. NumPy arrays are necessarily of one datatype: # these will all be ints np . array ([ 1 , 2 , 3 , 6 , 5 , 4 ]) array([1, 2, 3, 6, 5, 4]) # these will all be floats np . array ([ 1 , 2 , 3.14 , 6 , 5 , 4 ]) array([1. , 2. , 3.14, 6. , 5. , 4. ]) We can check the data types in the standard way: arr = np . array ([ 1 , 2 , 3 , 6 , 5 , 4 ]) for i in arr : print ( type ( i )) <class 'numpy.int64'> <class 'numpy.int64'> <class 'numpy.int64'> <class 'numpy.int64'> <class 'numpy.int64'> <class 'numpy.int64'> We see that all types are upcast to the most complext object in the array. For instance, because 3.14 is a float, all the other numbers in the array will be a float: for i in np . array ([ 1 , 2 , 3.14 , 6 , 5 , 4 ]): print ( type ( i )) <class 'numpy.float64'> <class 'numpy.float64'> <class 'numpy.float64'> <class 'numpy.float64'> <class 'numpy.float64'> <class 'numpy.float64'> We can also specify the datatypes in the array: np . array ([ 1 , 2 , 3.14 , 6 , 5 , 4 ], dtype = 'float32' ) array([1. , 2. , 3.14, 6. , 5. , 4. ], dtype=float32) 2.1.1.1 Exercise: Specify datatype \u00b6 Create an array of 5 numbers whose datatypes are 16 bit integers. Make one of the numbers not a whole number. What happens to the number when it is stored in the 16 bit integer array? # Cell for Ex 1 2.1.2 Creating Arrays from NumPy Methods \u00b6 # create an array of 10 zeros # how can we specify the datatype? np . zeros ( 10 ) array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]) # create an array of 10 1's np . ones ( 10 ) array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]) # fill an array of the following dimensions # with value 42 np . full (( 2 , 3 ), 42 ) array([[42, 42, 42], [42, 42, 42]]) # arange from start (inc) to stop (exc) # integers with step size np . arange ( 1 , 10 , 2 ) array([1, 3, 5, 7, 9]) # create an array of numbers that divides # the space between start and stop (inc, inc) # with X equally spaced intervals np . linspace ( 0 , 10 , 5 ) array([ 0. , 2.5, 5. , 7.5, 10. ]) # create an array of values drawn from a # uniform distribution np . random . random ( 5 ) array([0.37454012, 0.95071431, 0.73199394, 0.59865848, 0.15601864]) # create an array of values from a normal distribution np . random . normal ( loc = 0 , scale = 1 , size = ( 5 , 5 )) array([[ 0.61764085, 1.2170708 , 0.22628827, 0.84740143, 0.17483301], [-1.21685489, 1.04934739, 1.32510566, 0.73450106, -0.95449726], [-0.75117942, -1.13042805, 0.76997736, 1.26838952, 0.42448624], [ 0.94053558, -0.86764109, 0.14586185, -1.36987106, -0.77178075], [ 0.87867355, -0.23959451, 1.20938197, 0.53796 , 2.73442216]]) # create an array of random integers between 5 and 10 with shape 2x2 np . random . randint ( 5 , 11 , ( 2 , 2 )) array([[5, 9], [8, 9]]) 2.1.3 Exercise: Creating Arrays \u00b6 a. Create a 5x5 array of ones with datatype int16 # Cell for Ex 3.1.3 a b. Create an array of 10 numbers drawn from a uniform distribution between 0 and 1 # Cell for Ex 3.1.3 b c. Create an array of 10 numbers drawn from a normal distribution centered at 80 with a standard deviation of 5 # Cell for Ex 3.1.3 c d. Create an array of 10 intergers drawn from a uniform distribution between 5 and 10 inclusive # Cell for Ex 3.1.3 d 2.2 NumPy Array Attributes \u00b6 Common array attributes are shape , size , nbytes , and itemsize my_arr = np . random . randint ( low = 5 , high = 10 , size = ( 5 , 5 )) print ( my_arr ) [[7 8 7 5 5] [8 8 9 9 7] [8 5 9 9 5] [9 7 8 5 8] [9 9 5 7 6]] my_arr . shape (5, 5) my_arr . dtype dtype('int64') my_arr . size 25 my_arr . nbytes 200 my_arr . itemsize 8 2.2.1 Exercise: Conditional Check on Array Attributes \u00b6 write a conditional that checks that the total number of bytes of the array object my_arr divided by the size of each item (in bytes) is equal to the number of items in the array ( hint: we covered the attributes above ) # Cell for exercise 3.2.1 True 2.3 NumPy Array Slicing, Copying, Setting \u00b6 Array slicing operates much the same way as with python lists my_arr array([[7, 8, 7, 5, 5], [8, 8, 9, 9, 7], [8, 5, 9, 9, 5], [9, 7, 8, 5, 8], [9, 9, 5, 7, 6]]) # grab the first row my_arr [ 0 ] array([7, 8, 7, 5, 5]) # grab the first element of the first row # instead of this print ( my_arr [ 0 ][ 0 ]) # we do this print ( my_arr [ 0 , 0 ]) 9 9 We can time these... %% timeit my_arr [ 0 ][ 0 ] The slowest run took 38.40 times longer than the fastest. This could mean that an intermediate result is being cached. 1000000 loops, best of 5: 381 ns per loop %% timeit my_arr [ 0 , 0 ] The slowest run took 60.67 times longer than the fastest. This could mean that an intermediate result is being cached. 10000000 loops, best of 5: 170 ns per loop We can use the same slicing notation as with lists my_arr[start:stop:step] for n-dimensional arrays my_arr[1-start:1-stop:1-step, 2-start:2-stop:2-step, ... n-start:n-stop:n-step] # with arrays, we simply separate each dimension with a comma my_arr [: 2 , : 2 ] array([[7, 8], [8, 8]]) Slices are views not copies. This means we can set slices of arrays to new values, and the original object will change: my_arr [: 2 , : 2 ] = 0 my_arr array([[0, 0, 7, 5, 5], [0, 0, 9, 9, 7], [8, 5, 9, 9, 5], [9, 7, 8, 5, 8], [9, 9, 5, 7, 6]]) my_arr [ - 2 :, - 2 :] = 1 my_arr array([[0, 0, 7, 5, 5], [0, 0, 9, 9, 7], [8, 5, 9, 9, 5], [9, 7, 8, 1, 1], [9, 9, 5, 1, 1]]) Step through an array slice # remember that we can use steps in slicing my_arr [:, :: 2 ] # the last number after :: is the step size array([[0, 7, 5], [0, 9, 7], [8, 9, 5], [9, 8, 1], [9, 5, 1]]) We can use negative step sizes the way we do with lists. A negative step size reverses the order of start and stop, so it is a convenient way to reverse the order of one or more dimensions of an array # reverse the rows my_arr [:: - 1 ] array([[9, 9, 5, 1, 1], [9, 7, 8, 1, 1], [8, 5, 9, 9, 5], [0, 0, 9, 9, 7], [0, 0, 7, 5, 5]]) # reverse the columns my_arr [:, :: - 1 ] array([[5, 5, 7, 0, 0], [7, 9, 9, 0, 0], [5, 9, 9, 5, 8], [1, 1, 8, 7, 9], [1, 1, 5, 9, 9]]) Sometimes we want to create a copy of an array, despite the default slicing behavior. We can do this with the .copy() method new_arr = my_arr . copy () new_arr [:,:] = 0 print ( my_arr ) [[0 0 7 5 5] [0 0 9 9 7] [8 5 9 9 5] [9 7 8 1 1] [9 9 5 1 1]] 2.3.1 Exercise: Array Setting and Slicing \u00b6 set all the even columns of my_arr to 0 and all the odd columns to 1 (interpret the first column to be 1 and the last to be 5, i.e. don't index at 0 when thinking of each column as even/odd!) Example Output: array([[0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0]]) # Cell for ex 3.3.1 array([[0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0]]) 2.4 NumPy Array Reshaping, Concatenation, and Splitting \u00b6 reshaping is going to be a common task for us: arr = np . arange ( 9 ) arr array([0, 1, 2, 3, 4, 5, 6, 7, 8]) # reshape into a 3x3 array arr . reshape ( 3 , 3 ) # rows then columns array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) The reshaped dimensions have to be evenly divisible into the total number of elements: -1 will infer the proper dimension based on the other dimensions provided and the total number of elements # arr.reshape(4,2) # throws and error arr = np . arange ( 12 ) arr . reshape ( 4 , 3 ) array([[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8], [ 9, 10, 11]]) A common manipulation in numpy is to convert a 1 dimensional array into a 2 dimensional array. You will see this frequently when working with test/train datasets in machine learning. arr = np . arange ( 9 ) # reshape into 2 dimensions arr . reshape ( - 1 , 1 ) array([[0], [1], [2], [3], [4], [5], [6], [7], [8]]) # back to one dimension arr . reshape ( 9 ) array([0, 1, 2, 3, 4, 5, 6, 7, 8]) We can also concatenate arrays arr1 = np . array ([ 1 , 2 , 3 ]) arr2 = np . array ([ 4 , 5 , 6 ]) print ( arr1 , arr2 ) [1 2 3] [4 5 6] # now a single array np . concatenate (( arr1 , arr2 )) array([1, 2, 3, 4, 5, 6]) vstack or vertical stack will place the two arrays on top of eachother: np . vstack (( arr1 , arr2 )) array([[1, 2, 3], [4, 5, 6]]) hstack will place them side by side np . hstack (( arr1 , arr2 )) array([1, 2, 3, 4, 5, 6]) arr1 = np . array ([[ 1 , 2 , 3 ],[ 7 , 8 , 9 ]]) arr2 = np . array ([ 4 , 5 , 6 ]) print ( arr1 ) print ( arr2 ) print ( arr1 . shape ) [[1 2 3] [7 8 9]] [4 5 6] (2, 3) np . vstack (( arr1 , arr2 )) array([[1, 2, 3], [7, 8, 9], [4, 5, 6]]) Lastly, we can also split arrays. We give the indices where the split should be performed arr = np . random . randint ( 5 , 11 , ( 10 , 10 )) arr array([[ 5, 6, 10, 6, 7, 10, 6, 10, 6, 7], [ 6, 6, 6, 5, 5, 5, 7, 10, 9, 6], [ 6, 7, 6, 5, 9, 8, 6, 5, 8, 9], [ 8, 5, 10, 10, 8, 7, 8, 6, 6, 10], [ 7, 5, 6, 10, 9, 10, 6, 6, 10, 5], [ 8, 6, 10, 10, 7, 8, 9, 5, 9, 8], [ 8, 8, 9, 8, 10, 9, 8, 10, 7, 8], [ 9, 6, 8, 6, 10, 7, 5, 7, 8, 6], [ 6, 9, 6, 9, 10, 5, 8, 9, 5, 6], [ 6, 5, 6, 10, 10, 5, 9, 9, 5, 9]]) a , b = np . split ( arr , [ 5 ]) print ( a ) print ( b ) [[ 8 9 7 7 10 8 6 6 9 10] [ 5 9 10 8 8 8 8 8 10 10] [ 7 6 8 5 10 5 5 5 7 10] [ 5 8 9 5 7 10 7 5 10 9] [ 5 7 6 8 7 10 5 8 5 10]] [[ 5 6 8 8 10 6 7 5 9 5] [ 5 7 5 6 6 8 10 9 5 5] [ 7 10 6 9 8 6 10 8 7 7] [ 5 10 9 8 6 10 10 7 5 5] [ 8 7 10 9 7 8 8 7 8 7]] np . vsplit ( arr , [ 2 , 4 , 6 , 8 ]) [array([[ 5, 6, 10, 6, 7, 10, 6, 10, 6, 7], [ 6, 6, 6, 5, 5, 5, 7, 10, 9, 6]]), array([[ 6, 7, 6, 5, 9, 8, 6, 5, 8, 9], [ 8, 5, 10, 10, 8, 7, 8, 6, 6, 10]]), array([[ 7, 5, 6, 10, 9, 10, 6, 6, 10, 5], [ 8, 6, 10, 10, 7, 8, 9, 5, 9, 8]]), array([[ 8, 8, 9, 8, 10, 9, 8, 10, 7, 8], [ 9, 6, 8, 6, 10, 7, 5, 7, 8, 6]]), array([[ 6, 9, 6, 9, 10, 5, 8, 9, 5, 6], [ 6, 5, 6, 10, 10, 5, 9, 9, 5, 9]])] np . hsplit ( arr , [ 5 ]) [array([[ 5, 6, 10, 6, 7], [ 6, 6, 6, 5, 5], [ 6, 7, 6, 5, 9], [ 8, 5, 10, 10, 8], [ 7, 5, 6, 10, 9], [ 8, 6, 10, 10, 7], [ 8, 8, 9, 8, 10], [ 9, 6, 8, 6, 10], [ 6, 9, 6, 9, 10], [ 6, 5, 6, 10, 10]]), array([[10, 6, 10, 6, 7], [ 5, 7, 10, 9, 6], [ 8, 6, 5, 8, 9], [ 7, 8, 6, 6, 10], [10, 6, 6, 10, 5], [ 8, 9, 5, 9, 8], [ 9, 8, 10, 7, 8], [ 7, 5, 7, 8, 6], [ 5, 8, 9, 5, 6], [ 5, 9, 9, 5, 9]])] 2.4.1 Exercise: Reshaping and Concatenating \u00b6 We'll practice a few of these methods we've learned. make arr2 match the shape of arr1 using reshape stack arr1 on top of arr2 using vstack and call this new array arr replace all the even columns of arr with zeros return the sum of arr using arr.sum() starting code: np.random.seed(42) arr1 = np.random.randint(5, 11, (5,10)) arr2 = np.random.randint(5, 11, (10,5)) expected output: 374 np . random . seed ( 42 ) arr1 = np . random . randint ( 5 , 11 , ( 5 , 10 )) arr2 = np . random . randint ( 5 , 11 , ( 10 , 5 )) print ( arr1 , end = ' \\n\\n ' ) print ( arr2 ) [[ 8 9 7 9 9 6 7 7 7 9] [ 8 7 10 9 6 8 10 10 6 8] [ 9 5 8 6 10 9 8 5 5 7] [ 7 6 8 8 10 10 10 7 8 8] [ 5 7 9 7 9 5 6 8 5 8]] [[10 6 6 5 6] [ 9 6 8 8 8] [ 8 9 7 10 5] [ 8 6 8 6 10] [10 10 6 8 10] [ 9 6 6 8 6] [ 6 10 8 10 10] [ 8 5 10 9 9] [ 6 9 6 5 8] [ 8 8 9 5 9]] # cell for Ex 3.4.1 374 2.5 Additional Exercises \u00b6 2.5.1 Exercise: boolean Array \u00b6 Create a 3x3 array of all True's (booleans) # cell for 3.5.1 2.5.2 Exercise: Index on Conditional \u00b6 extract all numbers divisible by 3 arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) # cell for 3.5.2 arr = np . array ([ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ]) 2.5.3 np.where \u00b6 There is a nifty tool, np.where() . The syntax works like np.where(<where this condition is true> , <return elements from this array>, <otherwise return elements from this aray>) # Example a = np . arange ( 10 ) np . where ( a < 5 , a , a * 10 ) array([ 0, 1, 2, 3, 4, 50, 60, 70, 80, 90]) 2.5.4 np.argwhere \u00b6 A similar but slightly different tool is np.argwhere which will return the indices of the array where the conditional is true # Example np . argwhere ( a < 5 ) array([[0], [1], [2], [3], [4]]) 2.5.5 Exercise: Edit a Copy not a View \u00b6 replace all odd numbers in arr with -1 without changing arr (return a new array using np.where ) # cell for 3.5.5 arr = np . array ([ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ]) 2.5.6 Exercise: Read NumPy Documentation \u00b6 create the following array without hard coading (i.e. don't write any of the values in your coad) a = np.array([1,2,3])` # desired output: #> array([1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]) Hints: repeat tile # cell for 3.5.6 a = np . array ([ 1 , 2 , 3 ]) # desired output: #> array([1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]) 2.5.7 Exercise: More Slicing \u00b6 swap columns 2 and 3 in arr # cell for 3.5.7 arr = np . arange ( 9 ) . reshape ( 3 , 3 ) 2.4 Debugging \u00b6 It\u2019s always important to check that our code is \u201cplugged in\u201d, i.e., that we\u2019re actually exercising the problem that we think we are. Every programmer has spent hours chasing a bug, only to realize that they were actually calling their code on the wrong data set or with the wrong configuration parameters, or are using the wrong version of the software entirely. Mistakes like these are particularly likely to happen when we\u2019re tired, frustrated, and up against a deadline, which is one of the reasons late-night (or overnight) coding sessions are almost never worthwhile. - swcarpentry We'll now dedicated some discussion and practice to debugging python. This easy to overlook topic can save us oodles of time down the road. It's worth the investment. Borrowing from software carpentry, we'll highlight the key guidlines to debugging code: Know what it's supposed to do Make it fail every time Make it fail fast Change one thing at a time, for a reason Keep track of what you've done Be humble 2.4.0 Before We Get Started \u00b6 We will refer to writing tests, and specifically writing unit tests in this module. Don't worry too much about the specifics of unit tests for now. We will have a dedicated module for that. What we do need to talk about is a specific built in function in python called the assert function 2.4.0.1 the assert function \u00b6 Let's take a simple example of the assert function. If I wanted to test that the sume of two numbers is correct assert sum ([ 2 , 5 ]) == 7 , \"should be 7\" Nothing is sent to the print out because the condition is satisfied. If we run, however: assert sum([2, 4]) == 7, \"should be 7\" we get an error message: --------------------------------------------------------------------------- AssertionError Traceback (most recent call last) <ipython-input-3-d5724b127818> in <module>() ----> 1 assert sum([2, 4]) == 7, \"should be 7\" AssertionError: should be 7 Now to make this a test, you will want to wrap it in a function def test_sum (): assert sum ([ 1 , 2 , 3 ]) == 6 , \"Should be 6\" test_sum () print ( \"Everything passed\" ) Everything passed And if we include a test that does not pass: def test_sum(): assert sum([3, 3]) == 6, \"Should be 6\" def test_my_broken_func(): assert sum([1, 2]) == 5, \"Should be 5\" test_sum() test_my_broken_func() print(\"Everything passed\") Here our test fails, because the sum of 1 and 2 is 3 and not 5. We get a traceback that tells us the source of the error: --------------------------------------------------------------------------- AssertionError Traceback (most recent call last) <ipython-input-13-8a552fbf52bd> in <module>() 6 7 test_sum() ----> 8 test_my_broken_func() 9 print(\"Everything passed\") <ipython-input-13-8a552fbf52bd> in test_my_broken_func() 3 4 def test_my_broken_func(): ----> 5 assert sum([1, 2]) == 5, \"Should be 5\" 6 7 test_sum() AssertionError: Should be 5 We will worry about the intricacies of what to test for and when to test at a later time. For now, we just need to understand the assert function so we can practice debugging and writing short tests for the problems that we fix today! Ok LETS GO 2.4.1 Know what it's supposed to do \u00b6 This may seem obvious, but it's easy to recognize that an error is happening without knowing what the correct answer is. This makes unit tests especially handy, they force us to know the expected outcome at least for intended use cases. Here are some tips in regard to knowing the expected outcome: test with simplified data test a simplified case compare to a base model visualize 2.4.2 Make it fail every time \u00b6 It can be extraordinarily difficult to debug code that is precidated on some stochastic process. remove stochasticity when possible . For instance, seed your random value generators ( random.seed() , np.random.seed() ) 2.4.3 Make it fail fast \u00b6 a corrolary to this, is narrow down the source of the error, and again this is why we write unit tests before integration tests. If it takes 20 minutes to train your neural network, and the error occurs during some post processing plotting of your loss history, obviously don't retrain the NN each time you iterate over the failure. Along the same lines, if you're debugging something in a for loop, run the loop once, or run the indented code outside of the loop with a placeholder for the iterated variable, in order to test and debug the code. 2.4.4 Change one thing at a time, for a reason \u00b6 Not much nuance here. Just like it's a good idea for us to change one aspect of our machine learning models and track the performance rather than to change multiple things at once, it's better to change one feature when debugging at a time. Changing multiple things at once creates interaction effects that can complicate the whole problem! 2.4.5 Keep track of what you've done \u00b6 This is where git/GitHub come in handy. It's so incredibly easy to forget what you've done, and, a weeks or days later from the time you first encountered the bug, forget whether you fixed it, did a temp fix, and/or what you did to fix it. my tip: if you're working in a jupyter notebook, something I do is write at the top of my notebook my TO DO items. I then strike through items I complete, and update my notes for the next time I work on the code. Similarly, I name my notebooks to reflect and categorize what they are about. Primarily I have test_<thing>.ipynb and prototype_<thingy>.ipynb 2.4.6 Be humble \u00b6 Lastly, ask for help. Take breaks. A week of hard work can sometimes save you an hour of thought. 2.4.7 Exercise: Debug A Short Code Block \u00b6 Your friend is writing a function to calculate BMI. They are concerned that seemingly all the patient's values have the same BMI, despite having different heights and weights. Determine the bugs in the code then write a unit test for the function calculate_bmi . # [weight (kg), height (m)] patients = [[ 70 , 1.8 ], [ 80 , 1.9 ], [ 150 , 1.7 ]] def calculate_bmi ( weight , height ): # kg / m ** 2 = bmi return weight / ( height ** 2 ) for patient in patients : weight , height = patients [ 0 ] bmi = calculate_bmi ( height , weight ) print ( \"Patient's BMI is: %f \" % bmi ) Patient's BMI is: 0.000367 Patient's BMI is: 0.000367 Patient's BMI is: 0.000367 # [weight (kg), height (m)] patients = [[ 70 , 1.8 ], [ 80 , 1.9 ], [ 150 , 1.7 ]] def calculate_bmi ( weight , height ): # kg / m ** 2 = bmi return weight / ( height ** 2 ) for patient in patients : weight , height = patient ### not properly referencing iterated variable bmi = calculate_bmi ( weight , height ) ### should be swapped print ( \"Patient's BMI is: %f \" % bmi ) Patient's BMI is: 21.604938 Patient's BMI is: 22.160665 Patient's BMI is: 51.903114 def test_calculate_bmi (): patients = [[ 70 , 1.8 ], [ 80 , 1.9 ], [ 150 , 1.7 ]] bmis = [ 21.6 , 22.16 , 51.9 ] for patient , bmi_ in zip ( patients , bmis ): weight , height = patient ### not properly referencing iterated variable bmi = calculate_bmi ( weight , height ) ### should be swapped assert np . abs ( bmi - bmi_ ) < 0.1 , \"fail calc for {} \" . format ( patient ) test_calculate_bmi () print ( \"success!\" ) success! 2.4.8 Exercise: Debug a Class Method \u00b6 Your friend is developing a new pokemon game. They are excited to release but are running into some trouble! class Pokeball : def __init__ ( self , contains = None , type_name = \"poke ball\" ): self . contains = contains self . type_name = type_name self . catch_rate = 0.50 # note this attribute is not accessible upon init # the method catch, will update self.contains, if a catch is successful # it will also use self.catch_rate to set the performance of the catch def catch ( self , pokemon ): if self . contains == None : if random . random () < self . catch_rate : self . contains = pokemon print ( f \" { pokemon } captured!\" ) else : print ( f \" { pokemon } escaped!\" ) pass else : print ( \"pokeball is not empty!\" ) def release ( self ): if self . contains == None : print ( \"Pokeball is already empty\" ) else : print ( self . contains , \"has been released\" ) self . contains = None class Pokemon (): def __init__ ( self , name , weight , speed , type_ ): self . name = name self . weight = weight self . speed = speed self . type_ = type_ class FastBall ( Pokeball ): def __init__ ( self , contains = None , type_name = \"Fastball\" ): Pokeball . __init__ ( self , contains , type_name ) self . catch_rate = 0.6 def catch_fast ( self , pokemon ): if pokemon . speed > 100 : if self . contains == None : self . contains = pokemon print ( pokemon . name , \"has been captured\" ) else : print ( \"Pokeball is not empty\" ) else : self . catch ( pokemon ) They're concerned that the object FastBall doesn't return the pokemon's name when executing print(fast.contains) when they know the pokeball contains a pokemon. Help them find the bug, then write the following unit tests: showing that the pokeball updates properly with the name of the pokemon after it makes a capture of a pokemon with a speed > 100 showing that the catch_rate of 0.6 is resulting in a 60% catch rate for pokemon with speeds < 100 # Your friend shows you this code fast = FastBall () mewtwo = Pokemon ( name = 'Mewtwo' , weight = 18 , speed = 110 , type_ = 'Psychic' ) print ( fast . contains ) fast . catch_fast ( mewtwo ) # this is the line they are concerned about # why does this not return MewTwo? print ( fast . contains ) fast . catch_fast ( mewtwo ) None Mewtwo has been captured <__main__.Pokemon object at 0x7fd4bfe612d0> Pokeball is not empty Part 2 (Optional): Use a Test Runner \u00b6 Create the following files: pokemon.py test_pokemon.py paste the following into pokemon.py : import random import numpy as np class Pokeball: def __init__(self, contains=None, type_name=\"poke ball\"): self.contains = contains self.type_name = type_name self.catch_rate = 0.50 # note this attribute is not accessible upon init # the method catch, will update self.contains, if a catch is successful # it will also use self.catch_rate to set the performance of the catch def catch(self, pokemon): if self.contains == None: if random.random() < self.catch_rate: self.contains = pokemon print(f\"{pokemon} captured!\") else: print(f\"{pokemon} escaped!\") pass else: print(\"pokeball is not empty!\") def release(self): if self.contains == None: print(\"Pokeball is already empty\") else: print(self.contains, \"has been released\") self.contains = None class Pokemon(): def __init__(self, name, weight, speed, type_): self.name = name self.weight = weight self.speed = speed self.type_ = type_ class FastBall(Pokeball): def __init__(self, contains=None, type_name=\"Fastball\"): Pokeball.__init__(self, contains, type_name) self.catch_rate = 0.6 def catch_fast(self, pokemon): if pokemon.speed > 100: if self.contains == None: self.contains = pokemon print(pokemon.name, \"has been captured\") else: print(\"Pokeball is not empty\") else: self.catch(pokemon) in test_pokemon.py paste any unit tests you've written along with the imports at the top of the file (be sure to import any other libraries you used in your unit tests as well) from pokemon import * import random import numpy as np ### YOUR UNIT TESTS HERE ### def test_<name_of_your_test>(): # .... assert <your assert statement> make sure pokemon.py and test_pokemon.py are in the same directory then run the command pytest from the command line. You should get a readout like the following ================================================= test session starts ================================================== platform linux -- Python 3.8.1, pytest-6.2.1, py-1.10.0, pluggy-0.13.1 rootdir: /mnt/c/Users/wesley/Documents/apps/temp_c3_l2 plugins: dash-1.20.0, anyio-2.2.0 collected 1 item test_pokemon.py . [100%] ================================================== 1 passed in 0.06s ===================================================","title":"NumPy"},{"location":"S7_Numpy/#technology-fundamentals-course-2-session-2-numpy-and-debugging","text":"Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assitants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu Today, we will jump into the Numpy package.","title":"Technology Fundamentals Course 2, Session 2: Numpy and Debugging"},{"location":"S7_Numpy/#numpy-numerical-python","text":"Numpy is short for \"Numerical Python\", and contains tools for efficient manipulation of arrays of data. If you have used other computational tools like IDL or MatLab, Numpy should feel very familiar.","title":"numpy: Numerical Python"},{"location":"S7_Numpy/#import-libraries","text":"# for numpy section import numpy as np np . random . seed ( 42 ) # for debugging section import random from contextlib import contextmanager import sys , os @contextmanager def suppress_stdout (): with open ( os . devnull , \"w\" ) as devnull : old_stdout = sys . stdout sys . stdout = devnull try : yield finally : sys . stdout = old_stdout","title":"Import Libraries"},{"location":"S7_Numpy/#21-numpy-arrays","text":"","title":"2.1 NumPy Arrays"},{"location":"S7_Numpy/#211-creating-numpy-arrays","text":"When we worked with lists, we saw that we could fill them with all sorts of datatypes. NumPy arrays are necessarily of one datatype: # these will all be ints np . array ([ 1 , 2 , 3 , 6 , 5 , 4 ]) array([1, 2, 3, 6, 5, 4]) # these will all be floats np . array ([ 1 , 2 , 3.14 , 6 , 5 , 4 ]) array([1. , 2. , 3.14, 6. , 5. , 4. ]) We can check the data types in the standard way: arr = np . array ([ 1 , 2 , 3 , 6 , 5 , 4 ]) for i in arr : print ( type ( i )) <class 'numpy.int64'> <class 'numpy.int64'> <class 'numpy.int64'> <class 'numpy.int64'> <class 'numpy.int64'> <class 'numpy.int64'> We see that all types are upcast to the most complext object in the array. For instance, because 3.14 is a float, all the other numbers in the array will be a float: for i in np . array ([ 1 , 2 , 3.14 , 6 , 5 , 4 ]): print ( type ( i )) <class 'numpy.float64'> <class 'numpy.float64'> <class 'numpy.float64'> <class 'numpy.float64'> <class 'numpy.float64'> <class 'numpy.float64'> We can also specify the datatypes in the array: np . array ([ 1 , 2 , 3.14 , 6 , 5 , 4 ], dtype = 'float32' ) array([1. , 2. , 3.14, 6. , 5. , 4. ], dtype=float32)","title":"2.1.1 Creating NumPy Arrays"},{"location":"S7_Numpy/#2111-exercise-specify-datatype","text":"Create an array of 5 numbers whose datatypes are 16 bit integers. Make one of the numbers not a whole number. What happens to the number when it is stored in the 16 bit integer array? # Cell for Ex 1","title":"2.1.1.1 Exercise: Specify datatype"},{"location":"S7_Numpy/#212-creating-arrays-from-numpy-methods","text":"# create an array of 10 zeros # how can we specify the datatype? np . zeros ( 10 ) array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]) # create an array of 10 1's np . ones ( 10 ) array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]) # fill an array of the following dimensions # with value 42 np . full (( 2 , 3 ), 42 ) array([[42, 42, 42], [42, 42, 42]]) # arange from start (inc) to stop (exc) # integers with step size np . arange ( 1 , 10 , 2 ) array([1, 3, 5, 7, 9]) # create an array of numbers that divides # the space between start and stop (inc, inc) # with X equally spaced intervals np . linspace ( 0 , 10 , 5 ) array([ 0. , 2.5, 5. , 7.5, 10. ]) # create an array of values drawn from a # uniform distribution np . random . random ( 5 ) array([0.37454012, 0.95071431, 0.73199394, 0.59865848, 0.15601864]) # create an array of values from a normal distribution np . random . normal ( loc = 0 , scale = 1 , size = ( 5 , 5 )) array([[ 0.61764085, 1.2170708 , 0.22628827, 0.84740143, 0.17483301], [-1.21685489, 1.04934739, 1.32510566, 0.73450106, -0.95449726], [-0.75117942, -1.13042805, 0.76997736, 1.26838952, 0.42448624], [ 0.94053558, -0.86764109, 0.14586185, -1.36987106, -0.77178075], [ 0.87867355, -0.23959451, 1.20938197, 0.53796 , 2.73442216]]) # create an array of random integers between 5 and 10 with shape 2x2 np . random . randint ( 5 , 11 , ( 2 , 2 )) array([[5, 9], [8, 9]])","title":"2.1.2 Creating Arrays from NumPy Methods"},{"location":"S7_Numpy/#213-exercise-creating-arrays","text":"a. Create a 5x5 array of ones with datatype int16 # Cell for Ex 3.1.3 a b. Create an array of 10 numbers drawn from a uniform distribution between 0 and 1 # Cell for Ex 3.1.3 b c. Create an array of 10 numbers drawn from a normal distribution centered at 80 with a standard deviation of 5 # Cell for Ex 3.1.3 c d. Create an array of 10 intergers drawn from a uniform distribution between 5 and 10 inclusive # Cell for Ex 3.1.3 d","title":"2.1.3 Exercise: Creating Arrays"},{"location":"S7_Numpy/#22-numpy-array-attributes","text":"Common array attributes are shape , size , nbytes , and itemsize my_arr = np . random . randint ( low = 5 , high = 10 , size = ( 5 , 5 )) print ( my_arr ) [[7 8 7 5 5] [8 8 9 9 7] [8 5 9 9 5] [9 7 8 5 8] [9 9 5 7 6]] my_arr . shape (5, 5) my_arr . dtype dtype('int64') my_arr . size 25 my_arr . nbytes 200 my_arr . itemsize 8","title":"2.2 NumPy Array Attributes"},{"location":"S7_Numpy/#221-exercise-conditional-check-on-array-attributes","text":"write a conditional that checks that the total number of bytes of the array object my_arr divided by the size of each item (in bytes) is equal to the number of items in the array ( hint: we covered the attributes above ) # Cell for exercise 3.2.1 True","title":"2.2.1 Exercise: Conditional Check on Array Attributes"},{"location":"S7_Numpy/#23-numpy-array-slicing-copying-setting","text":"Array slicing operates much the same way as with python lists my_arr array([[7, 8, 7, 5, 5], [8, 8, 9, 9, 7], [8, 5, 9, 9, 5], [9, 7, 8, 5, 8], [9, 9, 5, 7, 6]]) # grab the first row my_arr [ 0 ] array([7, 8, 7, 5, 5]) # grab the first element of the first row # instead of this print ( my_arr [ 0 ][ 0 ]) # we do this print ( my_arr [ 0 , 0 ]) 9 9 We can time these... %% timeit my_arr [ 0 ][ 0 ] The slowest run took 38.40 times longer than the fastest. This could mean that an intermediate result is being cached. 1000000 loops, best of 5: 381 ns per loop %% timeit my_arr [ 0 , 0 ] The slowest run took 60.67 times longer than the fastest. This could mean that an intermediate result is being cached. 10000000 loops, best of 5: 170 ns per loop We can use the same slicing notation as with lists my_arr[start:stop:step] for n-dimensional arrays my_arr[1-start:1-stop:1-step, 2-start:2-stop:2-step, ... n-start:n-stop:n-step] # with arrays, we simply separate each dimension with a comma my_arr [: 2 , : 2 ] array([[7, 8], [8, 8]]) Slices are views not copies. This means we can set slices of arrays to new values, and the original object will change: my_arr [: 2 , : 2 ] = 0 my_arr array([[0, 0, 7, 5, 5], [0, 0, 9, 9, 7], [8, 5, 9, 9, 5], [9, 7, 8, 5, 8], [9, 9, 5, 7, 6]]) my_arr [ - 2 :, - 2 :] = 1 my_arr array([[0, 0, 7, 5, 5], [0, 0, 9, 9, 7], [8, 5, 9, 9, 5], [9, 7, 8, 1, 1], [9, 9, 5, 1, 1]]) Step through an array slice # remember that we can use steps in slicing my_arr [:, :: 2 ] # the last number after :: is the step size array([[0, 7, 5], [0, 9, 7], [8, 9, 5], [9, 8, 1], [9, 5, 1]]) We can use negative step sizes the way we do with lists. A negative step size reverses the order of start and stop, so it is a convenient way to reverse the order of one or more dimensions of an array # reverse the rows my_arr [:: - 1 ] array([[9, 9, 5, 1, 1], [9, 7, 8, 1, 1], [8, 5, 9, 9, 5], [0, 0, 9, 9, 7], [0, 0, 7, 5, 5]]) # reverse the columns my_arr [:, :: - 1 ] array([[5, 5, 7, 0, 0], [7, 9, 9, 0, 0], [5, 9, 9, 5, 8], [1, 1, 8, 7, 9], [1, 1, 5, 9, 9]]) Sometimes we want to create a copy of an array, despite the default slicing behavior. We can do this with the .copy() method new_arr = my_arr . copy () new_arr [:,:] = 0 print ( my_arr ) [[0 0 7 5 5] [0 0 9 9 7] [8 5 9 9 5] [9 7 8 1 1] [9 9 5 1 1]]","title":"2.3 NumPy Array Slicing, Copying, Setting"},{"location":"S7_Numpy/#231-exercise-array-setting-and-slicing","text":"set all the even columns of my_arr to 0 and all the odd columns to 1 (interpret the first column to be 1 and the last to be 5, i.e. don't index at 0 when thinking of each column as even/odd!) Example Output: array([[0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0]]) # Cell for ex 3.3.1 array([[0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0]])","title":"2.3.1 Exercise: Array Setting and Slicing"},{"location":"S7_Numpy/#24-numpy-array-reshaping-concatenation-and-splitting","text":"reshaping is going to be a common task for us: arr = np . arange ( 9 ) arr array([0, 1, 2, 3, 4, 5, 6, 7, 8]) # reshape into a 3x3 array arr . reshape ( 3 , 3 ) # rows then columns array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) The reshaped dimensions have to be evenly divisible into the total number of elements: -1 will infer the proper dimension based on the other dimensions provided and the total number of elements # arr.reshape(4,2) # throws and error arr = np . arange ( 12 ) arr . reshape ( 4 , 3 ) array([[ 0, 1, 2], [ 3, 4, 5], [ 6, 7, 8], [ 9, 10, 11]]) A common manipulation in numpy is to convert a 1 dimensional array into a 2 dimensional array. You will see this frequently when working with test/train datasets in machine learning. arr = np . arange ( 9 ) # reshape into 2 dimensions arr . reshape ( - 1 , 1 ) array([[0], [1], [2], [3], [4], [5], [6], [7], [8]]) # back to one dimension arr . reshape ( 9 ) array([0, 1, 2, 3, 4, 5, 6, 7, 8]) We can also concatenate arrays arr1 = np . array ([ 1 , 2 , 3 ]) arr2 = np . array ([ 4 , 5 , 6 ]) print ( arr1 , arr2 ) [1 2 3] [4 5 6] # now a single array np . concatenate (( arr1 , arr2 )) array([1, 2, 3, 4, 5, 6]) vstack or vertical stack will place the two arrays on top of eachother: np . vstack (( arr1 , arr2 )) array([[1, 2, 3], [4, 5, 6]]) hstack will place them side by side np . hstack (( arr1 , arr2 )) array([1, 2, 3, 4, 5, 6]) arr1 = np . array ([[ 1 , 2 , 3 ],[ 7 , 8 , 9 ]]) arr2 = np . array ([ 4 , 5 , 6 ]) print ( arr1 ) print ( arr2 ) print ( arr1 . shape ) [[1 2 3] [7 8 9]] [4 5 6] (2, 3) np . vstack (( arr1 , arr2 )) array([[1, 2, 3], [7, 8, 9], [4, 5, 6]]) Lastly, we can also split arrays. We give the indices where the split should be performed arr = np . random . randint ( 5 , 11 , ( 10 , 10 )) arr array([[ 5, 6, 10, 6, 7, 10, 6, 10, 6, 7], [ 6, 6, 6, 5, 5, 5, 7, 10, 9, 6], [ 6, 7, 6, 5, 9, 8, 6, 5, 8, 9], [ 8, 5, 10, 10, 8, 7, 8, 6, 6, 10], [ 7, 5, 6, 10, 9, 10, 6, 6, 10, 5], [ 8, 6, 10, 10, 7, 8, 9, 5, 9, 8], [ 8, 8, 9, 8, 10, 9, 8, 10, 7, 8], [ 9, 6, 8, 6, 10, 7, 5, 7, 8, 6], [ 6, 9, 6, 9, 10, 5, 8, 9, 5, 6], [ 6, 5, 6, 10, 10, 5, 9, 9, 5, 9]]) a , b = np . split ( arr , [ 5 ]) print ( a ) print ( b ) [[ 8 9 7 7 10 8 6 6 9 10] [ 5 9 10 8 8 8 8 8 10 10] [ 7 6 8 5 10 5 5 5 7 10] [ 5 8 9 5 7 10 7 5 10 9] [ 5 7 6 8 7 10 5 8 5 10]] [[ 5 6 8 8 10 6 7 5 9 5] [ 5 7 5 6 6 8 10 9 5 5] [ 7 10 6 9 8 6 10 8 7 7] [ 5 10 9 8 6 10 10 7 5 5] [ 8 7 10 9 7 8 8 7 8 7]] np . vsplit ( arr , [ 2 , 4 , 6 , 8 ]) [array([[ 5, 6, 10, 6, 7, 10, 6, 10, 6, 7], [ 6, 6, 6, 5, 5, 5, 7, 10, 9, 6]]), array([[ 6, 7, 6, 5, 9, 8, 6, 5, 8, 9], [ 8, 5, 10, 10, 8, 7, 8, 6, 6, 10]]), array([[ 7, 5, 6, 10, 9, 10, 6, 6, 10, 5], [ 8, 6, 10, 10, 7, 8, 9, 5, 9, 8]]), array([[ 8, 8, 9, 8, 10, 9, 8, 10, 7, 8], [ 9, 6, 8, 6, 10, 7, 5, 7, 8, 6]]), array([[ 6, 9, 6, 9, 10, 5, 8, 9, 5, 6], [ 6, 5, 6, 10, 10, 5, 9, 9, 5, 9]])] np . hsplit ( arr , [ 5 ]) [array([[ 5, 6, 10, 6, 7], [ 6, 6, 6, 5, 5], [ 6, 7, 6, 5, 9], [ 8, 5, 10, 10, 8], [ 7, 5, 6, 10, 9], [ 8, 6, 10, 10, 7], [ 8, 8, 9, 8, 10], [ 9, 6, 8, 6, 10], [ 6, 9, 6, 9, 10], [ 6, 5, 6, 10, 10]]), array([[10, 6, 10, 6, 7], [ 5, 7, 10, 9, 6], [ 8, 6, 5, 8, 9], [ 7, 8, 6, 6, 10], [10, 6, 6, 10, 5], [ 8, 9, 5, 9, 8], [ 9, 8, 10, 7, 8], [ 7, 5, 7, 8, 6], [ 5, 8, 9, 5, 6], [ 5, 9, 9, 5, 9]])]","title":"2.4 NumPy Array Reshaping, Concatenation, and Splitting"},{"location":"S7_Numpy/#241-exercise-reshaping-and-concatenating","text":"We'll practice a few of these methods we've learned. make arr2 match the shape of arr1 using reshape stack arr1 on top of arr2 using vstack and call this new array arr replace all the even columns of arr with zeros return the sum of arr using arr.sum() starting code: np.random.seed(42) arr1 = np.random.randint(5, 11, (5,10)) arr2 = np.random.randint(5, 11, (10,5)) expected output: 374 np . random . seed ( 42 ) arr1 = np . random . randint ( 5 , 11 , ( 5 , 10 )) arr2 = np . random . randint ( 5 , 11 , ( 10 , 5 )) print ( arr1 , end = ' \\n\\n ' ) print ( arr2 ) [[ 8 9 7 9 9 6 7 7 7 9] [ 8 7 10 9 6 8 10 10 6 8] [ 9 5 8 6 10 9 8 5 5 7] [ 7 6 8 8 10 10 10 7 8 8] [ 5 7 9 7 9 5 6 8 5 8]] [[10 6 6 5 6] [ 9 6 8 8 8] [ 8 9 7 10 5] [ 8 6 8 6 10] [10 10 6 8 10] [ 9 6 6 8 6] [ 6 10 8 10 10] [ 8 5 10 9 9] [ 6 9 6 5 8] [ 8 8 9 5 9]] # cell for Ex 3.4.1 374","title":"2.4.1 Exercise: Reshaping and Concatenating"},{"location":"S7_Numpy/#25-additional-exercises","text":"","title":"2.5 Additional Exercises"},{"location":"S7_Numpy/#251-exercise-boolean-array","text":"Create a 3x3 array of all True's (booleans) # cell for 3.5.1","title":"2.5.1 Exercise: boolean Array"},{"location":"S7_Numpy/#252-exercise-index-on-conditional","text":"extract all numbers divisible by 3 arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) # cell for 3.5.2 arr = np . array ([ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ])","title":"2.5.2 Exercise: Index on Conditional"},{"location":"S7_Numpy/#253-npwhere","text":"There is a nifty tool, np.where() . The syntax works like np.where(<where this condition is true> , <return elements from this array>, <otherwise return elements from this aray>) # Example a = np . arange ( 10 ) np . where ( a < 5 , a , a * 10 ) array([ 0, 1, 2, 3, 4, 50, 60, 70, 80, 90])","title":"2.5.3 np.where"},{"location":"S7_Numpy/#254-npargwhere","text":"A similar but slightly different tool is np.argwhere which will return the indices of the array where the conditional is true # Example np . argwhere ( a < 5 ) array([[0], [1], [2], [3], [4]])","title":"2.5.4 np.argwhere"},{"location":"S7_Numpy/#255-exercise-edit-a-copy-not-a-view","text":"replace all odd numbers in arr with -1 without changing arr (return a new array using np.where ) # cell for 3.5.5 arr = np . array ([ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ])","title":"2.5.5 Exercise: Edit a Copy not a View"},{"location":"S7_Numpy/#256-exercise-read-numpy-documentation","text":"create the following array without hard coading (i.e. don't write any of the values in your coad) a = np.array([1,2,3])` # desired output: #> array([1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]) Hints: repeat tile # cell for 3.5.6 a = np . array ([ 1 , 2 , 3 ]) # desired output: #> array([1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])","title":"2.5.6 Exercise: Read NumPy Documentation"},{"location":"S7_Numpy/#257-exercise-more-slicing","text":"swap columns 2 and 3 in arr # cell for 3.5.7 arr = np . arange ( 9 ) . reshape ( 3 , 3 )","title":"2.5.7 Exercise: More Slicing"},{"location":"S7_Numpy/#24-debugging","text":"It\u2019s always important to check that our code is \u201cplugged in\u201d, i.e., that we\u2019re actually exercising the problem that we think we are. Every programmer has spent hours chasing a bug, only to realize that they were actually calling their code on the wrong data set or with the wrong configuration parameters, or are using the wrong version of the software entirely. Mistakes like these are particularly likely to happen when we\u2019re tired, frustrated, and up against a deadline, which is one of the reasons late-night (or overnight) coding sessions are almost never worthwhile. - swcarpentry We'll now dedicated some discussion and practice to debugging python. This easy to overlook topic can save us oodles of time down the road. It's worth the investment. Borrowing from software carpentry, we'll highlight the key guidlines to debugging code: Know what it's supposed to do Make it fail every time Make it fail fast Change one thing at a time, for a reason Keep track of what you've done Be humble","title":"2.4 Debugging"},{"location":"S7_Numpy/#240-before-we-get-started","text":"We will refer to writing tests, and specifically writing unit tests in this module. Don't worry too much about the specifics of unit tests for now. We will have a dedicated module for that. What we do need to talk about is a specific built in function in python called the assert function","title":"2.4.0 Before We Get Started"},{"location":"S7_Numpy/#2401-the-assert-function","text":"Let's take a simple example of the assert function. If I wanted to test that the sume of two numbers is correct assert sum ([ 2 , 5 ]) == 7 , \"should be 7\" Nothing is sent to the print out because the condition is satisfied. If we run, however: assert sum([2, 4]) == 7, \"should be 7\" we get an error message: --------------------------------------------------------------------------- AssertionError Traceback (most recent call last) <ipython-input-3-d5724b127818> in <module>() ----> 1 assert sum([2, 4]) == 7, \"should be 7\" AssertionError: should be 7 Now to make this a test, you will want to wrap it in a function def test_sum (): assert sum ([ 1 , 2 , 3 ]) == 6 , \"Should be 6\" test_sum () print ( \"Everything passed\" ) Everything passed And if we include a test that does not pass: def test_sum(): assert sum([3, 3]) == 6, \"Should be 6\" def test_my_broken_func(): assert sum([1, 2]) == 5, \"Should be 5\" test_sum() test_my_broken_func() print(\"Everything passed\") Here our test fails, because the sum of 1 and 2 is 3 and not 5. We get a traceback that tells us the source of the error: --------------------------------------------------------------------------- AssertionError Traceback (most recent call last) <ipython-input-13-8a552fbf52bd> in <module>() 6 7 test_sum() ----> 8 test_my_broken_func() 9 print(\"Everything passed\") <ipython-input-13-8a552fbf52bd> in test_my_broken_func() 3 4 def test_my_broken_func(): ----> 5 assert sum([1, 2]) == 5, \"Should be 5\" 6 7 test_sum() AssertionError: Should be 5 We will worry about the intricacies of what to test for and when to test at a later time. For now, we just need to understand the assert function so we can practice debugging and writing short tests for the problems that we fix today! Ok LETS GO","title":"2.4.0.1 the assert function"},{"location":"S7_Numpy/#241-know-what-its-supposed-to-do","text":"This may seem obvious, but it's easy to recognize that an error is happening without knowing what the correct answer is. This makes unit tests especially handy, they force us to know the expected outcome at least for intended use cases. Here are some tips in regard to knowing the expected outcome: test with simplified data test a simplified case compare to a base model visualize","title":"2.4.1 Know what it's supposed to do"},{"location":"S7_Numpy/#242-make-it-fail-every-time","text":"It can be extraordinarily difficult to debug code that is precidated on some stochastic process. remove stochasticity when possible . For instance, seed your random value generators ( random.seed() , np.random.seed() )","title":"2.4.2 Make it fail every time"},{"location":"S7_Numpy/#243-make-it-fail-fast","text":"a corrolary to this, is narrow down the source of the error, and again this is why we write unit tests before integration tests. If it takes 20 minutes to train your neural network, and the error occurs during some post processing plotting of your loss history, obviously don't retrain the NN each time you iterate over the failure. Along the same lines, if you're debugging something in a for loop, run the loop once, or run the indented code outside of the loop with a placeholder for the iterated variable, in order to test and debug the code.","title":"2.4.3 Make it fail fast"},{"location":"S7_Numpy/#244-change-one-thing-at-a-time-for-a-reason","text":"Not much nuance here. Just like it's a good idea for us to change one aspect of our machine learning models and track the performance rather than to change multiple things at once, it's better to change one feature when debugging at a time. Changing multiple things at once creates interaction effects that can complicate the whole problem!","title":"2.4.4 Change one thing at a time, for a reason"},{"location":"S7_Numpy/#245-keep-track-of-what-youve-done","text":"This is where git/GitHub come in handy. It's so incredibly easy to forget what you've done, and, a weeks or days later from the time you first encountered the bug, forget whether you fixed it, did a temp fix, and/or what you did to fix it. my tip: if you're working in a jupyter notebook, something I do is write at the top of my notebook my TO DO items. I then strike through items I complete, and update my notes for the next time I work on the code. Similarly, I name my notebooks to reflect and categorize what they are about. Primarily I have test_<thing>.ipynb and prototype_<thingy>.ipynb","title":"2.4.5 Keep track of what you've done"},{"location":"S7_Numpy/#246-be-humble","text":"Lastly, ask for help. Take breaks. A week of hard work can sometimes save you an hour of thought.","title":"2.4.6 Be humble"},{"location":"S7_Numpy/#247-exercise-debug-a-short-code-block","text":"Your friend is writing a function to calculate BMI. They are concerned that seemingly all the patient's values have the same BMI, despite having different heights and weights. Determine the bugs in the code then write a unit test for the function calculate_bmi . # [weight (kg), height (m)] patients = [[ 70 , 1.8 ], [ 80 , 1.9 ], [ 150 , 1.7 ]] def calculate_bmi ( weight , height ): # kg / m ** 2 = bmi return weight / ( height ** 2 ) for patient in patients : weight , height = patients [ 0 ] bmi = calculate_bmi ( height , weight ) print ( \"Patient's BMI is: %f \" % bmi ) Patient's BMI is: 0.000367 Patient's BMI is: 0.000367 Patient's BMI is: 0.000367 # [weight (kg), height (m)] patients = [[ 70 , 1.8 ], [ 80 , 1.9 ], [ 150 , 1.7 ]] def calculate_bmi ( weight , height ): # kg / m ** 2 = bmi return weight / ( height ** 2 ) for patient in patients : weight , height = patient ### not properly referencing iterated variable bmi = calculate_bmi ( weight , height ) ### should be swapped print ( \"Patient's BMI is: %f \" % bmi ) Patient's BMI is: 21.604938 Patient's BMI is: 22.160665 Patient's BMI is: 51.903114 def test_calculate_bmi (): patients = [[ 70 , 1.8 ], [ 80 , 1.9 ], [ 150 , 1.7 ]] bmis = [ 21.6 , 22.16 , 51.9 ] for patient , bmi_ in zip ( patients , bmis ): weight , height = patient ### not properly referencing iterated variable bmi = calculate_bmi ( weight , height ) ### should be swapped assert np . abs ( bmi - bmi_ ) < 0.1 , \"fail calc for {} \" . format ( patient ) test_calculate_bmi () print ( \"success!\" ) success!","title":"2.4.7 Exercise: Debug A Short Code Block"},{"location":"S7_Numpy/#248-exercise-debug-a-class-method","text":"Your friend is developing a new pokemon game. They are excited to release but are running into some trouble! class Pokeball : def __init__ ( self , contains = None , type_name = \"poke ball\" ): self . contains = contains self . type_name = type_name self . catch_rate = 0.50 # note this attribute is not accessible upon init # the method catch, will update self.contains, if a catch is successful # it will also use self.catch_rate to set the performance of the catch def catch ( self , pokemon ): if self . contains == None : if random . random () < self . catch_rate : self . contains = pokemon print ( f \" { pokemon } captured!\" ) else : print ( f \" { pokemon } escaped!\" ) pass else : print ( \"pokeball is not empty!\" ) def release ( self ): if self . contains == None : print ( \"Pokeball is already empty\" ) else : print ( self . contains , \"has been released\" ) self . contains = None class Pokemon (): def __init__ ( self , name , weight , speed , type_ ): self . name = name self . weight = weight self . speed = speed self . type_ = type_ class FastBall ( Pokeball ): def __init__ ( self , contains = None , type_name = \"Fastball\" ): Pokeball . __init__ ( self , contains , type_name ) self . catch_rate = 0.6 def catch_fast ( self , pokemon ): if pokemon . speed > 100 : if self . contains == None : self . contains = pokemon print ( pokemon . name , \"has been captured\" ) else : print ( \"Pokeball is not empty\" ) else : self . catch ( pokemon ) They're concerned that the object FastBall doesn't return the pokemon's name when executing print(fast.contains) when they know the pokeball contains a pokemon. Help them find the bug, then write the following unit tests: showing that the pokeball updates properly with the name of the pokemon after it makes a capture of a pokemon with a speed > 100 showing that the catch_rate of 0.6 is resulting in a 60% catch rate for pokemon with speeds < 100 # Your friend shows you this code fast = FastBall () mewtwo = Pokemon ( name = 'Mewtwo' , weight = 18 , speed = 110 , type_ = 'Psychic' ) print ( fast . contains ) fast . catch_fast ( mewtwo ) # this is the line they are concerned about # why does this not return MewTwo? print ( fast . contains ) fast . catch_fast ( mewtwo ) None Mewtwo has been captured <__main__.Pokemon object at 0x7fd4bfe612d0> Pokeball is not empty","title":"2.4.8 Exercise: Debug a Class Method"},{"location":"S7_Numpy/#part-2-optional-use-a-test-runner","text":"Create the following files: pokemon.py test_pokemon.py paste the following into pokemon.py : import random import numpy as np class Pokeball: def __init__(self, contains=None, type_name=\"poke ball\"): self.contains = contains self.type_name = type_name self.catch_rate = 0.50 # note this attribute is not accessible upon init # the method catch, will update self.contains, if a catch is successful # it will also use self.catch_rate to set the performance of the catch def catch(self, pokemon): if self.contains == None: if random.random() < self.catch_rate: self.contains = pokemon print(f\"{pokemon} captured!\") else: print(f\"{pokemon} escaped!\") pass else: print(\"pokeball is not empty!\") def release(self): if self.contains == None: print(\"Pokeball is already empty\") else: print(self.contains, \"has been released\") self.contains = None class Pokemon(): def __init__(self, name, weight, speed, type_): self.name = name self.weight = weight self.speed = speed self.type_ = type_ class FastBall(Pokeball): def __init__(self, contains=None, type_name=\"Fastball\"): Pokeball.__init__(self, contains, type_name) self.catch_rate = 0.6 def catch_fast(self, pokemon): if pokemon.speed > 100: if self.contains == None: self.contains = pokemon print(pokemon.name, \"has been captured\") else: print(\"Pokeball is not empty\") else: self.catch(pokemon) in test_pokemon.py paste any unit tests you've written along with the imports at the top of the file (be sure to import any other libraries you used in your unit tests as well) from pokemon import * import random import numpy as np ### YOUR UNIT TESTS HERE ### def test_<name_of_your_test>(): # .... assert <your assert statement> make sure pokemon.py and test_pokemon.py are in the same directory then run the command pytest from the command line. You should get a readout like the following ================================================= test session starts ================================================== platform linux -- Python 3.8.1, pytest-6.2.1, py-1.10.0, pluggy-0.13.1 rootdir: /mnt/c/Users/wesley/Documents/apps/temp_c3_l2 plugins: dash-1.20.0, anyio-2.2.0 collected 1 item test_pokemon.py . [100%] ================================================== 1 passed in 0.06s ===================================================","title":"Part 2 (Optional): Use a Test Runner"},{"location":"about/","text":"Introduction \u00b6 This is the introduction to the Data Science Project. You should describe the purpose and scope of the project here.","title":"about"},{"location":"about/#introduction","text":"This is the introduction to the Data Science Project. You should describe the purpose and scope of the project here.","title":"Introduction"},{"location":"model-building/","text":"Model Building \u00b6 We want to build a model to predict x.","title":"Model Building"},{"location":"model-building/#model-building","text":"We want to build a model to predict x.","title":"Model Building"},{"location":"testing/","text":"Testing \u00b6 Now that the model is build we should test how well it performs. Have we achieved what we sat out to do? If not, what are our best next step?","title":"Testing"},{"location":"testing/#testing","text":"Now that the model is build we should test how well it performs. Have we achieved what we sat out to do? If not, what are our best next step?","title":"Testing"},{"location":"exercises/E1_Python_and_Jupyter/","text":"Technology Fundamentals Course 1, Lab 1: Practice with Python and Jupyter Notebooks \u00b6 Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assitants Varsha Bang, Harsha Vardhan Contact vbang@uw.edu, harshav@uw.edu This first lab assignment will be a review of what we discussed today. 1 Python variables \u00b6 In the empty code cell below, create the following four variables: - A string variable named favorite_movie that represents your favorite movie - A string variable named national_chain that represents your favorite fast food restaurant - An integer variable named streaming_video_hours that represents the whole number of hours you watch any streaming video service (ex. Netflix, Hulu, Disney+) per week. - A float variable named headphone_cost that represents the most money you had to pay, in dollar-cent amount (0.00), for headphones. Do not include a '$' symbol. Then after they are declared, print each one using the print() function explained in section 1.1.2. To check if each variable is the correct data type, use the type() function explained from section 1.1.3, in the empty code cell below. For example, type(favorite_movie) should return the output <class 'str'> , which indicates the string type. 2 Practice with math in Python \u00b6 Let's start with a few basic operators that was covered in section 1.1.4. Write the expression for multiplying 23 by 31, so that running this function will correctly output the product of these two numbers. Consider the operation written in Python: 27 / 3 + 6 . Write the same syntax in the empty cell below, and modify it to include parentheses in the right location so that the result/answer of the math is 3.0, rather than 15.0. Let's learn more operators beyond the ones we covered earlier. Write the line of code 3 ** 2 in the cell below. From the output, what do you think the double asterisks ( ** ) operator represents in Python? Write the line of code 28 / 3 below. Then just below the line in the same cell, write the code 28 // 3 . Compare the differences in output between the two. Can you decipher what // means in Python? Now for more complicated mathematical operations! Try to write the Python equivalent of the following: $\\frac{14 + 28}{28 - 14}$ Now try this one: $\\frac{15 + 984}{-(217+4)}$ And finally, write the Python equivalent for this: $\\frac{-(3655 * 44)}{(8 * 16)^3}$ 3 Practice writing helpful comments \u00b6 Consider the following code below. No need to decipher and understand every piece but just be aware of the output when you run the code cell. Based on the output, modify the code cell by adding a code comment at the top of the cell briefly explaining what the code does. This comment can be as many lines as you'd like, and may or may not include direct references to the example print statements below. def mystery_function ( x ): y = list ( x ) return \" \" . join ( y [:: - 1 ]) print ( mystery_function ( \"UniversityOfWashington\" )) print ( mystery_function ( \"AvocadoToast\" )) print ( mystery_function ( \"RacecaR\" )) n o t g n i h s a W f O y t i s r e v i n U t s a o T o d a c o v A R a c e c a R 4 More Markdown \u00b6 Consider the vision statement of the Global Innovation Exchange: \"Our mission is to build the talent that leverages emerging technologies in new and impactful ways\". Type that same statement in a new text cell below, only add a _ (underscore) at the beginning and end. What ends up happening to the format of the text as a result? In a new text cell, list all of the potential data science projects you might work on post DSE, with each one on its own separate line. Then add a - at the beginning of each line; include a single space between the hyphen and the first letter in your project name! Based on the output, what can you decipher that this - changes in the formatting? 5 Get familiar with the Python community \u00b6 Python has strong support from a community of avid developers and computer scientists. The Python Software Foundation (PSF) tries to maintain input and activity through their own website, python.org . Please explore their community section - https://www.python.org/community/ - and answer the following questions in a new text cell just below this one: - What is the name of the mailing list that the PSF manages for those who have questions about Python code? - In your own words, what is the goal of their Community Survey? - According to their most recent annual report, which continent provides the highest proportion of grants to the PSF? - Name at least three ways that the PSF recommends you can get involved with the community. 6 Advanced - Understanding the switch from Python 2 to 3 \u00b6 Inside of the following link, https://www.python.org/doc/, is an article about the Python Software Foundation's decision to end support for Python version 2, and move with support for version 3. From the article, answer the following questions in a new text cell just below this one: - What official date was Python 2 no longer supported? - What is the version number of the last supported Python 2? - In your own words, describe why the Python Software Foundation made the decision to stop supporting Python 2. 7 Advanced - Create your own Google Colab notebook! \u00b6 Create your own separate Google Colab notebook with the following rules and content: - The file name of your notebook should be in the format lastname_C1S1_breakout_custom_notebook.ipynb . - Include a header (of any size) that lists your first name and last name, followed by \" Technology Explorers \". - Create a short paragraph bio of yourself in a text cell. - Include/embed an image of the Python logo, which can be found here: https://www.python.org/community/logos/. - Create a code cell with just the line of code: import this - Take your favorite line from that output and past it in a text cell below, both bolding and italicizing it","title":"E1 Python and Jupyter"},{"location":"exercises/E1_Python_and_Jupyter/#technology-fundamentals-course-1-lab-1-practice-with-python-and-jupyter-notebooks","text":"Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assitants Varsha Bang, Harsha Vardhan Contact vbang@uw.edu, harshav@uw.edu This first lab assignment will be a review of what we discussed today.","title":"Technology Fundamentals Course 1, Lab 1: Practice with Python and Jupyter Notebooks"},{"location":"exercises/E1_Python_and_Jupyter/#1-python-variables","text":"In the empty code cell below, create the following four variables: - A string variable named favorite_movie that represents your favorite movie - A string variable named national_chain that represents your favorite fast food restaurant - An integer variable named streaming_video_hours that represents the whole number of hours you watch any streaming video service (ex. Netflix, Hulu, Disney+) per week. - A float variable named headphone_cost that represents the most money you had to pay, in dollar-cent amount (0.00), for headphones. Do not include a '$' symbol. Then after they are declared, print each one using the print() function explained in section 1.1.2. To check if each variable is the correct data type, use the type() function explained from section 1.1.3, in the empty code cell below. For example, type(favorite_movie) should return the output <class 'str'> , which indicates the string type.","title":"1 Python variables"},{"location":"exercises/E1_Python_and_Jupyter/#2-practice-with-math-in-python","text":"Let's start with a few basic operators that was covered in section 1.1.4. Write the expression for multiplying 23 by 31, so that running this function will correctly output the product of these two numbers. Consider the operation written in Python: 27 / 3 + 6 . Write the same syntax in the empty cell below, and modify it to include parentheses in the right location so that the result/answer of the math is 3.0, rather than 15.0. Let's learn more operators beyond the ones we covered earlier. Write the line of code 3 ** 2 in the cell below. From the output, what do you think the double asterisks ( ** ) operator represents in Python? Write the line of code 28 / 3 below. Then just below the line in the same cell, write the code 28 // 3 . Compare the differences in output between the two. Can you decipher what // means in Python? Now for more complicated mathematical operations! Try to write the Python equivalent of the following: $\\frac{14 + 28}{28 - 14}$ Now try this one: $\\frac{15 + 984}{-(217+4)}$ And finally, write the Python equivalent for this: $\\frac{-(3655 * 44)}{(8 * 16)^3}$","title":"2 Practice with math in Python"},{"location":"exercises/E1_Python_and_Jupyter/#3-practice-writing-helpful-comments","text":"Consider the following code below. No need to decipher and understand every piece but just be aware of the output when you run the code cell. Based on the output, modify the code cell by adding a code comment at the top of the cell briefly explaining what the code does. This comment can be as many lines as you'd like, and may or may not include direct references to the example print statements below. def mystery_function ( x ): y = list ( x ) return \" \" . join ( y [:: - 1 ]) print ( mystery_function ( \"UniversityOfWashington\" )) print ( mystery_function ( \"AvocadoToast\" )) print ( mystery_function ( \"RacecaR\" )) n o t g n i h s a W f O y t i s r e v i n U t s a o T o d a c o v A R a c e c a R","title":"3 Practice writing helpful comments"},{"location":"exercises/E1_Python_and_Jupyter/#4-more-markdown","text":"Consider the vision statement of the Global Innovation Exchange: \"Our mission is to build the talent that leverages emerging technologies in new and impactful ways\". Type that same statement in a new text cell below, only add a _ (underscore) at the beginning and end. What ends up happening to the format of the text as a result? In a new text cell, list all of the potential data science projects you might work on post DSE, with each one on its own separate line. Then add a - at the beginning of each line; include a single space between the hyphen and the first letter in your project name! Based on the output, what can you decipher that this - changes in the formatting?","title":"4 More Markdown"},{"location":"exercises/E1_Python_and_Jupyter/#5-get-familiar-with-the-python-community","text":"Python has strong support from a community of avid developers and computer scientists. The Python Software Foundation (PSF) tries to maintain input and activity through their own website, python.org . Please explore their community section - https://www.python.org/community/ - and answer the following questions in a new text cell just below this one: - What is the name of the mailing list that the PSF manages for those who have questions about Python code? - In your own words, what is the goal of their Community Survey? - According to their most recent annual report, which continent provides the highest proportion of grants to the PSF? - Name at least three ways that the PSF recommends you can get involved with the community.","title":"5 Get familiar with the Python community"},{"location":"exercises/E1_Python_and_Jupyter/#6-advanced-understanding-the-switch-from-python-2-to-3","text":"Inside of the following link, https://www.python.org/doc/, is an article about the Python Software Foundation's decision to end support for Python version 2, and move with support for version 3. From the article, answer the following questions in a new text cell just below this one: - What official date was Python 2 no longer supported? - What is the version number of the last supported Python 2? - In your own words, describe why the Python Software Foundation made the decision to stop supporting Python 2.","title":"6 Advanced - Understanding the switch from Python 2 to 3"},{"location":"exercises/E1_Python_and_Jupyter/#7-advanced-create-your-own-google-colab-notebook","text":"Create your own separate Google Colab notebook with the following rules and content: - The file name of your notebook should be in the format lastname_C1S1_breakout_custom_notebook.ipynb . - Include a header (of any size) that lists your first name and last name, followed by \" Technology Explorers \". - Create a short paragraph bio of yourself in a text cell. - Include/embed an image of the Python logo, which can be found here: https://www.python.org/community/logos/. - Create a code cell with just the line of code: import this - Take your favorite line from that output and past it in a text cell below, both bolding and italicizing it","title":"7 Advanced - Create your own Google Colab notebook!"},{"location":"exercises/E2_Flow_Control/","text":"Technology Fundamentals Course 1, Lab 2: Practice with Flow Control \u00b6 Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assistants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu In this lab we will continue to practice flow control. L2 Q1: Print and For Loops \u00b6 Create a Pyramid Using for loops Part A \u00b6 Example output: * * * * * * * * * * * * * * * # Code Cell for L2 Q1 A Part B \u00b6 Example output: * * * * * * * * * * * * * * * # Code Cell for L2 Q1 B Part C \u00b6 Example output: * * * * * * * * * * * * * * * # Code Cell for L2 Q1 C * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * L2 Q2: Conditionals and For Loops \u00b6 Complete the Fibonacci sequence up to the 10th place using any or all of the following: * for * if elif else * append * range The Fibonacci sequence with indices: 0 1 1 2 3 5 8 etc.. Example input: index = 10 Example output: Index: 10 Value: 34 # Cell for L2 Q2 L2 Q3: Practice with Collections \u00b6 concatenate the following dictionaries to create a new one, if you need to refer to documentation for python dictionaries! Input: dict1={1:10, 2:20} dict2={3:30, 4:40} dict3={5:50, 6:60} Output: new_dect={1:10, 2:20, 3:30, 4:40, 5:50, 6:60} # Cell for L2 Q3 L2 Q4 The FizzBuzz task \u00b6 Let's do this! FizzBuzz is our first task for this session. FizzBuzz is a common toy programming problem that is often used in software engineering job interviews. Today, we are not after the most compact , most clever , or even the most beautiful solution. Your goal is to solve the problem using for and if as your primary tools. You will likely also want to use the % operator. Before we describe FizzBuzz , let's talk about the moduluo operation. If you recall from session 1, you may have experimented with the modulus or % operator. When used between two integer values, it returns the integer remainder of division. Let's start with a simple example of 5 modulo 3 : 5 % 3 5 % 3 2 Let's do another example... What is the result of the following: 10 % 5 10 % 5 0 Now, on to FizzBuzz . No it isn't the high-test caffeine cola you might need right now. Instead, it is a challenge to output certain text as the code iterates over elements in a list. Here is the formal definition of the problem that we will use today. \"Write a program that prints the numbers from 1 to 100. But for multiples of three print Fizz instead of the number and for the multiples of five print Buzz . For numbers which are multiples of both three and five print FizzBuzz .\" To get started, you will need a for loop and it will probably use a range list. Inside of the for loop, you will likely have at least two if statements that use the % operator followed by a print . # Cell for L2 Q4 For advanced folks, a hint here is that you might be able to avoid some if statements by using the end parameter to the print function. Notice how these two cell blocks output differently. print(\"Fizz\") print(\"Buzz\") In another cell: print(\"Fizz\", end=\"\") print(\"Buzz\", end=\"\") print()","title":"E2 Flow Control"},{"location":"exercises/E2_Flow_Control/#technology-fundamentals-course-1-lab-2-practice-with-flow-control","text":"Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assistants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu In this lab we will continue to practice flow control.","title":"Technology Fundamentals Course 1, Lab 2: Practice with Flow Control"},{"location":"exercises/E2_Flow_Control/#l2-q1-print-and-for-loops","text":"Create a Pyramid Using for loops","title":"L2 Q1: Print and For Loops"},{"location":"exercises/E2_Flow_Control/#part-a","text":"Example output: * * * * * * * * * * * * * * * # Code Cell for L2 Q1 A","title":"Part A"},{"location":"exercises/E2_Flow_Control/#part-b","text":"Example output: * * * * * * * * * * * * * * * # Code Cell for L2 Q1 B","title":"Part B"},{"location":"exercises/E2_Flow_Control/#part-c","text":"Example output: * * * * * * * * * * * * * * * # Code Cell for L2 Q1 C * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *","title":"Part C"},{"location":"exercises/E2_Flow_Control/#l2-q2-conditionals-and-for-loops","text":"Complete the Fibonacci sequence up to the 10th place using any or all of the following: * for * if elif else * append * range The Fibonacci sequence with indices: 0 1 1 2 3 5 8 etc.. Example input: index = 10 Example output: Index: 10 Value: 34 # Cell for L2 Q2","title":"L2 Q2: Conditionals and For Loops"},{"location":"exercises/E2_Flow_Control/#l2-q3-practice-with-collections","text":"concatenate the following dictionaries to create a new one, if you need to refer to documentation for python dictionaries! Input: dict1={1:10, 2:20} dict2={3:30, 4:40} dict3={5:50, 6:60} Output: new_dect={1:10, 2:20, 3:30, 4:40, 5:50, 6:60} # Cell for L2 Q3","title":"L2 Q3: Practice with Collections"},{"location":"exercises/E2_Flow_Control/#l2-q4-the-fizzbuzz-task","text":"Let's do this! FizzBuzz is our first task for this session. FizzBuzz is a common toy programming problem that is often used in software engineering job interviews. Today, we are not after the most compact , most clever , or even the most beautiful solution. Your goal is to solve the problem using for and if as your primary tools. You will likely also want to use the % operator. Before we describe FizzBuzz , let's talk about the moduluo operation. If you recall from session 1, you may have experimented with the modulus or % operator. When used between two integer values, it returns the integer remainder of division. Let's start with a simple example of 5 modulo 3 : 5 % 3 5 % 3 2 Let's do another example... What is the result of the following: 10 % 5 10 % 5 0 Now, on to FizzBuzz . No it isn't the high-test caffeine cola you might need right now. Instead, it is a challenge to output certain text as the code iterates over elements in a list. Here is the formal definition of the problem that we will use today. \"Write a program that prints the numbers from 1 to 100. But for multiples of three print Fizz instead of the number and for the multiples of five print Buzz . For numbers which are multiples of both three and five print FizzBuzz .\" To get started, you will need a for loop and it will probably use a range list. Inside of the for loop, you will likely have at least two if statements that use the % operator followed by a print . # Cell for L2 Q4 For advanced folks, a hint here is that you might be able to avoid some if statements by using the end parameter to the print function. Notice how these two cell blocks output differently. print(\"Fizz\") print(\"Buzz\") In another cell: print(\"Fizz\", end=\"\") print(\"Buzz\", end=\"\") print()","title":"L2 Q4 The FizzBuzz task"},{"location":"exercises/E3_Functions/","text":"Technology Fundamentals Course 1, Lab 3: Practice with Functions and Pandas \u00b6 Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assistants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu In this lab we will continue to practice writing functions as well as manipulating pandas DataFrames. Part I \u00b6 L3 Q1: Basic Function Writing \u00b6 Part A \u00b6 Write a Python function to find the Max of three numbers # Code Cell for L3 Q1 A Part B \u00b6 Write a Python function to multiply all the numbers in a list Example: Sample List : (8, 2, 3, -1, 7) Expected Output : -336 # Code Cell for L3 Q1 B Part C \u00b6 Write a Python program to reverse a string Example: Sample String : \"1234abcd\" Expected Output : \"dcba4321\" # Code Cell for L3 Q1 C L2 Q2: Finding Unique Elements \u00b6 Write a Python function that takes a list and returns a new list with unique elements of the first list Example: Sample List : [1,2,3,3,3,3,4,5] Unique List : [1, 2, 3, 4, 5] # Cell for L3 Q2 L3 Q3: Computing Factorials \u00b6 Write a Python function to calculate the factorial of a number (a non-negative integer). The function accepts the number as an argument Example: Input: 4 Output: 24 # Cell for L3 Q3 Practicing our hand at functions by implementing recursion \u00b6 We will practice the last exercise we did yesterday, this time using what we've learned about functions to write a recursive function A recursive function is a function that makes a call to itself. This is particularly well suited for tasks that would otherwise require a lot of memory to hold intermediary solutions (when they are combined with a strategy called memoization which we will shy away from here). The Fibonnaci sequence is a good place for such a problem. So is a factorial calculation. See here below 3! = 3 * 2 * 1 4! = 4 * 3 * 2 * 1 def factorial ( x ): \"\"\"This is a recursive function to find the factorial of an integer\"\"\" if x == 1 : return 1 else : # one trick to note that is common with recursive functions # is that the incrementation in the key variable is done # in the call to the function itself (vs a for loop) return ( x * factorial ( x - 1 )) n = 3 factorial ( n ) 6 In the above, we have on lines 5 and 6, what we call the baseline solution. It is the answer to the simplest subset of the problem. When we build a recursive tree, it is useful to think of the smallest problem, and work upwards, providing this leaf solution to nodes further up on the recursive tree. Like so: # 1! = 1 # 2! = 2 * 1! # 3! = 3 * 2! # N! = N * (N-1)! ... like ... like so This problem is intended to be a fun way to wrap our heads around functions... don't stress. If you want to see a further breakdown of the factorial problem, check out this link L3 Q4: Recursive Functions \u00b6 Using recursion, complete the Fibonacci sequence up to the 10th place using recursion and any or all of the following: * if elif else * range The Fibonacci sequence with indices: 0 1 1 2 3 5 8 etc.. Example input: index = 10 Example output: Index: 10 Value: 34 # Cell for L2 Q3 Part II \u00b6 L3 Q1 \u00b6 Convert the two series into the columns of a DataFrame ser1 = pd . Series ( list ( 'abcedfghijklmnopqrstuvwxyz' )) ser2 = pd . Series ( np . arange ( 26 )) L3 Q2 \u00b6 Conver the series into a DataFrame with 7 rows and 5 columns ser = pd . Series ( np . random . randint ( 1 , 10 , 35 )) L3 Q3 \u00b6 Compute the difference of differences between consecutive numbers in a series using ser.diff() ser = pd . Series ([ 1 , 3 , 6 , 10 , 15 , 21 , 27 , 35 ]) L3 Q4 \u00b6 Convert a series of dates to datetime format using pd.to_datetime() ser = pd . Series ([ '01 Jan 2010' , '02-02-2011' , '20120303' , '2013/04/04' , '2014-05-05' , '2015-06-06T12:20' ]) L3 Q5 \u00b6 Compute the mean of weights grouped by fruit fruit = pd . Series ( np . random . choice ([ 'apple' , 'banana' , 'carrot' ], 10 )) weights = pd . Series ( np . linspace ( 1 , 10 , 10 )) print ( weights . tolist ()) print ( fruit . tolist ()) [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0] ['banana', 'banana', 'banana', 'carrot', 'carrot', 'carrot', 'carrot', 'carrot', 'banana', 'banana'] L3 Q6 \u00b6 Compute the euclidian distance between vectors p and q (pythagorean theorem) p = pd . Series ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]) q = pd . Series ([ 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ]) L3 Q7 \u00b6 Fill in missing values for dates with the previous dates' value using ser.bfill() or ser.ffill() ser = pd . Series ([ 1 , 10 , 3 , np . nan ], index = pd . to_datetime ([ '2000-01-01' , '2000-01-03' , '2000-01-06' , '2000-01-08' ])) print ( ser ) 2000-01-01 1.0 2000-01-03 10.0 2000-01-06 3.0 2000-01-08 NaN dtype: float64 L3 Q8 \u00b6 Check if there are missing values in a dataframe using .isnull() , .values , and .any() df = pd . read_csv ( 'https://raw.githubusercontent.com/selva86/datasets/master/Cars93_miss.csv' ) L3 Q9 \u00b6 Grab the first column and return it as a DataFrame rather than as a series df = pd . DataFrame ( np . arange ( 20 ) . reshape ( - 1 , 5 ), columns = list ( 'abcde' )) L3 Q10 \u00b6 In df , interchange columns 'a' and 'c'. df = pd . DataFrame ( np . arange ( 20 ) . reshape ( - 1 , 5 ), columns = list ( 'abcde' ))","title":"E3 Functions"},{"location":"exercises/E3_Functions/#technology-fundamentals-course-1-lab-3-practice-with-functions-and-pandas","text":"Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assistants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu In this lab we will continue to practice writing functions as well as manipulating pandas DataFrames.","title":"Technology Fundamentals Course 1, Lab 3: Practice with Functions and Pandas"},{"location":"exercises/E3_Functions/#part-i","text":"","title":"Part I"},{"location":"exercises/E3_Functions/#l3-q1-basic-function-writing","text":"","title":"L3 Q1: Basic Function Writing"},{"location":"exercises/E3_Functions/#part-a","text":"Write a Python function to find the Max of three numbers # Code Cell for L3 Q1 A","title":"Part A"},{"location":"exercises/E3_Functions/#part-b","text":"Write a Python function to multiply all the numbers in a list Example: Sample List : (8, 2, 3, -1, 7) Expected Output : -336 # Code Cell for L3 Q1 B","title":"Part B"},{"location":"exercises/E3_Functions/#part-c","text":"Write a Python program to reverse a string Example: Sample String : \"1234abcd\" Expected Output : \"dcba4321\" # Code Cell for L3 Q1 C","title":"Part C"},{"location":"exercises/E3_Functions/#l2-q2-finding-unique-elements","text":"Write a Python function that takes a list and returns a new list with unique elements of the first list Example: Sample List : [1,2,3,3,3,3,4,5] Unique List : [1, 2, 3, 4, 5] # Cell for L3 Q2","title":"L2 Q2: Finding Unique Elements"},{"location":"exercises/E3_Functions/#l3-q3-computing-factorials","text":"Write a Python function to calculate the factorial of a number (a non-negative integer). The function accepts the number as an argument Example: Input: 4 Output: 24 # Cell for L3 Q3","title":"L3 Q3: Computing Factorials"},{"location":"exercises/E3_Functions/#practicing-our-hand-at-functions-by-implementing-recursion","text":"We will practice the last exercise we did yesterday, this time using what we've learned about functions to write a recursive function A recursive function is a function that makes a call to itself. This is particularly well suited for tasks that would otherwise require a lot of memory to hold intermediary solutions (when they are combined with a strategy called memoization which we will shy away from here). The Fibonnaci sequence is a good place for such a problem. So is a factorial calculation. See here below 3! = 3 * 2 * 1 4! = 4 * 3 * 2 * 1 def factorial ( x ): \"\"\"This is a recursive function to find the factorial of an integer\"\"\" if x == 1 : return 1 else : # one trick to note that is common with recursive functions # is that the incrementation in the key variable is done # in the call to the function itself (vs a for loop) return ( x * factorial ( x - 1 )) n = 3 factorial ( n ) 6 In the above, we have on lines 5 and 6, what we call the baseline solution. It is the answer to the simplest subset of the problem. When we build a recursive tree, it is useful to think of the smallest problem, and work upwards, providing this leaf solution to nodes further up on the recursive tree. Like so: # 1! = 1 # 2! = 2 * 1! # 3! = 3 * 2! # N! = N * (N-1)! ... like ... like so This problem is intended to be a fun way to wrap our heads around functions... don't stress. If you want to see a further breakdown of the factorial problem, check out this link","title":"Practicing our hand at functions by implementing recursion"},{"location":"exercises/E3_Functions/#l3-q4-recursive-functions","text":"Using recursion, complete the Fibonacci sequence up to the 10th place using recursion and any or all of the following: * if elif else * range The Fibonacci sequence with indices: 0 1 1 2 3 5 8 etc.. Example input: index = 10 Example output: Index: 10 Value: 34 # Cell for L2 Q3","title":"L3 Q4: Recursive Functions"},{"location":"exercises/E3_Functions/#part-ii","text":"","title":"Part II"},{"location":"exercises/E3_Functions/#l3-q1","text":"Convert the two series into the columns of a DataFrame ser1 = pd . Series ( list ( 'abcedfghijklmnopqrstuvwxyz' )) ser2 = pd . Series ( np . arange ( 26 ))","title":"L3 Q1"},{"location":"exercises/E3_Functions/#l3-q2","text":"Conver the series into a DataFrame with 7 rows and 5 columns ser = pd . Series ( np . random . randint ( 1 , 10 , 35 ))","title":"L3 Q2"},{"location":"exercises/E3_Functions/#l3-q3","text":"Compute the difference of differences between consecutive numbers in a series using ser.diff() ser = pd . Series ([ 1 , 3 , 6 , 10 , 15 , 21 , 27 , 35 ])","title":"L3 Q3"},{"location":"exercises/E3_Functions/#l3-q4","text":"Convert a series of dates to datetime format using pd.to_datetime() ser = pd . Series ([ '01 Jan 2010' , '02-02-2011' , '20120303' , '2013/04/04' , '2014-05-05' , '2015-06-06T12:20' ])","title":"L3 Q4"},{"location":"exercises/E3_Functions/#l3-q5","text":"Compute the mean of weights grouped by fruit fruit = pd . Series ( np . random . choice ([ 'apple' , 'banana' , 'carrot' ], 10 )) weights = pd . Series ( np . linspace ( 1 , 10 , 10 )) print ( weights . tolist ()) print ( fruit . tolist ()) [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0] ['banana', 'banana', 'banana', 'carrot', 'carrot', 'carrot', 'carrot', 'carrot', 'banana', 'banana']","title":"L3 Q5"},{"location":"exercises/E3_Functions/#l3-q6","text":"Compute the euclidian distance between vectors p and q (pythagorean theorem) p = pd . Series ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]) q = pd . Series ([ 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ])","title":"L3 Q6"},{"location":"exercises/E3_Functions/#l3-q7","text":"Fill in missing values for dates with the previous dates' value using ser.bfill() or ser.ffill() ser = pd . Series ([ 1 , 10 , 3 , np . nan ], index = pd . to_datetime ([ '2000-01-01' , '2000-01-03' , '2000-01-06' , '2000-01-08' ])) print ( ser ) 2000-01-01 1.0 2000-01-03 10.0 2000-01-06 3.0 2000-01-08 NaN dtype: float64","title":"L3 Q7"},{"location":"exercises/E3_Functions/#l3-q8","text":"Check if there are missing values in a dataframe using .isnull() , .values , and .any() df = pd . read_csv ( 'https://raw.githubusercontent.com/selva86/datasets/master/Cars93_miss.csv' )","title":"L3 Q8"},{"location":"exercises/E3_Functions/#l3-q9","text":"Grab the first column and return it as a DataFrame rather than as a series df = pd . DataFrame ( np . arange ( 20 ) . reshape ( - 1 , 5 ), columns = list ( 'abcde' ))","title":"L3 Q9"},{"location":"exercises/E3_Functions/#l3-q10","text":"In df , interchange columns 'a' and 'c'. df = pd . DataFrame ( np . arange ( 20 ) . reshape ( - 1 , 5 ), columns = list ( 'abcde' ))","title":"L3 Q10"},{"location":"exercises/E4_Pandas/","text":"Technology Fundamentals Course 1, Lab 3: Practice with Functions and Pandas \u00b6 Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assistants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu In this lab we will continue to practice writing functions as well as manipulating pandas DataFrames. Part I \u00b6 L3 Q1: Basic Function Writing \u00b6 Part A \u00b6 Write a Python function to find the Max of three numbers # Code Cell for L3 Q1 A Part B \u00b6 Write a Python function to multiply all the numbers in a list Example: Sample List : (8, 2, 3, -1, 7) Expected Output : -336 # Code Cell for L3 Q1 B Part C \u00b6 Write a Python program to reverse a string Example: Sample String : \"1234abcd\" Expected Output : \"dcba4321\" # Code Cell for L3 Q1 C L2 Q2: Finding Unique Elements \u00b6 Write a Python function that takes a list and returns a new list with unique elements of the first list Example: Sample List : [1,2,3,3,3,3,4,5] Unique List : [1, 2, 3, 4, 5] # Cell for L3 Q2 L3 Q3: Computing Factorials \u00b6 Write a Python function to calculate the factorial of a number (a non-negative integer). The function accepts the number as an argument Example: Input: 4 Output: 24 # Cell for L3 Q3 Practicing our hand at functions by implementing recursion \u00b6 We will practice the last exercise we did yesterday, this time using what we've learned about functions to write a recursive function A recursive function is a function that makes a call to itself. This is particularly well suited for tasks that would otherwise require a lot of memory to hold intermediary solutions (when they are combined with a strategy called memoization which we will shy away from here). The Fibonnaci sequence is a good place for such a problem. So is a factorial calculation. See here below 3! = 3 * 2 * 1 4! = 4 * 3 * 2 * 1 def factorial ( x ): \"\"\"This is a recursive function to find the factorial of an integer\"\"\" if x == 1 : return 1 else : # one trick to note that is common with recursive functions # is that the incrementation in the key variable is done # in the call to the function itself (vs a for loop) return ( x * factorial ( x - 1 )) n = 3 factorial ( n ) 6 In the above, we have on lines 5 and 6, what we call the baseline solution. It is the answer to the simplest subset of the problem. When we build a recursive tree, it is useful to think of the smallest problem, and work upwards, providing this leaf solution to nodes further up on the recursive tree. Like so: # 1! = 1 # 2! = 2 * 1! # 3! = 3 * 2! # N! = N * (N-1)! ... like ... like so This problem is intended to be a fun way to wrap our heads around functions... don't stress. If you want to see a further breakdown of the factorial problem, check out this link L3 Q4: Recursive Functions \u00b6 Using recursion, complete the Fibonacci sequence up to the 10th place using recursion and any or all of the following: * if elif else * range The Fibonacci sequence with indices: 0 1 1 2 3 5 8 etc.. Example input: index = 10 Example output: Index: 10 Value: 34 # Cell for L2 Q3 Part II \u00b6 L3 Q1 \u00b6 Convert the two series into the columns of a DataFrame ser1 = pd . Series ( list ( 'abcedfghijklmnopqrstuvwxyz' )) ser2 = pd . Series ( np . arange ( 26 )) L3 Q2 \u00b6 Conver the series into a DataFrame with 7 rows and 5 columns ser = pd . Series ( np . random . randint ( 1 , 10 , 35 )) L3 Q3 \u00b6 Compute the difference of differences between consecutive numbers in a series using ser.diff() ser = pd . Series ([ 1 , 3 , 6 , 10 , 15 , 21 , 27 , 35 ]) L3 Q4 \u00b6 Convert a series of dates to datetime format using pd.to_datetime() ser = pd . Series ([ '01 Jan 2010' , '02-02-2011' , '20120303' , '2013/04/04' , '2014-05-05' , '2015-06-06T12:20' ]) L3 Q5 \u00b6 Compute the mean of weights grouped by fruit fruit = pd . Series ( np . random . choice ([ 'apple' , 'banana' , 'carrot' ], 10 )) weights = pd . Series ( np . linspace ( 1 , 10 , 10 )) print ( weights . tolist ()) print ( fruit . tolist ()) [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0] ['banana', 'banana', 'banana', 'carrot', 'carrot', 'carrot', 'carrot', 'carrot', 'banana', 'banana'] L3 Q6 \u00b6 Compute the euclidian distance between vectors p and q (pythagorean theorem) p = pd . Series ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]) q = pd . Series ([ 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ]) L3 Q7 \u00b6 Fill in missing values for dates with the previous dates' value using ser.bfill() or ser.ffill() ser = pd . Series ([ 1 , 10 , 3 , np . nan ], index = pd . to_datetime ([ '2000-01-01' , '2000-01-03' , '2000-01-06' , '2000-01-08' ])) print ( ser ) 2000-01-01 1.0 2000-01-03 10.0 2000-01-06 3.0 2000-01-08 NaN dtype: float64 L3 Q8 \u00b6 Check if there are missing values in a dataframe using .isnull() , .values , and .any() df = pd . read_csv ( 'https://raw.githubusercontent.com/selva86/datasets/master/Cars93_miss.csv' ) L3 Q9 \u00b6 Grab the first column and return it as a DataFrame rather than as a series df = pd . DataFrame ( np . arange ( 20 ) . reshape ( - 1 , 5 ), columns = list ( 'abcde' )) L3 Q10 \u00b6 In df , interchange columns 'a' and 'c'. df = pd . DataFrame ( np . arange ( 20 ) . reshape ( - 1 , 5 ), columns = list ( 'abcde' ))","title":"E4 Pandas"},{"location":"exercises/E4_Pandas/#technology-fundamentals-course-1-lab-3-practice-with-functions-and-pandas","text":"Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assistants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu In this lab we will continue to practice writing functions as well as manipulating pandas DataFrames.","title":"Technology Fundamentals Course 1, Lab 3: Practice with Functions and Pandas"},{"location":"exercises/E4_Pandas/#part-i","text":"","title":"Part I"},{"location":"exercises/E4_Pandas/#l3-q1-basic-function-writing","text":"","title":"L3 Q1: Basic Function Writing"},{"location":"exercises/E4_Pandas/#part-a","text":"Write a Python function to find the Max of three numbers # Code Cell for L3 Q1 A","title":"Part A"},{"location":"exercises/E4_Pandas/#part-b","text":"Write a Python function to multiply all the numbers in a list Example: Sample List : (8, 2, 3, -1, 7) Expected Output : -336 # Code Cell for L3 Q1 B","title":"Part B"},{"location":"exercises/E4_Pandas/#part-c","text":"Write a Python program to reverse a string Example: Sample String : \"1234abcd\" Expected Output : \"dcba4321\" # Code Cell for L3 Q1 C","title":"Part C"},{"location":"exercises/E4_Pandas/#l2-q2-finding-unique-elements","text":"Write a Python function that takes a list and returns a new list with unique elements of the first list Example: Sample List : [1,2,3,3,3,3,4,5] Unique List : [1, 2, 3, 4, 5] # Cell for L3 Q2","title":"L2 Q2: Finding Unique Elements"},{"location":"exercises/E4_Pandas/#l3-q3-computing-factorials","text":"Write a Python function to calculate the factorial of a number (a non-negative integer). The function accepts the number as an argument Example: Input: 4 Output: 24 # Cell for L3 Q3","title":"L3 Q3: Computing Factorials"},{"location":"exercises/E4_Pandas/#practicing-our-hand-at-functions-by-implementing-recursion","text":"We will practice the last exercise we did yesterday, this time using what we've learned about functions to write a recursive function A recursive function is a function that makes a call to itself. This is particularly well suited for tasks that would otherwise require a lot of memory to hold intermediary solutions (when they are combined with a strategy called memoization which we will shy away from here). The Fibonnaci sequence is a good place for such a problem. So is a factorial calculation. See here below 3! = 3 * 2 * 1 4! = 4 * 3 * 2 * 1 def factorial ( x ): \"\"\"This is a recursive function to find the factorial of an integer\"\"\" if x == 1 : return 1 else : # one trick to note that is common with recursive functions # is that the incrementation in the key variable is done # in the call to the function itself (vs a for loop) return ( x * factorial ( x - 1 )) n = 3 factorial ( n ) 6 In the above, we have on lines 5 and 6, what we call the baseline solution. It is the answer to the simplest subset of the problem. When we build a recursive tree, it is useful to think of the smallest problem, and work upwards, providing this leaf solution to nodes further up on the recursive tree. Like so: # 1! = 1 # 2! = 2 * 1! # 3! = 3 * 2! # N! = N * (N-1)! ... like ... like so This problem is intended to be a fun way to wrap our heads around functions... don't stress. If you want to see a further breakdown of the factorial problem, check out this link","title":"Practicing our hand at functions by implementing recursion"},{"location":"exercises/E4_Pandas/#l3-q4-recursive-functions","text":"Using recursion, complete the Fibonacci sequence up to the 10th place using recursion and any or all of the following: * if elif else * range The Fibonacci sequence with indices: 0 1 1 2 3 5 8 etc.. Example input: index = 10 Example output: Index: 10 Value: 34 # Cell for L2 Q3","title":"L3 Q4: Recursive Functions"},{"location":"exercises/E4_Pandas/#part-ii","text":"","title":"Part II"},{"location":"exercises/E4_Pandas/#l3-q1","text":"Convert the two series into the columns of a DataFrame ser1 = pd . Series ( list ( 'abcedfghijklmnopqrstuvwxyz' )) ser2 = pd . Series ( np . arange ( 26 ))","title":"L3 Q1"},{"location":"exercises/E4_Pandas/#l3-q2","text":"Conver the series into a DataFrame with 7 rows and 5 columns ser = pd . Series ( np . random . randint ( 1 , 10 , 35 ))","title":"L3 Q2"},{"location":"exercises/E4_Pandas/#l3-q3","text":"Compute the difference of differences between consecutive numbers in a series using ser.diff() ser = pd . Series ([ 1 , 3 , 6 , 10 , 15 , 21 , 27 , 35 ])","title":"L3 Q3"},{"location":"exercises/E4_Pandas/#l3-q4","text":"Convert a series of dates to datetime format using pd.to_datetime() ser = pd . Series ([ '01 Jan 2010' , '02-02-2011' , '20120303' , '2013/04/04' , '2014-05-05' , '2015-06-06T12:20' ])","title":"L3 Q4"},{"location":"exercises/E4_Pandas/#l3-q5","text":"Compute the mean of weights grouped by fruit fruit = pd . Series ( np . random . choice ([ 'apple' , 'banana' , 'carrot' ], 10 )) weights = pd . Series ( np . linspace ( 1 , 10 , 10 )) print ( weights . tolist ()) print ( fruit . tolist ()) [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0] ['banana', 'banana', 'banana', 'carrot', 'carrot', 'carrot', 'carrot', 'carrot', 'banana', 'banana']","title":"L3 Q5"},{"location":"exercises/E4_Pandas/#l3-q6","text":"Compute the euclidian distance between vectors p and q (pythagorean theorem) p = pd . Series ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]) q = pd . Series ([ 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ])","title":"L3 Q6"},{"location":"exercises/E4_Pandas/#l3-q7","text":"Fill in missing values for dates with the previous dates' value using ser.bfill() or ser.ffill() ser = pd . Series ([ 1 , 10 , 3 , np . nan ], index = pd . to_datetime ([ '2000-01-01' , '2000-01-03' , '2000-01-06' , '2000-01-08' ])) print ( ser ) 2000-01-01 1.0 2000-01-03 10.0 2000-01-06 3.0 2000-01-08 NaN dtype: float64","title":"L3 Q7"},{"location":"exercises/E4_Pandas/#l3-q8","text":"Check if there are missing values in a dataframe using .isnull() , .values , and .any() df = pd . read_csv ( 'https://raw.githubusercontent.com/selva86/datasets/master/Cars93_miss.csv' )","title":"L3 Q8"},{"location":"exercises/E4_Pandas/#l3-q9","text":"Grab the first column and return it as a DataFrame rather than as a series df = pd . DataFrame ( np . arange ( 20 ) . reshape ( - 1 , 5 ), columns = list ( 'abcde' ))","title":"L3 Q9"},{"location":"exercises/E4_Pandas/#l3-q10","text":"In df , interchange columns 'a' and 'c'. df = pd . DataFrame ( np . arange ( 20 ) . reshape ( - 1 , 5 ), columns = list ( 'abcde' ))","title":"L3 Q10"},{"location":"exercises/E5_Numpy/","text":"Technology Fundamentals Course 1, Lab 3: Practice with Functions and Pandas \u00b6 Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assistants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu In this lab we will continue to practice writing functions as well as manipulating pandas DataFrames. Part I \u00b6 L3 Q1: Basic Function Writing \u00b6 Part A \u00b6 Write a Python function to find the Max of three numbers # Code Cell for L3 Q1 A Part B \u00b6 Write a Python function to multiply all the numbers in a list Example: Sample List : (8, 2, 3, -1, 7) Expected Output : -336 # Code Cell for L3 Q1 B Part C \u00b6 Write a Python program to reverse a string Example: Sample String : \"1234abcd\" Expected Output : \"dcba4321\" # Code Cell for L3 Q1 C L2 Q2: Finding Unique Elements \u00b6 Write a Python function that takes a list and returns a new list with unique elements of the first list Example: Sample List : [1,2,3,3,3,3,4,5] Unique List : [1, 2, 3, 4, 5] # Cell for L3 Q2 L3 Q3: Computing Factorials \u00b6 Write a Python function to calculate the factorial of a number (a non-negative integer). The function accepts the number as an argument Example: Input: 4 Output: 24 # Cell for L3 Q3 Practicing our hand at functions by implementing recursion \u00b6 We will practice the last exercise we did yesterday, this time using what we've learned about functions to write a recursive function A recursive function is a function that makes a call to itself. This is particularly well suited for tasks that would otherwise require a lot of memory to hold intermediary solutions (when they are combined with a strategy called memoization which we will shy away from here). The Fibonnaci sequence is a good place for such a problem. So is a factorial calculation. See here below 3! = 3 * 2 * 1 4! = 4 * 3 * 2 * 1 def factorial ( x ): \"\"\"This is a recursive function to find the factorial of an integer\"\"\" if x == 1 : return 1 else : # one trick to note that is common with recursive functions # is that the incrementation in the key variable is done # in the call to the function itself (vs a for loop) return ( x * factorial ( x - 1 )) n = 3 factorial ( n ) 6 In the above, we have on lines 5 and 6, what we call the baseline solution. It is the answer to the simplest subset of the problem. When we build a recursive tree, it is useful to think of the smallest problem, and work upwards, providing this leaf solution to nodes further up on the recursive tree. Like so: # 1! = 1 # 2! = 2 * 1! # 3! = 3 * 2! # N! = N * (N-1)! ... like ... like so This problem is intended to be a fun way to wrap our heads around functions... don't stress. If you want to see a further breakdown of the factorial problem, check out this link L3 Q4: Recursive Functions \u00b6 Using recursion, complete the Fibonacci sequence up to the 10th place using recursion and any or all of the following: * if elif else * range The Fibonacci sequence with indices: 0 1 1 2 3 5 8 etc.. Example input: index = 10 Example output: Index: 10 Value: 34 # Cell for L2 Q3 Part II \u00b6 L3 Q1 \u00b6 Convert the two series into the columns of a DataFrame ser1 = pd . Series ( list ( 'abcedfghijklmnopqrstuvwxyz' )) ser2 = pd . Series ( np . arange ( 26 )) L3 Q2 \u00b6 Conver the series into a DataFrame with 7 rows and 5 columns ser = pd . Series ( np . random . randint ( 1 , 10 , 35 )) L3 Q3 \u00b6 Compute the difference of differences between consecutive numbers in a series using ser.diff() ser = pd . Series ([ 1 , 3 , 6 , 10 , 15 , 21 , 27 , 35 ]) L3 Q4 \u00b6 Convert a series of dates to datetime format using pd.to_datetime() ser = pd . Series ([ '01 Jan 2010' , '02-02-2011' , '20120303' , '2013/04/04' , '2014-05-05' , '2015-06-06T12:20' ]) L3 Q5 \u00b6 Compute the mean of weights grouped by fruit fruit = pd . Series ( np . random . choice ([ 'apple' , 'banana' , 'carrot' ], 10 )) weights = pd . Series ( np . linspace ( 1 , 10 , 10 )) print ( weights . tolist ()) print ( fruit . tolist ()) [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0] ['banana', 'banana', 'banana', 'carrot', 'carrot', 'carrot', 'carrot', 'carrot', 'banana', 'banana'] L3 Q6 \u00b6 Compute the euclidian distance between vectors p and q (pythagorean theorem) p = pd . Series ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]) q = pd . Series ([ 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ]) L3 Q7 \u00b6 Fill in missing values for dates with the previous dates' value using ser.bfill() or ser.ffill() ser = pd . Series ([ 1 , 10 , 3 , np . nan ], index = pd . to_datetime ([ '2000-01-01' , '2000-01-03' , '2000-01-06' , '2000-01-08' ])) print ( ser ) 2000-01-01 1.0 2000-01-03 10.0 2000-01-06 3.0 2000-01-08 NaN dtype: float64 L3 Q8 \u00b6 Check if there are missing values in a dataframe using .isnull() , .values , and .any() df = pd . read_csv ( 'https://raw.githubusercontent.com/selva86/datasets/master/Cars93_miss.csv' ) L3 Q9 \u00b6 Grab the first column and return it as a DataFrame rather than as a series df = pd . DataFrame ( np . arange ( 20 ) . reshape ( - 1 , 5 ), columns = list ( 'abcde' )) L3 Q10 \u00b6 In df , interchange columns 'a' and 'c'. df = pd . DataFrame ( np . arange ( 20 ) . reshape ( - 1 , 5 ), columns = list ( 'abcde' ))","title":"E5 Numpy"},{"location":"exercises/E5_Numpy/#technology-fundamentals-course-1-lab-3-practice-with-functions-and-pandas","text":"Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assistants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu In this lab we will continue to practice writing functions as well as manipulating pandas DataFrames.","title":"Technology Fundamentals Course 1, Lab 3: Practice with Functions and Pandas"},{"location":"exercises/E5_Numpy/#part-i","text":"","title":"Part I"},{"location":"exercises/E5_Numpy/#l3-q1-basic-function-writing","text":"","title":"L3 Q1: Basic Function Writing"},{"location":"exercises/E5_Numpy/#part-a","text":"Write a Python function to find the Max of three numbers # Code Cell for L3 Q1 A","title":"Part A"},{"location":"exercises/E5_Numpy/#part-b","text":"Write a Python function to multiply all the numbers in a list Example: Sample List : (8, 2, 3, -1, 7) Expected Output : -336 # Code Cell for L3 Q1 B","title":"Part B"},{"location":"exercises/E5_Numpy/#part-c","text":"Write a Python program to reverse a string Example: Sample String : \"1234abcd\" Expected Output : \"dcba4321\" # Code Cell for L3 Q1 C","title":"Part C"},{"location":"exercises/E5_Numpy/#l2-q2-finding-unique-elements","text":"Write a Python function that takes a list and returns a new list with unique elements of the first list Example: Sample List : [1,2,3,3,3,3,4,5] Unique List : [1, 2, 3, 4, 5] # Cell for L3 Q2","title":"L2 Q2: Finding Unique Elements"},{"location":"exercises/E5_Numpy/#l3-q3-computing-factorials","text":"Write a Python function to calculate the factorial of a number (a non-negative integer). The function accepts the number as an argument Example: Input: 4 Output: 24 # Cell for L3 Q3","title":"L3 Q3: Computing Factorials"},{"location":"exercises/E5_Numpy/#practicing-our-hand-at-functions-by-implementing-recursion","text":"We will practice the last exercise we did yesterday, this time using what we've learned about functions to write a recursive function A recursive function is a function that makes a call to itself. This is particularly well suited for tasks that would otherwise require a lot of memory to hold intermediary solutions (when they are combined with a strategy called memoization which we will shy away from here). The Fibonnaci sequence is a good place for such a problem. So is a factorial calculation. See here below 3! = 3 * 2 * 1 4! = 4 * 3 * 2 * 1 def factorial ( x ): \"\"\"This is a recursive function to find the factorial of an integer\"\"\" if x == 1 : return 1 else : # one trick to note that is common with recursive functions # is that the incrementation in the key variable is done # in the call to the function itself (vs a for loop) return ( x * factorial ( x - 1 )) n = 3 factorial ( n ) 6 In the above, we have on lines 5 and 6, what we call the baseline solution. It is the answer to the simplest subset of the problem. When we build a recursive tree, it is useful to think of the smallest problem, and work upwards, providing this leaf solution to nodes further up on the recursive tree. Like so: # 1! = 1 # 2! = 2 * 1! # 3! = 3 * 2! # N! = N * (N-1)! ... like ... like so This problem is intended to be a fun way to wrap our heads around functions... don't stress. If you want to see a further breakdown of the factorial problem, check out this link","title":"Practicing our hand at functions by implementing recursion"},{"location":"exercises/E5_Numpy/#l3-q4-recursive-functions","text":"Using recursion, complete the Fibonacci sequence up to the 10th place using recursion and any or all of the following: * if elif else * range The Fibonacci sequence with indices: 0 1 1 2 3 5 8 etc.. Example input: index = 10 Example output: Index: 10 Value: 34 # Cell for L2 Q3","title":"L3 Q4: Recursive Functions"},{"location":"exercises/E5_Numpy/#part-ii","text":"","title":"Part II"},{"location":"exercises/E5_Numpy/#l3-q1","text":"Convert the two series into the columns of a DataFrame ser1 = pd . Series ( list ( 'abcedfghijklmnopqrstuvwxyz' )) ser2 = pd . Series ( np . arange ( 26 ))","title":"L3 Q1"},{"location":"exercises/E5_Numpy/#l3-q2","text":"Conver the series into a DataFrame with 7 rows and 5 columns ser = pd . Series ( np . random . randint ( 1 , 10 , 35 ))","title":"L3 Q2"},{"location":"exercises/E5_Numpy/#l3-q3","text":"Compute the difference of differences between consecutive numbers in a series using ser.diff() ser = pd . Series ([ 1 , 3 , 6 , 10 , 15 , 21 , 27 , 35 ])","title":"L3 Q3"},{"location":"exercises/E5_Numpy/#l3-q4","text":"Convert a series of dates to datetime format using pd.to_datetime() ser = pd . Series ([ '01 Jan 2010' , '02-02-2011' , '20120303' , '2013/04/04' , '2014-05-05' , '2015-06-06T12:20' ])","title":"L3 Q4"},{"location":"exercises/E5_Numpy/#l3-q5","text":"Compute the mean of weights grouped by fruit fruit = pd . Series ( np . random . choice ([ 'apple' , 'banana' , 'carrot' ], 10 )) weights = pd . Series ( np . linspace ( 1 , 10 , 10 )) print ( weights . tolist ()) print ( fruit . tolist ()) [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0] ['banana', 'banana', 'banana', 'carrot', 'carrot', 'carrot', 'carrot', 'carrot', 'banana', 'banana']","title":"L3 Q5"},{"location":"exercises/E5_Numpy/#l3-q6","text":"Compute the euclidian distance between vectors p and q (pythagorean theorem) p = pd . Series ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]) q = pd . Series ([ 10 , 9 , 8 , 7 , 6 , 5 , 4 , 3 , 2 , 1 ])","title":"L3 Q6"},{"location":"exercises/E5_Numpy/#l3-q7","text":"Fill in missing values for dates with the previous dates' value using ser.bfill() or ser.ffill() ser = pd . Series ([ 1 , 10 , 3 , np . nan ], index = pd . to_datetime ([ '2000-01-01' , '2000-01-03' , '2000-01-06' , '2000-01-08' ])) print ( ser ) 2000-01-01 1.0 2000-01-03 10.0 2000-01-06 3.0 2000-01-08 NaN dtype: float64","title":"L3 Q7"},{"location":"exercises/E5_Numpy/#l3-q8","text":"Check if there are missing values in a dataframe using .isnull() , .values , and .any() df = pd . read_csv ( 'https://raw.githubusercontent.com/selva86/datasets/master/Cars93_miss.csv' )","title":"L3 Q8"},{"location":"exercises/E5_Numpy/#l3-q9","text":"Grab the first column and return it as a DataFrame rather than as a series df = pd . DataFrame ( np . arange ( 20 ) . reshape ( - 1 , 5 ), columns = list ( 'abcde' ))","title":"L3 Q9"},{"location":"exercises/E5_Numpy/#l3-q10","text":"In df , interchange columns 'a' and 'c'. df = pd . DataFrame ( np . arange ( 20 ) . reshape ( - 1 , 5 ), columns = list ( 'abcde' ))","title":"L3 Q10"},{"location":"experimental/introduction/","text":"Introduction \u00b6 A lot of the things we have tried will probably not pan out. I like to keep the results of these experiments so we don't redo the work in 6 months. Having them compiled into the project site makes them visible and searchable.","title":"Introduction"},{"location":"experimental/introduction/#introduction","text":"A lot of the things we have tried will probably not pan out. I like to keep the results of these experiments so we don't redo the work in 6 months. Having them compiled into the project site makes them visible and searchable.","title":"Introduction"},{"location":"experimental/some-experiment/","text":"Some Experiment \u00b6 We wanted to see if X improved the performance of Y model. It didn't and here is how we know.","title":"Some Experiment"},{"location":"experimental/some-experiment/#some-experiment","text":"We wanted to see if X improved the performance of Y model. It didn't and here is how we know.","title":"Some Experiment"},{"location":"pre-processing/feature-engineering/","text":"import numpy as np import matplotlib.pyplot as plt Feature Engineering \u00b6 Now that our raw data has been cleaned it's time to do some feature engineering to squeeze some extra value of out the dataset. Below I've included a figure to show how that looks after converion to a static website. x = np . arange ( 100 ) y = np . random . rand ( 100 ) fig , ax = plt . subplots () ax . plot ( x , y ); ax . set ( ** { \"xlabel\" : \"Some Quantity\" , \"ylabel\" : \"Some Other Quantity\" } );","title":"Feature engineering"},{"location":"pre-processing/feature-engineering/#feature-engineering","text":"Now that our raw data has been cleaned it's time to do some feature engineering to squeeze some extra value of out the dataset. Below I've included a figure to show how that looks after converion to a static website. x = np . arange ( 100 ) y = np . random . rand ( 100 ) fig , ax = plt . subplots () ax . plot ( x , y ); ax . set ( ** { \"xlabel\" : \"Some Quantity\" , \"ylabel\" : \"Some Other Quantity\" } );","title":"Feature Engineering"},{"location":"pre-processing/introduction/","text":"Introduction \u00b6 Wahat pre-processing steps will we take and why?","title":"Introduction"},{"location":"pre-processing/introduction/#introduction","text":"Wahat pre-processing steps will we take and why?","title":"Introduction"},{"location":"pre-processing/missing-data/","text":"Missing Data \u00b6 Some data will almost certaintly be missing and we should handle that. Introduction \u00b6 This is to show the TOC that's generated by MkDocs . More sub-sections \u00b6 It works quite well. And some sub-sub-section \u00b6 However, it does force you to use \"#\" as the title and \"##\" as sections. And some sub-sub-section \u00b6 This effectively gives you fever section layers to work with. But do you really need sub-sub-sub-sections? \u00b6 I don't think so. And some sub-sub-section \u00b6 Summary \u00b6 This site has a TOC.","title":"Missing Data"},{"location":"pre-processing/missing-data/#missing-data","text":"Some data will almost certaintly be missing and we should handle that.","title":"Missing Data"},{"location":"pre-processing/missing-data/#introduction","text":"This is to show the TOC that's generated by MkDocs .","title":"Introduction"},{"location":"pre-processing/missing-data/#more-sub-sections","text":"It works quite well.","title":"More sub-sections"},{"location":"pre-processing/missing-data/#and-some-sub-sub-section","text":"However, it does force you to use \"#\" as the title and \"##\" as sections.","title":"And some sub-sub-section"},{"location":"pre-processing/missing-data/#and-some-sub-sub-section_1","text":"This effectively gives you fever section layers to work with.","title":"And some sub-sub-section"},{"location":"pre-processing/missing-data/#but-do-you-really-need-sub-sub-sub-sections","text":"I don't think so.","title":"But do you really need sub-sub-sub-sections?"},{"location":"pre-processing/missing-data/#and-some-sub-sub-section_2","text":"","title":"And some sub-sub-section"},{"location":"pre-processing/missing-data/#summary","text":"This site has a TOC.","title":"Summary"},{"location":"project/P1_Building_TicTacToe_in_Python/","text":"Technology Fundamentals Course 1, Project Part 1: Building the Game Tic-Tac-Toe \u00b6 Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assistants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu In this project notebook we'll be laying the foundations of our Tic Tac Toe game! In order to complete this notebook you will have had to have covered session 1-3 where we discuss python, conditionals and flow, and functions. 1.2 The Game \u00b6 back to top 1.2.1 Defining and Visualizing the Board \u00b6 1.2.1.1 Q1 \u00b6 First we need to define our board object (object in the loose sense for now!). This will hold the memory of where our current player pieces are. Say we eventually want to place in every board position a string variable, 'X' or 'O' . How would we represent the board? Also, how do we represent it in the least complex space possible, i.e. a list? Example output: [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '] # cell for Q1 [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '] 1.2.1.2 Q2 \u00b6 We would like to be able to visualize where our players have executed onto the board. How can we use what we've learned about print functions to visualize and empty board? hint: use | , \\n , .format() , and unpack our board elements using an asteric ( *board ) with the print function. Example output: | | | | | | | | | | | | # Cell for Q2 | | | | | | | | | | | | 1.2.1.3 Q3 \u00b6 After you've created your print function that take the board as an input. Test it out after filling your board with some X's and O's Example output: |X| | | | |O| | | | | | # Cell for Q3 |X| | | | |O| | | | | | 1.2.1.4 Q4 \u00b6 Now, if that looks good, wrap the print function in a function called visualize_board that take the variable board as a parameter. Example: visualize_board(board) |X| | | | |O| | | | | | # Cell for Q4 visualize_board ( board ) |X| | | | |O| | | | | | 1.2.1.5 Q5 \u00b6 It may be more useful to organize our board into a dictionary. Recreate your board variable now using 1-9 as the keys and empty strings ' ' as the values. What do you now need to feed into your function visualize_board for it to output the same result? hint: think of an attribute of the dictionary you just created. # Cell for Q5 1.2.1.6 Q6 \u00b6 Lastly, write a function called init_board that takes no parameters and returns the empty board dictionary # Cell for Q6 1.2.2 Checking for a Winner \u00b6 1.2.2.1 Q1 \u00b6 We will need a way to check if either player has won the game. Write down all the winning patterns using our board representation where places are numbered 1-9. Store these patterns in a list of lists called win_patterns hint: You should identify 8 winning patterns # Cell for Q1 1.2.2.2 Q2 \u00b6 Next, we will need to write a function that checks if there is a winning pattern on our board (i.e. all X's or all O's are in the indicated places on the board. But let's build the conditionals and logic methodically and not just jump into writing a for loop! First, access the first element of win_patterns and set it equal to a variable called pattern Example output: [1, 2, 3] # Cell for Q2 [1, 2, 3] 1.2.2.3 Q3 \u00b6 Use the board dictionary to get the board values at the positions stored in pattern Example Output: ['X', ' ', ' '] # Cell for Q3 ['X', ' ', ' '] 1.2.2.4 Q4 \u00b6 Now check for whether they contain 3 X's or 3 O's. Fill those spaces with all 'X's or all 'O's to check that your conditional is working properly. Your output should be a boolean : True or False # Cell for Q4 True 1.2.2.5 Q5 \u00b6 Now we're ready to wrap this in a for loop. Loop through every pattern in win_patterns and evaluate with your conditional. If 'X' wins then print out 'X' Won! if 'O' wins then print out 'O' Won! Example output: 'O' Won! # Cell for Q5 'O' Won! 1.2.2.6 Q6 \u00b6 Once we've detected a winner, there's no need to continue the for-loop. Put breaks in your loop so that it exits after detecting a winner # Cell for Q6 'O' Won! 1.2.2.7 Q7 \u00b6 let's wrap this in a function. Call your function check_winning and have it take board as an input parameter. Make what were previously your print statements into returns of their respective strings. Return an empty string if there is no winner detected. # Cell for Q7 Check that your code works using a board that has either 'X' or 'O' as a winner. # Cell for Q7 \"'X' Won!\" 1.2.3 Input from the User \u00b6 We can get input from the user like so: move = input () 1 1.2.3.1 Q1 \u00b6 Let's ask the user for their move and create some logic to embed this into the board. First write your string that will be presented to the user, asking them to play their move. player = 'X' board = init_board () visualize_board ( board . values ()) # WRITE YOUR STRING DOWN HERE move = input ( \" {} , YOUR STRING\" . format ( player )) | | | | | | | | | | | | X, YOUR STRING1 1.2.3.2 Q2 \u00b6 Great. Now we need to check that the position is actually available to the user, if not, ask the user for a different move; otherwise update the board and ask for the next move from the next player hint: you will need to convert your input into an int to be able to use it as a key in the board dictionary ### COPY YOUR CODE FROM ABOVE ### ### END COPY ### ### WRITE YOUR CONDITIONAL BELOW # note: you will need to think of both the conditional, as well as a method # to continue asking the player to make a move if the condition is not met # what kind of loop does this make you think of? while True : if # your condition # your code else : board [ move ] = player break ### END YOUR CODE winner = check_winning ( board ) | | | | | | | | | | | | X, YOUR STRING1 1.2.4 Creating a Game Handler \u00b6 1.2.4.1 Q1 \u00b6 We now need some code to orchestrate game play. It will decide who's turn it is, allow players to make moves, and detect when the game is over. Fill in the blanks in the code cell below to complete the game handler: print ( \"'X' will go first!\" ) board = init_board () # initiate a while loop while True : # create a for loop that iterates between X and O and stores this in the # variable name `player` for player in ([ 'X' , 'O' ]): # visualize the board visualize_board ( board . values ()) ### PASTE YOUR CODE FROM ABOVE FOR ASKING THE PLAYER FOR THEIR MOVE ### ### END PASTE ### ### WRITE THE LOGIC TO BREAK OUT OF THE WHILE LOOP BELOW ### # check if there is a winner using check_winning # if the return from check_winning is an empty string, # then continue the while loop, otherwise break the while loop and print # the name of the winner (X or O) winner = check_winning ( board ) if # your condition # your code else : # your code # break out of outer loop if winner != '' : break 'X' will go first! | | | | | | | | | | | | X, what's your move?1 |X| | | | | | | | | | | O, what's your move?1 O, that position is already taken! What's your move?1 O, that position is already taken! What's your move?1 O, that position is already taken! What's your move?2 |X|O| | | | | | | | | | X, what's your move?4 |X|O| | |X| | | | | | | O, what's your move?5 |X|O| | |X|O| | | | | | X, what's your move?7 'X' Won! 1.3 In Summary \u00b6 Paste all your working functions into the cell below for safe keeping:","title":"some experiment"},{"location":"project/P1_Building_TicTacToe_in_Python/#technology-fundamentals-course-1-project-part-1-building-the-game-tic-tac-toe","text":"Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assistants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu In this project notebook we'll be laying the foundations of our Tic Tac Toe game! In order to complete this notebook you will have had to have covered session 1-3 where we discuss python, conditionals and flow, and functions.","title":"Technology Fundamentals Course 1, Project Part 1: Building the Game Tic-Tac-Toe"},{"location":"project/P1_Building_TicTacToe_in_Python/#12-the-game","text":"back to top","title":"1.2 The Game"},{"location":"project/P1_Building_TicTacToe_in_Python/#121-defining-and-visualizing-the-board","text":"","title":"1.2.1 Defining and Visualizing the Board"},{"location":"project/P1_Building_TicTacToe_in_Python/#1211-q1","text":"First we need to define our board object (object in the loose sense for now!). This will hold the memory of where our current player pieces are. Say we eventually want to place in every board position a string variable, 'X' or 'O' . How would we represent the board? Also, how do we represent it in the least complex space possible, i.e. a list? Example output: [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '] # cell for Q1 [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']","title":"1.2.1.1 Q1"},{"location":"project/P1_Building_TicTacToe_in_Python/#1212-q2","text":"We would like to be able to visualize where our players have executed onto the board. How can we use what we've learned about print functions to visualize and empty board? hint: use | , \\n , .format() , and unpack our board elements using an asteric ( *board ) with the print function. Example output: | | | | | | | | | | | | # Cell for Q2 | | | | | | | | | | | |","title":"1.2.1.2 Q2"},{"location":"project/P1_Building_TicTacToe_in_Python/#1213-q3","text":"After you've created your print function that take the board as an input. Test it out after filling your board with some X's and O's Example output: |X| | | | |O| | | | | | # Cell for Q3 |X| | | | |O| | | | | |","title":"1.2.1.3 Q3"},{"location":"project/P1_Building_TicTacToe_in_Python/#1214-q4","text":"Now, if that looks good, wrap the print function in a function called visualize_board that take the variable board as a parameter. Example: visualize_board(board) |X| | | | |O| | | | | | # Cell for Q4 visualize_board ( board ) |X| | | | |O| | | | | |","title":"1.2.1.4 Q4"},{"location":"project/P1_Building_TicTacToe_in_Python/#1215-q5","text":"It may be more useful to organize our board into a dictionary. Recreate your board variable now using 1-9 as the keys and empty strings ' ' as the values. What do you now need to feed into your function visualize_board for it to output the same result? hint: think of an attribute of the dictionary you just created. # Cell for Q5","title":"1.2.1.5 Q5"},{"location":"project/P1_Building_TicTacToe_in_Python/#1216-q6","text":"Lastly, write a function called init_board that takes no parameters and returns the empty board dictionary # Cell for Q6","title":"1.2.1.6 Q6"},{"location":"project/P1_Building_TicTacToe_in_Python/#122-checking-for-a-winner","text":"","title":"1.2.2 Checking for a Winner"},{"location":"project/P1_Building_TicTacToe_in_Python/#1221-q1","text":"We will need a way to check if either player has won the game. Write down all the winning patterns using our board representation where places are numbered 1-9. Store these patterns in a list of lists called win_patterns hint: You should identify 8 winning patterns # Cell for Q1","title":"1.2.2.1 Q1"},{"location":"project/P1_Building_TicTacToe_in_Python/#1222-q2","text":"Next, we will need to write a function that checks if there is a winning pattern on our board (i.e. all X's or all O's are in the indicated places on the board. But let's build the conditionals and logic methodically and not just jump into writing a for loop! First, access the first element of win_patterns and set it equal to a variable called pattern Example output: [1, 2, 3] # Cell for Q2 [1, 2, 3]","title":"1.2.2.2 Q2"},{"location":"project/P1_Building_TicTacToe_in_Python/#1223-q3","text":"Use the board dictionary to get the board values at the positions stored in pattern Example Output: ['X', ' ', ' '] # Cell for Q3 ['X', ' ', ' ']","title":"1.2.2.3 Q3"},{"location":"project/P1_Building_TicTacToe_in_Python/#1224-q4","text":"Now check for whether they contain 3 X's or 3 O's. Fill those spaces with all 'X's or all 'O's to check that your conditional is working properly. Your output should be a boolean : True or False # Cell for Q4 True","title":"1.2.2.4 Q4"},{"location":"project/P1_Building_TicTacToe_in_Python/#1225-q5","text":"Now we're ready to wrap this in a for loop. Loop through every pattern in win_patterns and evaluate with your conditional. If 'X' wins then print out 'X' Won! if 'O' wins then print out 'O' Won! Example output: 'O' Won! # Cell for Q5 'O' Won!","title":"1.2.2.5 Q5"},{"location":"project/P1_Building_TicTacToe_in_Python/#1226-q6","text":"Once we've detected a winner, there's no need to continue the for-loop. Put breaks in your loop so that it exits after detecting a winner # Cell for Q6 'O' Won!","title":"1.2.2.6 Q6"},{"location":"project/P1_Building_TicTacToe_in_Python/#1227-q7","text":"let's wrap this in a function. Call your function check_winning and have it take board as an input parameter. Make what were previously your print statements into returns of their respective strings. Return an empty string if there is no winner detected. # Cell for Q7 Check that your code works using a board that has either 'X' or 'O' as a winner. # Cell for Q7 \"'X' Won!\"","title":"1.2.2.7 Q7"},{"location":"project/P1_Building_TicTacToe_in_Python/#123-input-from-the-user","text":"We can get input from the user like so: move = input () 1","title":"1.2.3 Input from the User"},{"location":"project/P1_Building_TicTacToe_in_Python/#1231-q1","text":"Let's ask the user for their move and create some logic to embed this into the board. First write your string that will be presented to the user, asking them to play their move. player = 'X' board = init_board () visualize_board ( board . values ()) # WRITE YOUR STRING DOWN HERE move = input ( \" {} , YOUR STRING\" . format ( player )) | | | | | | | | | | | | X, YOUR STRING1","title":"1.2.3.1 Q1"},{"location":"project/P1_Building_TicTacToe_in_Python/#1232-q2","text":"Great. Now we need to check that the position is actually available to the user, if not, ask the user for a different move; otherwise update the board and ask for the next move from the next player hint: you will need to convert your input into an int to be able to use it as a key in the board dictionary ### COPY YOUR CODE FROM ABOVE ### ### END COPY ### ### WRITE YOUR CONDITIONAL BELOW # note: you will need to think of both the conditional, as well as a method # to continue asking the player to make a move if the condition is not met # what kind of loop does this make you think of? while True : if # your condition # your code else : board [ move ] = player break ### END YOUR CODE winner = check_winning ( board ) | | | | | | | | | | | | X, YOUR STRING1","title":"1.2.3.2 Q2"},{"location":"project/P1_Building_TicTacToe_in_Python/#124-creating-a-game-handler","text":"","title":"1.2.4 Creating a Game Handler"},{"location":"project/P1_Building_TicTacToe_in_Python/#1241-q1","text":"We now need some code to orchestrate game play. It will decide who's turn it is, allow players to make moves, and detect when the game is over. Fill in the blanks in the code cell below to complete the game handler: print ( \"'X' will go first!\" ) board = init_board () # initiate a while loop while True : # create a for loop that iterates between X and O and stores this in the # variable name `player` for player in ([ 'X' , 'O' ]): # visualize the board visualize_board ( board . values ()) ### PASTE YOUR CODE FROM ABOVE FOR ASKING THE PLAYER FOR THEIR MOVE ### ### END PASTE ### ### WRITE THE LOGIC TO BREAK OUT OF THE WHILE LOOP BELOW ### # check if there is a winner using check_winning # if the return from check_winning is an empty string, # then continue the while loop, otherwise break the while loop and print # the name of the winner (X or O) winner = check_winning ( board ) if # your condition # your code else : # your code # break out of outer loop if winner != '' : break 'X' will go first! | | | | | | | | | | | | X, what's your move?1 |X| | | | | | | | | | | O, what's your move?1 O, that position is already taken! What's your move?1 O, that position is already taken! What's your move?1 O, that position is already taken! What's your move?2 |X|O| | | | | | | | | | X, what's your move?4 |X|O| | |X| | | | | | | O, what's your move?5 |X|O| | |X|O| | | | | | X, what's your move?7 'X' Won!","title":"1.2.4.1 Q1"},{"location":"project/P1_Building_TicTacToe_in_Python/#13-in-summary","text":"Paste all your working functions into the cell below for safe keeping:","title":"1.3 In Summary"},{"location":"project/P2_OOP_in_TicTacToe/","text":"Technology Fundamentals Course 2, Project Part 2: Building Agents and Object Oriented Programming \u00b6 Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assitants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu In part II of our tic-tac-toe and AI journey, we're going to take all the functions we've defined so far and make them object oriented! 2.0 Preparing Environment and Importing Data \u00b6 back to top 2.0.1 Import Packages \u00b6 back to top def visualize_board ( board_values ): \"\"\" Visualizes the board during gameplay Parameters ---------- board_values : list The values ('X', 'O', or ' ' at each board location) Returns ------- None \"\"\" print ( \"| {} | {} | {} | \\n | {} | {} | {} | \\n | {} | {} | {} | \\n \" . format ( * board_values ) ) def init_board (): \"\"\" Initializes an empty board for the start of gameplay Parameters ---------- None Returns ------- board : dict a dictionary with keys 1-9 and single space (' ') string as values \"\"\" return { 1 : ' ' , 2 : ' ' , 3 : ' ' , 4 : ' ' , 5 : ' ' , 6 : ' ' , 7 : ' ' , 8 : ' ' , 9 : ' ' ,} # the keys on the game board where, if filled completely with X's or O's a # winner has occurred win_patterns = [[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ], [ 1 , 4 , 7 ], [ 2 , 5 , 8 ], [ 3 , 6 , 9 ], [ 1 , 5 , 9 ], [ 7 , 5 , 3 ]] def check_winning ( board ): \"\"\" Checks if the game has a winner Parameters ---------- board : dict the tictactoe board as a dictionary Returns ------- win_statement : str defaults to an empty string if no winner. Otherwise 'X' Won! or 'O' Won! \"\"\" for pattern in win_patterns : values = [ board [ i ] for i in pattern ] if values == [ 'X' , 'X' , 'X' ]: return \"'X' Won!\" elif values == [ 'O' , 'O' , 'O' ]: return \"'O' Won!\" return '' def tic_tac_toe (): \"\"\" The tictactoe game engine. Runs the while loop that handles the game Parameters ---------- None Returns ------- None \"\"\" print ( \"'X' will go first!\" ) board = init_board () while True : for player in ([ 'X' , 'O' ]): visualize_board ( board . values ()) move = int ( input ( \" {} , what's your move?\" . format ( player ))) if board [ move ] != ' ' : move = input ( \" {} , that position is already taken! \" \\ \"What's your move?\" . format ( player )) else : board [ move ] = player winner = check_winning ( board ) if winner == '' : continue else : print ( winner ) break if winner != '' : break 2.1 OOP \u00b6 back to top Notice how we have so many functions with calls to our main object board . Let's try to organize this into a more object oriented scheme. We'll also want to write a function that recognizes when a stalemate has been reached! 2.1.1 Thinking in Objects \u00b6 It's helpful to think of how our code can be divided into useful segments that can then be extended, interfaced, used elsewhere, etc. It's just like we had when we were playing with our pokeball and pokemon objects. In that case, it made sense to make two separate objects one for pokemon and one for pokeballs. Can you think of any way that would make sense to divide our code into objects? I can think of two. 2.1.2 class TicTacToe \u00b6 the first object will be one that handles our board and all of its methods and attributes. In this class called TicTacToe we will have the attributes: * winner , initialized as an empty string, and updates at the conclusion of a game with 'X', 'O', or 'Stalemate' * start_player initialized as an empty string and updates at the start of a game with 'X' or 'O' * board initialized as our empty board dictionary * win_patterns the list of lists containing the winning patterns of the game and then we will have three different methods, each of which takes one parameter, self visualize_board check_winning check_stalemate : a new function. Returns \"It's a stalemate!\" and sets self.winner = \"Stalemate\" (note there is a bug in the way this is currently written, we will move along for now and work through a debugging tutorial later this week!) Q1 Attributes of TicTacToe \u00b6 Within class TicTacToe, define the attributes described above class TicTacToe : # create winner and start_player parameters with default values as empty # strings within __init__ def __init__ ( self ): ################################## ########### Attributes ########### ################################## # set self.winner and self.start_player with the parameters from __init__ # set self.board as a dictionary with ' ' as values and 1-9 as keys # set self.win_patterns with the 8 winning patterns (a list of lists) Q2 Methods of TicTacToe \u00b6 Here now we will define the methods of TicTacToe . Paste your attributes from the above cell, into the bellow cell so that your changes carry over. class TicTacToe : # create winner and start_player parameters with default values as empty # strings within __init__ def __init__ ( self ): ################################## ########### Attributes ########### ################################## # set self.winner and self.start_player with the parameters from __init__ # set self.board as a dictionary with ' ' as values and 1-9 as keys # set self.win_patterns with the 8 winning patterns (a list of lists) ############################### ########### METHODS ########### ############################### # the other functions are now passed self # define visualize_board and update the board # object with self.board (and maybe self.board.values() depending on how your # visualize_board function is written) # define check_winning and similarly update win_patterns, # board, and winner to be accessed via the self. Be sure to update the # attribute self.winner with the appropriate winner in the function # here the definition of check_stalemate is given def check_stalemate ( self ): if ' ' not in self . board . values (): self . winner = 'Stalemate' return \"It's a stalemate!\" 2.1.3 The Game Engine (just a function for now) \u00b6 Next we'll create a function that runs game play using TicTacToe as an object that it passes around. I've already done the heavy lifting of replacing references to attributes (board, win_patterns) and methods (visualize_board, check_winning) to pass through the TicTacToe object. I also added the option for the user to quit the game by typing in 'q' to the input line if they would like. Q3 Add Condition for Stalemate \u00b6 def play_game (): print ( \"'X' will go first!\" ) tic_tac_toe = TicTacToe () while True : for player in ([ 'X' , 'O' ]): tic_tac_toe . visualize_board () move = input ( \" {} , what's your move?\" . format ( player )) #################################################################### # we're going to allow the user to quit the game from the input line #################################################################### if move in [ 'q' , 'quit' ]: tic_tac_toe . winner = 'F' print ( 'quiting the game' ) break move = int ( move ) if tic_tac_toe . board [ move ] != ' ' : while True : move = input ( \" {} , that position is already taken! \" \\ \"What's your move?\" . format ( player )) move = int ( move ) if tic_tac_toe . board [ move ] != ' ' : continue else : break tic_tac_toe . board [ move ] = player # the winner varaible will now be checked within the board object tic_tac_toe . check_winning () ############################## # CALL check_stalemate() BELOW ############################## if tic_tac_toe . winner == '' : clear_output () continue ########################################################################## # write an elif statement that checks if self.winner is 'Stalemate' and # subsequently visualizes the board and breaks out of the while loop # also print out check_stalemante so the returned string is shown to the # user ########################################################################## else : print ( tic_tac_toe . check_winning ()) tic_tac_toe . visualize_board () break if tic_tac_toe . winner != '' : break Let's test our new module play_game () |X|O|X| |O|O|X| |X| |O| X, what's your move?8 It's a stalemate! |X|O|X| |O|O|X| |X|X|O|","title":"P2 OOP in TicTacToe"},{"location":"project/P2_OOP_in_TicTacToe/#technology-fundamentals-course-2-project-part-2-building-agents-and-object-oriented-programming","text":"Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assitants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu In part II of our tic-tac-toe and AI journey, we're going to take all the functions we've defined so far and make them object oriented!","title":"Technology Fundamentals Course 2, Project Part 2: Building Agents and Object Oriented Programming"},{"location":"project/P2_OOP_in_TicTacToe/#20-preparing-environment-and-importing-data","text":"back to top","title":"2.0 Preparing Environment and Importing Data"},{"location":"project/P2_OOP_in_TicTacToe/#201-import-packages","text":"back to top def visualize_board ( board_values ): \"\"\" Visualizes the board during gameplay Parameters ---------- board_values : list The values ('X', 'O', or ' ' at each board location) Returns ------- None \"\"\" print ( \"| {} | {} | {} | \\n | {} | {} | {} | \\n | {} | {} | {} | \\n \" . format ( * board_values ) ) def init_board (): \"\"\" Initializes an empty board for the start of gameplay Parameters ---------- None Returns ------- board : dict a dictionary with keys 1-9 and single space (' ') string as values \"\"\" return { 1 : ' ' , 2 : ' ' , 3 : ' ' , 4 : ' ' , 5 : ' ' , 6 : ' ' , 7 : ' ' , 8 : ' ' , 9 : ' ' ,} # the keys on the game board where, if filled completely with X's or O's a # winner has occurred win_patterns = [[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ], [ 1 , 4 , 7 ], [ 2 , 5 , 8 ], [ 3 , 6 , 9 ], [ 1 , 5 , 9 ], [ 7 , 5 , 3 ]] def check_winning ( board ): \"\"\" Checks if the game has a winner Parameters ---------- board : dict the tictactoe board as a dictionary Returns ------- win_statement : str defaults to an empty string if no winner. Otherwise 'X' Won! or 'O' Won! \"\"\" for pattern in win_patterns : values = [ board [ i ] for i in pattern ] if values == [ 'X' , 'X' , 'X' ]: return \"'X' Won!\" elif values == [ 'O' , 'O' , 'O' ]: return \"'O' Won!\" return '' def tic_tac_toe (): \"\"\" The tictactoe game engine. Runs the while loop that handles the game Parameters ---------- None Returns ------- None \"\"\" print ( \"'X' will go first!\" ) board = init_board () while True : for player in ([ 'X' , 'O' ]): visualize_board ( board . values ()) move = int ( input ( \" {} , what's your move?\" . format ( player ))) if board [ move ] != ' ' : move = input ( \" {} , that position is already taken! \" \\ \"What's your move?\" . format ( player )) else : board [ move ] = player winner = check_winning ( board ) if winner == '' : continue else : print ( winner ) break if winner != '' : break","title":"2.0.1 Import Packages"},{"location":"project/P2_OOP_in_TicTacToe/#21-oop","text":"back to top Notice how we have so many functions with calls to our main object board . Let's try to organize this into a more object oriented scheme. We'll also want to write a function that recognizes when a stalemate has been reached!","title":"2.1 OOP"},{"location":"project/P2_OOP_in_TicTacToe/#211-thinking-in-objects","text":"It's helpful to think of how our code can be divided into useful segments that can then be extended, interfaced, used elsewhere, etc. It's just like we had when we were playing with our pokeball and pokemon objects. In that case, it made sense to make two separate objects one for pokemon and one for pokeballs. Can you think of any way that would make sense to divide our code into objects? I can think of two.","title":"2.1.1 Thinking in Objects"},{"location":"project/P2_OOP_in_TicTacToe/#212-class-tictactoe","text":"the first object will be one that handles our board and all of its methods and attributes. In this class called TicTacToe we will have the attributes: * winner , initialized as an empty string, and updates at the conclusion of a game with 'X', 'O', or 'Stalemate' * start_player initialized as an empty string and updates at the start of a game with 'X' or 'O' * board initialized as our empty board dictionary * win_patterns the list of lists containing the winning patterns of the game and then we will have three different methods, each of which takes one parameter, self visualize_board check_winning check_stalemate : a new function. Returns \"It's a stalemate!\" and sets self.winner = \"Stalemate\" (note there is a bug in the way this is currently written, we will move along for now and work through a debugging tutorial later this week!)","title":"2.1.2 class TicTacToe"},{"location":"project/P2_OOP_in_TicTacToe/#q1-attributes-of-tictactoe","text":"Within class TicTacToe, define the attributes described above class TicTacToe : # create winner and start_player parameters with default values as empty # strings within __init__ def __init__ ( self ): ################################## ########### Attributes ########### ################################## # set self.winner and self.start_player with the parameters from __init__ # set self.board as a dictionary with ' ' as values and 1-9 as keys # set self.win_patterns with the 8 winning patterns (a list of lists)","title":"Q1 Attributes of TicTacToe"},{"location":"project/P2_OOP_in_TicTacToe/#q2-methods-of-tictactoe","text":"Here now we will define the methods of TicTacToe . Paste your attributes from the above cell, into the bellow cell so that your changes carry over. class TicTacToe : # create winner and start_player parameters with default values as empty # strings within __init__ def __init__ ( self ): ################################## ########### Attributes ########### ################################## # set self.winner and self.start_player with the parameters from __init__ # set self.board as a dictionary with ' ' as values and 1-9 as keys # set self.win_patterns with the 8 winning patterns (a list of lists) ############################### ########### METHODS ########### ############################### # the other functions are now passed self # define visualize_board and update the board # object with self.board (and maybe self.board.values() depending on how your # visualize_board function is written) # define check_winning and similarly update win_patterns, # board, and winner to be accessed via the self. Be sure to update the # attribute self.winner with the appropriate winner in the function # here the definition of check_stalemate is given def check_stalemate ( self ): if ' ' not in self . board . values (): self . winner = 'Stalemate' return \"It's a stalemate!\"","title":"Q2 Methods of TicTacToe"},{"location":"project/P2_OOP_in_TicTacToe/#213-the-game-engine-just-a-function-for-now","text":"Next we'll create a function that runs game play using TicTacToe as an object that it passes around. I've already done the heavy lifting of replacing references to attributes (board, win_patterns) and methods (visualize_board, check_winning) to pass through the TicTacToe object. I also added the option for the user to quit the game by typing in 'q' to the input line if they would like.","title":"2.1.3 The Game Engine (just a function for now)"},{"location":"project/P2_OOP_in_TicTacToe/#q3-add-condition-for-stalemate","text":"def play_game (): print ( \"'X' will go first!\" ) tic_tac_toe = TicTacToe () while True : for player in ([ 'X' , 'O' ]): tic_tac_toe . visualize_board () move = input ( \" {} , what's your move?\" . format ( player )) #################################################################### # we're going to allow the user to quit the game from the input line #################################################################### if move in [ 'q' , 'quit' ]: tic_tac_toe . winner = 'F' print ( 'quiting the game' ) break move = int ( move ) if tic_tac_toe . board [ move ] != ' ' : while True : move = input ( \" {} , that position is already taken! \" \\ \"What's your move?\" . format ( player )) move = int ( move ) if tic_tac_toe . board [ move ] != ' ' : continue else : break tic_tac_toe . board [ move ] = player # the winner varaible will now be checked within the board object tic_tac_toe . check_winning () ############################## # CALL check_stalemate() BELOW ############################## if tic_tac_toe . winner == '' : clear_output () continue ########################################################################## # write an elif statement that checks if self.winner is 'Stalemate' and # subsequently visualizes the board and breaks out of the while loop # also print out check_stalemante so the returned string is shown to the # user ########################################################################## else : print ( tic_tac_toe . check_winning ()) tic_tac_toe . visualize_board () break if tic_tac_toe . winner != '' : break Let's test our new module play_game () |X|O|X| |O|O|X| |X| |O| X, what's your move?8 It's a stalemate! |X|O|X| |O|O|X| |X|X|O|","title":"Q3 Add Condition for Stalemate"},{"location":"project/P3_Random_TicTacToe_Agents/","text":"Technology Fundamentals Course 2, Project Part 2: Building Agents and Object Oriented Programming (Random AI Agent) \u00b6 Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assitants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu In part II of our tic-tac-toe and AI journey, we're going to take all the functions we've defined so far and make them object oriented! 2.0 Preparing Environment and Importing Data \u00b6 back to top 2.0.1 Import Packages \u00b6 back to top def visualize_board ( board_values ): \"\"\" Visualizes the board during gameplay Parameters ---------- board_values : list The values ('X', 'O', or ' ' at each board location) Returns ------- None \"\"\" print ( \"| {} | {} | {} | \\n | {} | {} | {} | \\n | {} | {} | {} | \\n \" . format ( * board_values ) ) def init_board (): \"\"\" Initializes an empty board for the start of gameplay Parameters ---------- None Returns ------- board : dict a dictionary with keys 1-9 and single space (' ') string as values \"\"\" return { 1 : ' ' , 2 : ' ' , 3 : ' ' , 4 : ' ' , 5 : ' ' , 6 : ' ' , 7 : ' ' , 8 : ' ' , 9 : ' ' ,} # the keys on the game board where, if filled completely with X's or O's a # winner has occurred win_patterns = [[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ], [ 1 , 4 , 7 ], [ 2 , 5 , 8 ], [ 3 , 6 , 9 ], [ 1 , 5 , 9 ], [ 7 , 5 , 3 ]] def check_winning ( board ): \"\"\" Checks if the game has a winner Parameters ---------- board : dict the tictactoe board as a dictionary Returns ------- win_statement : str defaults to an empty string if no winner. Otherwise 'X' Won! or 'O' Won! \"\"\" for pattern in win_patterns : values = [ board [ i ] for i in pattern ] if values == [ 'X' , 'X' , 'X' ]: return \"'X' Won!\" elif values == [ 'O' , 'O' , 'O' ]: return \"'O' Won!\" return '' def tic_tac_toe (): \"\"\" The tictactoe game engine. Runs the while loop that handles the game Parameters ---------- None Returns ------- None \"\"\" print ( \"'X' will go first!\" ) board = init_board () while True : for player in ([ 'X' , 'O' ]): visualize_board ( board . values ()) move = int ( input ( \" {} , what's your move?\" . format ( player ))) if board [ move ] != ' ' : move = input ( \" {} , that position is already taken! \" \\ \"What's your move?\" . format ( player )) else : board [ move ] = player winner = check_winning ( board ) if winner == '' : continue else : print ( winner ) break if winner != '' : break 2.1 OOP \u00b6 back to top Notice how we have so many functions with calls to our main object board . Let's try to organize this into a more object oriented scheme. We'll also want to write a function that recognizes when a stalemate has been reached! 2.1.1 Thinking in Objects \u00b6 It's helpful to think of how our code can be divided into useful segments that can then be extended, interfaced, used elsewhere, etc. It's just like we had when we were playing with our pokeball and pokemon objects. In that case, it made sense to make two separate objects one for pokemon and one for pokeballs. Can you think of any way that would make sense to divide our code into objects? I can think of two. 2.1.2 class TicTacToe \u00b6 the first object will be one that handles our board and all of its methods and attributes. In this class called TicTacToe we will have the attributes: * winner , initialized as an empty string, and updates at the conclusion of a game with 'X', 'O', or 'Stalemate' * start_player initialized as an empty string and updates at the start of a game with 'X' or 'O' * board initialized as our empty board dictionary * win_patterns the list of lists containing the winning patterns of the game and then we will have three different methods, each of which takes one parameter, self visualize_board check_winning check_stalemate : a new function. Returns \"It's a stalemate!\" and sets self.winner = \"Stalemate\" (note there is a bug in the way this is currently written, we will move along for now and work through a debugging tutorial later this week!) Q1 Attributes of TicTacToe \u00b6 Within class TicTacToe, define the attributes described above class TicTacToe : # create winner and start_player parameters with default values as empty # strings within __init__ def __init__ ( self ): pass ################################## ########### Attributes ########### ################################## # set self.winner and self.start_player with the parameters from __init__ # set self.board as a dictionary with ' ' as values and 1-9 as keys # set self.win_patterns with the 8 winning patterns (a list of lists) Q2 Methods of TicTacToe \u00b6 Here now we will define the methods of TicTacToe . Paste your attributes from the above cell, into the bellow cell so that your changes carry over. class TicTacToe : # create winner and start_player parameters with default values as empty # strings within __init__ def __init__ ( self ): pass # remove after completing ################################## ########### Attributes ########### ################################## # set self.winner and self.start_player with the parameters from __init__ # set self.board as a dictionary with ' ' as values and 1-9 as keys # set self.win_patterns with the 8 winning patterns (a list of lists) ############################### ########### METHODS ########### ############################### # the other functions are now passed self # define visualize_board and update all internal calls to the board # object with self.board (and maybe self.board.values() depending on how your # visualize_board function is written) # define check_winning and similarly update all calls to win_patterns, # board, and winner to be accessed via the self. Be sure to update the # attribute self.winner with the appropriate winner in the function # here the definition of check_stalemate is given def check_stalemate ( self ): if ' ' not in self . board . values (): self . winner = 'Stalemate' return \"It's a stalemate!\" 2.1.3 The Game Engine (just a function for now) \u00b6 Next we'll create a function that runs game play using TicTacToe as an object that it passes around. I've already done the heavy lifting of replacing references to attributes (board, win_patterns) and methods (visualize_board, check_winning) to pass through the TicTacToe object. I also added the option for the user to quit the game by typing in 'q' to the input line if they would like. Q3 Add Condition for Stalemate \u00b6 def play_game (): print ( \"'X' will go first!\" ) tic_tac_toe = TicTacToe () while True : for player in ([ 'X' , 'O' ]): tic_tac_toe . visualize_board () move = input ( \" {} , what's your move?\" . format ( player )) #################################################################### # we're going to allow the user to quit the game from the input line #################################################################### if move in [ 'q' , 'quit' ]: tic_tac_toe . winner = 'F' print ( 'quiting the game' ) break move = int ( move ) if tic_tac_toe . board [ move ] != ' ' : while True : move = input ( \" {} , that position is already taken! \" \\ \"What's your move?\" . format ( player )) move = int ( move ) if tic_tac_toe . board [ move ] != ' ' : continue else : break tic_tac_toe . board [ move ] = player # the winner varaible will now be checked within the board object tic_tac_toe . check_winning () ############################## # CALL check_stalemate() BELOW ############################## if tic_tac_toe . winner == '' : clear_output () continue ########################################################################## # write an elif statement that checks if self.winner is 'Stalemate' and # subsequently visualizes the board and breaks out of the while loop # also print out check_stalemante so the returned string is shown to the # user ########################################################################## else : print ( tic_tac_toe . check_winning ()) tic_tac_toe . visualize_board () break if tic_tac_toe . winner != '' : break Let's test our new module play_game () 2.2 Creating an Agent \u00b6 we'll start by creating an agent that just selects a random playing number Q4 Use a Random Number Generator \u00b6 import the random library. Use it to randomly generate numbers 1-9 (inclusive? yep, inclusive. We're going to use this to select the keys in our board dictionary! \ud83d\udcda) # cell for Q4 # generates a random number 1-9 Q5 Play a Valid Move \u00b6 Nice, now that we are generating random numbers 1-9. We need to check if a random number that's been drawn, is a valid move. We're going to do this with... yeah that's right you guessed it, a while loop while True : # generate a random number 1-9 and set it equalt to the variable name <move> if # if the move is invalid then... continue else : # otherwise the move is valid and we can exit the loop! break Wow and that's it, we just need to wrap it in our play_game function. Before we do that, we need to handle the ability of our engine to perform 1 and 2 player games. In order to do this, I'm going to introduce a new object to organize how the game is setup. I'm going to call it player_meta player_meta = {'first': {'label': 'X', 'type': 'human'}, 'second': {'label': 'O', 'type': 'human'}} Q6 Game Setup and Random AI \u00b6 I will skeleton out where the input questions need to be sent to the user, it is your task to determine how the player_meta dictionary should subsequently be updated! def play_game (): tic_tac_toe = TicTacToe () ############################################################################## ################################# GAME SETUP ################################# ############################################################################## players = int ( input ( \"How many Players? (type 0, 1, or 2)\" )) player_meta = { 'first' : { 'label' : 'X' , 'type' : 'human' }, 'second' : { 'label' : 'O' , 'type' : 'human' }} if players == 1 : first = input ( \"who will go first? (X, (AI), or O (Player))\" ) if first == 'O' : ### UPDATE PLAYER_META HERE ### else : ### UPDATE PLAYER_META HERE ### elif players == 0 : # insert wargames quote first = random . choice ([ 'X' , 'O' ]) if first == 'O' : ### UPDATE PLAYER_META HERE ### else : ### UPDATE PLAYER_META HERE ### ############################################################################## ################################# GAME PLAY ################################## ############################################################################## while True : # in the following line, instead of alternating between 'X' and 'O', we now # alternate between the first and second player, which has the associated # metadata of label (X or O) and type (ai or human). for player in [ 'first' , 'second' ]: tic_tac_toe . visualize_board () # we set the player_label and player_type according to which player is # playing in this round player_label = player_meta [ player ][ 'label' ] player_type = player_meta [ player ][ 'type' ] if player_type == 'human' : move = input ( \" {} , what's your move?\" . format ( player_label )) # we're going to allow the user to quit the game from the input line if move in [ 'q' , 'quit' ]: tic_tac_toe . winner = 'F' print ( 'quiting the game' ) break move = int ( move ) if tic_tac_toe . board [ move ] != ' ' : while True : move = input ( \" {} , that position is already taken! \" \\ \"What's your move?\" . format ( player )) move = int ( move ) if tic_tac_toe . board [ move ] != ' ' : continue else : break ########################################################################## ################### YOUR RANDOM AI AGENT CODE GOES HERE ################## ########################################################################## else : pass # delete this line when finished tic_tac_toe . board [ move ] = player_label # the winner varaible will now be check within the board object tic_tac_toe . check_winning () tic_tac_toe . check_stalemate () if tic_tac_toe . winner == '' : # clear_output() continue elif tic_tac_toe . winner == 'Stalemate' : print ( tic_tac_toe . check_stalemate ()) tic_tac_toe . visualize_board () break else : print ( tic_tac_toe . check_winning ()) tic_tac_toe . visualize_board () break if tic_tac_toe . winner != '' : return tic_tac_toe play_game () 2.3 OOP and Inheritance \u00b6 We'll want to reconfigure our code a bit to allow for AI to play AI. We'll use this feature to record a bunch of games and generate some data for analysis and, eventually, machine learning training. We also want to run our game system without having any input from the user for our data generation. This is a good point to reconfigure our code. Notice how long and bulky play_game is getting. Q7 Inheriting from TicTacToe \u00b6 To better organize our code, we're going to create a new class called GameEngine and we're going to inherit all the properties of TicTacToe . Do we remember how to do this? let's try it. The simplest way is the following: class GameEngine(TicTacToe): def __init__(self): super().__init__() Nice. Pretty clean, right? The only new thing here I want us to introduce is the parameter setup setup will determine whether we have the user enter fields to setup the player_meta dictionary, or whether we automatically set it up to allow ai vs ai and not require input from the user (which we will need if we are to run thousands of games automatically for data generation!!!) class GameEngine(TicTacToe): def __init__(self, setup='auto'): super().__init__() self.setup = setup notice the new parameter flag! We're going to use it in this next step. Be sure to: access all methods/attributes via the self use code you already wrote above for setting up and for the random AI agent class GameEngine ( TicTacToe ): def __init__ ( self , setup = 'auto' ): super () . __init__ () self . setup = setup def setup_game ( self ): if self . setup == 'user' : ########################################################################## ## YOUR GAME SETUP CODE FROM ABOVE GOES HERE, NOTE THE NEW IF STATEMENT ## ########################################################################## elif self . setup == 'auto' : ########################################################################## ## THE NEW AUTOSETUP FEATURE THAT WILL ALLOW THE GAME TO RANDOMLY SETUP ## ########################################################################## first = random . choice ([ 'X' , 'O' ]) if first == 'O' : self . start_player = 'O' self . player_meta = { 'second' : { 'label' : 'X' , 'type' : 'ai' }, 'first' : { 'label' : 'O' , 'type' : 'ai' }} else : self . start_player = 'X' self . player_meta = { 'first' : { 'label' : 'X' , 'type' : 'ai' }, 'second' : { 'label' : 'O' , 'type' : 'ai' }} def play_game ( self ): while True : for player in [ 'first' , 'second' ]: self . visualize_board () player_label = self . player_meta [ player ][ 'label' ] player_type = self . player_meta [ player ][ 'type' ] if player_type == 'human' : move = input ( \" {} , what's your move?\" . format ( player_label )) # we're going to allow the user to quit the game from the input line if move in [ 'q' , 'quit' ]: self . winner = 'F' print ( 'quiting the game' ) break move = int ( move ) if self . board [ move ] != ' ' : while True : move = input ( \" {} , that position is already taken! \" \\ \"What's your move?\" . format ( player )) move = int ( move ) if self . board [ move ] != ' ' : continue else : break ######################################################################## ################### YOUR RANDOM AI AGENT CODE GOES HERE ################ ######################################################################## else : pass # delete this line when finished self . board [ move ] = player_label # the winner varaible will now be check within the board object self . check_winning () self . check_stalemate () if self . winner == '' : # clear_output() continue elif self . winner == 'Stalemate' : print ( self . check_stalemate ()) self . visualize_board () break else : print ( self . check_winning ()) self . visualize_board () break if self . winner != '' : return self And now we can practice using our Engine: game = GameEngine () game . setup_game () board = game . play_game () | | | | | | | | | | | | | | | | | |X| | | | | | | | | | | |X| | | |O| | | |X| | | |X| | | |O| | | |X|O| | |X| | | |O| | | |X|O| | |X| | |X|O| | | |X|O| | |X| | |X|O|O| |X|X|O| | |X| | |X|O|O| |X|X|O| |O|X| | |X|O|O| It's a stalemate! |X|X|O| |O|X|X| |X|O|O| Q8 Test the Engine \u00b6 Check that we can still use the GameEngine to play a human v human or human v AI game of tic tac toe: game = GameEngine ( setup = 'user' ) game . setup_game () How many Players? (type 0, 1, or 2)1 who will go first? (X, (AI), or O (Player))O game . play_game () | | | | | | | | | | | | O, what's your move?1 |O| | | | | | | | | | | |O| |X| | | | | | | | | O, what's your move?4 |O| |X| |O| | | | | | | |O| |X| |O| | | | | |X| O, what's your move?7 'O' Won! |O| |X| |O| | | |O| |X| <__main__.GameEngine at 0x7f71d3713050> 2.4 Simulating Data \u00b6 We will now want to run our game thousands of times to collect data for building our AI agents. The following code should run without any input from the user: game = GameEngine() game.setup_game() board = game.play_game() game = GameEngine () game . setup_game () board = game . play_game () | | | | | | | | | | | | | | | | | | | | | | |O| | | | | | | |X| | | |O| | |O| | | | |X| | | |O| | |O| | |X| |X| | | |O| |O|O| | |X| |X| | | |O| |O|O| | |X| |X| | |X|O| 'O' Won! |O|O| | |X|O|X| | |X|O| Q9 Record 1000 Games \u00b6 Write a for loop that creates 1000 games and saves the game data in the following dictionary format, replacing <THE GAME NUMBER> with whatever index you are using in the for loop: data = {} data['game {}'.format(<THE GAME NUMBER>)] = {'board': board.board, 'winner': board.winner, 'starting player': board.start_player} # Cell for Q9 import json with open ( 'data.txt' , 'w' ) as outfile : json . dump ( data , outfile )","title":"P3 Random TicTacToe Agents"},{"location":"project/P3_Random_TicTacToe_Agents/#technology-fundamentals-course-2-project-part-2-building-agents-and-object-oriented-programming-random-ai-agent","text":"Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assitants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu In part II of our tic-tac-toe and AI journey, we're going to take all the functions we've defined so far and make them object oriented!","title":"Technology Fundamentals Course 2, Project Part 2: Building Agents and Object Oriented Programming (Random AI Agent)"},{"location":"project/P3_Random_TicTacToe_Agents/#20-preparing-environment-and-importing-data","text":"back to top","title":"2.0 Preparing Environment and Importing Data"},{"location":"project/P3_Random_TicTacToe_Agents/#201-import-packages","text":"back to top def visualize_board ( board_values ): \"\"\" Visualizes the board during gameplay Parameters ---------- board_values : list The values ('X', 'O', or ' ' at each board location) Returns ------- None \"\"\" print ( \"| {} | {} | {} | \\n | {} | {} | {} | \\n | {} | {} | {} | \\n \" . format ( * board_values ) ) def init_board (): \"\"\" Initializes an empty board for the start of gameplay Parameters ---------- None Returns ------- board : dict a dictionary with keys 1-9 and single space (' ') string as values \"\"\" return { 1 : ' ' , 2 : ' ' , 3 : ' ' , 4 : ' ' , 5 : ' ' , 6 : ' ' , 7 : ' ' , 8 : ' ' , 9 : ' ' ,} # the keys on the game board where, if filled completely with X's or O's a # winner has occurred win_patterns = [[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ], [ 1 , 4 , 7 ], [ 2 , 5 , 8 ], [ 3 , 6 , 9 ], [ 1 , 5 , 9 ], [ 7 , 5 , 3 ]] def check_winning ( board ): \"\"\" Checks if the game has a winner Parameters ---------- board : dict the tictactoe board as a dictionary Returns ------- win_statement : str defaults to an empty string if no winner. Otherwise 'X' Won! or 'O' Won! \"\"\" for pattern in win_patterns : values = [ board [ i ] for i in pattern ] if values == [ 'X' , 'X' , 'X' ]: return \"'X' Won!\" elif values == [ 'O' , 'O' , 'O' ]: return \"'O' Won!\" return '' def tic_tac_toe (): \"\"\" The tictactoe game engine. Runs the while loop that handles the game Parameters ---------- None Returns ------- None \"\"\" print ( \"'X' will go first!\" ) board = init_board () while True : for player in ([ 'X' , 'O' ]): visualize_board ( board . values ()) move = int ( input ( \" {} , what's your move?\" . format ( player ))) if board [ move ] != ' ' : move = input ( \" {} , that position is already taken! \" \\ \"What's your move?\" . format ( player )) else : board [ move ] = player winner = check_winning ( board ) if winner == '' : continue else : print ( winner ) break if winner != '' : break","title":"2.0.1 Import Packages"},{"location":"project/P3_Random_TicTacToe_Agents/#21-oop","text":"back to top Notice how we have so many functions with calls to our main object board . Let's try to organize this into a more object oriented scheme. We'll also want to write a function that recognizes when a stalemate has been reached!","title":"2.1 OOP"},{"location":"project/P3_Random_TicTacToe_Agents/#211-thinking-in-objects","text":"It's helpful to think of how our code can be divided into useful segments that can then be extended, interfaced, used elsewhere, etc. It's just like we had when we were playing with our pokeball and pokemon objects. In that case, it made sense to make two separate objects one for pokemon and one for pokeballs. Can you think of any way that would make sense to divide our code into objects? I can think of two.","title":"2.1.1 Thinking in Objects"},{"location":"project/P3_Random_TicTacToe_Agents/#212-class-tictactoe","text":"the first object will be one that handles our board and all of its methods and attributes. In this class called TicTacToe we will have the attributes: * winner , initialized as an empty string, and updates at the conclusion of a game with 'X', 'O', or 'Stalemate' * start_player initialized as an empty string and updates at the start of a game with 'X' or 'O' * board initialized as our empty board dictionary * win_patterns the list of lists containing the winning patterns of the game and then we will have three different methods, each of which takes one parameter, self visualize_board check_winning check_stalemate : a new function. Returns \"It's a stalemate!\" and sets self.winner = \"Stalemate\" (note there is a bug in the way this is currently written, we will move along for now and work through a debugging tutorial later this week!)","title":"2.1.2 class TicTacToe"},{"location":"project/P3_Random_TicTacToe_Agents/#q1-attributes-of-tictactoe","text":"Within class TicTacToe, define the attributes described above class TicTacToe : # create winner and start_player parameters with default values as empty # strings within __init__ def __init__ ( self ): pass ################################## ########### Attributes ########### ################################## # set self.winner and self.start_player with the parameters from __init__ # set self.board as a dictionary with ' ' as values and 1-9 as keys # set self.win_patterns with the 8 winning patterns (a list of lists)","title":"Q1 Attributes of TicTacToe"},{"location":"project/P3_Random_TicTacToe_Agents/#q2-methods-of-tictactoe","text":"Here now we will define the methods of TicTacToe . Paste your attributes from the above cell, into the bellow cell so that your changes carry over. class TicTacToe : # create winner and start_player parameters with default values as empty # strings within __init__ def __init__ ( self ): pass # remove after completing ################################## ########### Attributes ########### ################################## # set self.winner and self.start_player with the parameters from __init__ # set self.board as a dictionary with ' ' as values and 1-9 as keys # set self.win_patterns with the 8 winning patterns (a list of lists) ############################### ########### METHODS ########### ############################### # the other functions are now passed self # define visualize_board and update all internal calls to the board # object with self.board (and maybe self.board.values() depending on how your # visualize_board function is written) # define check_winning and similarly update all calls to win_patterns, # board, and winner to be accessed via the self. Be sure to update the # attribute self.winner with the appropriate winner in the function # here the definition of check_stalemate is given def check_stalemate ( self ): if ' ' not in self . board . values (): self . winner = 'Stalemate' return \"It's a stalemate!\"","title":"Q2 Methods of TicTacToe"},{"location":"project/P3_Random_TicTacToe_Agents/#213-the-game-engine-just-a-function-for-now","text":"Next we'll create a function that runs game play using TicTacToe as an object that it passes around. I've already done the heavy lifting of replacing references to attributes (board, win_patterns) and methods (visualize_board, check_winning) to pass through the TicTacToe object. I also added the option for the user to quit the game by typing in 'q' to the input line if they would like.","title":"2.1.3 The Game Engine (just a function for now)"},{"location":"project/P3_Random_TicTacToe_Agents/#q3-add-condition-for-stalemate","text":"def play_game (): print ( \"'X' will go first!\" ) tic_tac_toe = TicTacToe () while True : for player in ([ 'X' , 'O' ]): tic_tac_toe . visualize_board () move = input ( \" {} , what's your move?\" . format ( player )) #################################################################### # we're going to allow the user to quit the game from the input line #################################################################### if move in [ 'q' , 'quit' ]: tic_tac_toe . winner = 'F' print ( 'quiting the game' ) break move = int ( move ) if tic_tac_toe . board [ move ] != ' ' : while True : move = input ( \" {} , that position is already taken! \" \\ \"What's your move?\" . format ( player )) move = int ( move ) if tic_tac_toe . board [ move ] != ' ' : continue else : break tic_tac_toe . board [ move ] = player # the winner varaible will now be checked within the board object tic_tac_toe . check_winning () ############################## # CALL check_stalemate() BELOW ############################## if tic_tac_toe . winner == '' : clear_output () continue ########################################################################## # write an elif statement that checks if self.winner is 'Stalemate' and # subsequently visualizes the board and breaks out of the while loop # also print out check_stalemante so the returned string is shown to the # user ########################################################################## else : print ( tic_tac_toe . check_winning ()) tic_tac_toe . visualize_board () break if tic_tac_toe . winner != '' : break Let's test our new module play_game ()","title":"Q3 Add Condition for Stalemate"},{"location":"project/P3_Random_TicTacToe_Agents/#22-creating-an-agent","text":"we'll start by creating an agent that just selects a random playing number","title":"2.2 Creating an Agent"},{"location":"project/P3_Random_TicTacToe_Agents/#q4-use-a-random-number-generator","text":"import the random library. Use it to randomly generate numbers 1-9 (inclusive? yep, inclusive. We're going to use this to select the keys in our board dictionary! \ud83d\udcda) # cell for Q4 # generates a random number 1-9","title":"Q4 Use a Random Number Generator"},{"location":"project/P3_Random_TicTacToe_Agents/#q5-play-a-valid-move","text":"Nice, now that we are generating random numbers 1-9. We need to check if a random number that's been drawn, is a valid move. We're going to do this with... yeah that's right you guessed it, a while loop while True : # generate a random number 1-9 and set it equalt to the variable name <move> if # if the move is invalid then... continue else : # otherwise the move is valid and we can exit the loop! break Wow and that's it, we just need to wrap it in our play_game function. Before we do that, we need to handle the ability of our engine to perform 1 and 2 player games. In order to do this, I'm going to introduce a new object to organize how the game is setup. I'm going to call it player_meta player_meta = {'first': {'label': 'X', 'type': 'human'}, 'second': {'label': 'O', 'type': 'human'}}","title":"Q5 Play a Valid Move"},{"location":"project/P3_Random_TicTacToe_Agents/#q6-game-setup-and-random-ai","text":"I will skeleton out where the input questions need to be sent to the user, it is your task to determine how the player_meta dictionary should subsequently be updated! def play_game (): tic_tac_toe = TicTacToe () ############################################################################## ################################# GAME SETUP ################################# ############################################################################## players = int ( input ( \"How many Players? (type 0, 1, or 2)\" )) player_meta = { 'first' : { 'label' : 'X' , 'type' : 'human' }, 'second' : { 'label' : 'O' , 'type' : 'human' }} if players == 1 : first = input ( \"who will go first? (X, (AI), or O (Player))\" ) if first == 'O' : ### UPDATE PLAYER_META HERE ### else : ### UPDATE PLAYER_META HERE ### elif players == 0 : # insert wargames quote first = random . choice ([ 'X' , 'O' ]) if first == 'O' : ### UPDATE PLAYER_META HERE ### else : ### UPDATE PLAYER_META HERE ### ############################################################################## ################################# GAME PLAY ################################## ############################################################################## while True : # in the following line, instead of alternating between 'X' and 'O', we now # alternate between the first and second player, which has the associated # metadata of label (X or O) and type (ai or human). for player in [ 'first' , 'second' ]: tic_tac_toe . visualize_board () # we set the player_label and player_type according to which player is # playing in this round player_label = player_meta [ player ][ 'label' ] player_type = player_meta [ player ][ 'type' ] if player_type == 'human' : move = input ( \" {} , what's your move?\" . format ( player_label )) # we're going to allow the user to quit the game from the input line if move in [ 'q' , 'quit' ]: tic_tac_toe . winner = 'F' print ( 'quiting the game' ) break move = int ( move ) if tic_tac_toe . board [ move ] != ' ' : while True : move = input ( \" {} , that position is already taken! \" \\ \"What's your move?\" . format ( player )) move = int ( move ) if tic_tac_toe . board [ move ] != ' ' : continue else : break ########################################################################## ################### YOUR RANDOM AI AGENT CODE GOES HERE ################## ########################################################################## else : pass # delete this line when finished tic_tac_toe . board [ move ] = player_label # the winner varaible will now be check within the board object tic_tac_toe . check_winning () tic_tac_toe . check_stalemate () if tic_tac_toe . winner == '' : # clear_output() continue elif tic_tac_toe . winner == 'Stalemate' : print ( tic_tac_toe . check_stalemate ()) tic_tac_toe . visualize_board () break else : print ( tic_tac_toe . check_winning ()) tic_tac_toe . visualize_board () break if tic_tac_toe . winner != '' : return tic_tac_toe play_game ()","title":"Q6 Game Setup and Random AI"},{"location":"project/P3_Random_TicTacToe_Agents/#23-oop-and-inheritance","text":"We'll want to reconfigure our code a bit to allow for AI to play AI. We'll use this feature to record a bunch of games and generate some data for analysis and, eventually, machine learning training. We also want to run our game system without having any input from the user for our data generation. This is a good point to reconfigure our code. Notice how long and bulky play_game is getting.","title":"2.3 OOP and Inheritance"},{"location":"project/P3_Random_TicTacToe_Agents/#q7-inheriting-from-tictactoe","text":"To better organize our code, we're going to create a new class called GameEngine and we're going to inherit all the properties of TicTacToe . Do we remember how to do this? let's try it. The simplest way is the following: class GameEngine(TicTacToe): def __init__(self): super().__init__() Nice. Pretty clean, right? The only new thing here I want us to introduce is the parameter setup setup will determine whether we have the user enter fields to setup the player_meta dictionary, or whether we automatically set it up to allow ai vs ai and not require input from the user (which we will need if we are to run thousands of games automatically for data generation!!!) class GameEngine(TicTacToe): def __init__(self, setup='auto'): super().__init__() self.setup = setup notice the new parameter flag! We're going to use it in this next step. Be sure to: access all methods/attributes via the self use code you already wrote above for setting up and for the random AI agent class GameEngine ( TicTacToe ): def __init__ ( self , setup = 'auto' ): super () . __init__ () self . setup = setup def setup_game ( self ): if self . setup == 'user' : ########################################################################## ## YOUR GAME SETUP CODE FROM ABOVE GOES HERE, NOTE THE NEW IF STATEMENT ## ########################################################################## elif self . setup == 'auto' : ########################################################################## ## THE NEW AUTOSETUP FEATURE THAT WILL ALLOW THE GAME TO RANDOMLY SETUP ## ########################################################################## first = random . choice ([ 'X' , 'O' ]) if first == 'O' : self . start_player = 'O' self . player_meta = { 'second' : { 'label' : 'X' , 'type' : 'ai' }, 'first' : { 'label' : 'O' , 'type' : 'ai' }} else : self . start_player = 'X' self . player_meta = { 'first' : { 'label' : 'X' , 'type' : 'ai' }, 'second' : { 'label' : 'O' , 'type' : 'ai' }} def play_game ( self ): while True : for player in [ 'first' , 'second' ]: self . visualize_board () player_label = self . player_meta [ player ][ 'label' ] player_type = self . player_meta [ player ][ 'type' ] if player_type == 'human' : move = input ( \" {} , what's your move?\" . format ( player_label )) # we're going to allow the user to quit the game from the input line if move in [ 'q' , 'quit' ]: self . winner = 'F' print ( 'quiting the game' ) break move = int ( move ) if self . board [ move ] != ' ' : while True : move = input ( \" {} , that position is already taken! \" \\ \"What's your move?\" . format ( player )) move = int ( move ) if self . board [ move ] != ' ' : continue else : break ######################################################################## ################### YOUR RANDOM AI AGENT CODE GOES HERE ################ ######################################################################## else : pass # delete this line when finished self . board [ move ] = player_label # the winner varaible will now be check within the board object self . check_winning () self . check_stalemate () if self . winner == '' : # clear_output() continue elif self . winner == 'Stalemate' : print ( self . check_stalemate ()) self . visualize_board () break else : print ( self . check_winning ()) self . visualize_board () break if self . winner != '' : return self And now we can practice using our Engine: game = GameEngine () game . setup_game () board = game . play_game () | | | | | | | | | | | | | | | | | |X| | | | | | | | | | | |X| | | |O| | | |X| | | |X| | | |O| | | |X|O| | |X| | | |O| | | |X|O| | |X| | |X|O| | | |X|O| | |X| | |X|O|O| |X|X|O| | |X| | |X|O|O| |X|X|O| |O|X| | |X|O|O| It's a stalemate! |X|X|O| |O|X|X| |X|O|O|","title":"Q7 Inheriting from TicTacToe"},{"location":"project/P3_Random_TicTacToe_Agents/#q8-test-the-engine","text":"Check that we can still use the GameEngine to play a human v human or human v AI game of tic tac toe: game = GameEngine ( setup = 'user' ) game . setup_game () How many Players? (type 0, 1, or 2)1 who will go first? (X, (AI), or O (Player))O game . play_game () | | | | | | | | | | | | O, what's your move?1 |O| | | | | | | | | | | |O| |X| | | | | | | | | O, what's your move?4 |O| |X| |O| | | | | | | |O| |X| |O| | | | | |X| O, what's your move?7 'O' Won! |O| |X| |O| | | |O| |X| <__main__.GameEngine at 0x7f71d3713050>","title":"Q8 Test the Engine"},{"location":"project/P3_Random_TicTacToe_Agents/#24-simulating-data","text":"We will now want to run our game thousands of times to collect data for building our AI agents. The following code should run without any input from the user: game = GameEngine() game.setup_game() board = game.play_game() game = GameEngine () game . setup_game () board = game . play_game () | | | | | | | | | | | | | | | | | | | | | | |O| | | | | | | |X| | | |O| | |O| | | | |X| | | |O| | |O| | |X| |X| | | |O| |O|O| | |X| |X| | | |O| |O|O| | |X| |X| | |X|O| 'O' Won! |O|O| | |X|O|X| | |X|O|","title":"2.4 Simulating Data"},{"location":"project/P3_Random_TicTacToe_Agents/#q9-record-1000-games","text":"Write a for loop that creates 1000 games and saves the game data in the following dictionary format, replacing <THE GAME NUMBER> with whatever index you are using in the for loop: data = {} data['game {}'.format(<THE GAME NUMBER>)] = {'board': board.board, 'winner': board.winner, 'starting player': board.start_player} # Cell for Q9 import json with open ( 'data.txt' , 'w' ) as outfile : json . dump ( data , outfile )","title":"Q9 Record 1000 Games"},{"location":"project/P4_Debugging_TicTacToe_Agents/","text":"Technology Fundamentals Course 2, Project Part 2: Building Agents and Object Oriented Programming (Debugging) \u00b6 Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assitants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu We're going to debug our tictactoe game. 4.0 Preparing Environment and Importing Data \u00b6 back to top 4.0.1 Import Packages \u00b6 back to top import random import pandas as pd import numpy as np import matplotlib.pyplot as plt class TicTacToe : # can preset winner and starting player def __init__ ( self , winner = '' , start_player = '' ): self . winner = winner self . start_player = start_player self . board = { 1 : ' ' , 2 : ' ' , 3 : ' ' , 4 : ' ' , 5 : ' ' , 6 : ' ' , 7 : ' ' , 8 : ' ' , 9 : ' ' ,} self . win_patterns = [[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ], [ 1 , 4 , 7 ], [ 2 , 5 , 8 ], [ 3 , 6 , 9 ], [ 1 , 5 , 9 ], [ 7 , 5 , 3 ]] # the other functions are now passed self def visualize_board ( self ): print ( \"| {} | {} | {} | \\n | {} | {} | {} | \\n | {} | {} | {} | \\n \" . format ( * self . board . values ()) ) def check_winning ( self ): for pattern in self . win_patterns : values = [ self . board [ i ] for i in pattern ] if values == [ 'X' , 'X' , 'X' ]: self . winner = 'X' # we update the winner status return \"'X' Won!\" elif values == [ 'O' , 'O' , 'O' ]: self . winner = 'O' return \"'O' Won!\" return '' def check_stalemate ( self ): if ' ' not in self . board . values (): self . winner = 'Stalemate' return \"It's a stalemate!\" class GameEngine ( TicTacToe ): def __init__ ( self , setup = 'auto' ): super () . __init__ () self . setup = setup def setup_game ( self ): if self . setup == 'user' : players = int ( input ( \"How many Players? (type 0, 1, or 2)\" )) self . player_meta = { 'first' : { 'label' : 'X' , 'type' : 'ai' }, 'second' : { 'label' : 'O' , 'type' : 'human' }} if players == 1 : first = input ( \"who will go first? (X, (AI), or O (Player))\" ) if first == 'O' : self . player_meta = { 'second' : { 'label' : 'X' , 'type' : 'ai' }, 'first' : { 'label' : 'O' , 'type' : 'human' }} else : self . player_meta = { 'first' : { 'label' : 'X' , 'type' : 'ai' }, 'second' : { 'label' : 'O' , 'type' : 'human' }} elif players == 0 : first = random . choice ([ 'X' , 'O' ]) if first == 'O' : self . player_meta = { 'second' : { 'label' : 'X' , 'type' : 'ai' }, 'first' : { 'label' : 'O' , 'type' : 'ai' }} else : self . player_meta = { 'first' : { 'label' : 'X' , 'type' : 'ai' }, 'second' : { 'label' : 'O' , 'type' : 'ai' }} elif self . setup == 'auto' : first = random . choice ([ 'X' , 'O' ]) if first == 'O' : self . start_player = 'O' self . player_meta = { 'second' : { 'label' : 'X' , 'type' : 'ai' }, 'first' : { 'label' : 'O' , 'type' : 'ai' }} else : self . start_player = 'X' self . player_meta = { 'first' : { 'label' : 'X' , 'type' : 'ai' }, 'second' : { 'label' : 'O' , 'type' : 'ai' }} def play_game ( self ): while True : for player in [ 'first' , 'second' ]: self . visualize_board () player_label = self . player_meta [ player ][ 'label' ] player_type = self . player_meta [ player ][ 'type' ] if player_type == 'human' : move = input ( \" {} , what's your move?\" . format ( player_label )) # we're going to allow the user to quit the game from the input line if move in [ 'q' , 'quit' ]: self . winner = 'F' print ( 'quiting the game' ) break move = int ( move ) if self . board [ move ] != ' ' : while True : move = input ( \" {} , that position is already taken! \" \\ \"What's your move?\" . format ( player )) move = int ( move ) if self . board [ move ] != ' ' : continue else : break else : while True : move = random . randint ( 1 , 9 ) if self . board [ move ] != ' ' : continue print ( 'test' ) else : break self . board [ move ] = player_label # the winner varaible will now be check within the board object self . check_winning () self . check_stalemate () if self . winner == '' : continue elif self . winner == 'Stalemate' : print ( self . check_stalemate ()) self . visualize_board () break else : print ( self . check_winning ()) self . visualize_board () break if self . winner != '' : return self 4.0.2 Load Dataset \u00b6 back to top 4.1 It's a Bug! \u00b6 Your friend is developing this tictactoe game in python, and they notice something peculiar; the game engine doesn't correctly identify a winning move if it's the last game square to be played, rather, it counts it as a tie! Help your friend debug their code! 4.1.1 Make the error repeatable \u00b6 random . seed ( 12 ) #here to make this operate in the same way everytime game = GameEngine ( setup = 'auto' ) game . setup_game () game . play_game () | | | | | | | | | | | | | | | | | |O| | | | | | | | | | | |O| | | | |X| | | | | | |O|O| | | |X| | | |X| | |O|O| | | |X| | | |X| | |O|O| |O| |X| |X| |X| | |O|O| |O| |X| |X| |X| | |O|O| |O|O|X| |X| |X| |X|O|O| |O|O|X| It's a stalemate! |X|O|X| |X|O|O| |O|O|X| <__main__.GameEngine at 0x7fecf3833590> # use random.seed(1) here to make this operate in the same way everytime game = GameEngine ( setup = 'auto' ) game . setup_game () game . play_game () | | | | | | | | | | | | | | | | | |O| | | | | | | | | | | |O| | | | |X| | | | | | |O|O| | | |X| | | |X| | |O|O| | | |X| | | |X| | |O|O| |O| |X| |X| |X| | |O|O| |O| |X| |X| |X| | |O|O| |O|O|X| |X| |X| |X|O|O| |O|O|X| It's a stalemate! |X|O|X| |X|O|O| |O|O|X| <__main__.GameEngine at 0x7ff5a010e6d0> game . winner 'O' game . check_stalemate () \"It's a stalemate!\" game . check_winning () \"'O' Won!\" game . winner 'O' ############################################################ ### COPY ALL OF THE FIRST CELL HERE AND MAKE YOUR EDITS #### ############################################################ random . seed ( 12 ) game = GameEngine ( setup = 'auto' ) game . setup_game () game . play_game () | | | | | | | | | | | | | | | | | |O| | | | | | | | | | | |O| | | | |X| | | | | | |O|O| | | |X| | | |X| | |O|O| | | |X| | | |X| | |O|O| |O| |X| |X| |X| | |O|O| |O| |X| |X| |X| | |O|O| |O|O|X| |X| |X| |X|O|O| |O|O|X| 'O' Won! |X|O|X| |X|O|O| |O|O|X| <__main__.GameEngine at 0x7ff59a34d910>","title":"P4 Debugging TicTacToe Agents"},{"location":"project/P4_Debugging_TicTacToe_Agents/#technology-fundamentals-course-2-project-part-2-building-agents-and-object-oriented-programming-debugging","text":"Instructor : Wesley Beckner Contact : wesleybeckner@gmail.com Teaching Assitants : Varsha Bang, Harsha Vardhan Contact : vbang@uw.edu, harshav@uw.edu We're going to debug our tictactoe game.","title":"Technology Fundamentals Course 2, Project Part 2: Building Agents and Object Oriented Programming (Debugging)"},{"location":"project/P4_Debugging_TicTacToe_Agents/#40-preparing-environment-and-importing-data","text":"back to top","title":"4.0 Preparing Environment and Importing Data"},{"location":"project/P4_Debugging_TicTacToe_Agents/#401-import-packages","text":"back to top import random import pandas as pd import numpy as np import matplotlib.pyplot as plt class TicTacToe : # can preset winner and starting player def __init__ ( self , winner = '' , start_player = '' ): self . winner = winner self . start_player = start_player self . board = { 1 : ' ' , 2 : ' ' , 3 : ' ' , 4 : ' ' , 5 : ' ' , 6 : ' ' , 7 : ' ' , 8 : ' ' , 9 : ' ' ,} self . win_patterns = [[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ], [ 1 , 4 , 7 ], [ 2 , 5 , 8 ], [ 3 , 6 , 9 ], [ 1 , 5 , 9 ], [ 7 , 5 , 3 ]] # the other functions are now passed self def visualize_board ( self ): print ( \"| {} | {} | {} | \\n | {} | {} | {} | \\n | {} | {} | {} | \\n \" . format ( * self . board . values ()) ) def check_winning ( self ): for pattern in self . win_patterns : values = [ self . board [ i ] for i in pattern ] if values == [ 'X' , 'X' , 'X' ]: self . winner = 'X' # we update the winner status return \"'X' Won!\" elif values == [ 'O' , 'O' , 'O' ]: self . winner = 'O' return \"'O' Won!\" return '' def check_stalemate ( self ): if ' ' not in self . board . values (): self . winner = 'Stalemate' return \"It's a stalemate!\" class GameEngine ( TicTacToe ): def __init__ ( self , setup = 'auto' ): super () . __init__ () self . setup = setup def setup_game ( self ): if self . setup == 'user' : players = int ( input ( \"How many Players? (type 0, 1, or 2)\" )) self . player_meta = { 'first' : { 'label' : 'X' , 'type' : 'ai' }, 'second' : { 'label' : 'O' , 'type' : 'human' }} if players == 1 : first = input ( \"who will go first? (X, (AI), or O (Player))\" ) if first == 'O' : self . player_meta = { 'second' : { 'label' : 'X' , 'type' : 'ai' }, 'first' : { 'label' : 'O' , 'type' : 'human' }} else : self . player_meta = { 'first' : { 'label' : 'X' , 'type' : 'ai' }, 'second' : { 'label' : 'O' , 'type' : 'human' }} elif players == 0 : first = random . choice ([ 'X' , 'O' ]) if first == 'O' : self . player_meta = { 'second' : { 'label' : 'X' , 'type' : 'ai' }, 'first' : { 'label' : 'O' , 'type' : 'ai' }} else : self . player_meta = { 'first' : { 'label' : 'X' , 'type' : 'ai' }, 'second' : { 'label' : 'O' , 'type' : 'ai' }} elif self . setup == 'auto' : first = random . choice ([ 'X' , 'O' ]) if first == 'O' : self . start_player = 'O' self . player_meta = { 'second' : { 'label' : 'X' , 'type' : 'ai' }, 'first' : { 'label' : 'O' , 'type' : 'ai' }} else : self . start_player = 'X' self . player_meta = { 'first' : { 'label' : 'X' , 'type' : 'ai' }, 'second' : { 'label' : 'O' , 'type' : 'ai' }} def play_game ( self ): while True : for player in [ 'first' , 'second' ]: self . visualize_board () player_label = self . player_meta [ player ][ 'label' ] player_type = self . player_meta [ player ][ 'type' ] if player_type == 'human' : move = input ( \" {} , what's your move?\" . format ( player_label )) # we're going to allow the user to quit the game from the input line if move in [ 'q' , 'quit' ]: self . winner = 'F' print ( 'quiting the game' ) break move = int ( move ) if self . board [ move ] != ' ' : while True : move = input ( \" {} , that position is already taken! \" \\ \"What's your move?\" . format ( player )) move = int ( move ) if self . board [ move ] != ' ' : continue else : break else : while True : move = random . randint ( 1 , 9 ) if self . board [ move ] != ' ' : continue print ( 'test' ) else : break self . board [ move ] = player_label # the winner varaible will now be check within the board object self . check_winning () self . check_stalemate () if self . winner == '' : continue elif self . winner == 'Stalemate' : print ( self . check_stalemate ()) self . visualize_board () break else : print ( self . check_winning ()) self . visualize_board () break if self . winner != '' : return self","title":"4.0.1 Import Packages"},{"location":"project/P4_Debugging_TicTacToe_Agents/#402-load-dataset","text":"back to top","title":"4.0.2 Load Dataset"},{"location":"project/P4_Debugging_TicTacToe_Agents/#41-its-a-bug","text":"Your friend is developing this tictactoe game in python, and they notice something peculiar; the game engine doesn't correctly identify a winning move if it's the last game square to be played, rather, it counts it as a tie! Help your friend debug their code!","title":"4.1 It's a Bug!"},{"location":"project/P4_Debugging_TicTacToe_Agents/#411-make-the-error-repeatable","text":"random . seed ( 12 ) #here to make this operate in the same way everytime game = GameEngine ( setup = 'auto' ) game . setup_game () game . play_game () | | | | | | | | | | | | | | | | | |O| | | | | | | | | | | |O| | | | |X| | | | | | |O|O| | | |X| | | |X| | |O|O| | | |X| | | |X| | |O|O| |O| |X| |X| |X| | |O|O| |O| |X| |X| |X| | |O|O| |O|O|X| |X| |X| |X|O|O| |O|O|X| It's a stalemate! |X|O|X| |X|O|O| |O|O|X| <__main__.GameEngine at 0x7fecf3833590> # use random.seed(1) here to make this operate in the same way everytime game = GameEngine ( setup = 'auto' ) game . setup_game () game . play_game () | | | | | | | | | | | | | | | | | |O| | | | | | | | | | | |O| | | | |X| | | | | | |O|O| | | |X| | | |X| | |O|O| | | |X| | | |X| | |O|O| |O| |X| |X| |X| | |O|O| |O| |X| |X| |X| | |O|O| |O|O|X| |X| |X| |X|O|O| |O|O|X| It's a stalemate! |X|O|X| |X|O|O| |O|O|X| <__main__.GameEngine at 0x7ff5a010e6d0> game . winner 'O' game . check_stalemate () \"It's a stalemate!\" game . check_winning () \"'O' Won!\" game . winner 'O' ############################################################ ### COPY ALL OF THE FIRST CELL HERE AND MAKE YOUR EDITS #### ############################################################ random . seed ( 12 ) game = GameEngine ( setup = 'auto' ) game . setup_game () game . play_game () | | | | | | | | | | | | | | | | | |O| | | | | | | | | | | |O| | | | |X| | | | | | |O|O| | | |X| | | |X| | |O|O| | | |X| | | |X| | |O|O| |O| |X| |X| |X| | |O|O| |O| |X| |X| |X| | |O|O| |O|O|X| |X| |X| |X|O|O| |O|O|X| 'O' Won! |X|O|X| |X|O|O| |O|O|X| <__main__.GameEngine at 0x7ff59a34d910>","title":"4.1.1 Make the error repeatable"}]}